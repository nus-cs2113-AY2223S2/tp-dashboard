[{"path":".github/ISSUE_TEMPLATE/administrative-matters.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"name: Administrative Matters","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"about: Add chores that must be done","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"title: \"[Task] Your Chore Name\"","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"labels: priority.Low, type.Task","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"**Describe the Task**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what the Task/Chore is.  ","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"e.g. Move testing code to new folder","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"**To Reproduce**","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"Steps to reproduce the behavior:","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"1. Go to \u0027...\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"2. Click on \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"3. Scroll down to \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"4. See error","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"**Expected behavior**","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what you expected to happen.","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"**Screenshots**","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"If applicable, add screenshots to help explain your problem.","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"**Desktop (please complete the following information):**","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" - OS: [e.g. iOS]","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" - Browser [e.g. chrome, safari]","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":" - Version [e.g. 22]","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"**Additional context**","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"Add any other context about the problem here.","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"**Labels**","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"Remember to tag the priority using the labels function.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"nichyjt":36}},{"path":".github/ISSUE_TEMPLATE/bug_report.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"name: Bug report","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"about: File a bug report for WellNUS++","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"title: \"[Bug] Your Bug Name\"","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"labels: severity.Low, type.Bug","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"**Describe the bug**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what the bug is.","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"**To Reproduce**","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"Steps to reproduce the behavior:","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"1. Go to \u0027...\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"2. Click on \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"3. Scroll down to \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"4. See error","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"**Expected behavior**","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what you expected to happen.","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"**Screenshots**","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"If applicable, add screenshots to help explain your problem.","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"**Desktop (please complete the following information):**","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" - OS: [e.g. iOS]","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" - Browser [e.g. chrome, safari]","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" - Version [e.g. 22]","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"**Additional context**","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"Add any other context about the problem here.","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"**Severity**","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"Remember to tag the severity of the bug and priority (if applicable) using the labels function.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"nichyjt":35}},{"path":".github/ISSUE_TEMPLATE/enhancement.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"name: Enhancement","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"about: Anything that improves on an existing feature/implementation","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"title: \"[Enhancement] Your Enhancement\"","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"labels: priority.Low, type.Enhancement","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"**What is the current behaviour? Please describe any relevant features.**","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"**Why should this behaviour be changed/improved? Describe any relevant user stories/frustrations.**","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"**Describe your proposed enhancement.**","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"**Screenshots(if any) of the enhancement.**","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"**Any alternative implementations/enhancements that were considered?**","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"If any exist, explain why they were not chosen.","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"**Why should this enhancement be added? Explain its benefits/significance.**","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"haoyangw":21}},{"path":".github/ISSUE_TEMPLATE/user-story-features.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"name: User Story Features","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"about: Anything related to adding features that involve user stories","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"title: \"[User Story Feature] Your Feature\"","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"labels: priority.Low, type.Story","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"**User Story**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"What is the user story this feature aims to achieve?  ","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"Describe it and label the issue accordingly.  ","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"- Is it a \u0027Epic\u0027 -\u003e A big feature which can be broken down into smaller stories","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"- Is it a \u0027Story\u0027 -\u003e A smaller feature","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"**Is your feature request related to a problem? Please describe.**","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what the problem is. Ex. I\u0027m always frustrated when [...]","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"**Describe the solution you\u0027d like**","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what you want to happen.","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"**Describe alternatives you\u0027ve considered**","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of any alternative solutions or features you\u0027ve considered.  Optional if it does not value-add to the issue.  ","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"**Additional context**","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"Add any other context or screenshots about the feature request here.","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"**Labels**","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"Remember to label the feature with the appropriate `priority` and `type`.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"nichyjt":29}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    mainClass \u003d \"wellnus.WellNus\"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    archiveBaseName.set(\u0027WellNus\u0027)","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    archiveClassifier.set(\u0027\u0027)","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    archiveVersion.set(\u0027v2.0\u0027)","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"jar {","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    manifest {","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"        attributes \"Main-Class\": \"wellnus.WellNus\"","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    from {","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wenxin-c":1,"haoyangw":14,"-":43}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for the coding standard at","lastModifiedDate":"2022-05-29"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"    https://se-education.org/guides/conventions/java/intermediate.html","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        IMPORT CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"          1. STATIC: static imports","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"          2. STANDARD_JAVA_PACKAGE: standard java/javax imports","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"          3. SPECIAL_IMPORTS: defined as org imports","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"          4. THIRD_PARTY_PACKAGE: defined as com imports","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"        --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"CustomImportOrder\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"customImportOrderRules\"","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"                      value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2022-04-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        An import statement is redundant if:","lastModifiedDate":"2022-04-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2022-04-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2022-04-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2022-04-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for unused import statements.","lastModifiedDate":"2022-04-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        An import statement is unused if:","lastModifiedDate":"2022-04-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"          It\u0027s not referenced in the file.","lastModifiedDate":"2022-04-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        NAMING CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2020-05-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        LENGTH and CODING CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2022-04-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"          Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":"          C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2022-04-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            the same line. e.g., the following example is fine:","lastModifiedDate":"2022-04-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"              } else","lastModifiedDate":"2022-04-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            \u003c!-- This next example is not fine:","lastModifiedDate":"2022-04-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"              }","lastModifiedDate":"2022-04-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"              else","lastModifiedDate":"2022-04-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            if (true) return 1; // Not allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            if (true) { return 1; } // Not allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            else if {","lastModifiedDate":"2022-04-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"              return 1; // else if should always be multi line","lastModifiedDate":"2022-04-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2022-04-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            if (true)","lastModifiedDate":"2022-04-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"              return 1; // Not allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2022-04-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2022-04-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2022-04-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2022-04-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2022-04-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":221,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that Class variables should never be declared public. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":222,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"VisibilityModifier\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":223,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":224,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":225,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":226,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":227,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        ORDER CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2022-04-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2022-04-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2022-04-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"          1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"          2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"          3. Constructors","lastModifiedDate":"2022-04-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"          4. Methods","lastModifiedDate":"2022-04-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that default is after all cases in a switch statement --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"DefaultComesLast\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2022-04-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                 8.4.3.  The prescribed order is:","lastModifiedDate":"2022-04-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                 public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2022-04-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                 synchronized, native, strictfp","lastModifiedDate":"2022-04-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"              --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        WHITESPACE CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":265,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"WhitespaceAround\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":266,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that various tokens are surrounded by whitespace.","lastModifiedDate":"2023-03-16"},{"lineNumber":267,"author":{"gitId":"haoyangw"},"content":"                 This includes most binary operators and keywords followed","lastModifiedDate":"2023-03-16"},{"lineNumber":268,"author":{"gitId":"haoyangw"},"content":"                 by regular or curly braces.","lastModifiedDate":"2023-03-16"},{"lineNumber":269,"author":{"gitId":"haoyangw"},"content":"            --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":270,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,","lastModifiedDate":"2023-03-16"},{"lineNumber":271,"author":{"gitId":"haoyangw"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,","lastModifiedDate":"2023-03-16"},{"lineNumber":272,"author":{"gitId":"haoyangw"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,","lastModifiedDate":"2023-03-16"},{"lineNumber":273,"author":{"gitId":"haoyangw"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,","lastModifiedDate":"2023-03-16"},{"lineNumber":274,"author":{"gitId":"haoyangw"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,","lastModifiedDate":"2023-03-16"},{"lineNumber":275,"author":{"gitId":"haoyangw"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,","lastModifiedDate":"2023-03-16"},{"lineNumber":276,"author":{"gitId":"haoyangw"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":277,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":278,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":279,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty methods e.g. void func() {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":280,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":281,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":282,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":283,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":284,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":285,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":286,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":287,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":288,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":289,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"WhitespaceAfter\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":290,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":291,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":292,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":293,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":294,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":295,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":296,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,","lastModifiedDate":"2023-03-16"},{"lineNumber":297,"author":{"gitId":"haoyangw"},"content":"        UNARY_PLUS\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":298,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":299,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":300,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":301,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- No trailing whitespace --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":302,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"Regexp\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":303,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":304,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":305,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":306,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":307,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":308,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":309,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap.","lastModifiedDate":"2023-03-16"},{"lineNumber":310,"author":{"gitId":"haoyangw"},"content":"                 This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\",","lastModifiedDate":"2023-03-16"},{"lineNumber":311,"author":{"gitId":"haoyangw"},"content":"                 \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\",","lastModifiedDate":"2023-03-16"},{"lineNumber":312,"author":{"gitId":"haoyangw"},"content":"                 \"\u0026\" when used in a generic upper or lower bounds constraints,","lastModifiedDate":"2023-03-16"},{"lineNumber":313,"author":{"gitId":"haoyangw"},"content":"                   e.g. \u003cT extends Foo \u0026 Bar\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":314,"author":{"gitId":"haoyangw"},"content":"                 \"::\" when used as a reference to a method or constructor without arguments.","lastModifiedDate":"2023-03-16"},{"lineNumber":315,"author":{"gitId":"haoyangw"},"content":"                   e.g. String::compareToIgnoreCase","lastModifiedDate":"2023-03-16"},{"lineNumber":316,"author":{"gitId":"haoyangw"},"content":"            --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":317,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,","lastModifiedDate":"2023-03-16"},{"lineNumber":318,"author":{"gitId":"haoyangw"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":319,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":320,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":321,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":322,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap.","lastModifiedDate":"2023-03-16"},{"lineNumber":323,"author":{"gitId":"haoyangw"},"content":"                 This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\".","lastModifiedDate":"2023-03-16"},{"lineNumber":324,"author":{"gitId":"haoyangw"},"content":"            --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":325,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,","lastModifiedDate":"2023-03-16"},{"lineNumber":326,"author":{"gitId":"haoyangw"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":327,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":328,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":329,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":330,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":331,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":332,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":333,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":334,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":335,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":336,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":337,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":338,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":339,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":340,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"throwsIndent\" value\u003d\"8\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":346,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":347,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":348,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":349,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":350,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":351,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NoWhitespaceBeforeCaseDefaultColon\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":354,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that there is no whitespace between method/constructor name and open parenthesis. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":355,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"MethodParamPad\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":356,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":357,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"ParenPad\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":358,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":359,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":360,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":361,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":362,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character.","lastModifiedDate":"2023-03-16"},{"lineNumber":363,"author":{"gitId":"haoyangw"},"content":"             a \u003d 1; // Allowed","lastModifiedDate":"2023-03-16"},{"lineNumber":364,"author":{"gitId":"haoyangw"},"content":"             a  \u003d 1; // Not allowed (more than one space before \u003d)","lastModifiedDate":"2023-03-16"},{"lineNumber":365,"author":{"gitId":"haoyangw"},"content":"        --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":366,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":367,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Validate whitespace surrounding comments as well.","lastModifiedDate":"2023-03-16"},{"lineNumber":368,"author":{"gitId":"haoyangw"},"content":"                 a \u003d 1; // Allowed (single space before start of comment)","lastModifiedDate":"2023-03-16"},{"lineNumber":369,"author":{"gitId":"haoyangw"},"content":"                 a \u003d 1; /* Allowed (single space before start of comment) */","lastModifiedDate":"2023-03-16"},{"lineNumber":370,"author":{"gitId":"haoyangw"},"content":"                 /* Allowed (single space after end of comment) */ a \u003d 1;","lastModifiedDate":"2023-03-16"},{"lineNumber":371,"author":{"gitId":"haoyangw"},"content":"                 a \u003d 1;  // Not allowed (more than one space before start of comment)","lastModifiedDate":"2023-03-16"},{"lineNumber":372,"author":{"gitId":"haoyangw"},"content":"                 a \u003d 1;  /* Not allowed (more than one space before start of comment) */","lastModifiedDate":"2023-03-16"},{"lineNumber":373,"author":{"gitId":"haoyangw"},"content":"                 /* Not allowed (more than one space after end of comment) */  a \u003d 1;","lastModifiedDate":"2023-03-16"},{"lineNumber":374,"author":{"gitId":"haoyangw"},"content":"                 This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed.","lastModifiedDate":"2023-03-16"},{"lineNumber":375,"author":{"gitId":"haoyangw"},"content":"            --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":376,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":377,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":378,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        JAVADOC CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all block-tags are ordered correctly. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that Javadoc block tags appear only at the beginning of the line. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocBlockTagLocation\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all Javadoc comments start from the second line. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocContentLocationCheck\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each line in Javadoc has leading asterisks. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingLeadingAsterisk\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each non-empty line in Javadoc has whitespace after leading asterisk. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingWhitespaceAfterAsterisk\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that for block tags, indentation of continuation lines is at least 4 spaces. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocTagContinuationIndentation\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every class, enumeration and interface. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":403,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":406,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every public method (excluding getters, setters and constructors). --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":408,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"accessModifiers\" value\u003d\"public\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":410,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":411,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":412,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":413,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":418,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":419,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":420,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":421,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":422,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":423,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":424,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":425,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that every public class, enumeration and interface has a header comment. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":426,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"MissingJavadocType\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":427,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":428,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":429,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"haoyangw":147,"-":282}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"| Display                                       |           Name             |            Github Profile                  |                                    Portfolio                                    |","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"|-----------------------------------------------|:--------------------------:|:-------------------------------------:     |:-------------------------------------------------------------------------------:|","lastModifiedDate":"2023-04-08"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"| ![Chen Wenxin](./team/wenxin.jpg)             |        Chen Wenxin         | [Github](https://github.com/wenxin-c)      |   [Portfolio](https://ay2223s2-cs2113-t12-4.github.io/tp/team/wenxin-c.html)    |","lastModifiedDate":"2023-04-08"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"| ![Wang Haoyang](./team/haoyangw.png)          |        Wang Haoyang        | [Github](https://github.com/haoyangw)      |   [Portfolio](https://ay2223s2-cs2113-t12-4.github.io/tp/team/haoyangw.html)    |","lastModifiedDate":"2023-04-08"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"| ![Wang Yongbin](./team/yongbin.png)           |        Wang Yongbin        | [Github](https://github.com/YongbinWang)   |  [Portfolio](https://ay2223s2-cs2113-t12-4.github.io/tp/team/yongbinwang.html)  |","lastModifiedDate":"2023-04-08"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"| ![Bernard Lesley](./team/bernard.jpg)         |   Bernard Lesley Efendy    | [Github](https://github.com/BernardLesley) | [Portfolio](https://ay2223s2-cs2113-t12-4.github.io/tp/team/bernardlesley.html) |","lastModifiedDate":"2023-04-08"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"| ![Yek Jin Teck, Nicholas](./team/nichyjt.jpg) |   Yek Jin Teck, Nicholas   |  [Github](https://github.com/nichyjt)      |    [Portfolio](https://ay2223s2-cs2113-t12-4.github.io/tp/team/nichyjt.html)    |","lastModifiedDate":"2023-04-08"}],"authorContributionMap":{"wenxin-c":1,"haoyangw":6,"-":2}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"# Table of Contents","lastModifiedDate":"2023-04-07"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- TOC --\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"* [Developer Guide](#developer-guide)","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"* [Table of Contents](#table-of-contents)","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"* [Acknowledgements](#acknowledgements)","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"* [Setting up, getting started](#setting-up-getting-started)","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"    * [Setting up the project in your computer](#setting-up-the-project-in-your-computer)","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    * [Before writing code](#before-writing-code)","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"* [Design \u0026 implementation](#design--implementation)","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    * [Application Lifecycle](#application-lifecycle)","lastModifiedDate":"2023-04-06"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"        * [Overview](#overview)","lastModifiedDate":"2023-04-06"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"        * [Rationale](#rationale)","lastModifiedDate":"2023-04-06"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    * [UI Component](#ui-component)","lastModifiedDate":"2023-04-08"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"        * [UI Implementation](#ui-implementation)","lastModifiedDate":"2023-04-08"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    * [Self Reflection Component](#self-reflection-component)","lastModifiedDate":"2023-04-08"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"        * [Design considerations](#design-considerations)","lastModifiedDate":"2023-04-08"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"            * [User design considerations](#user-design-considerations)","lastModifiedDate":"2023-04-08"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"            * [Developer design considerations](#developer-design-considerations)","lastModifiedDate":"2023-04-08"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        * [Self Reflection Implementation](#self-reflection-implementation)","lastModifiedDate":"2023-04-08"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"            * [Self Reflection commands implementation](#self-reflection-commands-implementation)","lastModifiedDate":"2023-04-08"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    * [CommandParser Component](#commandparser-component)","lastModifiedDate":"2023-04-06"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        * [Design Considerations](#design-considerations-1)","lastModifiedDate":"2023-04-08"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"            * [User design Considerations](#user-design-considerations-1)","lastModifiedDate":"2023-04-08"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"            * [Developer Design Considerations](#developer-design-considerations-1)","lastModifiedDate":"2023-04-08"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"            * [Alternative Designs Considered](#alternative-designs-considered)","lastModifiedDate":"2023-04-07"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        * [CommandParser Syntax](#commandparser-syntax)","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        * [Implementation](#implementation)","lastModifiedDate":"2023-04-07"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"            * [Integration with WellNUS++](#integration-with-wellnus)","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"            * [CommandParser API](#commandparser-api)","lastModifiedDate":"2023-04-06"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"            * [Alternative Designs Considered](#alternative-designs-considered-1)","lastModifiedDate":"2023-04-08"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    * [AtomicHabit Component](#atomichabit-component)","lastModifiedDate":"2023-04-06"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"        * [Design Considerations](#design-considerations-2)","lastModifiedDate":"2023-04-08"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"            * [User design considerations](#user-design-considerations-2)","lastModifiedDate":"2023-04-08"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"            * [Developer design considerations](#developer-design-considerations-2)","lastModifiedDate":"2023-04-08"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"        * [AtomicHabit Implementation](#atomichabit-implementation)","lastModifiedDate":"2023-04-08"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"            * [AtomicHabit Commands](#atomichabit-commands)","lastModifiedDate":"2023-04-08"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    * [Gamification Component](#gamification-component)","lastModifiedDate":"2023-04-09"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"        * [Design Considerations](#design-considerations-3)","lastModifiedDate":"2023-04-08"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"            * [GamificationData](#gamificationdata)","lastModifiedDate":"2023-04-09"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"            * [GamificationStorage](#gamificationstorage)","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"            * [GamificationUi](#gamificationui)","lastModifiedDate":"2023-04-09"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"            * [Commands](#commands)","lastModifiedDate":"2023-04-09"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        * [Alternative Designs Considered](#alternative-designs-considered-2)","lastModifiedDate":"2023-04-09"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"            * [Defining gamification statistics logic within `GamificationManager`](#defining-gamification-statistics-logic-within-gamificationmanager)","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"            * [Integrating `GamificationStorage` logic within `GamificationData`](#integrating-gamificationstorage-logic-within-gamificationdata)","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    * [Managers](#managers)","lastModifiedDate":"2023-04-09"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"        * [Design Considerations](#design-considerations-4)","lastModifiedDate":"2023-04-09"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"        * [`MainManager` - A Unique Implementation](#mainmanager---a-unique-implementation)","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"    * [Tokenizer](#tokenizer)","lastModifiedDate":"2023-04-06"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"        * [Design Considerations](#design-considerations-5)","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"        * [Individual Tokenizers](#individual-tokenizers)","lastModifiedDate":"2023-04-08"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    * [Storage](#storage)","lastModifiedDate":"2023-04-06"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        * [Usage - `saveData`](#usage---savedata)","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        * [Usage - `loadData`](#usage---loaddata)","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"        * [Design Considerations](#design-considerations-6)","lastModifiedDate":"2023-04-08"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    * [Focus Timer Component](#focus-timer-component)","lastModifiedDate":"2023-04-09"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        * [Focus Timer Implementation](#focus-timer-implementation)","lastModifiedDate":"2023-04-07"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            * [State Management](#state-management)","lastModifiedDate":"2023-04-07"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"            * [Commands](#commands-1)","lastModifiedDate":"2023-04-09"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"* [Appendix - Requirements](#appendix---requirements)","lastModifiedDate":"2023-04-09"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    * [Product scope](#product-scope)","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"        * [Product Name](#product-name)","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"        * [Target user profile](#target-user-profile)","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"        * [Value proposition](#value-proposition)","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"    * [User Stories](#user-stories)","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    * [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    * [Glossary](#glossary)","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"* [Appendix - Instructions for manual testing](#appendix---instructions-for-manual-testing)","lastModifiedDate":"2023-04-09"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    * [Launch](#launch)","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    * [Sample test cases](#sample-test-cases)","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"        * [Help command](#help-command)","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"        * [Get reflection questions](#get-reflection-questions)","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"        * [Add atomic habits](#add-atomic-habits)","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    * [Saving data](#saving-data)","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- TOC --\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"# Acknowledgements","lastModifiedDate":"2023-04-07"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"1. Reference to AB-3 Developer Guide: https://se-education.org/addressbook-level3/DeveloperGuide.html","lastModifiedDate":"2023-03-20"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"2. Reference to AB-3 diagrams code: https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams","lastModifiedDate":"2023-03-20"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"# Setting up, getting started","lastModifiedDate":"2023-04-07"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"## Setting up the project in your computer","lastModifiedDate":"2023-04-07"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"Firstly, **fork** this repo, and **clone** the fork into your computer. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"If you plan to use Intellij IDEA (highly recommended): \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"1. **Configure the JDK**: Follow the guide","lastModifiedDate":"2023-03-20"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"   [[se-edu/guides] IDEA: Configuring the JDK](https://se-education.org/guides/tutorials/intellijJdk.html)","lastModifiedDate":"2023-03-20"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"   to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2023-03-20"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"2. **Import the project as a Gradle project**: Follow the guide","lastModifiedDate":"2023-03-20"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"   [[se-edu/guides] IDEA: Importing a Gradle project](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)","lastModifiedDate":"2023-03-20"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"   to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"   **Note**: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2023-03-20"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"3. **Verify the setup:**","lastModifiedDate":"2023-03-20"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"    1. Run the ```wellnus.WellNus``` and try a few commands.","lastModifiedDate":"2023-03-20"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"    2. Run the tests to ensure they all pass.","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"## Before writing code","lastModifiedDate":"2023-04-07"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"1. **Configure the coding style**\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"   If using IDEA, follow the guide","lastModifiedDate":"2023-03-20"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"   [[se-edu/guides] IDEA: Configuring the code style](https://se-education.org/guides/tutorials/intellijCodeStyle.html)","lastModifiedDate":"2023-03-20"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"   to set up IDEA’s coding style to match ours.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"   \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"2. **Set up CI**\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder).","lastModifiedDate":"2023-03-20"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"   When GitHub detects those files, it will run the CI for your project automatically at each push","lastModifiedDate":"2023-03-20"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"   to the `master` branch or to any PR. No set up required.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"   \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"3. **Learn the design**\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"   When you are ready to start coding, we recommend that you look at the class diagrams to understand the structure of","lastModifiedDate":"2023-03-22"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"   the","lastModifiedDate":"2023-03-22"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"   code and the interaction among different classes.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"# Design \u0026 implementation","lastModifiedDate":"2023-04-07"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"\u003c!-- @@author haoyangw --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"## Application Lifecycle","lastModifiedDate":"2023-04-07"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"### Overview","lastModifiedDate":"2023-04-07"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"The overall execution lifecycle of the WellNus application involves 4 main components, as shown in the diagram below.","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"![Application Lifecycle](diagrams/WellnusSequence.png)","lastModifiedDate":"2023-03-29"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"The application begins with a call to `WellNus.start()`, which initialises an instance of `MainManager` and calls the","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"`MainManager.runEventDriver()` method.","lastModifiedDate":"2023-03-29"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"`MainManager.runEventDriver()` will then take control of user input and provide a basic interface that parses commands","lastModifiedDate":"2023-03-29"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"from the user. This basic interface only supports basic commands such as `help` and `exit` and recognises the keywords","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"of all supported features in WellNUS++. When a recognised feature keyword is given, the corresponding `FeatureManager`","lastModifiedDate":"2023-03-29"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"will be activated through its `runEventDriver()` method, which gains control of user input from `MainManager`. On the","lastModifiedDate":"2023-03-29"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"other hand, `MainManager.runEventDriver()` terminates when the `exit` command is given, after which the user exits from","lastModifiedDate":"2023-03-29"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"the application.","lastModifiedDate":"2023-03-29"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":145,"author":{"gitId":"haoyangw"},"content":"After control of user input is granted by `MainManager`, `FeatureManager.runEventDriver()` provides the user with a","lastModifiedDate":"2023-03-29"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"feature-specific user interface that continuously parses user commands to determine the suitable `Command` class to","lastModifiedDate":"2023-03-29"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"handle any given command. In the case of supported commands besides \u0027home\u0027, the `execute()` method of the corresponding","lastModifiedDate":"2023-03-29"},{"lineNumber":148,"author":{"gitId":"haoyangw"},"content":"`Command` class is called to perform a particular action requested by the user. On the other hand, the `home` command","lastModifiedDate":"2023-03-29"},{"lineNumber":149,"author":{"gitId":"haoyangw"},"content":"will terminate the `FeatureManager.runEventDriver()` loop, returning the user to the main WellNus++ interface provided","lastModifiedDate":"2023-03-29"},{"lineNumber":150,"author":{"gitId":"haoyangw"},"content":"by `MainManager.runEventDriver()`.","lastModifiedDate":"2023-03-29"},{"lineNumber":151,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"### Rationale","lastModifiedDate":"2023-04-07"},{"lineNumber":153,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"`WellNus` directly transfers control of user input to `MainManager.runEventDriver()` as managing user input is the","lastModifiedDate":"2023-03-29"},{"lineNumber":155,"author":{"gitId":"haoyangw"},"content":"expected functionality of the `runEventDriver()` method within a particular implementation of `Manager`, which means","lastModifiedDate":"2023-03-29"},{"lineNumber":156,"author":{"gitId":"haoyangw"},"content":"that conceptually, management of user input belongs in a subclass of `Manager` instead. Besides, this abstraction","lastModifiedDate":"2023-03-29"},{"lineNumber":157,"author":{"gitId":"haoyangw"},"content":"of user input logic from `WellNus` fulfils the `Single Responsibility Principle` since `WellNus` is intended","lastModifiedDate":"2023-03-29"},{"lineNumber":158,"author":{"gitId":"haoyangw"},"content":"to be a high-level class that delegates tasks to specialised classes that provide the expected functionality, and thus","lastModifiedDate":"2023-03-29"},{"lineNumber":159,"author":{"gitId":"haoyangw"},"content":"`WellNus` must not be responsible for concrete logic such as managing user input.","lastModifiedDate":"2023-03-29"},{"lineNumber":160,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":161,"author":{"gitId":"haoyangw"},"content":"Additionally, `MainManager.runEventDriver()` is intentionally restricted to only recognise basic commands and feature","lastModifiedDate":"2023-03-29"},{"lineNumber":162,"author":{"gitId":"haoyangw"},"content":"keywords to firstly, achieve the encapsulation and abstraction of feature-specific logic from `MainManager`. Moving","lastModifiedDate":"2023-03-29"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"feature-specific logic such as recognising feature-specific commands to corresponding feature `Managers` ensures that","lastModifiedDate":"2023-03-29"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"actual implementation details in feature-related subpackages are hidden from `MainManager`. This is necessary for","lastModifiedDate":"2023-03-29"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"the purpose of encapsulation since `MainManager` exists in a different subpackage. At the same time, by providing the","lastModifiedDate":"2023-03-29"},{"lineNumber":166,"author":{"gitId":"haoyangw"},"content":"public `runEventDriver()` in feature `Managers`, `MainManager` is only aware of the expected functionality of the","lastModifiedDate":"2023-03-29"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"`runEventDriver()`, which can be used to support feature-specific commands, without being involved in the implementation","lastModifiedDate":"2023-03-29"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"details. This allows `MainManager.runEventDriver()` to be kept abstract while providing the expected functionality of","lastModifiedDate":"2023-03-29"},{"lineNumber":169,"author":{"gitId":"haoyangw"},"content":"the application. Secondly, this design fulfils the `Single Responsibility Principle` as `MainManager` is solely","lastModifiedDate":"2023-03-29"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"responsible for the main WellNUS++ commands but not any feature-specific ones, which means that its logic will only","lastModifiedDate":"2023-03-29"},{"lineNumber":171,"author":{"gitId":"haoyangw"},"content":"be changed for reasons related to the main WellNUS++ commands only.","lastModifiedDate":"2023-03-29"},{"lineNumber":172,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":173,"author":{"gitId":"haoyangw"},"content":"Lastly, the `runEventDriver()` method of feature `Managers` delegates the execution of commands to implementations of","lastModifiedDate":"2023-03-29"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"`Command` to abide by the `Single Responsibility Principle`. Every `Manager.runEventDriver()` method is expected to","lastModifiedDate":"2023-03-29"},{"lineNumber":175,"author":{"gitId":"haoyangw"},"content":"provide a particular user interface, but not any commands. This means that this method should only change for reasons","lastModifiedDate":"2023-03-29"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"related to its user interface, which requires that command handling logic be implemented elsewhere so that changes in","lastModifiedDate":"2023-03-29"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"commands do not require changes in any implementation of `Manager.runEventDriver()`. Besides, this approach ensures","lastModifiedDate":"2023-03-29"},{"lineNumber":178,"author":{"gitId":"haoyangw"},"content":"abstraction of logic as `Manager.runEventDriver()` ensures that command handling is performed while avoiding the","lastModifiedDate":"2023-03-29"},{"lineNumber":179,"author":{"gitId":"haoyangw"},"content":"actual implementation details by delegating the task to a particular implementation of `Command.execute()`, which is","lastModifiedDate":"2023-03-29"},{"lineNumber":180,"author":{"gitId":"haoyangw"},"content":"known to provide command handling functionality.","lastModifiedDate":"2023-03-29"},{"lineNumber":181,"author":{"gitId":"haoyangw"},"content":"\u003c!-- @@author --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":182,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- @@author wenxin-c --\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"## UI Component","lastModifiedDate":"2023-04-07"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":187,"author":{"gitId":"wenxin-c"},"content":"UI component is in charge of reading in user input and printing output.","lastModifiedDate":"2023-04-07"},{"lineNumber":188,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":189,"author":{"gitId":"wenxin-c"},"content":"### UI Implementation","lastModifiedDate":"2023-04-07"},{"lineNumber":190,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":191,"author":{"gitId":"wenxin-c"},"content":"![UI Class Diagram](diagrams/UiComponent.png)","lastModifiedDate":"2023-04-07"},{"lineNumber":192,"author":{"gitId":"wenxin-c"},"content":"The `TextUi` superclass is created for printing standard output and error messages. Each feature has its own UI subclass","lastModifiedDate":"2023-04-08"},{"lineNumber":193,"author":{"gitId":"wenxin-c"},"content":"which","lastModifiedDate":"2023-04-08"},{"lineNumber":194,"author":{"gitId":"wenxin-c"},"content":"inherits from `TextUi` to support more customised I/O behaviours.\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":195,"author":{"gitId":"wenxin-c"},"content":"Main WellNUS++ uses TextUi\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":196,"author":{"gitId":"wenxin-c"},"content":"Atomic Habit uses AtomicHabitUi\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":197,"author":{"gitId":"wenxin-c"},"content":"Self Reflection uses ReflectUi\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":198,"author":{"gitId":"wenxin-c"},"content":"Focus Timer uses FocusUi\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":199,"author":{"gitId":"wenxin-c"},"content":"Gamification uses GamificationUi\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":200,"author":{"gitId":"wenxin-c"},"content":"For example, the line separator for Self Reflection is `\u003d` and for Atomic Habit is `~`.","lastModifiedDate":"2023-04-07"},{"lineNumber":201,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- @@author --\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":202,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":203,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- @@author wenxin-c --\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":204,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":205,"author":{"gitId":"wenxin-c"},"content":"## Self Reflection Component","lastModifiedDate":"2023-04-07"},{"lineNumber":206,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":207,"author":{"gitId":"wenxin-c"},"content":"This `Reflection` component provides users with random sets of introspective questions to reflect on, achieving the goal","lastModifiedDate":"2023-04-07"},{"lineNumber":208,"author":{"gitId":"wenxin-c"},"content":"of improving their wellness.\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":209,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":210,"author":{"gitId":"wenxin-c"},"content":"### Design considerations","lastModifiedDate":"2023-04-07"},{"lineNumber":211,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":212,"author":{"gitId":"wenxin-c"},"content":"#### User design considerations","lastModifiedDate":"2023-04-07"},{"lineNumber":213,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":214,"author":{"gitId":"wenxin-c"},"content":"* The sets of questions generated everytime are designed to be randomised to allow users to reflect on different aspects","lastModifiedDate":"2023-04-07"},{"lineNumber":215,"author":{"gitId":"wenxin-c"},"content":"  of their lives.","lastModifiedDate":"2023-04-07"},{"lineNumber":216,"author":{"gitId":"wenxin-c"},"content":"* Users can review the previous set of questions generated and add questions they resonate well into their favorite list","lastModifiedDate":"2023-04-07"},{"lineNumber":217,"author":{"gitId":"wenxin-c"},"content":"  for review in the future. Similarly, they can also remove questions they no longer resonate from their favorite list","lastModifiedDate":"2023-04-08"},{"lineNumber":218,"author":{"gitId":"wenxin-c"},"content":"  to","lastModifiedDate":"2023-04-08"},{"lineNumber":219,"author":{"gitId":"wenxin-c"},"content":"  ensure the relevancy of the list.","lastModifiedDate":"2023-04-07"},{"lineNumber":220,"author":{"gitId":"wenxin-c"},"content":"* `help` command and prompting messages are available to guide users in using Self Reflection. For example, an alert","lastModifiedDate":"2023-04-08"},{"lineNumber":221,"author":{"gitId":"wenxin-c"},"content":"  will","lastModifiedDate":"2023-04-08"},{"lineNumber":222,"author":{"gitId":"wenxin-c"},"content":"  be given to users if they `unlike` a question when their favorite list is empty.","lastModifiedDate":"2023-04-07"},{"lineNumber":223,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":224,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-04-07"},{"lineNumber":225,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-07"},{"lineNumber":226,"author":{"gitId":"wenxin-c"},"content":"    The favorite list is empty, there is nothing to be removed.","lastModifiedDate":"2023-04-07"},{"lineNumber":227,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-07"},{"lineNumber":228,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-04-07"},{"lineNumber":229,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":230,"author":{"gitId":"wenxin-c"},"content":"* A unique line separator `\u003d` is used to differentiate Self Reflection from other features and give users a better","lastModifiedDate":"2023-04-08"},{"lineNumber":231,"author":{"gitId":"wenxin-c"},"content":"  visual","lastModifiedDate":"2023-04-08"},{"lineNumber":232,"author":{"gitId":"wenxin-c"},"content":"  indication.","lastModifiedDate":"2023-04-07"},{"lineNumber":233,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":234,"author":{"gitId":"wenxin-c"},"content":"#### Developer design considerations","lastModifiedDate":"2023-04-07"},{"lineNumber":235,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":236,"author":{"gitId":"wenxin-c"},"content":"* **Abstracted `QuestionList` Class**\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":237,"author":{"gitId":"wenxin-c"},"content":"  Self Reflection section relies heavily on the set of random sets of questions generated and this set will be shared","lastModifiedDate":"2023-04-07"},{"lineNumber":238,"author":{"gitId":"wenxin-c"},"content":"  across different classes. A `QuestionList` class is used to store and manipulate the lists of questions such as the","lastModifiedDate":"2023-04-07"},{"lineNumber":239,"author":{"gitId":"wenxin-c"},"content":"  random sets and the favorite list. A common `QuestionList` object is constructed and passed into different command","lastModifiedDate":"2023-04-08"},{"lineNumber":240,"author":{"gitId":"wenxin-c"},"content":"  object","lastModifiedDate":"2023-04-08"},{"lineNumber":241,"author":{"gitId":"wenxin-c"},"content":"  constructors as an argument. As such, information of lists of questions and their associated methods are centralised","lastModifiedDate":"2023-04-07"},{"lineNumber":242,"author":{"gitId":"wenxin-c"},"content":"  and shared among different objects.","lastModifiedDate":"2023-04-07"},{"lineNumber":243,"author":{"gitId":"wenxin-c"},"content":"* **Generate random sets and match user input index to real question index**\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":244,"author":{"gitId":"wenxin-c"},"content":"  Multiple data structures are used randomise the sets of questions. An **ArrayList** of 10 questions","lastModifiedDate":"2023-04-07"},{"lineNumber":245,"author":{"gitId":"wenxin-c"},"content":"  will be loaded upon launching the program. A **Set** of 5 randomised distinct integers ranging from 0-9 will be","lastModifiedDate":"2023-04-08"},{"lineNumber":246,"author":{"gitId":"wenxin-c"},"content":"  generated.","lastModifiedDate":"2023-04-08"},{"lineNumber":247,"author":{"gitId":"wenxin-c"},"content":"  This **Set** of integers are the used as the index of questions in the **ArrayList** to select the corresponding","lastModifiedDate":"2023-04-08"},{"lineNumber":248,"author":{"gitId":"wenxin-c"},"content":"  questions","lastModifiedDate":"2023-04-08"},{"lineNumber":249,"author":{"gitId":"wenxin-c"},"content":"  and stored for other usages (e.g. `like`, `unlike` commands).","lastModifiedDate":"2023-04-07"},{"lineNumber":250,"author":{"gitId":"wenxin-c"},"content":"  The displayed index of questions increments from 1 to 5, which might differ from their real indexes in the ArrayList.","lastModifiedDate":"2023-04-07"},{"lineNumber":251,"author":{"gitId":"wenxin-c"},"content":"  A **HashMap** is then used with displayed index being the key and real question index being the value to ensure that","lastModifiedDate":"2023-04-08"},{"lineNumber":252,"author":{"gitId":"wenxin-c"},"content":"  the correct","lastModifiedDate":"2023-04-08"},{"lineNumber":253,"author":{"gitId":"wenxin-c"},"content":"  question will be mapped to from user input index (i.e. displayed index).","lastModifiedDate":"2023-04-07"},{"lineNumber":254,"author":{"gitId":"wenxin-c"},"content":"* **User input validation**\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":255,"author":{"gitId":"wenxin-c"},"content":"  Checking mechanism is used to validate user input. The first validation happens at manager level and","lastModifiedDate":"2023-04-08"},{"lineNumber":256,"author":{"gitId":"wenxin-c"},"content":"  the `CommandKeyword` will be checked.","lastModifiedDate":"2023-04-08"},{"lineNumber":257,"author":{"gitId":"wenxin-c"},"content":"  A correct type of command object will be created based on `CommandKeyword`. The second validation happens at command","lastModifiedDate":"2023-04-08"},{"lineNumber":258,"author":{"gitId":"wenxin-c"},"content":"  level","lastModifiedDate":"2023-04-08"},{"lineNumber":259,"author":{"gitId":"wenxin-c"},"content":"  to validate arguments and payloads. This is done at command level instead of manager level as different commands might","lastModifiedDate":"2023-04-08"},{"lineNumber":260,"author":{"gitId":"wenxin-c"},"content":"  have","lastModifiedDate":"2023-04-08"},{"lineNumber":261,"author":{"gitId":"wenxin-c"},"content":"  different requirements for the inputs.","lastModifiedDate":"2023-04-07"},{"lineNumber":262,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":263,"author":{"gitId":"wenxin-c"},"content":"### Self Reflection Implementation","lastModifiedDate":"2023-04-07"},{"lineNumber":264,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":265,"author":{"gitId":"wenxin-c"},"content":"![Reflection Component Sequence Diagram](diagrams/ReflectionSequenceDiagram.png)","lastModifiedDate":"2023-04-06"},{"lineNumber":266,"author":{"gitId":"wenxin-c"},"content":"A `ReflectionManager` object is created by the WellNUS++ `MainManager`. It uses a `ReflectUi` and `CommandParser` object","lastModifiedDate":"2023-04-07"},{"lineNumber":267,"author":{"gitId":"wenxin-c"},"content":"to constantly reads in and interprets user input and create the correct command for execution based on input","lastModifiedDate":"2023-04-07"},{"lineNumber":268,"author":{"gitId":"wenxin-c"},"content":"command type until a `HomeCommand`. A common `QuestionList`object is shared among command objects to retrieve and modify","lastModifiedDate":"2023-04-08"},{"lineNumber":269,"author":{"gitId":"wenxin-c"},"content":"user data.","lastModifiedDate":"2023-04-08"},{"lineNumber":270,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":271,"author":{"gitId":"wenxin-c"},"content":"![Reflection Component Class Diagram](diagrams/ReflectionClassDiagram.png)","lastModifiedDate":"2023-04-06"},{"lineNumber":272,"author":{"gitId":"wenxin-c"},"content":"`ReflectionManager` class:\u003cbr\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":273,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":274,"author":{"gitId":"wenxin-c"},"content":"- The main event driver of **Self Reflection** feature.","lastModifiedDate":"2023-04-07"},{"lineNumber":275,"author":{"gitId":"wenxin-c"},"content":"- It inherits from abstract `Manager` class to standardise behaviours. For example. `ReflectionManager` needs to","lastModifiedDate":"2023-04-08"},{"lineNumber":276,"author":{"gitId":"wenxin-c"},"content":"  override a","lastModifiedDate":"2023-04-08"},{"lineNumber":277,"author":{"gitId":"wenxin-c"},"content":"  standardised abstract method `runEventDriver()` as that this method can be better invoked by the `MainManager`.","lastModifiedDate":"2023-04-07"},{"lineNumber":278,"author":{"gitId":"wenxin-c"},"content":"- Each `ReflectionManager` object contains exactly one `ReflectUi` object as an attribute to constantly get user inputs.","lastModifiedDate":"2023-04-08"},{"lineNumber":279,"author":{"gitId":"wenxin-c"},"content":"  This is to","lastModifiedDate":"2023-04-08"},{"lineNumber":280,"author":{"gitId":"wenxin-c"},"content":"  use a common `Scanner` object (created in the `ReflectUi` object) to read all the user inputs within Self Reflection","lastModifiedDate":"2023-03-29"},{"lineNumber":281,"author":{"gitId":"wenxin-c"},"content":"  feature. This can avoid potential unexpected behaviours from creating multiple `Scanner` objects.","lastModifiedDate":"2023-04-07"},{"lineNumber":282,"author":{"gitId":"wenxin-c"},"content":"- The `runEventDriver()` method is the entry of the Self Reflection feature. It contains a **while loop** to","lastModifiedDate":"2023-03-29"},{"lineNumber":283,"author":{"gitId":"wenxin-c"},"content":"  continuously get user input commands as users are expected to continuously perform a series of actions within Self","lastModifiedDate":"2023-04-08"},{"lineNumber":284,"author":{"gitId":"wenxin-c"},"content":"  Reflection","lastModifiedDate":"2023-04-08"},{"lineNumber":285,"author":{"gitId":"wenxin-c"},"content":"  feature until they wish to return back to main WellNUS++ interface(input `home` command).","lastModifiedDate":"2023-04-07"},{"lineNumber":286,"author":{"gitId":"wenxin-c"},"content":"- Based on the input command type, the `executeCommands()` method will create the correct command objects and","lastModifiedDate":"2023-04-07"},{"lineNumber":287,"author":{"gitId":"wenxin-c"},"content":"  invoke the execution of these commands. Since the command objects are local variables, they are dependencies","lastModifiedDate":"2023-04-08"},{"lineNumber":288,"author":{"gitId":"wenxin-c"},"content":"  for `ReflectionManager` class.","lastModifiedDate":"2023-04-08"},{"lineNumber":289,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":290,"author":{"gitId":"wenxin-c"},"content":"`QuestionList` class:\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":291,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":292,"author":{"gitId":"wenxin-c"},"content":"- This class stores the list of 10 `ReflectionQuestion` objects available in Self Reflection. It is in charge of","lastModifiedDate":"2023-04-08"},{"lineNumber":293,"author":{"gitId":"wenxin-c"},"content":"  retrieving and modifying","lastModifiedDate":"2023-04-08"},{"lineNumber":294,"author":{"gitId":"wenxin-c"},"content":"  user data related to `ReflectionQuestion` such as the favorite list and the indexes of the previously generated set of","lastModifiedDate":"2023-04-08"},{"lineNumber":295,"author":{"gitId":"wenxin-c"},"content":"  questions.","lastModifiedDate":"2023-04-08"},{"lineNumber":296,"author":{"gitId":"wenxin-c"},"content":"- A `ReflectionManager` object has exactly one `QuestionList` object which is then passed by reference to construct","lastModifiedDate":"2023-04-08"},{"lineNumber":297,"author":{"gitId":"wenxin-c"},"content":"  command","lastModifiedDate":"2023-04-08"},{"lineNumber":298,"author":{"gitId":"wenxin-c"},"content":"  objects(`LikeCommand`, `GetCommand` etc). Hence, it is a dependency for all command objects in Self Reflection. This","lastModifiedDate":"2023-04-08"},{"lineNumber":299,"author":{"gitId":"wenxin-c"},"content":"  structure","lastModifiedDate":"2023-04-08"},{"lineNumber":300,"author":{"gitId":"wenxin-c"},"content":"  allows data to be centralised and well organised by one class.","lastModifiedDate":"2023-04-07"},{"lineNumber":301,"author":{"gitId":"wenxin-c"},"content":"- By abstracting the above-mentioned attributes and methods as a separate class instead of putting them","lastModifiedDate":"2023-04-07"},{"lineNumber":302,"author":{"gitId":"wenxin-c"},"content":"  in `ReflectionManager`, the `ReflectionManager` class can solely focus command execution. All the data related to the","lastModifiedDate":"2023-04-07"},{"lineNumber":303,"author":{"gitId":"wenxin-c"},"content":"  list of questions is taken care of by the `QuestionList` class. As such, Single responsibility can be better achieved.","lastModifiedDate":"2023-04-07"},{"lineNumber":304,"author":{"gitId":"wenxin-c"},"content":"- A `QuestionList` object has exactly one `Storage` and `ReflectionTokenizer` class to store data into data file upon","lastModifiedDate":"2023-04-08"},{"lineNumber":305,"author":{"gitId":"wenxin-c"},"content":"  update","lastModifiedDate":"2023-04-08"},{"lineNumber":306,"author":{"gitId":"wenxin-c"},"content":"  and load data from data file upon launching WellNUS++.","lastModifiedDate":"2023-04-07"},{"lineNumber":307,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":308,"author":{"gitId":"wenxin-c"},"content":"`ReflectionQuestion` class:\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":309,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":310,"author":{"gitId":"wenxin-c"},"content":"- Each introspective question is a `ReflectionQuestion` object.","lastModifiedDate":"2023-03-22"},{"lineNumber":311,"author":{"gitId":"wenxin-c"},"content":"- It contains the basic description of the introspective question. Being modelled as an object instead of pure string,","lastModifiedDate":"2023-03-29"},{"lineNumber":312,"author":{"gitId":"wenxin-c"},"content":"  each question will be able to have more attributes which might be utilized for future features.","lastModifiedDate":"2023-04-07"},{"lineNumber":313,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":314,"author":{"gitId":"wenxin-c"},"content":"`ReflectUi` class: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":315,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":316,"author":{"gitId":"wenxin-c"},"content":"- This subclass inherits from `TextUi` superclass. It allows Self Reflection feature to have more customised output","lastModifiedDate":"2023-04-07"},{"lineNumber":317,"author":{"gitId":"wenxin-c"},"content":"  behaviour(e.g. type of separators).","lastModifiedDate":"2023-04-07"},{"lineNumber":318,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":319,"author":{"gitId":"wenxin-c"},"content":"`ReflectionCommands` class: \u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":320,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":321,"author":{"gitId":"wenxin-c"},"content":"- This represents a collection of all commands in Self Reflection feature, which will be explained in more detail at","lastModifiedDate":"2023-04-08"},{"lineNumber":322,"author":{"gitId":"wenxin-c"},"content":"  later section.","lastModifiedDate":"2023-04-08"},{"lineNumber":323,"author":{"gitId":"wenxin-c"},"content":"- Each command class inherits from `Command` abstract class and override `validateComand()` abstract method to validate","lastModifiedDate":"2023-04-07"},{"lineNumber":324,"author":{"gitId":"wenxin-c"},"content":"  command.","lastModifiedDate":"2023-04-07"},{"lineNumber":325,"author":{"gitId":"wenxin-c"},"content":"- Commands available in Self Reflection: \u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":326,"author":{"gitId":"wenxin-c"},"content":"  Get a random set of reflection questions: `get`\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":327,"author":{"gitId":"wenxin-c"},"content":"  Add a particular question into favorite list: `like INDEX`\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":328,"author":{"gitId":"wenxin-c"},"content":"  Remove a particular question from favorite list: `unlike INDEX`\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":329,"author":{"gitId":"wenxin-c"},"content":"  View questions in the favorite list: `fav`\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":330,"author":{"gitId":"wenxin-c"},"content":"  Review the previous set of questions: `prev`\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":331,"author":{"gitId":"wenxin-c"},"content":"  Help command: `help`\u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":332,"author":{"gitId":"wenxin-c"},"content":"  Return back to main WellNUS++: `home`","lastModifiedDate":"2023-04-07"},{"lineNumber":333,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":334,"author":{"gitId":"wenxin-c"},"content":"#### Self Reflection commands implementation","lastModifiedDate":"2023-04-07"},{"lineNumber":335,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":336,"author":{"gitId":"wenxin-c"},"content":"![Reflection Commands Class Diagram](diagrams/ReflectionCommandsUML.png)","lastModifiedDate":"2023-04-06"},{"lineNumber":337,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":338,"author":{"gitId":"wenxin-c"},"content":"`GetCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":339,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":340,"author":{"gitId":"wenxin-c"},"content":"- Command format: `get`","lastModifiedDate":"2023-03-28"},{"lineNumber":341,"author":{"gitId":"wenxin-c"},"content":"- This command generates a set of 5 random introspective questions for users to reflect on.","lastModifiedDate":"2023-04-07"},{"lineNumber":342,"author":{"gitId":"wenxin-c"},"content":"- A `QuestionList` object is passed in as a dependency to provide the pool of 10 introspective questions available","lastModifiedDate":"2023-04-07"},{"lineNumber":343,"author":{"gitId":"wenxin-c"},"content":"  and generate the set of indexes.","lastModifiedDate":"2023-04-07"},{"lineNumber":344,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":345,"author":{"gitId":"wenxin-c"},"content":"`LikeCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":346,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":347,"author":{"gitId":"wenxin-c"},"content":"- Command format: `like INDEX`","lastModifiedDate":"2023-04-07"},{"lineNumber":348,"author":{"gitId":"wenxin-c"},"content":"- Users can add reflection question that is generated in the previous set into their favorite list. As there","lastModifiedDate":"2023-04-07"},{"lineNumber":349,"author":{"gitId":"wenxin-c"},"content":"  will only be 5 questions per random set, the indexes are restricted to integer 1~5.","lastModifiedDate":"2023-04-07"},{"lineNumber":350,"author":{"gitId":"wenxin-c"},"content":"- The `QuestionList` class is used to as a dependency and `addFavQuestion()` method in called to add and store the data.","lastModifiedDate":"2023-04-07"},{"lineNumber":351,"author":{"gitId":"wenxin-c"},"content":"- Every time a question is added into the favorite list, the indexes of this particular question will be stored in data","lastModifiedDate":"2023-03-28"},{"lineNumber":352,"author":{"gitId":"wenxin-c"},"content":"  file straightaway. It prevents data loss due to unforeseen computer shutdown.","lastModifiedDate":"2023-03-28"},{"lineNumber":353,"author":{"gitId":"wenxin-c"},"content":"- Users can only successfully add a question to favorite list if they have gotten **at least** one set of questions","lastModifiedDate":"2023-04-08"},{"lineNumber":354,"author":{"gitId":"wenxin-c"},"content":"  previously.","lastModifiedDate":"2023-04-08"},{"lineNumber":355,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":356,"author":{"gitId":"wenxin-c"},"content":"`UnlikeCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":357,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":358,"author":{"gitId":"wenxin-c"},"content":"- Command format: `unlike INDEX`","lastModifiedDate":"2023-04-07"},{"lineNumber":359,"author":{"gitId":"wenxin-c"},"content":"- Users can remove reflection questions from their favorite list.","lastModifiedDate":"2023-04-07"},{"lineNumber":360,"author":{"gitId":"wenxin-c"},"content":"- The `removeFavQuestion()` method in `QuestionList` class is used to remove data and the mechanism is similar to `like`","lastModifiedDate":"2023-04-08"},{"lineNumber":361,"author":{"gitId":"wenxin-c"},"content":"  command.","lastModifiedDate":"2023-04-08"},{"lineNumber":362,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":363,"author":{"gitId":"wenxin-c"},"content":"`FavoriteCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":364,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":365,"author":{"gitId":"wenxin-c"},"content":"- Command format: `fav`","lastModifiedDate":"2023-04-07"},{"lineNumber":366,"author":{"gitId":"wenxin-c"},"content":"- Users can review the questions in their favorite list.","lastModifiedDate":"2023-04-07"},{"lineNumber":367,"author":{"gitId":"wenxin-c"},"content":"- The `getFavQuestions()` method in `QuestionList` class is called to retrieve the questions based on the indexes in the","lastModifiedDate":"2023-04-07"},{"lineNumber":368,"author":{"gitId":"wenxin-c"},"content":"  favorite list.","lastModifiedDate":"2023-04-07"},{"lineNumber":369,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":370,"author":{"gitId":"wenxin-c"},"content":"`PrevCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":371,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":372,"author":{"gitId":"wenxin-c"},"content":"- Command format: `prev`","lastModifiedDate":"2023-04-07"},{"lineNumber":373,"author":{"gitId":"wenxin-c"},"content":"- Users can review the set of questions generated by the previous `get` command. It only works if users have gotten","lastModifiedDate":"2023-04-07"},{"lineNumber":374,"author":{"gitId":"wenxin-c"},"content":"  **at least** one set of questions.","lastModifiedDate":"2023-04-07"},{"lineNumber":375,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":376,"author":{"gitId":"wenxin-c"},"content":"`HelpCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":377,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":378,"author":{"gitId":"wenxin-c"},"content":"- Command format: `help [COMMAND_TO_CHECK]`","lastModifiedDate":"2023-04-07"},{"lineNumber":379,"author":{"gitId":"wenxin-c"},"content":"- Every command class has public attributes `COMMAND_DESCRIPTION` and `COMMAND_USAGE`.","lastModifiedDate":"2023-04-07"},{"lineNumber":380,"author":{"gitId":"wenxin-c"},"content":"- `printHelpMessage()` method in `HelpCommand` will retrieve and print these attributes.","lastModifiedDate":"2023-04-07"},{"lineNumber":381,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":382,"author":{"gitId":"wenxin-c"},"content":"`HomeCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":383,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":384,"author":{"gitId":"wenxin-c"},"content":"- Command format: `home`","lastModifiedDate":"2023-03-28"},{"lineNumber":385,"author":{"gitId":"wenxin-c"},"content":"- This command allows users to return back to the main WellNUS++ interface.","lastModifiedDate":"2023-03-22"},{"lineNumber":386,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":387,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- @@author --\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":389,"author":{"gitId":"nichyjt"},"content":"\u003c!-- @@author nichyjt --\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":390,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":391,"author":{"gitId":"nichyjt"},"content":"## CommandParser Component","lastModifiedDate":"2023-04-07"},{"lineNumber":392,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":393,"author":{"gitId":"nichyjt"},"content":"The CommandParser is a core feature of WellNUS++.","lastModifiedDate":"2023-03-22"},{"lineNumber":394,"author":{"gitId":"nichyjt"},"content":"It defines the following:","lastModifiedDate":"2023-03-22"},{"lineNumber":395,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":396,"author":{"gitId":"nichyjt"},"content":"1. The syntax for users to input commands","lastModifiedDate":"2023-03-22"},{"lineNumber":397,"author":{"gitId":"nichyjt"},"content":"2. A common API for developers to **process** user input","lastModifiedDate":"2023-03-22"},{"lineNumber":398,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":399,"author":{"gitId":"nichyjt"},"content":"### Design Considerations","lastModifiedDate":"2023-04-07"},{"lineNumber":400,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":401,"author":{"gitId":"nichyjt"},"content":"The CommandParser is implicitly used by users 100% of the time.","lastModifiedDate":"2023-03-22"},{"lineNumber":402,"author":{"gitId":"nichyjt"},"content":"It is the abstraction through which the users will interact with WellNUS++\u0027s features.","lastModifiedDate":"2023-03-22"},{"lineNumber":403,"author":{"gitId":"nichyjt"},"content":"Its ease of use is critical to ensure a good user experience.","lastModifiedDate":"2023-03-22"},{"lineNumber":404,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":405,"author":{"gitId":"nichyjt"},"content":"#### User design Considerations","lastModifiedDate":"2023-04-07"},{"lineNumber":406,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":407,"author":{"gitId":"nichyjt"},"content":"Our [target user profile](#target-user-profile) are Computing and Engineering students.","lastModifiedDate":"2023-03-22"},{"lineNumber":408,"author":{"gitId":"nichyjt"},"content":"With that, we have done extensive research and laid out the following design considerations.","lastModifiedDate":"2023-03-22"},{"lineNumber":409,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":410,"author":{"gitId":"nichyjt"},"content":"1. **Easy learning curve**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":411,"author":{"gitId":"nichyjt"},"content":"   Our users are often strapped for time and tend to prefer to use tools that","lastModifiedDate":"2023-03-22"},{"lineNumber":412,"author":{"gitId":"nichyjt"},"content":"   they are familiar with or can learn quickly. Our command syntax should be easy","lastModifiedDate":"2023-03-22"},{"lineNumber":413,"author":{"gitId":"nichyjt"},"content":"   to remember, predictable and intuitive.","lastModifiedDate":"2023-03-22"},{"lineNumber":414,"author":{"gitId":"nichyjt"},"content":"2. **Flexible usage**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":415,"author":{"gitId":"nichyjt"},"content":"   \"Arguments\" for a command should not care about the order of arguments.","lastModifiedDate":"2023-03-22"},{"lineNumber":416,"author":{"gitId":"nichyjt"},"content":"   Users often type what comes to mind first. Allowing flexible order of arguments","lastModifiedDate":"2023-03-22"},{"lineNumber":417,"author":{"gitId":"nichyjt"},"content":"   reduces the cognitive load on the user\u0027s end and allows for a","lastModifiedDate":"2023-03-22"},{"lineNumber":418,"author":{"gitId":"nichyjt"},"content":"   more pleasant experience.","lastModifiedDate":"2023-03-22"},{"lineNumber":419,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":420,"author":{"gitId":"nichyjt"},"content":"#### Developer Design Considerations","lastModifiedDate":"2023-04-07"},{"lineNumber":421,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":422,"author":{"gitId":"nichyjt"},"content":"Virtually every feature in WellNUS++ will require user input to be processed. This means that all features","lastModifiedDate":"2023-03-22"},{"lineNumber":423,"author":{"gitId":"nichyjt"},"content":"will have to interact with `CommandParser`. Hence, the","lastModifiedDate":"2023-03-22"},{"lineNumber":424,"author":{"gitId":"nichyjt"},"content":"design for the `CommandParser` API must be understandable, unambiguous and easy to develop on.","lastModifiedDate":"2023-03-22"},{"lineNumber":425,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":426,"author":{"gitId":"nichyjt"},"content":"1. **Easy way to extract components of user input**  ","lastModifiedDate":"2023-04-09"},{"lineNumber":427,"author":{"gitId":"nichyjt"},"content":"   Each component of userInput (arguments, payload, etc) should be obtainable in predictable and non-arbitrary way.","lastModifiedDate":"2023-03-22"},{"lineNumber":428,"author":{"gitId":"nichyjt"},"content":"   Arbitrary way (using index) is not preferred as it is prone to developer erros.","lastModifiedDate":"2023-03-22"},{"lineNumber":429,"author":{"gitId":"nichyjt"},"content":"2. **Easy way to validate user input**  ","lastModifiedDate":"2023-04-09"},{"lineNumber":430,"author":{"gitId":"nichyjt"},"content":"   There should also be built-in ways to easily validate components of user input for a command,","lastModifiedDate":"2023-03-22"},{"lineNumber":431,"author":{"gitId":"nichyjt"},"content":"   such as checking length.","lastModifiedDate":"2023-03-22"},{"lineNumber":432,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":433,"author":{"gitId":"nichyjt"},"content":"#### Alternative Designs Considered","lastModifiedDate":"2023-04-07"},{"lineNumber":434,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":435,"author":{"gitId":"nichyjt"},"content":"We considered alternative command structures such as [AB3](https://se-education.org/addressbook-level3/UserGuide.html)","lastModifiedDate":"2023-04-07"},{"lineNumber":436,"author":{"gitId":"nichyjt"},"content":"where input types are","lastModifiedDate":"2023-04-07"},{"lineNumber":437,"author":{"gitId":"nichyjt"},"content":"specified , `e.g. n/John Doe` which more \u0027secure\u0027 from the get go.","lastModifiedDate":"2023-04-07"},{"lineNumber":438,"author":{"gitId":"nichyjt"},"content":"However, due to the following issues, AB3 was not chosen as the alternative solution compared to the shell-like","lastModifiedDate":"2023-04-07"},{"lineNumber":439,"author":{"gitId":"nichyjt"},"content":"structure.","lastModifiedDate":"2023-04-07"},{"lineNumber":440,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":441,"author":{"gitId":"nichyjt"},"content":"**Steep learning curve**  ","lastModifiedDate":"2023-04-07"},{"lineNumber":442,"author":{"gitId":"nichyjt"},"content":"For experienced and inexperienced users, it is a hassle to remember what letter corresponds to what argument.","lastModifiedDate":"2023-04-07"},{"lineNumber":443,"author":{"gitId":"nichyjt"},"content":"For AB3, the user needs to remember all the different `char` \u0027verbs\u0027 such as `e/` for email, `n/` for name.","lastModifiedDate":"2023-04-07"},{"lineNumber":444,"author":{"gitId":"nichyjt"},"content":"This violates user design consideration (1).","lastModifiedDate":"2023-04-09"},{"lineNumber":445,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":446,"author":{"gitId":"nichyjt"},"content":"**Does not scale well**  ","lastModifiedDate":"2023-04-07"},{"lineNumber":447,"author":{"gitId":"nichyjt"},"content":"AB3 structure runs the high risk of argument-space collision as well.  ","lastModifiedDate":"2023-04-07"},{"lineNumber":448,"author":{"gitId":"nichyjt"},"content":"For example, consider a command that needs an \"email\" and \"entry\". What does `e/\u003cpayload\u003e` correspond to?","lastModifiedDate":"2023-04-07"},{"lineNumber":449,"author":{"gitId":"nichyjt"},"content":"We could simply just put entry as *some other character* -- but that defeats the purpose of having the structure in the","lastModifiedDate":"2023-04-07"},{"lineNumber":450,"author":{"gitId":"nichyjt"},"content":"first place as the character is the argument\u0027s first character.","lastModifiedDate":"2023-04-07"},{"lineNumber":451,"author":{"gitId":"nichyjt"},"content":"This makes behaviour **unpredictable** and a **confusing** user experience.","lastModifiedDate":"2023-04-07"},{"lineNumber":452,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":453,"author":{"gitId":"nichyjt"},"content":"**Bad expert user experience**","lastModifiedDate":"2023-04-07"},{"lineNumber":454,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":455,"author":{"gitId":"nichyjt"},"content":"For expert users and CLI-masters, pedantic argument input like AB3 makes the typing experience MUCH slower due to the","lastModifiedDate":"2023-04-07"},{"lineNumber":456,"author":{"gitId":"nichyjt"},"content":"need to type which is relatively clunky as the user will need to type far off to the \u0027/\u0027 key on the keyboard.","lastModifiedDate":"2023-04-07"},{"lineNumber":457,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":458,"author":{"gitId":"nichyjt"},"content":"### CommandParser Syntax","lastModifiedDate":"2023-04-07"},{"lineNumber":459,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":460,"author":{"gitId":"nichyjt"},"content":"The command parser defines any arbitrary user input to be valid","lastModifiedDate":"2023-03-22"},{"lineNumber":461,"author":{"gitId":"nichyjt"},"content":"if it follows the following structure.","lastModifiedDate":"2023-03-22"},{"lineNumber":462,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":463,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-22"},{"lineNumber":464,"author":{"gitId":"nichyjt"},"content":"mainCommand [payload] [--argument1 [payload1] --argument2 [payload2] ... ]","lastModifiedDate":"2023-03-22"},{"lineNumber":465,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-22"},{"lineNumber":466,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":467,"author":{"gitId":"nichyjt"},"content":"This should be familiar to you. It is similar to how most CLI applications process arguments.","lastModifiedDate":"2023-04-09"},{"lineNumber":468,"author":{"gitId":"nichyjt"},"content":"In particular, we adapt the structure from `unix` style CLI apps. For example, `git --help`\u0027s","lastModifiedDate":"2023-04-09"},{"lineNumber":469,"author":{"gitId":"nichyjt"},"content":"output is shown below.","lastModifiedDate":"2023-04-09"},{"lineNumber":470,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":471,"author":{"gitId":"nichyjt"},"content":"![Example](diagrams/git_command.png)","lastModifiedDate":"2023-03-22"},{"lineNumber":472,"author":{"gitId":"nichyjt"},"content":"\u003cfigcaption align\u003d\"center\"\u003eExample of CLI input syntax, using git as an example\u003c/figcaption\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":473,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":474,"author":{"gitId":"nichyjt"},"content":"This achieves user design consideration (1). Why?  ","lastModifiedDate":"2023-04-09"},{"lineNumber":475,"author":{"gitId":"nichyjt"},"content":"This syntax is intuitive at a glance to our target users,","lastModifiedDate":"2023-03-22"},{"lineNumber":476,"author":{"gitId":"nichyjt"},"content":"is predictable and easy to remember as the only thing they need to remember is the argument name and","lastModifiedDate":"2023-03-22"},{"lineNumber":477,"author":{"gitId":"nichyjt"},"content":"the \u0027--\u0027 delimiter.","lastModifiedDate":"2023-03-22"},{"lineNumber":478,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":479,"author":{"gitId":"nichyjt"},"content":"From this syntax, we can generalise ALL user inputs as `(argument, payload)` pairs.  ","lastModifiedDate":"2023-03-22"},{"lineNumber":480,"author":{"gitId":"nichyjt"},"content":"`mainCommand` is a special `argument`, where it MUST be the first word in the user input.","lastModifiedDate":"2023-03-22"},{"lineNumber":481,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":482,"author":{"gitId":"nichyjt"},"content":"Due to the unique one-to-one relationship between arguments and payloads, we can model a user input","lastModifiedDate":"2023-03-22"},{"lineNumber":483,"author":{"gitId":"nichyjt"},"content":"using this syntax using a `HashMap` mapping each `argument` to a `payload`.","lastModifiedDate":"2023-03-22"},{"lineNumber":484,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":485,"author":{"gitId":"nichyjt"},"content":"For example,","lastModifiedDate":"2023-03-22"},{"lineNumber":486,"author":{"gitId":"nichyjt"},"content":"`","lastModifiedDate":"2023-03-22"},{"lineNumber":487,"author":{"gitId":"nichyjt"},"content":"$ foo bar --arg1 payload1 payload1--1 --arg2 payload2 --arg3","lastModifiedDate":"2023-03-22"},{"lineNumber":488,"author":{"gitId":"nichyjt"},"content":"`","lastModifiedDate":"2023-03-22"},{"lineNumber":489,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":490,"author":{"gitId":"nichyjt"},"content":"Will be mapped as:","lastModifiedDate":"2023-03-22"},{"lineNumber":491,"author":{"gitId":"nichyjt"},"content":"`","lastModifiedDate":"2023-03-22"},{"lineNumber":492,"author":{"gitId":"nichyjt"},"content":"(foo, bar), (arg1 payload1 payload1--1), (arg2 payload2), (arg3, \"\")","lastModifiedDate":"2023-03-22"},{"lineNumber":493,"author":{"gitId":"nichyjt"},"content":"`","lastModifiedDate":"2023-03-22"},{"lineNumber":494,"author":{"gitId":"nichyjt"},"content":"where `\"\"` represents an empty string (for visualization).","lastModifiedDate":"2023-03-22"},{"lineNumber":495,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":496,"author":{"gitId":"nichyjt"},"content":"Using a `HashMap` fulfils user design considerations (2), both developer design considerations (3), (4).","lastModifiedDate":"2023-04-09"},{"lineNumber":497,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":498,"author":{"gitId":"nichyjt"},"content":"- (2): Order of arguments do not matter in a HashMap ","lastModifiedDate":"2023-04-09"},{"lineNumber":499,"author":{"gitId":"nichyjt"},"content":"- (3): To get a `payload`, the developer simply needs to call `myHashMap.get(\"argument\")`.  ","lastModifiedDate":"2023-03-22"},{"lineNumber":500,"author":{"gitId":"nichyjt"},"content":"  This syntatic sugar prevents developer errors compared to an index-based approach.","lastModifiedDate":"2023-03-22"},{"lineNumber":501,"author":{"gitId":"nichyjt"},"content":"- (4): Validating commands is much less difficult using `HashMap`. For example, size can be checked with","lastModifiedDate":"2023-03-22"},{"lineNumber":502,"author":{"gitId":"nichyjt"},"content":"  built-in `.size()`,","lastModifiedDate":"2023-03-22"},{"lineNumber":503,"author":{"gitId":"nichyjt"},"content":"  argument existence can be queried with `.containsKey()`.","lastModifiedDate":"2023-03-22"},{"lineNumber":504,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":505,"author":{"gitId":"nichyjt"},"content":"### Implementation","lastModifiedDate":"2023-04-07"},{"lineNumber":506,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":507,"author":{"gitId":"nichyjt"},"content":"#### Integration with WellNUS++","lastModifiedDate":"2023-04-07"},{"lineNumber":508,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":509,"author":{"gitId":"nichyjt"},"content":"![Integration](diagrams/CommandParserClass.png)","lastModifiedDate":"2023-03-22"},{"lineNumber":510,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":511,"author":{"gitId":"nichyjt"},"content":"`CommandParser` integrates into the boilerplate via the abstract Manager class.  ","lastModifiedDate":"2023-03-22"},{"lineNumber":512,"author":{"gitId":"nichyjt"},"content":"All features are controlled by a manager subclass - hence the developers just need to call","lastModifiedDate":"2023-03-22"},{"lineNumber":513,"author":{"gitId":"nichyjt"},"content":"`getCommandParser` to get a reference to the `CommandParser` taking care of all commands","lastModifiedDate":"2023-03-22"},{"lineNumber":514,"author":{"gitId":"nichyjt"},"content":"in the `Manager` subclass.","lastModifiedDate":"2023-03-22"},{"lineNumber":515,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":516,"author":{"gitId":"nichyjt"},"content":"#### CommandParser API","lastModifiedDate":"2023-03-22"},{"lineNumber":517,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":518,"author":{"gitId":"nichyjt"},"content":"There are only two methods that developers need to know to use `CommandParser`.","lastModifiedDate":"2023-03-22"},{"lineNumber":519,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":520,"author":{"gitId":"nichyjt"},"content":"1. `parseUserInput`","lastModifiedDate":"2023-03-22"},{"lineNumber":521,"author":{"gitId":"nichyjt"},"content":"2. `getMainArgument`","lastModifiedDate":"2023-03-22"},{"lineNumber":522,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":523,"author":{"gitId":"nichyjt"},"content":"**Usage: `parseUserInput`**","lastModifiedDate":"2023-03-22"},{"lineNumber":524,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":525,"author":{"gitId":"nichyjt"},"content":"`parseUserInput` is used to get a `HashMap` representation of the user input, a bijection","lastModifiedDate":"2023-03-22"},{"lineNumber":526,"author":{"gitId":"nichyjt"},"content":"between `argument` and `payload` pairs.","lastModifiedDate":"2023-03-22"},{"lineNumber":527,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":528,"author":{"gitId":"nichyjt"},"content":"Implementation of `parseUserInput`:","lastModifiedDate":"2023-03-22"},{"lineNumber":529,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":530,"author":{"gitId":"nichyjt"},"content":"![CommandParser implementation](diagrams/CommandParserSequence.png)","lastModifiedDate":"2023-03-22"},{"lineNumber":531,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":532,"author":{"gitId":"nichyjt"},"content":"`parseUserInput(String userInput)` is used to directly convert a string into their argument-payload pairs.","lastModifiedDate":"2023-03-22"},{"lineNumber":533,"author":{"gitId":"nichyjt"},"content":"It first calls `splitIntoCommand` to split input over the `\u0027 --\u0027` delimiter to get a `String[] commands`.","lastModifiedDate":"2023-03-22"},{"lineNumber":534,"author":{"gitId":"nichyjt"},"content":"Each `command` in `commands[]` contain the argument and payload. Internally, it splits the","lastModifiedDate":"2023-03-22"},{"lineNumber":535,"author":{"gitId":"nichyjt"},"content":"argument from the payload and populates a `HashMap` with the one-to-one mapping. After all `command`s have","lastModifiedDate":"2023-03-22"},{"lineNumber":536,"author":{"gitId":"nichyjt"},"content":"been processed, the map is returned to the `Manager` for usage.","lastModifiedDate":"2023-03-22"},{"lineNumber":537,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":538,"author":{"gitId":"nichyjt"},"content":"**Sample Code**","lastModifiedDate":"2023-03-22"},{"lineNumber":539,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":540,"author":{"gitId":"nichyjt"},"content":"```java","lastModifiedDate":"2023-03-22"},{"lineNumber":541,"author":{"gitId":"nichyjt"},"content":"// Example usage to get the HashMap","lastModifiedDate":"2023-03-22"},{"lineNumber":542,"author":{"gitId":"nichyjt"},"content":"public class FooManager extends Manager {","lastModifiedDate":"2023-03-22"},{"lineNumber":543,"author":{"gitId":"nichyjt"},"content":"    public HashMap\u003cString, String\u003e handleCommand(String userInput) {","lastModifiedDate":"2023-03-22"},{"lineNumber":544,"author":{"gitId":"nichyjt"},"content":"        // Get a reference to the parser","lastModifiedDate":"2023-03-22"},{"lineNumber":545,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d getCommandParser();","lastModifiedDate":"2023-03-22"},{"lineNumber":546,"author":{"gitId":"nichyjt"},"content":"        // Get the one-to-one mapping","lastModifiedDate":"2023-03-22"},{"lineNumber":547,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e result \u003d parseUserInput(userInput);","lastModifiedDate":"2023-03-22"},{"lineNumber":548,"author":{"gitId":"nichyjt"},"content":"        return result;","lastModifiedDate":"2023-03-22"},{"lineNumber":549,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":550,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":551,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-22"},{"lineNumber":552,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":553,"author":{"gitId":"nichyjt"},"content":"**Usage: `getMainCommand(userInput)`**","lastModifiedDate":"2023-03-22"},{"lineNumber":554,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":555,"author":{"gitId":"nichyjt"},"content":"To understand what the user wants to do, we need a convenient way to get the `mainCommand` from the user input.","lastModifiedDate":"2023-03-22"},{"lineNumber":556,"author":{"gitId":"nichyjt"},"content":"The canonical way to do this is to use `getMainCommand`. This defeats adversarial input where the main command","lastModifiedDate":"2023-03-22"},{"lineNumber":557,"author":{"gitId":"nichyjt"},"content":"is input as an argument.","lastModifiedDate":"2023-03-22"},{"lineNumber":558,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":559,"author":{"gitId":"nichyjt"},"content":"Internally, this just splits the string by whitespace and returns the first word in the array.","lastModifiedDate":"2023-03-22"},{"lineNumber":560,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":561,"author":{"gitId":"YongbinWang"},"content":"\u003c!-- @@author YongbinWang --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":562,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":563,"author":{"gitId":"YongbinWang"},"content":"#### Alternative Designs Considered","lastModifiedDate":"2023-03-22"},{"lineNumber":564,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":565,"author":{"gitId":"YongbinWang"},"content":"We considered alternative command structures such as [AB3](https://se-education.org/addressbook-level3/UserGuide.html)","lastModifiedDate":"2023-03-22"},{"lineNumber":566,"author":{"gitId":"YongbinWang"},"content":"where input types are","lastModifiedDate":"2023-03-22"},{"lineNumber":567,"author":{"gitId":"YongbinWang"},"content":"specified , `e.g. n/John Doe` which more \u0027secure\u0027 from the get go.","lastModifiedDate":"2023-03-22"},{"lineNumber":568,"author":{"gitId":"YongbinWang"},"content":"However, due to the following issues, AB3 was not chosen as the alternative solution compared to the shell-like","lastModifiedDate":"2023-03-22"},{"lineNumber":569,"author":{"gitId":"YongbinWang"},"content":"structure.","lastModifiedDate":"2023-03-22"},{"lineNumber":570,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":571,"author":{"gitId":"YongbinWang"},"content":"**Steep learning curve**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":572,"author":{"gitId":"YongbinWang"},"content":"For experienced and inexperienced users, it is a hassle to remember what letter corresponds to what argument.","lastModifiedDate":"2023-03-22"},{"lineNumber":573,"author":{"gitId":"YongbinWang"},"content":"For AB3, the user needs to remember all the different `char` \u0027verbs\u0027 such as `e/` for email, `n/` for name.","lastModifiedDate":"2023-03-22"},{"lineNumber":574,"author":{"gitId":"YongbinWang"},"content":"This violates design consideration (1).","lastModifiedDate":"2023-03-22"},{"lineNumber":575,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":576,"author":{"gitId":"YongbinWang"},"content":"**Does not scale well**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":577,"author":{"gitId":"YongbinWang"},"content":"AB3 structure runs the high risk of argument-space collision as well.  ","lastModifiedDate":"2023-03-22"},{"lineNumber":578,"author":{"gitId":"YongbinWang"},"content":"For example, consider a command that needs an \"email\" and \"entry\". What does `e/\u003cpayload\u003e` correspond to?","lastModifiedDate":"2023-03-22"},{"lineNumber":579,"author":{"gitId":"YongbinWang"},"content":"We could simply just put entry as *some other character* -- but that defeats the purpose of having the structure in the","lastModifiedDate":"2023-03-22"},{"lineNumber":580,"author":{"gitId":"YongbinWang"},"content":"first place as the character is the argument\u0027s first character.","lastModifiedDate":"2023-03-22"},{"lineNumber":581,"author":{"gitId":"YongbinWang"},"content":"This makes behaviour **unpredictable** and a **confusing** user experience.","lastModifiedDate":"2023-03-22"},{"lineNumber":582,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":583,"author":{"gitId":"YongbinWang"},"content":"**Bad expert user experience**","lastModifiedDate":"2023-03-22"},{"lineNumber":584,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":585,"author":{"gitId":"YongbinWang"},"content":"For expert users and CLI-masters, pedantic argument input like AB3 makes the typing experience MUCH slower due to the","lastModifiedDate":"2023-03-22"},{"lineNumber":586,"author":{"gitId":"YongbinWang"},"content":"need to type which is relatively clunky as the user will need to type far off to the \u0027/\u0027 key on the keyboard.","lastModifiedDate":"2023-03-22"},{"lineNumber":587,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":588,"author":{"gitId":"YongbinWang"},"content":"## AtomicHabit Component","lastModifiedDate":"2023-04-08"},{"lineNumber":589,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":590,"author":{"gitId":"YongbinWang"},"content":"The `AtomicHabit` component is responsible for tracking the user\u0027s daily habits","lastModifiedDate":"2023-04-08"},{"lineNumber":591,"author":{"gitId":"YongbinWang"},"content":"inorder to help users inculcate useful habits.","lastModifiedDate":"2023-04-08"},{"lineNumber":592,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":593,"author":{"gitId":"YongbinWang"},"content":"It consists commands that allows the user keep track of their habits such as adding, updating and more.","lastModifiedDate":"2023-04-08"},{"lineNumber":594,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":595,"author":{"gitId":"YongbinWang"},"content":"### Design Considerations","lastModifiedDate":"2023-04-08"},{"lineNumber":596,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":597,"author":{"gitId":"YongbinWang"},"content":"#### User design considerations","lastModifiedDate":"2023-04-08"},{"lineNumber":598,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":599,"author":{"gitId":"YongbinWang"},"content":"* The output of the `AtomicHabit` component is designed to be simple and informative","lastModifiedDate":"2023-04-08"},{"lineNumber":600,"author":{"gitId":"YongbinWang"},"content":"  as any changes to their habits will be printed out for the user.","lastModifiedDate":"2023-04-08"},{"lineNumber":601,"author":{"gitId":"YongbinWang"},"content":"* A variety of commands are provided to allow the user to easily add, update and delete their habits.","lastModifiedDate":"2023-04-08"},{"lineNumber":602,"author":{"gitId":"YongbinWang"},"content":"* `help` command and prompting messages are available to guide users in using AtomicHabit feature. For example, when","lastModifiedDate":"2023-04-08"},{"lineNumber":603,"author":{"gitId":"YongbinWang"},"content":"  user","lastModifiedDate":"2023-04-08"},{"lineNumber":604,"author":{"gitId":"YongbinWang"},"content":"  inputs `list` and there is no habit in the list, the following message will be printed out:","lastModifiedDate":"2023-04-08"},{"lineNumber":605,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":606,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-04-08"},{"lineNumber":607,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":608,"author":{"gitId":"YongbinWang"},"content":"    You have no habits in your list!","lastModifiedDate":"2023-04-08"},{"lineNumber":609,"author":{"gitId":"YongbinWang"},"content":"    Start adding some habits by using \u0027add\u0027!","lastModifiedDate":"2023-04-08"},{"lineNumber":610,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":611,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-04-08"},{"lineNumber":612,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":613,"author":{"gitId":"YongbinWang"},"content":"* A unique line separator `~` is used to differentiate AtomicHabit from other features and give users a better","lastModifiedDate":"2023-04-08"},{"lineNumber":614,"author":{"gitId":"YongbinWang"},"content":"  visual indication.","lastModifiedDate":"2023-04-08"},{"lineNumber":615,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":616,"author":{"gitId":"YongbinWang"},"content":"#### Developer design considerations","lastModifiedDate":"2023-04-08"},{"lineNumber":617,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":618,"author":{"gitId":"YongbinWang"},"content":"* **Abstracted `AtomicHabitList` Class**\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":619,"author":{"gitId":"YongbinWang"},"content":"  An abstracted `AtomicHabitList` class is created to store the list of habits. This centralised `AtomicHabitList`","lastModifiedDate":"2023-04-08"},{"lineNumber":620,"author":{"gitId":"YongbinWang"},"content":"  object is","lastModifiedDate":"2023-04-08"},{"lineNumber":621,"author":{"gitId":"YongbinWang"},"content":"  passed to other objects.This allows the `AtomicHabit` component to be easily extended to support more features in the","lastModifiedDate":"2023-04-08"},{"lineNumber":622,"author":{"gitId":"YongbinWang"},"content":"  future.","lastModifiedDate":"2023-04-08"},{"lineNumber":623,"author":{"gitId":"YongbinWang"},"content":"* **Duplicate Checking**\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":624,"author":{"gitId":"YongbinWang"},"content":"  Duplicate checking is done to prevent the user from accidentally adding the same habit twice. This is done by checking","lastModifiedDate":"2023-04-08"},{"lineNumber":625,"author":{"gitId":"YongbinWang"},"content":"  if the habit","lastModifiedDate":"2023-04-08"},{"lineNumber":626,"author":{"gitId":"YongbinWang"},"content":"  already exists in the `AtomicHabitList` object.","lastModifiedDate":"2023-04-08"},{"lineNumber":627,"author":{"gitId":"YongbinWang"},"content":"* **User input validation**\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":628,"author":{"gitId":"YongbinWang"},"content":"  Checking mechanism is used to validate user input. User input is always extensively checked","lastModifiedDate":"2023-04-08"},{"lineNumber":629,"author":{"gitId":"YongbinWang"},"content":"  using the `validateCommand()` method in `Command` class before attempting to prepare or execute any command.","lastModifiedDate":"2023-04-08"},{"lineNumber":630,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":631,"author":{"gitId":"YongbinWang"},"content":"### AtomicHabit Implementation","lastModifiedDate":"2023-04-08"},{"lineNumber":632,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":633,"author":{"gitId":"YongbinWang"},"content":"![AtomicHabitManager Implementation](diagrams/AtomicHabitSequenceDiagram.png)","lastModifiedDate":"2023-03-29"},{"lineNumber":634,"author":{"gitId":"YongbinWang"},"content":"An `AtomicHabitManager` object is created by the WellNUS++ `MainManager`and takes over control of the application","lastModifiedDate":"2023-04-08"},{"lineNumber":635,"author":{"gitId":"YongbinWang"},"content":"when user enters the `AtomicHabit` feature. It uses a `AtomicHabitUi` and `CommandParser` object","lastModifiedDate":"2023-04-08"},{"lineNumber":636,"author":{"gitId":"YongbinWang"},"content":"to constantly read in and interpret user input and create the correct command for execution based on input","lastModifiedDate":"2023-04-08"},{"lineNumber":637,"author":{"gitId":"YongbinWang"},"content":"command type until a `HomeCommand`. A common `AtomicHabitList`object is initialised by `AtomicHabitManager` and is","lastModifiedDate":"2023-04-08"},{"lineNumber":638,"author":{"gitId":"YongbinWang"},"content":"shared among command objects to retrieve and modify user data.","lastModifiedDate":"2023-04-08"},{"lineNumber":639,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":640,"author":{"gitId":"YongbinWang"},"content":"![AtomicHabitClass](diagrams/AtomicHabit.png)","lastModifiedDate":"2023-04-09"},{"lineNumber":641,"author":{"gitId":"YongbinWang"},"content":"Note: For readability, AtomicHabitCommand is an abstraction of all the 6 different commands that exist in AtomicHabit.","lastModifiedDate":"2023-04-08"},{"lineNumber":642,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":643,"author":{"gitId":"YongbinWang"},"content":"#### AtomicHabit Commands","lastModifiedDate":"2023-04-08"},{"lineNumber":644,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":645,"author":{"gitId":"YongbinWang"},"content":"`AddCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":646,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":647,"author":{"gitId":"YongbinWang"},"content":"- Command format: `add --name ATOMIC_HABIT_NAME`","lastModifiedDate":"2023-04-08"},{"lineNumber":648,"author":{"gitId":"YongbinWang"},"content":"- Users can add new habit to their habit list to track their progress.\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":649,"author":{"gitId":"YongbinWang"},"content":"- `addAtomicHabit()` method in `AtomicHabitList` will add the habit to the habit list.","lastModifiedDate":"2023-04-08"},{"lineNumber":650,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":651,"author":{"gitId":"YongbinWang"},"content":"`DeleteCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":652,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":653,"author":{"gitId":"YongbinWang"},"content":"- Command format: `delete --id HABIT_INDEX`","lastModifiedDate":"2023-04-08"},{"lineNumber":654,"author":{"gitId":"YongbinWang"},"content":"- Users can delete habit from their list once they have inculcated the habit.","lastModifiedDate":"2023-04-08"},{"lineNumber":655,"author":{"gitId":"YongbinWang"},"content":"- `deleteAtomicHabit()` method in `AtomicHabitList` will delete the habit from the habit list.","lastModifiedDate":"2023-04-08"},{"lineNumber":656,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":657,"author":{"gitId":"YongbinWang"},"content":"`HomeCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":658,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":659,"author":{"gitId":"YongbinWang"},"content":"- Command format: `home`","lastModifiedDate":"2023-04-08"},{"lineNumber":660,"author":{"gitId":"YongbinWang"},"content":"- This command allows users to return back to the main WellNUS++ interface.","lastModifiedDate":"2023-04-08"},{"lineNumber":661,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":662,"author":{"gitId":"YongbinWang"},"content":"`ListCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":663,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":664,"author":{"gitId":"YongbinWang"},"content":"- Command format: `list`","lastModifiedDate":"2023-04-08"},{"lineNumber":665,"author":{"gitId":"YongbinWang"},"content":"- This command allows users to view all the habits they have added.","lastModifiedDate":"2023-04-08"},{"lineNumber":666,"author":{"gitId":"YongbinWang"},"content":"- ArrayList of \u0027AtomicHabit\u0027 objects is iterated through and the attributes are printed out.","lastModifiedDate":"2023-04-08"},{"lineNumber":667,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":668,"author":{"gitId":"YongbinWang"},"content":"`UpdateCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":669,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":670,"author":{"gitId":"YongbinWang"},"content":"- Command format: `update --id HABIT_INDEX [--by NUMBER_TO_CHANGE]`","lastModifiedDate":"2023-04-08"},{"lineNumber":671,"author":{"gitId":"YongbinWang"},"content":"- This command allows users to increment or decrement number of times the habit is done.","lastModifiedDate":"2023-04-08"},{"lineNumber":672,"author":{"gitId":"YongbinWang"},"content":"- `increaseCount()` and `decreaseCount()` methods in `AtomicHabit` will increment or decrement the habit accordingly.","lastModifiedDate":"2023-04-08"},{"lineNumber":673,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":674,"author":{"gitId":"YongbinWang"},"content":"`HelpCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":675,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":676,"author":{"gitId":"YongbinWang"},"content":"- Command format: `help [COMMAND_TO_CHECK]`","lastModifiedDate":"2023-04-08"},{"lineNumber":677,"author":{"gitId":"YongbinWang"},"content":"- Every command class has public attributes `COMMAND_DESCRIPTION` and `COMMAND_USAGE`.","lastModifiedDate":"2023-04-08"},{"lineNumber":678,"author":{"gitId":"YongbinWang"},"content":"- `printHelpMessage()` method in `HelpCommand` will retrieve and print these attributes.","lastModifiedDate":"2023-04-08"},{"lineNumber":679,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":680,"author":{"gitId":"haoyangw"},"content":"\u003c!-- @@author haoyangw --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":681,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":682,"author":{"gitId":"haoyangw"},"content":"## Gamification Component","lastModifiedDate":"2023-04-09"},{"lineNumber":683,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":684,"author":{"gitId":"haoyangw"},"content":"The Gamification feature is supported by the `GamificationManager` class, which delegates specific application logic to","lastModifiedDate":"2023-04-09"},{"lineNumber":685,"author":{"gitId":"haoyangw"},"content":"4 main sets of classes: `Commands`, `GamificationData`, `GamificationStorage` and `GamificationUi`.","lastModifiedDate":"2023-04-09"},{"lineNumber":686,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":687,"author":{"gitId":"haoyangw"},"content":"![Gamification Classes](diagrams/GamificationClassDiagram.png)\u003cbr/\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":688,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":689,"author":{"gitId":"haoyangw"},"content":"### Design Considerations","lastModifiedDate":"2023-04-09"},{"lineNumber":690,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":691,"author":{"gitId":"haoyangw"},"content":"Logic related to specific tasks such as user commands, XP data, storage and user interface are delegated by","lastModifiedDate":"2023-04-09"},{"lineNumber":692,"author":{"gitId":"haoyangw"},"content":"`GamificationManager` to specialised classes to fulfil the `Single Responsibility Principle` since a `Manager` is only","lastModifiedDate":"2023-04-09"},{"lineNumber":693,"author":{"gitId":"haoyangw"},"content":"a high-level abstraction that ensures that a feature provides all the expected functionality. Hence,","lastModifiedDate":"2023-04-09"},{"lineNumber":694,"author":{"gitId":"haoyangw"},"content":"`GamificationManager` should change only when the overall specification of the gamification feature changes, not when a","lastModifiedDate":"2023-04-09"},{"lineNumber":695,"author":{"gitId":"haoyangw"},"content":"particular task changes(e.g. a change in the gamification feature\u0027s user interface style). The design considerations for","lastModifiedDate":"2023-04-09"},{"lineNumber":696,"author":{"gitId":"haoyangw"},"content":"each of the 4 sets of specialised classes are as follows.","lastModifiedDate":"2023-04-09"},{"lineNumber":697,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":698,"author":{"gitId":"haoyangw"},"content":"#### GamificationData","lastModifiedDate":"2023-04-09"},{"lineNumber":699,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":700,"author":{"gitId":"haoyangw"},"content":"`GamificationData` encapsulates all useful statistics for the gamification feature and exposes them using helper","lastModifiedDate":"2023-04-09"},{"lineNumber":701,"author":{"gitId":"haoyangw"},"content":"methods, thus acting as a compound data type. This is done to increase cohesion since all these useful statistics are","lastModifiedDate":"2023-04-09"},{"lineNumber":702,"author":{"gitId":"haoyangw"},"content":"computed from the total XP points data, and thus they are all logically related and can be grouped together in one","lastModifiedDate":"2023-04-09"},{"lineNumber":703,"author":{"gitId":"haoyangw"},"content":"class.","lastModifiedDate":"2023-04-09"},{"lineNumber":704,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":705,"author":{"gitId":"haoyangw"},"content":"Additionally, `GamificationData` provides a layer of abstraction between the individual statistics and classes","lastModifiedDate":"2023-04-09"},{"lineNumber":706,"author":{"gitId":"haoyangw"},"content":"that access them. This greatly simplifies the code of such classes, which only have to call `GamificationData`\u0027s","lastModifiedDate":"2023-04-09"},{"lineNumber":707,"author":{"gitId":"haoyangw"},"content":"helper methods. It also fulfils the Object-Oriented Principles of `abstraction` and `encapsulation`. Firstly,","lastModifiedDate":"2023-04-09"},{"lineNumber":708,"author":{"gitId":"haoyangw"},"content":"abstraction of logic for computing the statistics makes classes that access the statistics easier to maintain since only","lastModifiedDate":"2023-04-09"},{"lineNumber":709,"author":{"gitId":"haoyangw"},"content":"one class, `GamificationData`, needs to be updated to modify the statistics logic. Secondly, abstraction reduces code","lastModifiedDate":"2023-04-09"},{"lineNumber":710,"author":{"gitId":"haoyangw"},"content":"duplication since the common logic for computing statistics can be shared between multiple classes through one single","lastModifiedDate":"2023-04-09"},{"lineNumber":711,"author":{"gitId":"haoyangw"},"content":"definition of `GamificationData`. Finally, encapsulation ensures that classes from other packages that access the","lastModifiedDate":"2023-04-09"},{"lineNumber":712,"author":{"gitId":"haoyangw"},"content":"statistics do not know the implementation details for computing any of the individual statistics, which is necessary","lastModifiedDate":"2023-04-09"},{"lineNumber":713,"author":{"gitId":"haoyangw"},"content":"since such classes are from a different package than `GamificationData`.","lastModifiedDate":"2023-04-09"},{"lineNumber":714,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":715,"author":{"gitId":"haoyangw"},"content":"#### GamificationStorage","lastModifiedDate":"2023-04-09"},{"lineNumber":716,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":717,"author":{"gitId":"haoyangw"},"content":"`GamificationStorage` implements logic for storing `GamificationData` into gamification\u0027s data file and provides them","lastModifiedDate":"2023-04-09"},{"lineNumber":718,"author":{"gitId":"haoyangw"},"content":"using helper methods. This reduces coupling between `GamificationData` and the actual `Storage` and","lastModifiedDate":"2023-04-09"},{"lineNumber":719,"author":{"gitId":"haoyangw"},"content":"`GamificationTokenizer` classes by adding a layer of abstraction. The rationale behind this is the fulfilment of the","lastModifiedDate":"2023-04-09"},{"lineNumber":720,"author":{"gitId":"haoyangw"},"content":"`Single Responsibility Principle`: changes in the `Storage` and `GamificationTokenizer` helper methods will not","lastModifiedDate":"2023-04-09"},{"lineNumber":721,"author":{"gitId":"haoyangw"},"content":"require updates to `GamificationData`, whose responsibility is to provide gamification statistics, not handle data","lastModifiedDate":"2023-04-09"},{"lineNumber":722,"author":{"gitId":"haoyangw"},"content":"storage and retrieval.","lastModifiedDate":"2023-04-09"},{"lineNumber":723,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":724,"author":{"gitId":"haoyangw"},"content":"#### GamificationUi","lastModifiedDate":"2023-04-09"},{"lineNumber":725,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":726,"author":{"gitId":"haoyangw"},"content":"`GamificationUi` is a child class of `TextUi` and thus provides all of `TextUi`\u0027s functionality while adding","lastModifiedDate":"2023-04-09"},{"lineNumber":727,"author":{"gitId":"haoyangw"},"content":"gamification-specific logic such as the XP bar. This design is chosen because the gamification feature requires","lastModifiedDate":"2023-04-09"},{"lineNumber":728,"author":{"gitId":"haoyangw"},"content":"`TextUi`\u0027s features, but also needs to customise the format of user messages and introduce additional UI elements.","lastModifiedDate":"2023-04-09"},{"lineNumber":729,"author":{"gitId":"haoyangw"},"content":"Extending `TextUi` enables `GamificationUi` to do exactly this, but more importantly, gamification-specific","lastModifiedDate":"2023-04-09"},{"lineNumber":730,"author":{"gitId":"haoyangw"},"content":"customisations and logic is abstracted from `TextUi` and put in the `gamification` subpackage. This provides 3","lastModifiedDate":"2023-04-09"},{"lineNumber":731,"author":{"gitId":"haoyangw"},"content":"benefits:","lastModifiedDate":"2023-04-09"},{"lineNumber":732,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":733,"author":{"gitId":"haoyangw"},"content":"1. Gamification\u0027s customisations will not affect other classes that call `TextUi`\u0027s methods","lastModifiedDate":"2023-04-09"},{"lineNumber":734,"author":{"gitId":"haoyangw"},"content":"2. Other classes(from different subpackages) that access `TextUi` are unable to call on gamification-specific methods","lastModifiedDate":"2023-04-09"},{"lineNumber":735,"author":{"gitId":"haoyangw"},"content":"3. Fulfilment of the `Open Closed Principle`: The introduction of `GamificationUi` requires no modifications to","lastModifiedDate":"2023-04-09"},{"lineNumber":736,"author":{"gitId":"haoyangw"},"content":"   `TextUi`\u0027s helper methods, but `GamificationUi` provides additional functionality like an XP bar.","lastModifiedDate":"2023-04-09"},{"lineNumber":737,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":738,"author":{"gitId":"haoyangw"},"content":"#### Commands","lastModifiedDate":"2023-04-09"},{"lineNumber":739,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":740,"author":{"gitId":"haoyangw"},"content":"The key command for the gamification feature is the `stats` command provided by the `StatsCommand` class. Due to the","lastModifiedDate":"2023-04-09"},{"lineNumber":741,"author":{"gitId":"haoyangw"},"content":"implementation of `GamificationData` and `GamificationUi`, `StatsCommand` is a high-level abstraction that delegates","lastModifiedDate":"2023-04-09"},{"lineNumber":742,"author":{"gitId":"haoyangw"},"content":"the printing of the XP bar to `GamificationUi`, which obtains the XP statistics to be displayed from the given","lastModifiedDate":"2023-04-09"},{"lineNumber":743,"author":{"gitId":"haoyangw"},"content":"`GamificationData`. This greatly simplifies the maintenance of the `StatsCommand` class, which can remain unchanged","lastModifiedDate":"2023-04-09"},{"lineNumber":744,"author":{"gitId":"haoyangw"},"content":"even when the logic for computing the XP statistics or the implementation of the XP bar changes. It also reduces","lastModifiedDate":"2023-04-09"},{"lineNumber":745,"author":{"gitId":"haoyangw"},"content":"coupling between the `StatsCommand` class and the statistics and UI logic of the gamification feature.","lastModifiedDate":"2023-04-09"},{"lineNumber":746,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":747,"author":{"gitId":"haoyangw"},"content":"### Alternative Designs Considered","lastModifiedDate":"2023-04-09"},{"lineNumber":748,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":749,"author":{"gitId":"haoyangw"},"content":"#### Defining gamification statistics logic within `GamificationManager`","lastModifiedDate":"2023-04-09"},{"lineNumber":750,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":751,"author":{"gitId":"haoyangw"},"content":"Instead of defining a separate `GamificationData` class that is initalised by `GamificationManager`, logic for","lastModifiedDate":"2023-04-09"},{"lineNumber":752,"author":{"gitId":"haoyangw"},"content":"computing statistics can be defined within `GamificationManager` itself. This design was discarded because firstly, it","lastModifiedDate":"2023-04-09"},{"lineNumber":753,"author":{"gitId":"haoyangw"},"content":"violates the `Single Responsibility Principle`. Implementations of `Manager` are supposed to be high-level abstractions","lastModifiedDate":"2023-04-09"},{"lineNumber":754,"author":{"gitId":"haoyangw"},"content":"that delegate tasks to specialised classes. By encapsulating statistics logic within `GamificationManager`, it has to","lastModifiedDate":"2023-04-09"},{"lineNumber":755,"author":{"gitId":"haoyangw"},"content":"be updated when the logic for computing the gamification statistics is changed, but the specialised task of computing","lastModifiedDate":"2023-04-09"},{"lineNumber":756,"author":{"gitId":"haoyangw"},"content":"statistics is not `GamificationManager`\u0027s responsibility.","lastModifiedDate":"2023-04-09"},{"lineNumber":757,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":758,"author":{"gitId":"haoyangw"},"content":"Secondly, defining logic for computing statistics within `GamificationManager` requires passing a reference to","lastModifiedDate":"2023-04-09"},{"lineNumber":759,"author":{"gitId":"haoyangw"},"content":"`GamificationManager` to other packages such as atomic habits, which updates the user\u0027s total XP. This is unacceptable","lastModifiedDate":"2023-04-09"},{"lineNumber":760,"author":{"gitId":"haoyangw"},"content":"since `GamificationManager` has access to all of gamification\u0027s state, which other features shouldn\u0027t have, so it","lastModifiedDate":"2023-04-09"},{"lineNumber":761,"author":{"gitId":"haoyangw"},"content":"cannot be passed by reference to other packages.","lastModifiedDate":"2023-04-09"},{"lineNumber":762,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":763,"author":{"gitId":"haoyangw"},"content":"Finally, this design results in high coupling between `GamificationManager` and other classes such as `StatsCommand`","lastModifiedDate":"2023-04-09"},{"lineNumber":764,"author":{"gitId":"haoyangw"},"content":"that require access to gamification statistics. This is unideal since `GamificationManager` is intended to be a high","lastModifiedDate":"2023-04-09"},{"lineNumber":765,"author":{"gitId":"haoyangw"},"content":"level abstraction, which means it should be loosely coupled with other classes, and high coupling also makes the","lastModifiedDate":"2023-04-09"},{"lineNumber":766,"author":{"gitId":"haoyangw"},"content":"maintenance of `GamificationManager` more difficult.","lastModifiedDate":"2023-04-09"},{"lineNumber":767,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":768,"author":{"gitId":"haoyangw"},"content":"#### Integrating `GamificationStorage` logic within `GamificationData`","lastModifiedDate":"2023-04-09"},{"lineNumber":769,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":770,"author":{"gitId":"haoyangw"},"content":"Logic for calling `Storage` and `GamificationTokenizer` to perform data storage and retrieval can be integrated within","lastModifiedDate":"2023-04-09"},{"lineNumber":771,"author":{"gitId":"haoyangw"},"content":"`GamificationData`, eliminating the need for a separate class `GamificationStorage`. This design was rejected because","lastModifiedDate":"2023-04-09"},{"lineNumber":772,"author":{"gitId":"haoyangw"},"content":"firstly, it violates the `Single Responsibility Principle`. `GamificationData`\u0027s responsibility is to compute","lastModifiedDate":"2023-04-09"},{"lineNumber":773,"author":{"gitId":"haoyangw"},"content":"gamification statistics, not perform data storage and retrieval of any kind. However, this design would necessitate","lastModifiedDate":"2023-04-09"},{"lineNumber":774,"author":{"gitId":"haoyangw"},"content":"updating the logic in `GamificationData` whenever the `storage` classes are modified, which contradicts the `Single","lastModifiedDate":"2023-04-09"},{"lineNumber":775,"author":{"gitId":"haoyangw"},"content":"Responsibility Principle`.","lastModifiedDate":"2023-04-09"},{"lineNumber":776,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":777,"author":{"gitId":"haoyangw"},"content":"Secondly, this design leads to high coupling between `GamificationData` and `storage` classes such as `Storage` and","lastModifiedDate":"2023-04-09"},{"lineNumber":778,"author":{"gitId":"haoyangw"},"content":"`GamificationTokenizer`. This makes maintenance more difficult, as changes in the `storage` classes can create a","lastModifiedDate":"2023-04-09"},{"lineNumber":779,"author":{"gitId":"haoyangw"},"content":"larger ripple effect as `GamificationData` also has to be updated.","lastModifiedDate":"2023-04-09"},{"lineNumber":780,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":781,"author":{"gitId":"haoyangw"},"content":"\u003c!-- @@author --\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":782,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":783,"author":{"gitId":"haoyangw"},"content":"\u003c!-- @@author haoyangw --\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":784,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":785,"author":{"gitId":"haoyangw"},"content":"## Managers","lastModifiedDate":"2023-04-09"},{"lineNumber":786,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":787,"author":{"gitId":"haoyangw"},"content":"The `Manager` abstract class is the superclass for classes responsible for handling user interaction with the app.","lastModifiedDate":"2023-03-23"},{"lineNumber":788,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":789,"author":{"gitId":"haoyangw"},"content":"![Manager Classes](diagrams/Manager.png)\u003cbr/\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":790,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":791,"author":{"gitId":"haoyangw"},"content":"### Design Considerations","lastModifiedDate":"2023-04-08"},{"lineNumber":792,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":793,"author":{"gitId":"haoyangw"},"content":"Each `Manager` provides `runEventDriver()`, which takes over control of user interaction and provides a particular","lastModifiedDate":"2023-03-23"},{"lineNumber":794,"author":{"gitId":"haoyangw"},"content":"feature(along with all its commands). This fulfils the `Single Responsibility Principle` as every `Manager` is in charge","lastModifiedDate":"2023-03-23"},{"lineNumber":795,"author":{"gitId":"haoyangw"},"content":"of one particular feature and recognises its feature\u0027s commands, so it will only change when the feature","lastModifiedDate":"2023-03-23"},{"lineNumber":796,"author":{"gitId":"haoyangw"},"content":"and/or its commands change. This reduces coupling and increases cohesion as changes in one feature will not","lastModifiedDate":"2023-03-23"},{"lineNumber":797,"author":{"gitId":"haoyangw"},"content":"cascade and require amendments to other code(e.g. other `Manager`s), and one feature\u0027s commands and input are processed","lastModifiedDate":"2023-03-23"},{"lineNumber":798,"author":{"gitId":"haoyangw"},"content":"together in one class(a particular implementation of `Manager`). This design further fulfils the `Dependency Inversion","lastModifiedDate":"2023-03-23"},{"lineNumber":799,"author":{"gitId":"haoyangw"},"content":"Principle` as the main `WellNus` class doesn\u0027t depend on actual implementations of `Manager`, but on the abstract","lastModifiedDate":"2023-03-23"},{"lineNumber":800,"author":{"gitId":"haoyangw"},"content":"`Manager` class and its `runEventDriver()` method that all implementations of `Manager` shall provide(with the same","lastModifiedDate":"2023-03-23"},{"lineNumber":801,"author":{"gitId":"haoyangw"},"content":"expected functionality). Individual `Manager`s are free to provide additional functionality, but `WellNus` shall not","lastModifiedDate":"2023-03-23"},{"lineNumber":802,"author":{"gitId":"haoyangw"},"content":"expect any or depend on them so changes in individual features will not require updating the main `WellNus` class.","lastModifiedDate":"2023-03-23"},{"lineNumber":803,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":804,"author":{"gitId":"haoyangw"},"content":"In `runEventDriver()`, every `Manager` shall read and process user input using `TextUi` and `CommandParser` and delegate","lastModifiedDate":"2023-03-23"},{"lineNumber":805,"author":{"gitId":"haoyangw"},"content":"the issued command to the corresponding `Command` class. This fulfils the `Single Responsibility Principle`, as a","lastModifiedDate":"2023-03-23"},{"lineNumber":806,"author":{"gitId":"haoyangw"},"content":"particular implementation of `Manager` is not responsible for providing logic to read user input from the commandline,","lastModifiedDate":"2023-03-23"},{"lineNumber":807,"author":{"gitId":"haoyangw"},"content":"nor provide logic for any of the feature\u0027s supported commands. Its responsibility is abstract and singular: to recognise","lastModifiedDate":"2023-03-23"},{"lineNumber":808,"author":{"gitId":"haoyangw"},"content":"supported commands and call the corresponding `Command` implementation to execute the user\u0027s","lastModifiedDate":"2023-03-23"},{"lineNumber":809,"author":{"gitId":"haoyangw"},"content":"requested action. This ensures that changes in logic for individual commands or reading of user input will not require","lastModifiedDate":"2023-03-23"},{"lineNumber":810,"author":{"gitId":"haoyangw"},"content":"any changes in a particular implementation of `Manager`, as should be expected. A `Manager` class will only change to","lastModifiedDate":"2023-03-23"},{"lineNumber":811,"author":{"gitId":"haoyangw"},"content":"recognise new commands for its feature.","lastModifiedDate":"2023-03-23"},{"lineNumber":812,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":813,"author":{"gitId":"haoyangw"},"content":"### `MainManager` - A Unique Implementation","lastModifiedDate":"2023-04-09"},{"lineNumber":814,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":815,"author":{"gitId":"haoyangw"},"content":"`MainManager` is a unique implementation of `Manager` in that it holds references to every feature\u0027s `Manager` instance.","lastModifiedDate":"2023-03-23"},{"lineNumber":816,"author":{"gitId":"haoyangw"},"content":"This is important as `MainManager` then acts as an abstraction barrier for the application: `WellNus` does not know","lastModifiedDate":"2023-03-23"},{"lineNumber":817,"author":{"gitId":"haoyangw"},"content":"what features or commands are supported by the application, and only knows that `MainManager` can recognise supported","lastModifiedDate":"2023-03-23"},{"lineNumber":818,"author":{"gitId":"haoyangw"},"content":"features and commands within its `runEventDriver()` implementation. As such, the main `WellNus` class can be kept","lastModifiedDate":"2023-03-23"},{"lineNumber":819,"author":{"gitId":"haoyangw"},"content":"abstract and simple: call `MainManager.runEventDriver()` to handle user interaction and greet the user. Additionally,","lastModifiedDate":"2023-03-23"},{"lineNumber":820,"author":{"gitId":"haoyangw"},"content":"holding references to every feature\u0027s `Manager` allows `MainManager` to preserve the entire state of the running","lastModifiedDate":"2023-03-23"},{"lineNumber":821,"author":{"gitId":"haoyangw"},"content":"application so that a previous session for a feature can be fully restored when the user returns to it, as though","lastModifiedDate":"2023-03-23"},{"lineNumber":822,"author":{"gitId":"haoyangw"},"content":"he/she never left. This makes sense conceptually for a class named `MainManager` and eliminates the need to restore a","lastModifiedDate":"2023-03-23"},{"lineNumber":823,"author":{"gitId":"haoyangw"},"content":"particular `Manager`\u0027s state from storage if the application is still running and the user returns to a particular","lastModifiedDate":"2023-03-23"},{"lineNumber":824,"author":{"gitId":"haoyangw"},"content":"feature.","lastModifiedDate":"2023-03-23"},{"lineNumber":825,"author":{"gitId":"haoyangw"},"content":"\u003c!-- @@author --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":826,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":827,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- @@author BernardLesley --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":828,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":829,"author":{"gitId":"BernardLesley"},"content":"## Tokenizer","lastModifiedDate":"2023-04-08"},{"lineNumber":830,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":831,"author":{"gitId":"BernardLesley"},"content":"![Tokenizer](diagrams/Tokenizer.png)\u003cbr/\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":832,"author":{"gitId":"BernardLesley"},"content":"The `Tokenizer` interface is the superclass for classes responsible for converting data stored temporarily in feature\u0027s","lastModifiedDate":"2023-03-23"},{"lineNumber":833,"author":{"gitId":"BernardLesley"},"content":"Managers into Strings for storage and also convert Strings from storage back into data that can be restored by Managers.","lastModifiedDate":"2023-03-23"},{"lineNumber":834,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":835,"author":{"gitId":"BernardLesley"},"content":"### Design Considerations","lastModifiedDate":"2023-04-08"},{"lineNumber":836,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":837,"author":{"gitId":"BernardLesley"},"content":"Each `Tokenizer` provides `tokenize()` and `detokenize()`, which can then be adapted for each feature. This fulfills the","lastModifiedDate":"2023-03-29"},{"lineNumber":838,"author":{"gitId":"BernardLesley"},"content":"`Single Responsibility Principle` as each `Tokenizer` are only responsible to tokenize and detokenize data from only one","lastModifiedDate":"2023-03-23"},{"lineNumber":839,"author":{"gitId":"BernardLesley"},"content":"Feature. Furthermore, this design also fulfills `Open-Closed Principle` where `Tokenizer` interface are open for","lastModifiedDate":"2023-03-29"},{"lineNumber":840,"author":{"gitId":"BernardLesley"},"content":"extension","lastModifiedDate":"2023-03-29"},{"lineNumber":841,"author":{"gitId":"BernardLesley"},"content":"should there be a new feature added into WellNUS++., while the `Tokenizer` feature itself are closed for modification.","lastModifiedDate":"2023-03-29"},{"lineNumber":842,"author":{"gitId":"BernardLesley"},"content":"In","lastModifiedDate":"2023-03-29"},{"lineNumber":843,"author":{"gitId":"BernardLesley"},"content":"addition, this design principle fulfills the `Dependency Inversion Principle` as the feature\u0027s Managers are not","lastModifiedDate":"2023-03-29"},{"lineNumber":844,"author":{"gitId":"BernardLesley"},"content":"dependent on","lastModifiedDate":"2023-03-29"},{"lineNumber":845,"author":{"gitId":"BernardLesley"},"content":"actual implementation of `Tokenizer`, but on the abstract of `Tokenizer` class and its `tokenize()` and `detokenize()`","lastModifiedDate":"2023-03-23"},{"lineNumber":846,"author":{"gitId":"BernardLesley"},"content":"method. Each feature\u0027s tokenizer are free to implement `tokenize()` and `detokenize()` as every feature might store","lastModifiedDate":"2023-03-29"},{"lineNumber":847,"author":{"gitId":"BernardLesley"},"content":"different","lastModifiedDate":"2023-03-29"},{"lineNumber":848,"author":{"gitId":"BernardLesley"},"content":"kinds of data.","lastModifiedDate":"2023-03-29"},{"lineNumber":849,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":850,"author":{"gitId":"BernardLesley"},"content":"### Individual Tokenizers","lastModifiedDate":"2023-04-08"},{"lineNumber":851,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":852,"author":{"gitId":"BernardLesley"},"content":"`AtomicHabitTokenizer` class is responsible to tokenize and detokenize ArrayList of AtomicHabits that","lastModifiedDate":"2023-04-08"},{"lineNumber":853,"author":{"gitId":"BernardLesley"},"content":"AtomicHabitManager will","lastModifiedDate":"2023-03-29"},{"lineNumber":854,"author":{"gitId":"BernardLesley"},"content":"use or store. Each habit will be tokenized in the following","lastModifiedDate":"2023-03-29"},{"lineNumber":855,"author":{"gitId":"BernardLesley"},"content":"format `--description [description of habit] --count [count of","lastModifiedDate":"2023-03-29"},{"lineNumber":856,"author":{"gitId":"BernardLesley"},"content":"habit]` using the `tokenize()` method. While `detokenize()` method converts the strings back to ArrayList of AtomicHabit","lastModifiedDate":"2023-03-29"},{"lineNumber":857,"author":{"gitId":"BernardLesley"},"content":"that","lastModifiedDate":"2023-03-29"},{"lineNumber":858,"author":{"gitId":"BernardLesley"},"content":"can be initialized in AtomicHabitManager to restore the state of the Manager.","lastModifiedDate":"2023-03-23"},{"lineNumber":859,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":860,"author":{"gitId":"BernardLesley"},"content":"`ReflectionTokenizer` class is responsible to tokenize the liked question\u0027s index and previous questions\u0027s index and","lastModifiedDate":"2023-03-29"},{"lineNumber":861,"author":{"gitId":"BernardLesley"},"content":"detokenize","lastModifiedDate":"2023-03-29"},{"lineNumber":862,"author":{"gitId":"BernardLesley"},"content":"it back. ArrayList of Set containing the index of `like` and `pref` will be passed to the `tokenize()` function. The","lastModifiedDate":"2023-03-29"},{"lineNumber":863,"author":{"gitId":"BernardLesley"},"content":"data will","lastModifiedDate":"2023-03-29"},{"lineNumber":864,"author":{"gitId":"BernardLesley"},"content":"be stored in the following format","lastModifiedDate":"2023-03-23"},{"lineNumber":865,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":866,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-23"},{"lineNumber":867,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":868,"author":{"gitId":"BernardLesley"},"content":"like:[index of liked question]","lastModifiedDate":"2023-03-29"},{"lineNumber":869,"author":{"gitId":"BernardLesley"},"content":"prev:[index of previous question]","lastModifiedDate":"2023-03-29"},{"lineNumber":870,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":871,"author":{"gitId":"BernardLesley"},"content":"``` ","lastModifiedDate":"2023-03-23"},{"lineNumber":872,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":873,"author":{"gitId":"BernardLesley"},"content":"`detokenize()` then can be called by ReflectionManager to retrieve the ArrayList containing the Set of liked and","lastModifiedDate":"2023-03-29"},{"lineNumber":874,"author":{"gitId":"BernardLesley"},"content":"previous","lastModifiedDate":"2023-03-29"},{"lineNumber":875,"author":{"gitId":"BernardLesley"},"content":"questions\u0027 index to restore its state.","lastModifiedDate":"2023-03-23"},{"lineNumber":876,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- @@author --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":877,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":878,"author":{"gitId":"nichyjt"},"content":"\u003c!-- @@author nichyjt --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":879,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":880,"author":{"gitId":"nichyjt"},"content":"## Storage","lastModifiedDate":"2023-04-08"},{"lineNumber":881,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":882,"author":{"gitId":"nichyjt"},"content":"Storage is a common API built to work completely decoupled from any `Tokenizer` implementation.","lastModifiedDate":"2023-03-28"},{"lineNumber":883,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":884,"author":{"gitId":"nichyjt"},"content":"It comes with two methods that developers need to be aware of to save and load data:","lastModifiedDate":"2023-04-09"},{"lineNumber":885,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":886,"author":{"gitId":"nichyjt"},"content":"- `saveData(ArrayList\u003cString\u003e tokenizedManager, String fileName)`","lastModifiedDate":"2023-04-09"},{"lineNumber":887,"author":{"gitId":"nichyjt"},"content":"- `loadData(String fileName)`","lastModifiedDate":"2023-04-09"},{"lineNumber":888,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":889,"author":{"gitId":"nichyjt"},"content":"### Usage - `saveData`","lastModifiedDate":"2023-04-09"},{"lineNumber":890,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":891,"author":{"gitId":"nichyjt"},"content":"To illustrate the overall flow on how to save data, refer to the sequence diagram below.","lastModifiedDate":"2023-03-28"},{"lineNumber":892,"author":{"gitId":"nichyjt"},"content":"Saving: `saveData`, `Storage` allows for any tokenizing structure logic as long as the input data is in the form","lastModifiedDate":"2023-04-09"},{"lineNumber":893,"author":{"gitId":"nichyjt"},"content":"of an `ArrayList\u003cString\u003e`.","lastModifiedDate":"2023-04-09"},{"lineNumber":894,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":895,"author":{"gitId":"nichyjt"},"content":"The general idea is to `tokenize` it first into the `ArrayList\u003cString\u003e` format calling before","lastModifiedDate":"2023-03-28"},{"lineNumber":896,"author":{"gitId":"nichyjt"},"content":"calling `Storage`\u0027s `saveData` method.","lastModifiedDate":"2023-03-28"},{"lineNumber":897,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":898,"author":{"gitId":"nichyjt"},"content":"`FooTokenizer` and `FooManager` are named as such to generalize the features that use `Storage`. `\u003cT\u003e` is also used to","lastModifiedDate":"2023-04-09"},{"lineNumber":899,"author":{"gitId":"nichyjt"},"content":"generalize the data structure that is being","lastModifiedDate":"2023-04-09"},{"lineNumber":900,"author":{"gitId":"nichyjt"},"content":"passed into a feature-specific tokenizer, such as `AtomicHabit`.","lastModifiedDate":"2023-04-09"},{"lineNumber":901,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":902,"author":{"gitId":"nichyjt"},"content":"The burden of data transformation from the target data type to `String` is up to `Tokenizer`\u0027s `tokenize` method.","lastModifiedDate":"2023-04-09"},{"lineNumber":903,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":904,"author":{"gitId":"nichyjt"},"content":"![](./diagrams/StorageSequence-Saving_Data__Emphasis_on_Storage_Subroutine_.png)","lastModifiedDate":"2023-03-28"},{"lineNumber":905,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":906,"author":{"gitId":"nichyjt"},"content":"### Usage - `loadData`","lastModifiedDate":"2023-04-09"},{"lineNumber":907,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":908,"author":{"gitId":"nichyjt"},"content":"`loadData` works similarly to `saveData`, but with the logic reversed.","lastModifiedDate":"2023-04-09"},{"lineNumber":909,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":910,"author":{"gitId":"nichyjt"},"content":"`loadData` will load all `WellNUS++` data into a common data type, `ArrayList\u003cString\u003e`.","lastModifiedDate":"2023-04-09"},{"lineNumber":911,"author":{"gitId":"nichyjt"},"content":"The string list can then be use wholesale or detokenized into an appropriate data structure.","lastModifiedDate":"2023-04-09"},{"lineNumber":912,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":913,"author":{"gitId":"nichyjt"},"content":"The burden of data transformation from `String` to the target data type to is up to `Tokenizer`\u0027s `detokenize` method.","lastModifiedDate":"2023-04-09"},{"lineNumber":914,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":915,"author":{"gitId":"nichyjt"},"content":"### Design Considerations","lastModifiedDate":"2023-04-08"},{"lineNumber":916,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":917,"author":{"gitId":"nichyjt"},"content":"- Only filenames defined by public string constants in the `Storage` class.","lastModifiedDate":"2023-03-28"},{"lineNumber":918,"author":{"gitId":"nichyjt"},"content":"  This is meant to prevent developer mis-use and control what exactly waht files WellNUS++ can create.","lastModifiedDate":"2023-03-28"},{"lineNumber":919,"author":{"gitId":"nichyjt"},"content":"- Internally, each entry in `ArrayList\u003cString\u003e` will be delimited by ` --\\n`, where \\n is `System.LineSeparator()`.","lastModifiedDate":"2023-03-28"},{"lineNumber":920,"author":{"gitId":"nichyjt"},"content":"  This was chosen due to the invariant property of `\u0027 --\u0027` in the context of WellNUS++. Due to the way all user input","lastModifiedDate":"2023-03-28"},{"lineNumber":921,"author":{"gitId":"nichyjt"},"content":"  is filtered by the `CommandParser`, the chosen delimiter should never show up in any data input, such as a habit name","lastModifiedDate":"2023-03-28"},{"lineNumber":922,"author":{"gitId":"nichyjt"},"content":"  from `AtomicHabits`.","lastModifiedDate":"2023-04-08"},{"lineNumber":923,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":924,"author":{"gitId":"nichyjt"},"content":"\u003c!-- @@author nichyjt --\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":925,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":926,"author":{"gitId":"nichyjt"},"content":"## Focus Timer Component","lastModifiedDate":"2023-04-07"},{"lineNumber":927,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":928,"author":{"gitId":"nichyjt"},"content":"The `Focus Timer` component is responsible for tracking the user\u0027s daily habits.","lastModifiedDate":"2023-04-07"},{"lineNumber":929,"author":{"gitId":"nichyjt"},"content":"It consists of the `feature` package and the `command` package.","lastModifiedDate":"2023-04-07"},{"lineNumber":930,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":931,"author":{"gitId":"nichyjt"},"content":"It contains commands that you would expect from a timer, such as stopping,","lastModifiedDate":"2023-04-07"},{"lineNumber":932,"author":{"gitId":"nichyjt"},"content":"pausing, and more.","lastModifiedDate":"2023-04-07"},{"lineNumber":933,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":934,"author":{"gitId":"nichyjt"},"content":"### Focus Timer Implementation","lastModifiedDate":"2023-04-07"},{"lineNumber":935,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":936,"author":{"gitId":"nichyjt"},"content":"The focus timer contains a `FocusManager`.","lastModifiedDate":"2023-04-07"},{"lineNumber":937,"author":{"gitId":"nichyjt"},"content":"The session is a wrapper for all the `Countdown` and contains utility logic to identify state and manage Countdown.","lastModifiedDate":"2023-04-07"},{"lineNumber":938,"author":{"gitId":"nichyjt"},"content":"`Countdown` houses the timer that actually does the counting and holds attributes that help","lastModifiedDate":"2023-04-07"},{"lineNumber":939,"author":{"gitId":"nichyjt"},"content":"identify the state of the FocusTimer.","lastModifiedDate":"2023-04-07"},{"lineNumber":940,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":941,"author":{"gitId":"nichyjt"},"content":"![FSM diagram](diagrams/FocusTimerClassDiagram.png)","lastModifiedDate":"2023-04-07"},{"lineNumber":942,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":943,"author":{"gitId":"nichyjt"},"content":"Note: For readability, FocusCommand is an abstraction of all the 9 different commands that exist in FocusTimer.","lastModifiedDate":"2023-04-07"},{"lineNumber":944,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":945,"author":{"gitId":"nichyjt"},"content":"#### State Management","lastModifiedDate":"2023-04-07"},{"lineNumber":946,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":947,"author":{"gitId":"nichyjt"},"content":"The timer is an inherently complex feature. There are many commands, and some commands","lastModifiedDate":"2023-04-07"},{"lineNumber":948,"author":{"gitId":"nichyjt"},"content":"logically cannot be executed in certain states. For example, if the timer is `Paused`,","lastModifiedDate":"2023-04-07"},{"lineNumber":949,"author":{"gitId":"nichyjt"},"content":"the user cannot go to the `next` Countdown.","lastModifiedDate":"2023-04-07"},{"lineNumber":950,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":951,"author":{"gitId":"nichyjt"},"content":"**Problem**: It is confusing to developers to check if the `command` that they are writing","lastModifiedDate":"2023-04-09"},{"lineNumber":952,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":953,"author":{"gitId":"nichyjt"},"content":"**Solution**: To help developers, we define the expected behaviour for focus timer","lastModifiedDate":"2023-04-09"},{"lineNumber":954,"author":{"gitId":"nichyjt"},"content":"in this **simplified** finite state machine (FSM) diagram.","lastModifiedDate":"2023-04-07"},{"lineNumber":955,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":956,"author":{"gitId":"nichyjt"},"content":"The black circle represents the entrypoint into FocusTimer, and","lastModifiedDate":"2023-04-07"},{"lineNumber":957,"author":{"gitId":"nichyjt"},"content":"the labels of the arrows are the valid `command`.","lastModifiedDate":"2023-04-07"},{"lineNumber":958,"author":{"gitId":"nichyjt"},"content":"The command `home` has been left out to make the diagram simpler.","lastModifiedDate":"2023-04-07"},{"lineNumber":959,"author":{"gitId":"nichyjt"},"content":"It is a command that can be called in any state, and therefore does not add value to it.","lastModifiedDate":"2023-04-09"},{"lineNumber":960,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":961,"author":{"gitId":"nichyjt"},"content":"![FSM diagram](diagrams/FocusTimerState.png)","lastModifiedDate":"2023-04-07"},{"lineNumber":962,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":963,"author":{"gitId":"nichyjt"},"content":"From the diagram and the class diagram, we can derive a truth table","lastModifiedDate":"2023-04-07"},{"lineNumber":964,"author":{"gitId":"nichyjt"},"content":"from the attributes of each Countdown (e.g. `isReady`) and tag them to a state.","lastModifiedDate":"2023-04-09"},{"lineNumber":965,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":966,"author":{"gitId":"nichyjt"},"content":"| \u0026or; State / Attribute \u003e | isRunClock | isCompletedCountDown | isReady |  ","lastModifiedDate":"2023-04-09"},{"lineNumber":967,"author":{"gitId":"nichyjt"},"content":"|--------------------------|------------|----------------------|---------|","lastModifiedDate":"2023-04-09"},{"lineNumber":968,"author":{"gitId":"nichyjt"},"content":"| Ready                    | X          | X                    | T       |","lastModifiedDate":"2023-04-07"},{"lineNumber":969,"author":{"gitId":"nichyjt"},"content":"| Counting                 | T          | F                    | F       |","lastModifiedDate":"2023-04-07"},{"lineNumber":970,"author":{"gitId":"nichyjt"},"content":"| Waiting                  | F          | T                    | F       |","lastModifiedDate":"2023-04-07"},{"lineNumber":971,"author":{"gitId":"nichyjt"},"content":"| Paused                   | F          | F                    | F       |","lastModifiedDate":"2023-04-07"},{"lineNumber":972,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":973,"author":{"gitId":"nichyjt"},"content":"Truth table, where X denotes a \u0027dont care\u0027 condition","lastModifiedDate":"2023-04-07"},{"lineNumber":974,"author":{"gitId":"nichyjt"},"content":"where the truth value does not matter.","lastModifiedDate":"2023-04-07"},{"lineNumber":975,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":976,"author":{"gitId":"nichyjt"},"content":"From this, we can easily check which state we are in and execute/not execute commands as necessary.","lastModifiedDate":"2023-04-09"},{"lineNumber":977,"author":{"gitId":"nichyjt"},"content":"Referring to the class diagram, this is implemented on `Session` with 4 methods that help identify the state:","lastModifiedDate":"2023-04-09"},{"lineNumber":978,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":979,"author":{"gitId":"nichyjt"},"content":"Example implementation to check if Session is in `Counting` state:","lastModifiedDate":"2023-04-09"},{"lineNumber":980,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":981,"author":{"gitId":"nichyjt"},"content":"```java","lastModifiedDate":"2023-04-09"},{"lineNumber":982,"author":{"gitId":"nichyjt"},"content":"public boolean isSessionCounting(){","lastModifiedDate":"2023-04-07"},{"lineNumber":983,"author":{"gitId":"nichyjt"},"content":"        Countdown countdown\u003dgetCurrentCountdown();","lastModifiedDate":"2023-04-07"},{"lineNumber":984,"author":{"gitId":"nichyjt"},"content":"        return countdown.getIsRunning()\u0026\u0026!countdown.getIsCompletedCountdown();","lastModifiedDate":"2023-04-07"},{"lineNumber":985,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":986,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-04-07"},{"lineNumber":987,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":988,"author":{"gitId":"nichyjt"},"content":"**Easily Identify State**: Developers can hence trivially check if a command is in a valid state to be executed","lastModifiedDate":"2023-04-09"},{"lineNumber":989,"author":{"gitId":"nichyjt"},"content":"by using these 4 methods in `Session` to check which state the it is in:","lastModifiedDate":"2023-04-09"},{"lineNumber":990,"author":{"gitId":"nichyjt"},"content":"1. `isSessionReady()`  ","lastModifiedDate":"2023-04-09"},{"lineNumber":991,"author":{"gitId":"nichyjt"},"content":"2. `isSessionCounting()`  ","lastModifiedDate":"2023-04-09"},{"lineNumber":992,"author":{"gitId":"nichyjt"},"content":"3. `isSessionWaiting()`   ","lastModifiedDate":"2023-04-09"},{"lineNumber":993,"author":{"gitId":"nichyjt"},"content":"4. `isSessionPaused()`","lastModifiedDate":"2023-04-09"},{"lineNumber":994,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":995,"author":{"gitId":"YongbinWang"},"content":"\u003c!-- @@author YongbinWang --\u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":996,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":997,"author":{"gitId":"YongbinWang"},"content":"#### Commands","lastModifiedDate":"2023-04-07"},{"lineNumber":998,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":999,"author":{"gitId":"YongbinWang"},"content":"`StartCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1000,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1001,"author":{"gitId":"YongbinWang"},"content":"- Command format: `start`","lastModifiedDate":"2023-04-08"},{"lineNumber":1002,"author":{"gitId":"YongbinWang"},"content":"- Users can start the focus session and the first work countdown will begin.","lastModifiedDate":"2023-04-08"},{"lineNumber":1003,"author":{"gitId":"YongbinWang"},"content":"- `startTimer()` method in `Session` will begin the countdown.","lastModifiedDate":"2023-04-08"},{"lineNumber":1004,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1005,"author":{"gitId":"YongbinWang"},"content":"`CheckCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1006,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1007,"author":{"gitId":"YongbinWang"},"content":"- Command format: `check`","lastModifiedDate":"2023-04-08"},{"lineNumber":1008,"author":{"gitId":"YongbinWang"},"content":"- Users can check the time remaining in the current countdown.\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1009,"author":{"gitId":"YongbinWang"},"content":"- `getMinutes()` and `getSeconds()` method in `Countdown` is used to retrieve the current time remaining.","lastModifiedDate":"2023-04-08"},{"lineNumber":1010,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1011,"author":{"gitId":"YongbinWang"},"content":"`PauseCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1012,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1013,"author":{"gitId":"YongbinWang"},"content":"- Command format: `pause`","lastModifiedDate":"2023-04-08"},{"lineNumber":1014,"author":{"gitId":"YongbinWang"},"content":"- Users can pause the current timer if they wish to perform other tasks.\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1015,"author":{"gitId":"YongbinWang"},"content":"- `setPause()` method in `Countdown` is used to pause the current timer by setting the atomic boolean `isRunClock` to","lastModifiedDate":"2023-04-08"},{"lineNumber":1016,"author":{"gitId":"YongbinWang"},"content":"  false.","lastModifiedDate":"2023-04-08"},{"lineNumber":1017,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1018,"author":{"gitId":"YongbinWang"},"content":"`ResumeCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1019,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1020,"author":{"gitId":"YongbinWang"},"content":"- Command format: `resume`","lastModifiedDate":"2023-04-08"},{"lineNumber":1021,"author":{"gitId":"YongbinWang"},"content":"- Users can resume the current timer if they are ready to continue focusing.\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1022,"author":{"gitId":"YongbinWang"},"content":"- `setStart()` method in `Countdown` is used to resume the current timer by setting the atomic boolean `isRunClock` to","lastModifiedDate":"2023-04-08"},{"lineNumber":1023,"author":{"gitId":"YongbinWang"},"content":"  true.","lastModifiedDate":"2023-04-08"},{"lineNumber":1024,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1025,"author":{"gitId":"YongbinWang"},"content":"`NextCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1026,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1027,"author":{"gitId":"YongbinWang"},"content":"- Command format: `next`","lastModifiedDate":"2023-04-08"},{"lineNumber":1028,"author":{"gitId":"YongbinWang"},"content":"- Users can proceed to the next work or break countdown.\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1029,"author":{"gitId":"YongbinWang"},"content":"- `startTimer()` method in `Session` is used to start the next countdown.","lastModifiedDate":"2023-04-08"},{"lineNumber":1030,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1031,"author":{"gitId":"YongbinWang"},"content":"`StopCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1032,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1033,"author":{"gitId":"YongbinWang"},"content":"- Command format: `stop`","lastModifiedDate":"2023-04-08"},{"lineNumber":1034,"author":{"gitId":"YongbinWang"},"content":"- Users can add new habit to their habit list to track their progress.\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1035,"author":{"gitId":"YongbinWang"},"content":"- `addAtomicHabit()` method in `AtomicHabitList` will add the habit to the habit list.","lastModifiedDate":"2023-04-08"},{"lineNumber":1036,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1037,"author":{"gitId":"YongbinWang"},"content":"`ConfigCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1038,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1039,"author":{"gitId":"YongbinWang"},"content":"- Command format: `config [--cycle NUM_OF_CYCLE --work WORK_TIME --break BREAK_TIME --longbreak LONG_BREAK_TIME]`","lastModifiedDate":"2023-04-08"},{"lineNumber":1040,"author":{"gitId":"YongbinWang"},"content":"- Users can modify their session to their liking by setting","lastModifiedDate":"2023-04-08"},{"lineNumber":1041,"author":{"gitId":"YongbinWang"},"content":"  their own number of cycles, and length of the different timers.\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1042,"author":{"gitId":"YongbinWang"},"content":"- `setWork()`, `setBrk()`, `setLongBrk()`, and `setCycle()` method in `Session` is used to update the new values into","lastModifiedDate":"2023-04-08"},{"lineNumber":1043,"author":{"gitId":"YongbinWang"},"content":"  `work`, `brk`, `longBrk` and `cycle` attributes.","lastModifiedDate":"2023-04-08"},{"lineNumber":1044,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1045,"author":{"gitId":"YongbinWang"},"content":"`HelpCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1046,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1047,"author":{"gitId":"YongbinWang"},"content":"- Command format: `help [COMMAND_TO_CHECK]`","lastModifiedDate":"2023-04-08"},{"lineNumber":1048,"author":{"gitId":"YongbinWang"},"content":"- Every command class has public attributes `COMMAND_DESCRIPTION` and `COMMAND_USAGE`.","lastModifiedDate":"2023-04-08"},{"lineNumber":1049,"author":{"gitId":"YongbinWang"},"content":"- `printHelpMessage()` method in `HelpCommand` will retrieve and print these attributes.","lastModifiedDate":"2023-04-08"},{"lineNumber":1050,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1051,"author":{"gitId":"YongbinWang"},"content":"`HomeCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1052,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1053,"author":{"gitId":"YongbinWang"},"content":"- Command format: `home`","lastModifiedDate":"2023-04-08"},{"lineNumber":1054,"author":{"gitId":"YongbinWang"},"content":"- This command allows users to return back to the main WellNUS++ interface.","lastModifiedDate":"2023-04-08"},{"lineNumber":1055,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1056,"author":{"gitId":"YongbinWang"},"content":"\u003c!-- @@author --\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":1057,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1058,"author":{"gitId":"nichyjt"},"content":"# Appendix - Requirements","lastModifiedDate":"2023-04-09"},{"lineNumber":1059,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1060,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":1061,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1062,"author":{"gitId":"haoyangw"},"content":"### Product Name","lastModifiedDate":"2023-04-08"},{"lineNumber":1063,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1064,"author":{"gitId":"haoyangw"},"content":"**WellNUS++**","lastModifiedDate":"2023-04-08"},{"lineNumber":1065,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1066,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":1067,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1068,"author":{"gitId":"wenxin-c"},"content":"* NUS Computing and Engineering students","lastModifiedDate":"2023-03-20"},{"lineNumber":1069,"author":{"gitId":"wenxin-c"},"content":"* Spend lots of time coding on their IDE and type relatively fast","lastModifiedDate":"2023-03-20"},{"lineNumber":1070,"author":{"gitId":"wenxin-c"},"content":"* Have to regularly use digital gadgets and Internet for their courses","lastModifiedDate":"2023-03-20"},{"lineNumber":1071,"author":{"gitId":"wenxin-c"},"content":"* Very familiar with command line interfaces","lastModifiedDate":"2023-03-20"},{"lineNumber":1072,"author":{"gitId":"wenxin-c"},"content":"* Stressed about academy and many others","lastModifiedDate":"2023-03-20"},{"lineNumber":1073,"author":{"gitId":"wenxin-c"},"content":"* Busy with work and drowning in deadlines","lastModifiedDate":"2023-03-20"},{"lineNumber":1074,"author":{"gitId":"wenxin-c"},"content":"* Wants to improve their wellness","lastModifiedDate":"2023-03-20"},{"lineNumber":1075,"author":{"gitId":"wenxin-c"},"content":"* Sometimes unmotivated with short attention span","lastModifiedDate":"2023-03-20"},{"lineNumber":1076,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":1077,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":1078,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1079,"author":{"gitId":"wenxin-c"},"content":"NUS Computing and Engineering students are often busy with work and sometimes will neglect their wellness. This app aims","lastModifiedDate":"2023-03-20"},{"lineNumber":1080,"author":{"gitId":"nichyjt"},"content":"to help NUS Computing and Engineering students improve their overall wellness by encouraging the **cultivation of","lastModifiedDate":"2023-03-22"},{"lineNumber":1081,"author":{"gitId":"nichyjt"},"content":"meaningful","lastModifiedDate":"2023-03-22"},{"lineNumber":1082,"author":{"gitId":"wenxin-c"},"content":"atomic habits**, **practice of self reflection** and **usage of offline timer to stay focused**. By using this app,","lastModifiedDate":"2023-03-20"},{"lineNumber":1083,"author":{"gitId":"wenxin-c"},"content":"we hope users will be more aware of the healthiness of their daily life and take actions to improve their wellness.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1084,"author":{"gitId":"wenxin-c"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1085,"author":{"gitId":"wenxin-c"},"content":"WellNUS++ is a CLI app, primarily due to the following reasons:","lastModifiedDate":"2023-03-20"},{"lineNumber":1086,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1087,"author":{"gitId":"wenxin-c"},"content":"* Computing students generally type fast and prefer typing to mouse due to their daily coding routines.","lastModifiedDate":"2023-03-20"},{"lineNumber":1088,"author":{"gitId":"wenxin-c"},"content":"* Due to the data heavy nature and personalised user input of this app, typing will be preferred to clicking.","lastModifiedDate":"2023-03-20"},{"lineNumber":1089,"author":{"gitId":"wenxin-c"},"content":"* In particular, our application is built to reduce context switching. Users can launch the application from the comfort","lastModifiedDate":"2023-03-20"},{"lineNumber":1090,"author":{"gitId":"wenxin-c"},"content":"  of their favourite IDE’s terminal to reduce disruption to their daily coding lives.","lastModifiedDate":"2023-03-20"},{"lineNumber":1091,"author":{"gitId":"wenxin-c"},"content":"* Instead of using electronics with fancy GUI, this CLI app gives computing students an opportunity to minimise digital","lastModifiedDate":"2023-03-20"},{"lineNumber":1092,"author":{"gitId":"wenxin-c"},"content":"  interaction which will be beneficial for their wellness.","lastModifiedDate":"2023-03-20"},{"lineNumber":1093,"author":{"gitId":"wenxin-c"},"content":"* The app is gamified to make it more attractive for students to use. Levels and micro-goals incentivise our","lastModifiedDate":"2023-03-20"},{"lineNumber":1094,"author":{"gitId":"wenxin-c"},"content":"  users to keep using the app’s features, allowing them to focus on their work and achieve wellness.","lastModifiedDate":"2023-03-20"},{"lineNumber":1095,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":1096,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":1097,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":1098,"author":{"gitId":"-"},"content":"| Version | As a ...                                           | I want to ...                                               | So that I can ...                                  |","lastModifiedDate":"2020-05-24"},{"lineNumber":1099,"author":{"gitId":"wenxin-c"},"content":"|---------|----------------------------------------------------|-------------------------------------------------------------|----------------------------------------------------|","lastModifiedDate":"2023-03-22"},{"lineNumber":1100,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who prefers typing over clicking | I can use keyboard instead of mouse                         | I can use the app efficiently                      |","lastModifiedDate":"2023-03-20"},{"lineNumber":1101,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who is too used to the Internet  | Reduce my browsing and information overload                 | I can improve my attention span                    |","lastModifiedDate":"2023-03-20"},{"lineNumber":1102,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Reflective student                                 | I can get one introspective question on-demand              | I can reflect and grow emotionally at my own pace  |","lastModifiedDate":"2023-03-20"},{"lineNumber":1103,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who wishes to improve lifestyle  | I can add an atomic habit to track                          | I can start the process of inculcating a new habit |","lastModifiedDate":"2023-03-22"},{"lineNumber":1104,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who wishes to improve lifestyle  | I can view all my atomic habits                             | I can keep track of my self-improvement progress   |","lastModifiedDate":"2023-03-22"},{"lineNumber":1105,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who wishes to improve lifestyle  | I can update my atomic habits                               | I can adjust the habits based on my progress       |","lastModifiedDate":"2023-03-22"},{"lineNumber":1106,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | Reflective student                                 | I can mark introspective questions that I resonate with     | I can reflect using my favourite questions         |","lastModifiedDate":"2023-03-22"},{"lineNumber":1107,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | Reflective student                                 | I can get the previous questions I viewed                   | I can re-view these questions                      |","lastModifiedDate":"2023-03-22"},{"lineNumber":1108,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | Easily distracted computing student                | I want to start a timer to keep track of time spent on work | I can do timed-practice                            |","lastModifiedDate":"2023-03-22"},{"lineNumber":1109,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | Easily distracted computing student                | I want to check the time                                    | I can keep track of my pace                        |","lastModifiedDate":"2023-03-22"},{"lineNumber":1110,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | A regular WellNUS++ user                           | I wish to have my information stored in the app             | I can re-view my past data                         |","lastModifiedDate":"2023-03-22"},{"lineNumber":1111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":1112,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":1113,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1114,"author":{"gitId":"wenxin-c"},"content":"1. Should work on any mainstream OS as long as it has Java 11 or above installed.","lastModifiedDate":"2023-03-20"},{"lineNumber":1115,"author":{"gitId":"wenxin-c"},"content":"2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should","lastModifiedDate":"2023-03-20"},{"lineNumber":1116,"author":{"gitId":"wenxin-c"},"content":"   be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2023-03-20"},{"lineNumber":1117,"author":{"gitId":"nichyjt"},"content":"3. A user","lastModifiedDate":"2023-04-09"},{"lineNumber":1118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":1119,"author":{"gitId":"nichyjt"},"content":"\u003c!-- @@author nichyjt --\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":1120,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1121,"author":{"gitId":"nichyjt"},"content":"## Glossary","lastModifiedDate":"2020-05-24"},{"lineNumber":1122,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1123,"author":{"gitId":"nichyjt"},"content":"* *glossary item* - Definition","lastModifiedDate":"2020-05-24"},{"lineNumber":1124,"author":{"gitId":"nichyjt"},"content":"* **Mainstream OS**: Windows, Linux, Unix, macOS","lastModifiedDate":"2023-04-08"},{"lineNumber":1125,"author":{"gitId":"nichyjt"},"content":"* **Main Command**: The first WORD that a user types in. `e.g. reflect, exit`","lastModifiedDate":"2023-03-22"},{"lineNumber":1126,"author":{"gitId":"nichyjt"},"content":"* **Argument**: A word that is a parameter to a `Main Command` and is prefixed by ` --`. `e.g. --id, --name`","lastModifiedDate":"2023-03-22"},{"lineNumber":1127,"author":{"gitId":"nichyjt"},"content":"* **Payload**: An (optional) arbitrary sequence of characters immediately following a main command or argument.","lastModifiedDate":"2023-03-22"},{"lineNumber":1128,"author":{"gitId":"nichyjt"},"content":"  The payload will terminate when the user clicks `enter` or separates the payload with another argument","lastModifiedDate":"2023-03-22"},{"lineNumber":1129,"author":{"gitId":"nichyjt"},"content":"  with the `--` delimiter.","lastModifiedDate":"2023-03-22"},{"lineNumber":1130,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":1131,"author":{"gitId":"nichyjt"},"content":"# Appendix - Instructions for manual testing","lastModifiedDate":"2023-04-09"},{"lineNumber":1132,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1133,"author":{"gitId":"nichyjt"},"content":"## Launch","lastModifiedDate":"2023-04-08"},{"lineNumber":1134,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1135,"author":{"gitId":"nichyjt"},"content":"1. Ensure you have Java 11 or above installed in your Computer.","lastModifiedDate":"2023-03-20"},{"lineNumber":1136,"author":{"gitId":"nichyjt"},"content":"2. Download the latest `wellnus.jar` from here.","lastModifiedDate":"2023-03-20"},{"lineNumber":1137,"author":{"gitId":"nichyjt"},"content":"3. Copy the file to the folder you want to use as the home folder for your WellNUS++.","lastModifiedDate":"2023-03-20"},{"lineNumber":1138,"author":{"gitId":"nichyjt"},"content":"4. Open a command terminal, cd into the folder you put the `wellnus.jar` file in, and use the `java -jar wellnus.jar`","lastModifiedDate":"2023-03-20"},{"lineNumber":1139,"author":{"gitId":"nichyjt"},"content":"   command to run the application. A CLI should appear in a few seconds.","lastModifiedDate":"2023-03-20"},{"lineNumber":1140,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":1141,"author":{"gitId":"nichyjt"},"content":"## Sample test cases","lastModifiedDate":"2023-04-08"},{"lineNumber":1142,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1143,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- @@author wenxin-c --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1144,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1145,"author":{"gitId":"wenxin-c"},"content":"### Help command","lastModifiedDate":"2023-04-08"},{"lineNumber":1146,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1147,"author":{"gitId":"wenxin-c"},"content":"1. Make sure you are in the main interface, but individual features(i.e. hb, reflect and timer)","lastModifiedDate":"2023-03-20"},{"lineNumber":1148,"author":{"gitId":"wenxin-c"},"content":"2. Test case: `help`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1149,"author":{"gitId":"wenxin-c"},"content":"   Expected output: a list of commands with their usage","lastModifiedDate":"2023-03-20"},{"lineNumber":1150,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":1151,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1152,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1153,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1154,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":1155,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1156,"author":{"gitId":"wenxin-c"},"content":"    We are here to ensure your wellness is taken care of through WellNUS++","lastModifiedDate":"2023-03-20"},{"lineNumber":1157,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1158,"author":{"gitId":"wenxin-c"},"content":"Here are all the commands available for you!","lastModifiedDate":"2023-03-20"},{"lineNumber":1159,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":1160,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":1161,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1162,"author":{"gitId":"wenxin-c"},"content":"    1. hb - Enter Atomic Habits: Track your small daily habits and nurture it to form a larger behaviour","lastModifiedDate":"2023-03-20"},{"lineNumber":1163,"author":{"gitId":"wenxin-c"},"content":"    usage: hb","lastModifiedDate":"2023-03-20"},{"lineNumber":1164,"author":{"gitId":"wenxin-c"},"content":"    2. reflect - Read through introspective questions for your reflection","lastModifiedDate":"2023-03-20"},{"lineNumber":1165,"author":{"gitId":"wenxin-c"},"content":"    usage: reflect","lastModifiedDate":"2023-03-20"},{"lineNumber":1166,"author":{"gitId":"wenxin-c"},"content":"    3. exit - Exit WellNUS++","lastModifiedDate":"2023-03-20"},{"lineNumber":1167,"author":{"gitId":"wenxin-c"},"content":"    usage: exit","lastModifiedDate":"2023-03-20"},{"lineNumber":1168,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1169,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":1170,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1171,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1172,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1173,"author":{"gitId":"wenxin-c"},"content":"3. Test case: `help me`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1174,"author":{"gitId":"wenxin-c"},"content":"   Expected output: the list of commands will not be generated as it is an invalid command\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1175,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":1176,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1177,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1178,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1179,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":1180,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1181,"author":{"gitId":"wenxin-c"},"content":"    help does not take in any arguments!","lastModifiedDate":"2023-03-20"},{"lineNumber":1182,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1183,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":1184,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1185,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1186,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1187,"author":{"gitId":"wenxin-c"},"content":"4. To get a list of available commands, any command other than `help` is invalid","lastModifiedDate":"2023-03-20"},{"lineNumber":1188,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":1189,"author":{"gitId":"wenxin-c"},"content":"### Get reflection questions","lastModifiedDate":"2023-04-08"},{"lineNumber":1190,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1191,"author":{"gitId":"wenxin-c"},"content":"1. Make sure you are inside **Self Reflection** feature by enter `reflect` command after the launch of the program","lastModifiedDate":"2023-03-20"},{"lineNumber":1192,"author":{"gitId":"wenxin-c"},"content":"2. Test case: `get`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1193,"author":{"gitId":"wenxin-c"},"content":"   Expected output: get a set of 5 random introspective questions\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1194,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":1195,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1196,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1197,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1198,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-20"},{"lineNumber":1199,"author":{"gitId":"wenxin-c"},"content":"1.What is my purpose in life?","lastModifiedDate":"2023-03-20"},{"lineNumber":1200,"author":{"gitId":"wenxin-c"},"content":"2.What is my personality type?","lastModifiedDate":"2023-03-20"},{"lineNumber":1201,"author":{"gitId":"wenxin-c"},"content":"3.Did I make time for myself this week?","lastModifiedDate":"2023-03-20"},{"lineNumber":1202,"author":{"gitId":"wenxin-c"},"content":"4.What scares me the most right now?","lastModifiedDate":"2023-03-20"},{"lineNumber":1203,"author":{"gitId":"wenxin-c"},"content":"5.When is the last time I gave back to others?","lastModifiedDate":"2023-03-20"},{"lineNumber":1204,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-20"},{"lineNumber":1205,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1206,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1207,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1208,"author":{"gitId":"wenxin-c"},"content":"3. Test case: `get reflect`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1209,"author":{"gitId":"wenxin-c"},"content":"   Expected output: introspective questions will not be generated as this is an invalid command. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1210,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":1211,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1212,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1213,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1214,"author":{"gitId":"wenxin-c"},"content":"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!","lastModifiedDate":"2023-03-20"},{"lineNumber":1215,"author":{"gitId":"wenxin-c"},"content":"Error Message:","lastModifiedDate":"2023-03-20"},{"lineNumber":1216,"author":{"gitId":"wenxin-c"},"content":"Command is invalid.","lastModifiedDate":"2023-03-20"},{"lineNumber":1217,"author":{"gitId":"wenxin-c"},"content":"Note:","lastModifiedDate":"2023-03-20"},{"lineNumber":1218,"author":{"gitId":"wenxin-c"},"content":"Please check the available commands and the format of commands.","lastModifiedDate":"2023-03-20"},{"lineNumber":1219,"author":{"gitId":"wenxin-c"},"content":"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!","lastModifiedDate":"2023-03-20"},{"lineNumber":1220,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1221,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1222,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1223,"author":{"gitId":"wenxin-c"},"content":"4. Any command other than `get` is invalid","lastModifiedDate":"2023-03-20"},{"lineNumber":1224,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":1225,"author":{"gitId":"wenxin-c"},"content":"### Add atomic habits","lastModifiedDate":"2023-04-08"},{"lineNumber":1226,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1227,"author":{"gitId":"wenxin-c"},"content":"1. Make sure you are inside **Atomic habit** feature by enter `hb` command after the launch of the program","lastModifiedDate":"2023-03-20"},{"lineNumber":1228,"author":{"gitId":"wenxin-c"},"content":"2. Test case: `add --name make bed every morning`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1229,"author":{"gitId":"wenxin-c"},"content":"   Expected output: a new atomic habit is successfully added\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1230,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":1231,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1232,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1233,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1234,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":1235,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1236,"author":{"gitId":"wenxin-c"},"content":"    Yay! You have added a new habit:","lastModifiedDate":"2023-03-20"},{"lineNumber":1237,"author":{"gitId":"wenxin-c"},"content":"    \u0027make bed every morning\u0027 was successfully added","lastModifiedDate":"2023-03-20"},{"lineNumber":1238,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1239,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":1240,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1241,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1242,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1243,"author":{"gitId":"wenxin-c"},"content":"3. Test case: `add name make bed every morning`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1244,"author":{"gitId":"wenxin-c"},"content":"   Expected output: the atomic habit will not be added in as this is an invalid command\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":1245,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":1246,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1247,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1248,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1249,"author":{"gitId":"wenxin-c"},"content":"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!","lastModifiedDate":"2023-03-20"},{"lineNumber":1250,"author":{"gitId":"wenxin-c"},"content":"Error Message:","lastModifiedDate":"2023-03-20"},{"lineNumber":1251,"author":{"gitId":"wenxin-c"},"content":"Wrong arguments given to \u0027add\u0027!","lastModifiedDate":"2023-03-20"},{"lineNumber":1252,"author":{"gitId":"wenxin-c"},"content":"Note:","lastModifiedDate":"2023-03-20"},{"lineNumber":1253,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":1254,"author":{"gitId":"wenxin-c"},"content":"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!","lastModifiedDate":"2023-03-20"},{"lineNumber":1255,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":1256,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":1257,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":1258,"author":{"gitId":"wenxin-c"},"content":"4. Any commands that does not follow the format of `add --name ATOMIC_HABIT_NAME` is invalid","lastModifiedDate":"2023-03-20"},{"lineNumber":1259,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1260,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- @@author --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":1262,"author":{"gitId":"haoyangw"},"content":"\u003c!-- @@author haoyangw --\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":1263,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1264,"author":{"gitId":"haoyangw"},"content":"## Saving data","lastModifiedDate":"2023-04-08"},{"lineNumber":1265,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1266,"author":{"gitId":"haoyangw"},"content":"1. Dealing with missing data files","lastModifiedDate":"2023-04-08"},{"lineNumber":1267,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1268,"author":{"gitId":"haoyangw"},"content":"* Ensure data files are created: Add a new atomic habit using the `add --name Test data file` command in the `hb`","lastModifiedDate":"2023-04-08"},{"lineNumber":1269,"author":{"gitId":"haoyangw"},"content":"  session","lastModifiedDate":"2023-04-08"},{"lineNumber":1270,"author":{"gitId":"haoyangw"},"content":"* Quit `WellNUS++`: Issue `home` command in the `hb` session followed by `exit` command in the `main` session","lastModifiedDate":"2023-04-08"},{"lineNumber":1271,"author":{"gitId":"haoyangw"},"content":"* Delete data files: Delete the `data` folder created in the same folder as the `WellNUS++` jar file you just executed","lastModifiedDate":"2023-04-08"},{"lineNumber":1272,"author":{"gitId":"haoyangw"},"content":"* Relaunch `WellNUS++`: Run the `WellNUS++` jar file, issue `hb` command and then issue `list` command. Verify that no","lastModifiedDate":"2023-04-08"},{"lineNumber":1273,"author":{"gitId":"haoyangw"},"content":"  atomic habits are now recorded, i.e. `WellNUS++` should output:","lastModifiedDate":"2023-04-08"},{"lineNumber":1274,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1275,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-04-08"},{"lineNumber":1276,"author":{"gitId":"haoyangw"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":1277,"author":{"gitId":"haoyangw"},"content":"    You have no habits in your list!","lastModifiedDate":"2023-04-08"},{"lineNumber":1278,"author":{"gitId":"haoyangw"},"content":"    Start adding some habits by using \u0027add\u0027!","lastModifiedDate":"2023-04-08"},{"lineNumber":1279,"author":{"gitId":"haoyangw"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":1280,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-04-08"},{"lineNumber":1281,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1282,"author":{"gitId":"haoyangw"},"content":"2. Dealing with corrupted data files","lastModifiedDate":"2023-04-08"},{"lineNumber":1283,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1284,"author":{"gitId":"haoyangw"},"content":"* Quit `WellNUS++`","lastModifiedDate":"2023-04-08"},{"lineNumber":1285,"author":{"gitId":"haoyangw"},"content":"* Open the `data/habit.txt` file located in the same directory as the `WellNUS++` jar file","lastModifiedDate":"2023-04-08"},{"lineNumber":1286,"author":{"gitId":"haoyangw"},"content":"* Replace the contents of the `habit.txt` file with the following lines:","lastModifiedDate":"2023-04-08"},{"lineNumber":1287,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1288,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-04-08"},{"lineNumber":1289,"author":{"gitId":"haoyangw"},"content":"--description Valid atomic habit --count 1 --","lastModifiedDate":"2023-04-08"},{"lineNumber":1290,"author":{"gitId":"haoyangw"},"content":"--corrupted Data --test to be ignored --","lastModifiedDate":"2023-04-08"},{"lineNumber":1291,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-04-08"},{"lineNumber":1292,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1293,"author":{"gitId":"haoyangw"},"content":"* Run the `WellNUS++` jar file","lastModifiedDate":"2023-04-08"},{"lineNumber":1294,"author":{"gitId":"haoyangw"},"content":"* View the saved atomic habits: Issue `hb` followed by `list`. Expected output should be:","lastModifiedDate":"2023-04-08"},{"lineNumber":1295,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1296,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-04-08"},{"lineNumber":1297,"author":{"gitId":"haoyangw"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":1298,"author":{"gitId":"haoyangw"},"content":"    You have no habits in your list!","lastModifiedDate":"2023-04-08"},{"lineNumber":1299,"author":{"gitId":"haoyangw"},"content":"    Start adding some habits by using \u0027add\u0027!","lastModifiedDate":"2023-04-08"},{"lineNumber":1300,"author":{"gitId":"haoyangw"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":1301,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-04-08"},{"lineNumber":1302,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1303,"author":{"gitId":"haoyangw"},"content":"* Explanation: Upon relaunch, `WellNUS++` detected the invalid line `--corrupted Data --test to be ignored --` and","lastModifiedDate":"2023-04-08"},{"lineNumber":1304,"author":{"gitId":"haoyangw"},"content":"  cleaned the contents of the data file, leaving no atomic habits recorded","lastModifiedDate":"2023-04-08"},{"lineNumber":1305,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":1306,"author":{"gitId":"haoyangw"},"content":"\u003c!-- @@author --\u003e","lastModifiedDate":"2023-04-08"}],"authorContributionMap":{"wenxin-c":421,"BernardLesley":51,"haoyangw":276,"-":15,"nichyjt":357,"YongbinWang":186}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"# WellNUS++","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"WellNUS++ is a Command Line Interface(CLI) app for NUS Computing students to keep track and improve their physical and","lastModifiedDate":"2023-04-07"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"mental wellness in various aspects. If you can type fast, WellNUS++ can update their wellness progress faster than","lastModifiedDate":"2023-04-07"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"traditional Graphical User Interface(GUI) apps.","lastModifiedDate":"2023-04-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"wenxin-c":4,"-":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"# WellNUS++ User Guide","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":",--.   ,--.       ,--.,--.,--.  ,--.,--. ,--. ,---.     |  |        |  |     ","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"|  |   |  | ,---. |  ||  ||  ,\u0027.|  ||  | |  |\u0027   .-\u0027,---|  |---.,---|  |---. ","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"|  |.\u0027.|  || .-. :|  ||  ||  |\u0027 \u0027  ||  | |  |`.  `-.\u0027---|  |---\u0027\u0027---|  |---\u0027 ","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"|   ,\u0027.   |\\\\  --.|  ||  ||  | `   |\u0027  \u0027-\u0027  \u0027.-\u0027    |   |  |        |  |     ","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"\u0027--\u0027   \u0027--\u0027 `----\u0027`--\u0027`--\u0027`--\u0027  `--\u0027 `-----\u0027 `-----\u0027    `--\u0027        `--\u0027     ","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"# Introduction","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"WellNUS++ is a **Command Line Interface(CLI) app** for **NUS Computing students** to keep track of and improve their","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"**physical and mental wellness** in various aspects. If you can type fast, WellNUS++ can update your wellness progress","lastModifiedDate":"2023-04-06"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"faster than traditional Graphical User Interface(GUI) apps.","lastModifiedDate":"2023-04-06"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"# Table of Contents","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- TOC --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"* [WellNUS++ User Guide](#wellnus-user-guide)","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"* [Introduction](#introduction)","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"* [Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"* [Quick Start](#quick-start)","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"* [Overview of WellNUS++](#overview-of-wellnus)","lastModifiedDate":"2023-04-05"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"* [Features](#features)","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    * [Command Format](#command-format)","lastModifiedDate":"2023-03-31"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    * [`help` - Viewing WellNUS++ Help](#help---viewing-wellnus-help)","lastModifiedDate":"2023-04-06"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    * [Accessing feature using FEATURE_NAME](#accessing-feature-using-featurename)","lastModifiedDate":"2023-04-06"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    * [`hb` - Accessing atomic habit feature](#hb---accessing-atomic-habit-feature)","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        * [`add` - Add new atomic habit](#add---add-new-atomic-habit)","lastModifiedDate":"2023-04-06"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"        * [`list` - List all atomic habit](#list---list-all-atomic-habit)","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"        * [`update` - Update an atomic habit](#update---update-an-atomic-habit)","lastModifiedDate":"2023-04-06"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"        * [`delete` - Delete an atomic habit](#delete---delete-an-atomic-habit)","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        * [`help` - Viewing Atomic Habit Help](#help---viewing-atomic-habit-help)","lastModifiedDate":"2023-04-06"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    * [`gamif` - Accessing gamification feature](#gamif---accessing-gamification-feature)","lastModifiedDate":"2023-04-06"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        * [`stats` - Gamification statistics](#stats---gamification-statistics)","lastModifiedDate":"2023-04-06"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        * [`help` - Viewing Gamification Help](#help---viewing-gamification-help)","lastModifiedDate":"2023-04-06"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    * [`reflect` - Accessing self reflection feature](#reflect---accessing-self-reflection-feature)","lastModifiedDate":"2023-04-06"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        * [`get` - Get reflection questions](#get---get-reflection-questions)","lastModifiedDate":"2023-04-06"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        * [`like` - Add reflection question into favorite list](#like---add-reflection-question-into-favorite-list)","lastModifiedDate":"2023-04-06"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"        * [`fav` - View favorite list](#fav---view-favorite-list)","lastModifiedDate":"2023-04-06"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        * [`unlike` - Remove questions from favorite list](#unlike---remove-questions-from-favorite-list)","lastModifiedDate":"2023-04-06"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        * [`prev` - Get the previous set of reflection questions generated](#prev---get-the-previous-set-of-reflection-questions-generated)","lastModifiedDate":"2023-04-06"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"        * [`help` - Viewing Reflection Help](#help---viewing-reflection-help)","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    * [`ft` - Accessing Focus Timer Feature](#ft---accessing-focus-timer-feature)","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"        * [`start` - Start Session](#start---start-session)","lastModifiedDate":"2023-04-06"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"        * [`pause` - Pause session](#pause---pause-session)","lastModifiedDate":"2023-04-06"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"        * [`resume` - Resume session](#resume---resume-session)","lastModifiedDate":"2023-04-06"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"        * [`check` - Check time](#check---check-time)","lastModifiedDate":"2023-04-06"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"        * [`next` - Next timer](#next---next-timer)","lastModifiedDate":"2023-04-06"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"        * [`stop` - Stop session](#stop---stop-session)","lastModifiedDate":"2023-04-06"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"        * [`help` - Viewing Focus Timer help](#help---viewing-focus-timer-help)","lastModifiedDate":"2023-04-06"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"        * [`config` - Configure the Timer](#config---configure-the-timer)","lastModifiedDate":"2023-04-06"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    * [`home` - Return back main WellNUS++](#home---return-back-main-wellnus)","lastModifiedDate":"2023-04-06"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    * [`exit` - Exit WellNUS++](#exit---exit-wellnus)","lastModifiedDate":"2023-04-06"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"    * [FAQ](#faq)","lastModifiedDate":"2023-03-31"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"    * [Command Summary](#command-summary)","lastModifiedDate":"2023-03-31"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- TOC --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"# Quick Start","lastModifiedDate":"2023-04-06"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"1. Ensure you have Java 11 or above installed in your Computer.","lastModifiedDate":"2023-03-31"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"2. Download the latest CS2113-T12-4-WellNUS.jar","lastModifiedDate":"2023-04-06"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"   from [here](https://github.com/AY2223S2-CS2113-T12-4/tp/releases/latest).","lastModifiedDate":"2023-03-31"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"3. Copy the file to the folder you want to use as the home folder for your WellNUS++.","lastModifiedDate":"2023-03-31"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"4. Open a command terminal, cd into the folder you put the .jar file in, and use","lastModifiedDate":"2023-03-31"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"   the `java -jar CS2113-T12-4-WellNUS.jar`","lastModifiedDate":"2023-04-05"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"   command to run the application. A CLI should appear in a few seconds (shown below).","lastModifiedDate":"2023-03-31"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"    Very good day to you! Welcome to","lastModifiedDate":"2023-03-31"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"    ","lastModifiedDate":"2023-03-31"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"    ,--.   ,--.       ,--.,--.,--.  ,--.,--. ,--. ,---.     |  |        |  |","lastModifiedDate":"2023-03-31"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"    |  |   |  | ,---. |  ||  ||  ,\u0027.|  ||  | |  |\u0027   .-\u0027,---|  |---.,---|  |---.","lastModifiedDate":"2023-03-31"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"    |  |.\u0027.|  || .-. :|  ||  ||  |\u0027 \u0027  ||  | |  |`.  `-.\u0027---|  |---\u0027\u0027---|  |---\u0027","lastModifiedDate":"2023-03-31"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"    |   ,\u0027.   |\\   --.|  ||  ||  | `   |\u0027  \u0027-\u0027  \u0027.-\u0027    |   |  |        |  |","lastModifiedDate":"2023-03-31"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"    \u0027--\u0027   \u0027--\u0027 `----\u0027`--\u0027`--\u0027`--\u0027  `--\u0027 `-----\u0027 `-----\u0027    `--\u0027        `--\u0027","lastModifiedDate":"2023-03-31"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"    Enter a command to start using WellNUS++! Try \u0027help\u0027 if you\u0027re new, or just unsure.","lastModifiedDate":"2023-03-31"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"5. You are now in the `main` session of `WellNUS+`. Access our features by issuing a feature command(described in later ","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"sections). Issue the `help` command to see the list of feature commands available.","lastModifiedDate":"2023-04-09"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"# Overview of WellNUS++","lastModifiedDate":"2023-04-06"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"WellNUS++ comes with a variety of features to help you enhance your overall wellness in NUS! The features are Atomic","lastModifiedDate":"2023-04-05"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"Habit, Self Reflection, Focus Timer and Gamification.","lastModifiedDate":"2023-04-09"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"![WellNUS++ Structure Overview](diagrams/WellNusStructure.png)\u003cbr/\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"Upon running our application jar, users first start in the `main` session. From here, users can navigate to different ","lastModifiedDate":"2023-04-09"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"features using the commands `hb`, `ft`, `reflect` and `gamif`, which takes them to the feature-specific session(see ","lastModifiedDate":"2023-04-09"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"later sections for details about each feature session).","lastModifiedDate":"2023-04-09"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"Each feature session provides its own set of commands for users to explore. Return to the `main` session","lastModifiedDate":"2023-04-09"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"using the `home` command. ","lastModifiedDate":"2023-04-09"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"Issue `help` in any session to find out what commands are available to you.","lastModifiedDate":"2023-04-09"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"Exit `WellNUS++` by issuing the `exit` command(**only** available in the `main` session).","lastModifiedDate":"2023-04-09"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"# Features","lastModifiedDate":"2023-04-06"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"\u003c!-- @@author nichyjt --\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"## Command Format","lastModifiedDate":"2023-04-06"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"A command has the general structure:","lastModifiedDate":"2023-04-09"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-04-09"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"mainCommand PAYLOAD_0 --argument1 PAYLOAD_1 --argument2 PAYLOAD_2","lastModifiedDate":"2023-04-09"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-04-09"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"Command syntax:","lastModifiedDate":"2023-04-09"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"* Words in **UPPER_CASE** are the payloads to be supplied by the user.  ","lastModifiedDate":"2023-04-09"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"  e.g. in `add --name NAME`, `NAME` is a parameter which can be used in this way: `add --name John Doe`","lastModifiedDate":"2023-04-06"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"* Items in square brackets are **optional**.  ","lastModifiedDate":"2023-04-09"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"  e.g in `add --name NAME  [--tag TAG]`, the command can be used in two ways:","lastModifiedDate":"2023-04-09"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"    * `add --name John Doe --tag friend`, or","lastModifiedDate":"2023-04-09"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"    * `add --name John Doe`","lastModifiedDate":"2023-04-09"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"    * Payloads may also be optional if they are wrapped in `[]`","lastModifiedDate":"2023-04-09"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"* Arguments can be in any order.  ","lastModifiedDate":"2023-04-09"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"  e.g. Consider `--name NAME --phone PHONE_NUMBER`.  ","lastModifiedDate":"2023-04-09"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"  `--phone PHONE_NUMBER --name NAME` is a valid set of arguments.","lastModifiedDate":"2023-04-09"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"* The `mainCommand` and `argument` are case insensitive.  ","lastModifiedDate":"2023-04-09"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"  e.g. `aDD --nAmE NAME` is equivalent to `add --name NAME`","lastModifiedDate":"2023-04-09"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- @@author BernardLesley --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"## `help` - Viewing WellNUS++ Help","lastModifiedDate":"2023-04-06"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"Lists all commands available and provide a short description of the application.","lastModifiedDate":"2023-04-05"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"Format: `help [COMMAND_TO_CHECK]`","lastModifiedDate":"2023-04-05"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"* List all commands available in the app and a short description of the app(`help` with no arguments given)","lastModifiedDate":"2023-04-09"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"* Give a detailed explanation of the parameters and subcommands for the given command `COMMAND_TO_CHECK`","lastModifiedDate":"2023-04-09"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"Example of usage 1:","lastModifiedDate":"2023-03-31"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"`help`","lastModifiedDate":"2023-03-31"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"    WellNUS++ is a Command Line Interface (CLI) app for you to keep track, manage and improve your physical and mental wellness.","lastModifiedDate":"2023-03-31"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"    Input `help` to see all available commands.","lastModifiedDate":"2023-03-31"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"    Input `help [command-to-check]` to get usage help for a specific command.","lastModifiedDate":"2023-03-31"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"    Here are all the commands available for you!","lastModifiedDate":"2023-03-31"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"    ","lastModifiedDate":"2023-03-31"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"    1. hb - Atomic Habits - Track and manage your habits with our suite of tools to help you grow and nurture a better you!","lastModifiedDate":"2023-04-09"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"    2. reflect - Self Reflection - Take some time to pause and reflect with our specially curated list of questions and reflection management tools.","lastModifiedDate":"2023-04-09"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"    3. ft - Focus Timer - Set a configurable \u0027Pomodoro\u0027 timer with work and rest cycles to keep yourself focused and productive!","lastModifiedDate":"2023-04-09"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"    4. gamif - Gamification - Gamification gives you the motivation to continue improving your wellness by rewarding you for your efforts!","lastModifiedDate":"2023-04-09"},{"lineNumber":165,"author":{"gitId":"BernardLesley"},"content":"    5. exit - Close WellNUS++ and return to your terminal.","lastModifiedDate":"2023-03-31"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"    6. help - Get help on what commands can be used in WellNUS++.","lastModifiedDate":"2023-03-31"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"Example of usage 2:","lastModifiedDate":"2023-03-31"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"`help hb`","lastModifiedDate":"2023-03-31"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":174,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"    hb - Atomic Habits - Track and manage your habits with our suite of tools to help you grow and nurture a better you!","lastModifiedDate":"2023-04-09"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"    usage: hb","lastModifiedDate":"2023-03-31"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":181,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":182,"author":{"gitId":"BernardLesley"},"content":"Other feature-specific `help` commands and their expected outputs can be found in the respective sections below.","lastModifiedDate":"2023-04-09"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- @@author wenxin-c --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"## Accessing feature using FEATURE_NAME","lastModifiedDate":"2023-04-06"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":187,"author":{"gitId":"wenxin-c"},"content":"Access specific feature from main interface by inputting the `FEATURE_NAME`. \u003cbr\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":188,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":189,"author":{"gitId":"wenxin-c"},"content":"Feature name can be referenced by calling the help command.","lastModifiedDate":"2023-04-05"},{"lineNumber":190,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":191,"author":{"gitId":"wenxin-c"},"content":"Take note that users are only allowed to access features from the main session (i.e. `hb`, `reflect`, `ft` and `gamif`","lastModifiedDate":"2023-04-08"},{"lineNumber":192,"author":{"gitId":"wenxin-c"},"content":"are","lastModifiedDate":"2023-04-08"},{"lineNumber":193,"author":{"gitId":"wenxin-c"},"content":"only recognised in the main WellNUS++ session, cross feature transition is **not","lastModifiedDate":"2023-04-06"},{"lineNumber":194,"author":{"gitId":"wenxin-c"},"content":"allowed**). Cross feature transition is banned to ensure that users are able to focus on their","lastModifiedDate":"2023-04-06"},{"lineNumber":195,"author":{"gitId":"wenxin-c"},"content":"current feature for their own well-being.","lastModifiedDate":"2023-04-06"},{"lineNumber":196,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":197,"author":{"gitId":"wenxin-c"},"content":"Format: `FEATURE_NAME`","lastModifiedDate":"2023-03-31"},{"lineNumber":198,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":199,"author":{"gitId":"wenxin-c"},"content":"* Accesses the feature `FEATURE_NAME` to utilise its respective actions","lastModifiedDate":"2023-04-06"},{"lineNumber":200,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":201,"author":{"gitId":"wenxin-c"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":202,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":203,"author":{"gitId":"wenxin-c"},"content":"`reflect`","lastModifiedDate":"2023-03-31"},{"lineNumber":204,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":205,"author":{"gitId":"wenxin-c"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":206,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":207,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":208,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":209,"author":{"gitId":"wenxin-c"},"content":"  #####                       ######                                           ","lastModifiedDate":"2023-04-05"},{"lineNumber":210,"author":{"gitId":"wenxin-c"},"content":" #     # ###### #      ###### #     # ###### ###### #      ######  ####  ##### ","lastModifiedDate":"2023-04-05"},{"lineNumber":211,"author":{"gitId":"wenxin-c"},"content":" #       #      #      #      #     # #      #      #      #      #    #   #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":212,"author":{"gitId":"wenxin-c"},"content":"  #####  #####  #      #####  ######  #####  #####  #      #####  #        #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":213,"author":{"gitId":"wenxin-c"},"content":"       # #      #      #      #   #   #      #      #      #      #        #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":214,"author":{"gitId":"wenxin-c"},"content":" #     # #      #      #      #    #  #      #      #      #      #    #   #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":215,"author":{"gitId":"wenxin-c"},"content":"  #####  ###### ###### #      #     # ###### #      ###### ######  ####    #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":216,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":217,"author":{"gitId":"wenxin-c"},"content":"    Welcome to WellNUS++ Self Reflection section :D","lastModifiedDate":"2023-03-31"},{"lineNumber":218,"author":{"gitId":"wenxin-c"},"content":"    Feel very occupied and cannot find time to self reflect?","lastModifiedDate":"2023-03-31"},{"lineNumber":219,"author":{"gitId":"wenxin-c"},"content":"    No worries, this section will give you the opportunity to reflect and improve on yourself!!","lastModifiedDate":"2023-03-31"},{"lineNumber":220,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":221,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":222,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":223,"author":{"gitId":"wenxin-c"},"content":"The expected interface of the other feature\u0027s `FEATURE_NAME` commands can be found in their respective sections below.","lastModifiedDate":"2023-04-06"},{"lineNumber":224,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":225,"author":{"gitId":"YongbinWang"},"content":"\u003c!-- @@author YongbinWang --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":226,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":227,"author":{"gitId":"YongbinWang"},"content":"## `hb` - Accessing atomic habit feature","lastModifiedDate":"2023-04-06"},{"lineNumber":228,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":229,"author":{"gitId":"YongbinWang"},"content":"Atomic habit feature allows users to keep track of the daily habits they wish to develop for better self improvement.","lastModifiedDate":"2023-03-31"},{"lineNumber":230,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":231,"author":{"gitId":"YongbinWang"},"content":"Format: `hb`\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":232,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":233,"author":{"gitId":"YongbinWang"},"content":"Example of usage:\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":234,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":235,"author":{"gitId":"YongbinWang"},"content":"`hb`","lastModifiedDate":"2023-03-31"},{"lineNumber":236,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":237,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":238,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":239,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":240,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":241,"author":{"gitId":"YongbinWang"},"content":"    _  _             _      _  _      _    _ _      ","lastModifiedDate":"2023-03-31"},{"lineNumber":242,"author":{"gitId":"YongbinWang"},"content":"   /_\\| |_ ___ _ __ (_)__  | || |__ _| |__(_) |_ ___","lastModifiedDate":"2023-04-08"},{"lineNumber":243,"author":{"gitId":"YongbinWang"},"content":"  / _ \\  _/ _ \\ \u0027  \\| / _| | __ / _` | \u0027_ \\ |  _(_-\u003c","lastModifiedDate":"2023-04-08"},{"lineNumber":244,"author":{"gitId":"YongbinWang"},"content":" /_/ \\_\\__\\___/_|_|_|_\\__| |_||_\\__,_|_.__/_|\\__/__/","lastModifiedDate":"2023-04-08"},{"lineNumber":245,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":246,"author":{"gitId":"YongbinWang"},"content":"    Welcome to WellNUS++ Atomic Habits section!","lastModifiedDate":"2023-04-08"},{"lineNumber":247,"author":{"gitId":"YongbinWang"},"content":"    Track and inculcate good habits into your life with us!","lastModifiedDate":"2023-04-08"},{"lineNumber":248,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":249,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":250,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":251,"author":{"gitId":"YongbinWang"},"content":"### `add` - Add new atomic habit","lastModifiedDate":"2023-04-06"},{"lineNumber":252,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":253,"author":{"gitId":"YongbinWang"},"content":"Adds an atomic habit to be tracked by WellNUS++ when accessing atomic habit feature.","lastModifiedDate":"2023-04-05"},{"lineNumber":254,"author":{"gitId":"YongbinWang"},"content":"Count of the habit will be initialised to 0.","lastModifiedDate":"2023-04-09"},{"lineNumber":255,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":256,"author":{"gitId":"YongbinWang"},"content":"Format: `add --name ATOMIC_HABIT_NAME`","lastModifiedDate":"2023-03-31"},{"lineNumber":257,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":258,"author":{"gitId":"YongbinWang"},"content":"* `ATOMIC_HABIT_NAME` is used to uniquely identify each habit(unique and not null). This means habits with","lastModifiedDate":"2023-04-06"},{"lineNumber":259,"author":{"gitId":"YongbinWang"},"content":"  the same `ATOMIC_HABIT_NAME` are not allowed, and a duplicate habit with the same `ATOMIC_HABIT_NAME`","lastModifiedDate":"2023-04-06"},{"lineNumber":260,"author":{"gitId":"YongbinWang"},"content":"  cannot be added later.","lastModifiedDate":"2023-04-06"},{"lineNumber":261,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":262,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":263,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":264,"author":{"gitId":"YongbinWang"},"content":"`add --name make bed every morning`","lastModifiedDate":"2023-03-31"},{"lineNumber":265,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":266,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":267,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":268,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":269,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":270,"author":{"gitId":"YongbinWang"},"content":"    Yay! You have added a new habit:","lastModifiedDate":"2023-03-31"},{"lineNumber":271,"author":{"gitId":"YongbinWang"},"content":"    \u0027make bed every morning\u0027 was successfully added","lastModifiedDate":"2023-03-31"},{"lineNumber":272,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":273,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":274,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":275,"author":{"gitId":"YongbinWang"},"content":"### `list` - List all atomic habit","lastModifiedDate":"2023-04-06"},{"lineNumber":276,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":277,"author":{"gitId":"YongbinWang"},"content":"Shows a list of all atomic habits.","lastModifiedDate":"2023-03-31"},{"lineNumber":278,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":279,"author":{"gitId":"YongbinWang"},"content":"Format: `list`","lastModifiedDate":"2023-03-31"},{"lineNumber":280,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":281,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":282,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":283,"author":{"gitId":"YongbinWang"},"content":"`list`","lastModifiedDate":"2023-03-31"},{"lineNumber":284,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":285,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":286,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":287,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":288,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":289,"author":{"gitId":"YongbinWang"},"content":"    Here is the current accumulation of your atomic habits!","lastModifiedDate":"2023-03-31"},{"lineNumber":290,"author":{"gitId":"YongbinWang"},"content":"    Keep up the good work and you will develop a helpful habit in no time","lastModifiedDate":"2023-03-31"},{"lineNumber":291,"author":{"gitId":"YongbinWang"},"content":"    1.Make Bed every morning [0]","lastModifiedDate":"2023-04-09"},{"lineNumber":292,"author":{"gitId":"YongbinWang"},"content":"    2.Read for at least 30 minutes every day [3]","lastModifiedDate":"2023-03-31"},{"lineNumber":293,"author":{"gitId":"YongbinWang"},"content":"    3.Avoid checking phone for the first hour after waking up [2]","lastModifiedDate":"2023-03-31"},{"lineNumber":294,"author":{"gitId":"YongbinWang"},"content":"    ... ","lastModifiedDate":"2023-03-31"},{"lineNumber":295,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":296,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":297,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":298,"author":{"gitId":"YongbinWang"},"content":"### `update` - Update an atomic habit","lastModifiedDate":"2023-04-06"},{"lineNumber":299,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":300,"author":{"gitId":"YongbinWang"},"content":"Increment the number of times that an atomic habit has been carried out. \u003cbr\u003e","lastModifiedDate":"2023-04-05"},{"lineNumber":301,"author":{"gitId":"YongbinWang"},"content":"Decrement the atomic habits if you wrongly incremented.","lastModifiedDate":"2023-04-05"},{"lineNumber":302,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":303,"author":{"gitId":"YongbinWang"},"content":"Format: `update --id HABIT_INDEX [--by NUMBER_TO_CHANGE]`","lastModifiedDate":"2023-04-06"},{"lineNumber":304,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":305,"author":{"gitId":"YongbinWang"},"content":"* (**Optional**) Step 1: You are _recommended_ to list the current habits using the command `list`","lastModifiedDate":"2023-04-06"},{"lineNumber":306,"author":{"gitId":"YongbinWang"},"content":"* Step 2: Select the habit to update by entering the index number of the habit `HABIT_INDEX` according to index of the","lastModifiedDate":"2023-04-06"},{"lineNumber":307,"author":{"gitId":"YongbinWang"},"content":"  list output. \u003cbr\u003e","lastModifiedDate":"2023-04-05"},{"lineNumber":308,"author":{"gitId":"YongbinWang"},"content":"  The user can specify the number to change for the habit count via `NUMBER_TO_CHANGE`. \u003cbr\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":309,"author":{"gitId":"YongbinWang"},"content":"  The **default** behaviour is to increment the behaviour by 1. \u003cbr\u003e To decrement the habit count, enter a negative","lastModifiedDate":"2023-04-08"},{"lineNumber":310,"author":{"gitId":"YongbinWang"},"content":"  number","lastModifiedDate":"2023-04-08"},{"lineNumber":311,"author":{"gitId":"YongbinWang"},"content":"  instead(see \u0027Example of usage 2\u0027 below).","lastModifiedDate":"2023-04-06"},{"lineNumber":312,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":313,"author":{"gitId":"YongbinWang"},"content":"Note: \u0027+\u0027 in front of `NUMBER_TO_CHANGE` parameter is not necessary when incrementing.","lastModifiedDate":"2023-04-06"},{"lineNumber":314,"author":{"gitId":"YongbinWang"},"content":"For example, to increment index 1 by 2 counts, issue `update --id 1 --by 2`,","lastModifiedDate":"2023-04-06"},{"lineNumber":315,"author":{"gitId":"YongbinWang"},"content":"**_not_** `update --id 1 --by +2`. See \u0027Example of usage 1\u0027 below.","lastModifiedDate":"2023-04-06"},{"lineNumber":316,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":317,"author":{"gitId":"YongbinWang"},"content":"Example of usage 1:","lastModifiedDate":"2023-04-05"},{"lineNumber":318,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":319,"author":{"gitId":"YongbinWang"},"content":"* `list` (_Optional_, done here to show change in habit count)","lastModifiedDate":"2023-04-06"},{"lineNumber":320,"author":{"gitId":"YongbinWang"},"content":"* `update --id 1 --by 2`","lastModifiedDate":"2023-04-04"},{"lineNumber":321,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":322,"author":{"gitId":"YongbinWang"},"content":"Expected outcome 1:","lastModifiedDate":"2023-04-05"},{"lineNumber":323,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":324,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":325,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":326,"author":{"gitId":"YongbinWang"},"content":"    Here is the current accumulation of your atomic habits!","lastModifiedDate":"2023-03-31"},{"lineNumber":327,"author":{"gitId":"YongbinWang"},"content":"    Keep up the good work and you will develop a helpful habit in no time","lastModifiedDate":"2023-03-31"},{"lineNumber":328,"author":{"gitId":"YongbinWang"},"content":"    1. Make bed every morning [5]","lastModifiedDate":"2023-03-31"},{"lineNumber":329,"author":{"gitId":"YongbinWang"},"content":"    2. Read for at least 30 minutes every day [3] ","lastModifiedDate":"2023-03-31"},{"lineNumber":330,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":331,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":332,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":333,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":334,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":335,"author":{"gitId":"YongbinWang"},"content":"    The following habit has been incremented! Keep up the good work!","lastModifiedDate":"2023-03-31"},{"lineNumber":336,"author":{"gitId":"YongbinWang"},"content":"    1. Make bed every morning [7]","lastModifiedDate":"2023-03-31"},{"lineNumber":337,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":338,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":339,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":340,"author":{"gitId":"YongbinWang"},"content":"Example of usage 2:","lastModifiedDate":"2023-04-05"},{"lineNumber":341,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":342,"author":{"gitId":"YongbinWang"},"content":"* `list` (_Optional_, done here to show change in habit count)","lastModifiedDate":"2023-04-06"},{"lineNumber":343,"author":{"gitId":"YongbinWang"},"content":"* `update --id 1 --by -2`","lastModifiedDate":"2023-04-05"},{"lineNumber":344,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":345,"author":{"gitId":"YongbinWang"},"content":"Expected outcome 2:","lastModifiedDate":"2023-04-05"},{"lineNumber":346,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":347,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-04-05"},{"lineNumber":348,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":349,"author":{"gitId":"YongbinWang"},"content":"    Here is the current accumulation of your atomic habits!","lastModifiedDate":"2023-04-05"},{"lineNumber":350,"author":{"gitId":"YongbinWang"},"content":"    Keep up the good work and you will develop a helpful habit in no time","lastModifiedDate":"2023-04-05"},{"lineNumber":351,"author":{"gitId":"YongbinWang"},"content":"    1.Make bed every morning [7]","lastModifiedDate":"2023-04-05"},{"lineNumber":352,"author":{"gitId":"YongbinWang"},"content":"    2.Read for at least 30 minutes every day [3]","lastModifiedDate":"2023-04-05"},{"lineNumber":353,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":354,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-04-05"},{"lineNumber":355,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":356,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-04-05"},{"lineNumber":357,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":358,"author":{"gitId":"YongbinWang"},"content":"    The following habit has been incremented! Keep up the good work!","lastModifiedDate":"2023-04-05"},{"lineNumber":359,"author":{"gitId":"YongbinWang"},"content":"    1.Make bed every morning [5]","lastModifiedDate":"2023-04-05"},{"lineNumber":360,"author":{"gitId":"YongbinWang"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":361,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-04-05"},{"lineNumber":362,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":363,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- @@author BernardLesley --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":364,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":365,"author":{"gitId":"BernardLesley"},"content":"### `delete` - Delete an atomic habit","lastModifiedDate":"2023-04-06"},{"lineNumber":366,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":367,"author":{"gitId":"BernardLesley"},"content":"Delete an atomic habit that is not relevant anymore.","lastModifiedDate":"2023-03-30"},{"lineNumber":368,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":369,"author":{"gitId":"BernardLesley"},"content":"Format: `delete --id HABIT_INDEX`","lastModifiedDate":"2023-04-06"},{"lineNumber":370,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":371,"author":{"gitId":"BernardLesley"},"content":"* (**Optional**) Step 1: List the current habits using command `list`","lastModifiedDate":"2023-04-06"},{"lineNumber":372,"author":{"gitId":"BernardLesley"},"content":"* Step 2: Select the habit to delete by entering the index number of the habit, `HABIT_INDEX`, according to index of the","lastModifiedDate":"2023-04-06"},{"lineNumber":373,"author":{"gitId":"BernardLesley"},"content":"  output from `list`","lastModifiedDate":"2023-04-06"},{"lineNumber":374,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":375,"author":{"gitId":"BernardLesley"},"content":"Example of usage:","lastModifiedDate":"2023-03-30"},{"lineNumber":376,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":377,"author":{"gitId":"BernardLesley"},"content":"* `list` (_Optional_)","lastModifiedDate":"2023-04-06"},{"lineNumber":378,"author":{"gitId":"BernardLesley"},"content":"* `delete --id 1`","lastModifiedDate":"2023-03-30"},{"lineNumber":379,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":380,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-30"},{"lineNumber":381,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":382,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-30"},{"lineNumber":383,"author":{"gitId":"BernardLesley"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":384,"author":{"gitId":"BernardLesley"},"content":"    Here is the current accumulation of your atomic habits!","lastModifiedDate":"2023-03-30"},{"lineNumber":385,"author":{"gitId":"BernardLesley"},"content":"    Keep up the good work and you will develop a helpful habit in no time","lastModifiedDate":"2023-03-30"},{"lineNumber":386,"author":{"gitId":"BernardLesley"},"content":"    1. Make bed every morning [5]","lastModifiedDate":"2023-03-30"},{"lineNumber":387,"author":{"gitId":"BernardLesley"},"content":"    2. Read for at least 30 minutes every day [3] ","lastModifiedDate":"2023-03-30"},{"lineNumber":388,"author":{"gitId":"BernardLesley"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":389,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-30"},{"lineNumber":390,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":391,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-30"},{"lineNumber":392,"author":{"gitId":"BernardLesley"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":393,"author":{"gitId":"BernardLesley"},"content":"    The following habit has been deleted:","lastModifiedDate":"2023-03-30"},{"lineNumber":394,"author":{"gitId":"BernardLesley"},"content":"    Make bed every morning [5] has been successfully deleted","lastModifiedDate":"2023-03-30"},{"lineNumber":395,"author":{"gitId":"BernardLesley"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-08"},{"lineNumber":396,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":397,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":398,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- @@author BernardLesley --\u003e","lastModifiedDate":"2023-04-04"},{"lineNumber":399,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":400,"author":{"gitId":"BernardLesley"},"content":"### `help` - Viewing Atomic Habit Help","lastModifiedDate":"2023-04-06"},{"lineNumber":401,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":402,"author":{"gitId":"BernardLesley"},"content":"Lists all commands available and provide a short description of Atomic Habit feature.","lastModifiedDate":"2023-04-05"},{"lineNumber":403,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":404,"author":{"gitId":"BernardLesley"},"content":"Format: `help [COMMAND_TO_CHECK]`","lastModifiedDate":"2023-04-05"},{"lineNumber":405,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":406,"author":{"gitId":"BernardLesley"},"content":"* List all commands available in the Atomic Habit and a short description of the Atomic Habit","lastModifiedDate":"2023-03-31"},{"lineNumber":407,"author":{"gitId":"BernardLesley"},"content":"* Give a detailed explanation of the parameters and subcommands for the given command `COMMAND_TO_CHECK` (if specified)","lastModifiedDate":"2023-04-06"},{"lineNumber":408,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":409,"author":{"gitId":"BernardLesley"},"content":"Example of usage 1:","lastModifiedDate":"2023-03-31"},{"lineNumber":410,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":411,"author":{"gitId":"BernardLesley"},"content":"`help`","lastModifiedDate":"2023-03-31"},{"lineNumber":412,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":413,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":414,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":415,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":416,"author":{"gitId":"BernardLesley"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-09"},{"lineNumber":417,"author":{"gitId":"BernardLesley"},"content":"    hb - Atomic Habits - Track and manage your habits with our suite of tools to help you grow and nurture a better you!","lastModifiedDate":"2023-04-09"},{"lineNumber":418,"author":{"gitId":"BernardLesley"},"content":"    Input `help` to see all available commands.","lastModifiedDate":"2023-03-31"},{"lineNumber":419,"author":{"gitId":"BernardLesley"},"content":"    Input `help [command-to-check] to get usage help for a specific command.","lastModifiedDate":"2023-03-31"},{"lineNumber":420,"author":{"gitId":"BernardLesley"},"content":"    Here are all the commands available for you!","lastModifiedDate":"2023-03-31"},{"lineNumber":421,"author":{"gitId":"BernardLesley"},"content":"    ","lastModifiedDate":"2023-03-31"},{"lineNumber":422,"author":{"gitId":"BernardLesley"},"content":"    1. add - Add a habit to your habit tracker.","lastModifiedDate":"2023-03-31"},{"lineNumber":423,"author":{"gitId":"BernardLesley"},"content":"    2. delete - Delete the habit you don\u0027t want to continue.","lastModifiedDate":"2023-04-09"},{"lineNumber":424,"author":{"gitId":"BernardLesley"},"content":"    3. help - Get help on what commands can be used in Atomic Habit WellNUS++","lastModifiedDate":"2023-04-09"},{"lineNumber":425,"author":{"gitId":"BernardLesley"},"content":"    4. home - Return back to the main menu of WellNUS++.","lastModifiedDate":"2023-04-09"},{"lineNumber":426,"author":{"gitId":"BernardLesley"},"content":"    5. list - Lists out all the habits in your tracker.","lastModifiedDate":"2023-04-09"},{"lineNumber":427,"author":{"gitId":"BernardLesley"},"content":"    6. update - Update how many times you\u0027ve done a habit.","lastModifiedDate":"2023-04-09"},{"lineNumber":428,"author":{"gitId":"BernardLesley"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-09"},{"lineNumber":429,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":430,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":431,"author":{"gitId":"BernardLesley"},"content":"Example of usage 2:","lastModifiedDate":"2023-03-31"},{"lineNumber":432,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":433,"author":{"gitId":"BernardLesley"},"content":"`help add`","lastModifiedDate":"2023-03-31"},{"lineNumber":434,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":435,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":436,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":437,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":438,"author":{"gitId":"BernardLesley"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-09"},{"lineNumber":439,"author":{"gitId":"BernardLesley"},"content":"    add - Add a habit to your habit tracker.","lastModifiedDate":"2023-03-31"},{"lineNumber":440,"author":{"gitId":"BernardLesley"},"content":"    usage: add --name (your habit name)","lastModifiedDate":"2023-03-31"},{"lineNumber":441,"author":{"gitId":"BernardLesley"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-09"},{"lineNumber":442,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":443,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":444,"author":{"gitId":"haoyangw"},"content":"\u003c!-- @@author haoyangw --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":445,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":446,"author":{"gitId":"haoyangw"},"content":"## `gamif` - Accessing gamification feature","lastModifiedDate":"2023-04-06"},{"lineNumber":447,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":448,"author":{"gitId":"haoyangw"},"content":"Format: `gamif`","lastModifiedDate":"2023-03-31"},{"lineNumber":449,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":450,"author":{"gitId":"haoyangw"},"content":"Gamification system integrated into WellNUS++ to incentivize users to improve","lastModifiedDate":"2023-03-31"},{"lineNumber":451,"author":{"gitId":"haoyangw"},"content":"their wellness.","lastModifiedDate":"2023-03-31"},{"lineNumber":452,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":453,"author":{"gitId":"haoyangw"},"content":"Users can accumulate XP points from working on their atomic habits and","lastModifiedDate":"2023-03-31"},{"lineNumber":454,"author":{"gitId":"haoyangw"},"content":"level up. For example, do your recorded atomic habits and update the habit count","lastModifiedDate":"2023-04-09"},{"lineNumber":455,"author":{"gitId":"haoyangw"},"content":"with the `update` command of the atomic habits feature to gain XP points.","lastModifiedDate":"2023-04-09"},{"lineNumber":456,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":457,"author":{"gitId":"haoyangw"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":458,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":459,"author":{"gitId":"haoyangw"},"content":"`gamif`","lastModifiedDate":"2023-03-31"},{"lineNumber":460,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":461,"author":{"gitId":"haoyangw"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":462,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":463,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":464,"author":{"gitId":"haoyangw"},"content":"######################################################################","lastModifiedDate":"2023-03-31"},{"lineNumber":465,"author":{"gitId":"haoyangw"},"content":"    Welcome to","lastModifiedDate":"2023-03-31"},{"lineNumber":466,"author":{"gitId":"haoyangw"},"content":"    ______                _ _____            __  _           ","lastModifiedDate":"2023-03-31"},{"lineNumber":467,"author":{"gitId":"haoyangw"},"content":"   / ____/___ _____ ___  (_) __(_)________ _/ /_(_)___  ____ ","lastModifiedDate":"2023-03-31"},{"lineNumber":468,"author":{"gitId":"haoyangw"},"content":"  / / __/ __ `/ __ `__ \\/ / /_/ / ___/ __ `/ __/ / __ \\/ __ \\","lastModifiedDate":"2023-03-31"},{"lineNumber":469,"author":{"gitId":"haoyangw"},"content":" / /_/ / /_/ / / / / / / / __/ / /__/ /_/ / /_/ / /_/ / / / /","lastModifiedDate":"2023-03-31"},{"lineNumber":470,"author":{"gitId":"haoyangw"},"content":" \\____/\\__,_/_/ /_/ /_/_/_/ /_/\\___/\\__,_/\\__/_/\\____/_/ /_/ ","lastModifiedDate":"2023-03-31"},{"lineNumber":471,"author":{"gitId":"haoyangw"},"content":"######################################################################","lastModifiedDate":"2023-03-31"},{"lineNumber":472,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":473,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":474,"author":{"gitId":"haoyangw"},"content":"### `stats` - Gamification statistics","lastModifiedDate":"2023-04-06"},{"lineNumber":475,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":476,"author":{"gitId":"haoyangw"},"content":"Displays the user\u0027s current XP level and the number of XP points to reach the next level.","lastModifiedDate":"2023-04-06"},{"lineNumber":477,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":478,"author":{"gitId":"haoyangw"},"content":"Format: `stats`","lastModifiedDate":"2023-03-31"},{"lineNumber":479,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":480,"author":{"gitId":"haoyangw"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":481,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":482,"author":{"gitId":"haoyangw"},"content":"`stats`","lastModifiedDate":"2023-03-31"},{"lineNumber":483,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":484,"author":{"gitId":"haoyangw"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":485,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":486,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":487,"author":{"gitId":"haoyangw"},"content":"######################################################################","lastModifiedDate":"2023-03-31"},{"lineNumber":488,"author":{"gitId":"haoyangw"},"content":"#                 Current XP: Level 2 [\u003d\u003d\u003d\u003e        ]                 #","lastModifiedDate":"2023-03-31"},{"lineNumber":489,"author":{"gitId":"haoyangw"},"content":"#                        7 more XP to Level 3                        #","lastModifiedDate":"2023-03-31"},{"lineNumber":490,"author":{"gitId":"haoyangw"},"content":"######################################################################","lastModifiedDate":"2023-03-31"},{"lineNumber":491,"author":{"gitId":"haoyangw"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":492,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":493,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- @@author BernardLesley --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":494,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":495,"author":{"gitId":"BernardLesley"},"content":"### `help` - Viewing Gamification Help","lastModifiedDate":"2023-04-06"},{"lineNumber":496,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":497,"author":{"gitId":"BernardLesley"},"content":"Lists all commands available and provide a short description of Gamification feature.","lastModifiedDate":"2023-04-05"},{"lineNumber":498,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":499,"author":{"gitId":"BernardLesley"},"content":"Format: `help [COMMAND_TO_CHECK]`","lastModifiedDate":"2023-04-05"},{"lineNumber":500,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":501,"author":{"gitId":"BernardLesley"},"content":"* List all commands available in the Gamification and a short description of the Gamification","lastModifiedDate":"2023-03-31"},{"lineNumber":502,"author":{"gitId":"BernardLesley"},"content":"* Give a detailed explanation of the parameters and subcommands for the given command `COMMAND_TO_CHECK`","lastModifiedDate":"2023-04-06"},{"lineNumber":503,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":504,"author":{"gitId":"BernardLesley"},"content":"Example of usage 1:","lastModifiedDate":"2023-03-31"},{"lineNumber":505,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":506,"author":{"gitId":"BernardLesley"},"content":"`help`","lastModifiedDate":"2023-03-31"},{"lineNumber":507,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":508,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":509,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":510,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":511,"author":{"gitId":"BernardLesley"},"content":"######################################################################","lastModifiedDate":"2023-04-09"},{"lineNumber":512,"author":{"gitId":"BernardLesley"},"content":"    gamif - Gamification - Gamification gives you the motivation to continue improving your wellness by rewarding you for your efforts!","lastModifiedDate":"2023-04-09"},{"lineNumber":513,"author":{"gitId":"BernardLesley"},"content":"    Input `help` to see all available commands.","lastModifiedDate":"2023-03-31"},{"lineNumber":514,"author":{"gitId":"BernardLesley"},"content":"    Input `help [command-to-check]` to get usage help for a specific command.","lastModifiedDate":"2023-03-31"},{"lineNumber":515,"author":{"gitId":"BernardLesley"},"content":"    Here are all the commands available for you!","lastModifiedDate":"2023-03-31"},{"lineNumber":516,"author":{"gitId":"BernardLesley"},"content":"    ","lastModifiedDate":"2023-03-31"},{"lineNumber":517,"author":{"gitId":"BernardLesley"},"content":"    1. help - Get help on what commands can be used in WellNUS++ Gamification Feature","lastModifiedDate":"2023-03-31"},{"lineNumber":518,"author":{"gitId":"BernardLesley"},"content":"    2. home - Returns the user to the main WellNus++ session","lastModifiedDate":"2023-03-31"},{"lineNumber":519,"author":{"gitId":"BernardLesley"},"content":"    3. stats - Displays the user\u0027s XP level and points","lastModifiedDate":"2023-03-31"},{"lineNumber":520,"author":{"gitId":"BernardLesley"},"content":"######################################################################","lastModifiedDate":"2023-04-09"},{"lineNumber":521,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":522,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":523,"author":{"gitId":"BernardLesley"},"content":"Example of usage 2:","lastModifiedDate":"2023-03-31"},{"lineNumber":524,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":525,"author":{"gitId":"BernardLesley"},"content":"`help stats`","lastModifiedDate":"2023-03-31"},{"lineNumber":526,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":527,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":528,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":529,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":530,"author":{"gitId":"BernardLesley"},"content":"######################################################################","lastModifiedDate":"2023-04-09"},{"lineNumber":531,"author":{"gitId":"BernardLesley"},"content":"    stats - Displays the user\u0027s XP level and points","lastModifiedDate":"2023-03-31"},{"lineNumber":532,"author":{"gitId":"BernardLesley"},"content":"    usage: stats","lastModifiedDate":"2023-03-31"},{"lineNumber":533,"author":{"gitId":"BernardLesley"},"content":"######################################################################","lastModifiedDate":"2023-04-09"},{"lineNumber":534,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":535,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":536,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- @@author wenxin-c --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":537,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":538,"author":{"gitId":"wenxin-c"},"content":"## `reflect` - Accessing self reflection feature","lastModifiedDate":"2023-04-06"},{"lineNumber":539,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":540,"author":{"gitId":"wenxin-c"},"content":"Format: `reflect`","lastModifiedDate":"2023-03-31"},{"lineNumber":541,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":542,"author":{"gitId":"wenxin-c"},"content":"Self reflection feature allows users to get sets of random introspective questions to reflect on to improve overall","lastModifiedDate":"2023-03-31"},{"lineNumber":543,"author":{"gitId":"wenxin-c"},"content":"wellness and achieve better selves.","lastModifiedDate":"2023-03-31"},{"lineNumber":544,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":545,"author":{"gitId":"wenxin-c"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":546,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":547,"author":{"gitId":"wenxin-c"},"content":"`reflect`","lastModifiedDate":"2023-03-31"},{"lineNumber":548,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":549,"author":{"gitId":"wenxin-c"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":550,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":551,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":552,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":553,"author":{"gitId":"wenxin-c"},"content":"  #####                       ######                                           ","lastModifiedDate":"2023-04-05"},{"lineNumber":554,"author":{"gitId":"wenxin-c"},"content":" #     # ###### #      ###### #     # ###### ###### #      ######  ####  ##### ","lastModifiedDate":"2023-04-05"},{"lineNumber":555,"author":{"gitId":"wenxin-c"},"content":" #       #      #      #      #     # #      #      #      #      #    #   #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":556,"author":{"gitId":"wenxin-c"},"content":"  #####  #####  #      #####  ######  #####  #####  #      #####  #        #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":557,"author":{"gitId":"wenxin-c"},"content":"       # #      #      #      #   #   #      #      #      #      #        #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":558,"author":{"gitId":"wenxin-c"},"content":" #     # #      #      #      #    #  #      #      #      #      #    #   #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":559,"author":{"gitId":"wenxin-c"},"content":"  #####  ###### ###### #      #     # ###### #      ###### ######  ####    #   ","lastModifiedDate":"2023-04-05"},{"lineNumber":560,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":561,"author":{"gitId":"wenxin-c"},"content":"    Welcome to WellNUS++ Self Reflection section :D","lastModifiedDate":"2023-03-31"},{"lineNumber":562,"author":{"gitId":"wenxin-c"},"content":"    Feel very occupied and cannot find time to self reflect?","lastModifiedDate":"2023-03-31"},{"lineNumber":563,"author":{"gitId":"wenxin-c"},"content":"    No worries, this section will give you the opportunity to reflect and improve on yourself!!","lastModifiedDate":"2023-03-31"},{"lineNumber":564,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":565,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":566,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":567,"author":{"gitId":"YongbinWang"},"content":"\u003c!-- @@author YongbinWang --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":568,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":569,"author":{"gitId":"YongbinWang"},"content":"### `get` - Get reflection questions","lastModifiedDate":"2023-04-06"},{"lineNumber":570,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":571,"author":{"gitId":"YongbinWang"},"content":"Ask WellNUS++ to generate a set of 5 random introspective questions for users to view and reflect on.","lastModifiedDate":"2023-04-06"},{"lineNumber":572,"author":{"gitId":"YongbinWang"},"content":"The questions are designed to be **randomised** for users to reflect on different aspects of life.","lastModifiedDate":"2023-04-06"},{"lineNumber":573,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":574,"author":{"gitId":"YongbinWang"},"content":"Format: `get`","lastModifiedDate":"2023-03-31"},{"lineNumber":575,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":576,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":577,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":578,"author":{"gitId":"YongbinWang"},"content":"`get`","lastModifiedDate":"2023-03-31"},{"lineNumber":579,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":580,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":581,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":582,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":583,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":584,"author":{"gitId":"YongbinWang"},"content":"    1.What are three of my most cherished personal values?","lastModifiedDate":"2023-03-31"},{"lineNumber":585,"author":{"gitId":"YongbinWang"},"content":"    2.What is my purpose in life?","lastModifiedDate":"2023-03-31"},{"lineNumber":586,"author":{"gitId":"YongbinWang"},"content":"    3.What scares me the most right now?","lastModifiedDate":"2023-03-31"},{"lineNumber":587,"author":{"gitId":"YongbinWang"},"content":"    4.What is something that brings me joy?","lastModifiedDate":"2023-03-31"},{"lineNumber":588,"author":{"gitId":"YongbinWang"},"content":"    5.When is the last time I gave back to others?","lastModifiedDate":"2023-03-31"},{"lineNumber":589,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":590,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":591,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":592,"author":{"gitId":"YongbinWang"},"content":"* Since questions are randomised, the questions users receive might differ from the example outcome above.","lastModifiedDate":"2023-04-06"},{"lineNumber":593,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":594,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- @@author wenxin-c --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":595,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":596,"author":{"gitId":"wenxin-c"},"content":"### `like` - Add reflection question into favorite list","lastModifiedDate":"2023-04-06"},{"lineNumber":597,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":598,"author":{"gitId":"wenxin-c"},"content":"Users can add the reflection question they like into favorite list and review afterwards.","lastModifiedDate":"2023-03-31"},{"lineNumber":599,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":600,"author":{"gitId":"wenxin-c"},"content":"Format: `like INDEX`","lastModifiedDate":"2023-03-31"},{"lineNumber":601,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":602,"author":{"gitId":"wenxin-c"},"content":"* Adds the particular question generated in the previous set with index (`INDEX`) into the user\u0027s favorite list","lastModifiedDate":"2023-04-06"},{"lineNumber":603,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":604,"author":{"gitId":"wenxin-c"},"content":"Note that the users are supposed to at least `get` a set of questions or use `prev` command to","lastModifiedDate":"2023-04-02"},{"lineNumber":605,"author":{"gitId":"wenxin-c"},"content":"review the previous set before liking them, and use the displayed index to choose questions.","lastModifiedDate":"2023-04-05"},{"lineNumber":606,"author":{"gitId":"wenxin-c"},"content":"Index parameter is limited to integer 1-5 as only 5 questions will be generated in every random set.","lastModifiedDate":"2023-03-31"},{"lineNumber":607,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":608,"author":{"gitId":"wenxin-c"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":609,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":610,"author":{"gitId":"wenxin-c"},"content":"`like 1`","lastModifiedDate":"2023-03-31"},{"lineNumber":611,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":612,"author":{"gitId":"wenxin-c"},"content":"Expected output:","lastModifiedDate":"2023-03-31"},{"lineNumber":613,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":614,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":615,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":616,"author":{"gitId":"wenxin-c"},"content":"    You have added question: What is my purpose in life? into favorite list!!","lastModifiedDate":"2023-03-31"},{"lineNumber":617,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":618,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":619,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":620,"author":{"gitId":"wenxin-c"},"content":"* Since questions are randomised, a particular question might have different indexes in different random sets.","lastModifiedDate":"2023-04-06"},{"lineNumber":621,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":622,"author":{"gitId":"wenxin-c"},"content":"### `fav` - View favorite list","lastModifiedDate":"2023-04-06"},{"lineNumber":623,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":624,"author":{"gitId":"wenxin-c"},"content":"Users can review the list of reflection questions they liked.","lastModifiedDate":"2023-03-31"},{"lineNumber":625,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":626,"author":{"gitId":"wenxin-c"},"content":"Format: `fav`","lastModifiedDate":"2023-03-31"},{"lineNumber":627,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":628,"author":{"gitId":"wenxin-c"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":629,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":630,"author":{"gitId":"wenxin-c"},"content":"`fav`","lastModifiedDate":"2023-03-31"},{"lineNumber":631,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":632,"author":{"gitId":"wenxin-c"},"content":"Example output:","lastModifiedDate":"2023-03-31"},{"lineNumber":633,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":634,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":635,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":636,"author":{"gitId":"wenxin-c"},"content":"    1.What are three of my most cherished personal values?","lastModifiedDate":"2023-03-31"},{"lineNumber":637,"author":{"gitId":"wenxin-c"},"content":"    2.What is my purpose in life?","lastModifiedDate":"2023-03-31"},{"lineNumber":638,"author":{"gitId":"wenxin-c"},"content":"    3.Am I making time for my social life?","lastModifiedDate":"2023-04-02"},{"lineNumber":639,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-02"},{"lineNumber":640,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-04-02"},{"lineNumber":641,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":642,"author":{"gitId":"wenxin-c"},"content":"### `unlike` - Remove questions from favorite list","lastModifiedDate":"2023-04-06"},{"lineNumber":643,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":644,"author":{"gitId":"wenxin-c"},"content":"Users can remove reflection questions from the favorite list.","lastModifiedDate":"2023-04-02"},{"lineNumber":645,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":646,"author":{"gitId":"wenxin-c"},"content":"Format: `unlike INDEX`","lastModifiedDate":"2023-04-06"},{"lineNumber":647,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":648,"author":{"gitId":"wenxin-c"},"content":"* Removes the particular question with index `INDEX` from the user\u0027s favorite list","lastModifiedDate":"2023-04-06"},{"lineNumber":649,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":650,"author":{"gitId":"wenxin-c"},"content":"Take note that it is **recommended** (but _optional_) to use `fav` command to check the list of questions in the","lastModifiedDate":"2023-04-08"},{"lineNumber":651,"author":{"gitId":"wenxin-c"},"content":"favorite list before","lastModifiedDate":"2023-04-08"},{"lineNumber":652,"author":{"gitId":"wenxin-c"},"content":"unliking any of them, so that users are aware of which question they are removing.","lastModifiedDate":"2023-04-06"},{"lineNumber":653,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":654,"author":{"gitId":"wenxin-c"},"content":"Example of usage step 1:","lastModifiedDate":"2023-04-02"},{"lineNumber":655,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":656,"author":{"gitId":"wenxin-c"},"content":"`fav` (_Optional_)","lastModifiedDate":"2023-04-06"},{"lineNumber":657,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":658,"author":{"gitId":"wenxin-c"},"content":"Example output step 1:","lastModifiedDate":"2023-04-02"},{"lineNumber":659,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":660,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-04-02"},{"lineNumber":661,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-02"},{"lineNumber":662,"author":{"gitId":"wenxin-c"},"content":"    1.What are three of my most cherished personal values?","lastModifiedDate":"2023-04-02"},{"lineNumber":663,"author":{"gitId":"wenxin-c"},"content":"    2.What is my purpose in life?","lastModifiedDate":"2023-04-02"},{"lineNumber":664,"author":{"gitId":"wenxin-c"},"content":"    3.Am I making time for my social life?","lastModifiedDate":"2023-04-02"},{"lineNumber":665,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-02"},{"lineNumber":666,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-04-02"},{"lineNumber":667,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":668,"author":{"gitId":"wenxin-c"},"content":"Example of usage step 2:","lastModifiedDate":"2023-04-02"},{"lineNumber":669,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":670,"author":{"gitId":"wenxin-c"},"content":"`unlike 1`","lastModifiedDate":"2023-04-02"},{"lineNumber":671,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":672,"author":{"gitId":"wenxin-c"},"content":"Example output:","lastModifiedDate":"2023-04-02"},{"lineNumber":673,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":674,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-04-02"},{"lineNumber":675,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-02"},{"lineNumber":676,"author":{"gitId":"wenxin-c"},"content":"    You have removed question: What are three of my most cherished personal values? from favorite list!!","lastModifiedDate":"2023-04-02"},{"lineNumber":677,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":678,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":679,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":680,"author":{"gitId":"wenxin-c"},"content":"### `prev` - Get the previous set of reflection questions generated","lastModifiedDate":"2023-04-06"},{"lineNumber":681,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":682,"author":{"gitId":"wenxin-c"},"content":"Users can view the previous set of questions generated for review.","lastModifiedDate":"2023-03-31"},{"lineNumber":683,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":684,"author":{"gitId":"wenxin-c"},"content":"Format: `prev`","lastModifiedDate":"2023-03-31"},{"lineNumber":685,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":686,"author":{"gitId":"wenxin-c"},"content":"Note that the users are supposed to at least `get` a set of questions before viewing the previous set.","lastModifiedDate":"2023-03-31"},{"lineNumber":687,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":688,"author":{"gitId":"wenxin-c"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":689,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":690,"author":{"gitId":"wenxin-c"},"content":"`prev`","lastModifiedDate":"2023-03-31"},{"lineNumber":691,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":692,"author":{"gitId":"wenxin-c"},"content":"Example output:","lastModifiedDate":"2023-03-31"},{"lineNumber":693,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":694,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":695,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":696,"author":{"gitId":"wenxin-c"},"content":"    1.What is my purpose in life?","lastModifiedDate":"2023-03-31"},{"lineNumber":697,"author":{"gitId":"wenxin-c"},"content":"    2.What is my personality type?","lastModifiedDate":"2023-03-31"},{"lineNumber":698,"author":{"gitId":"wenxin-c"},"content":"    3.Did I make time for myself this week?","lastModifiedDate":"2023-03-31"},{"lineNumber":699,"author":{"gitId":"wenxin-c"},"content":"    4.Am I making time for my social life?","lastModifiedDate":"2023-03-31"},{"lineNumber":700,"author":{"gitId":"wenxin-c"},"content":"    5.What is something I find inspiring?","lastModifiedDate":"2023-03-31"},{"lineNumber":701,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":702,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":703,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":704,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- @@author BernardLesley --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":705,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":706,"author":{"gitId":"BernardLesley"},"content":"### `help` - Viewing Reflection Help","lastModifiedDate":"2023-04-06"},{"lineNumber":707,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":708,"author":{"gitId":"BernardLesley"},"content":"Lists all commands available and provide a short description of Reflection feature.","lastModifiedDate":"2023-04-05"},{"lineNumber":709,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":710,"author":{"gitId":"BernardLesley"},"content":"Format: `help [COMMAND_TO_CHECK]`","lastModifiedDate":"2023-04-05"},{"lineNumber":711,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":712,"author":{"gitId":"BernardLesley"},"content":"* List all commands available in the Reflection and a short description of the Reflection","lastModifiedDate":"2023-03-31"},{"lineNumber":713,"author":{"gitId":"BernardLesley"},"content":"* Give a detailed explanation of the parameters and subcommands for the given command `COMMAND_TO_CHECK`","lastModifiedDate":"2023-04-06"},{"lineNumber":714,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":715,"author":{"gitId":"BernardLesley"},"content":"Example of usage 1:","lastModifiedDate":"2023-03-31"},{"lineNumber":716,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":717,"author":{"gitId":"BernardLesley"},"content":"`help`","lastModifiedDate":"2023-03-31"},{"lineNumber":718,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":719,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":720,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":721,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":722,"author":{"gitId":"BernardLesley"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-06"},{"lineNumber":723,"author":{"gitId":"BernardLesley"},"content":"    reflect - Self Reflection - Take some time to pause and reflect with our specially curated list of questions and reflection management tools.","lastModifiedDate":"2023-04-09"},{"lineNumber":724,"author":{"gitId":"BernardLesley"},"content":"    Input `help` to see all available commands.","lastModifiedDate":"2023-03-31"},{"lineNumber":725,"author":{"gitId":"BernardLesley"},"content":"    Input `help [command-to-check] to get usage help for a specific command.","lastModifiedDate":"2023-03-31"},{"lineNumber":726,"author":{"gitId":"BernardLesley"},"content":"    Here are all the commands available for you!","lastModifiedDate":"2023-03-31"},{"lineNumber":727,"author":{"gitId":"BernardLesley"},"content":"    ","lastModifiedDate":"2023-03-31"},{"lineNumber":728,"author":{"gitId":"BernardLesley"},"content":"    1. fav - Get the list of questions that have been added to the favorite list.","lastModifiedDate":"2023-03-31"},{"lineNumber":729,"author":{"gitId":"BernardLesley"},"content":"    2. get - Get a list of questions to reflect on.","lastModifiedDate":"2023-03-31"},{"lineNumber":730,"author":{"gitId":"BernardLesley"},"content":"    3. help - Get help on what commands can be used in Reflection WellNUS++","lastModifiedDate":"2023-03-31"},{"lineNumber":731,"author":{"gitId":"BernardLesley"},"content":"    4. home - Return back to the main menu of WellNUS++.","lastModifiedDate":"2023-03-31"},{"lineNumber":732,"author":{"gitId":"BernardLesley"},"content":"    5. like - Add a particular question to favorite list.","lastModifiedDate":"2023-04-05"},{"lineNumber":733,"author":{"gitId":"BernardLesley"},"content":"    6. unlike - Remove a particular question from favorite list.","lastModifiedDate":"2023-04-05"},{"lineNumber":734,"author":{"gitId":"BernardLesley"},"content":"    7. prev - Get the previously generated set of questions.","lastModifiedDate":"2023-04-05"},{"lineNumber":735,"author":{"gitId":"BernardLesley"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-06"},{"lineNumber":736,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":737,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":738,"author":{"gitId":"BernardLesley"},"content":"Example of usage 2:","lastModifiedDate":"2023-03-31"},{"lineNumber":739,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":740,"author":{"gitId":"BernardLesley"},"content":"`help get`","lastModifiedDate":"2023-03-31"},{"lineNumber":741,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":742,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":743,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":744,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":745,"author":{"gitId":"BernardLesley"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-06"},{"lineNumber":746,"author":{"gitId":"BernardLesley"},"content":"    get - Get a list of questions to reflect on.","lastModifiedDate":"2023-03-31"},{"lineNumber":747,"author":{"gitId":"BernardLesley"},"content":"    usage: get","lastModifiedDate":"2023-03-31"},{"lineNumber":748,"author":{"gitId":"BernardLesley"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-04-06"},{"lineNumber":749,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":750,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":751,"author":{"gitId":"nichyjt"},"content":"\u003c!-- @@author nichyjt --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":752,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":753,"author":{"gitId":"nichyjt"},"content":"## `ft` - Accessing Focus Timer Feature","lastModifiedDate":"2023-04-06"},{"lineNumber":754,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":755,"author":{"gitId":"nichyjt"},"content":"Our Focus Timer feature allows users to be productive by setting a configurable work-break timer, inspired by","lastModifiedDate":"2023-03-31"},{"lineNumber":756,"author":{"gitId":"nichyjt"},"content":"the Pomodoro technique. When each timer ends, a `beep` is played to alert the user that the current timer countdown is ","lastModifiedDate":"2023-04-09"},{"lineNumber":757,"author":{"gitId":"nichyjt"},"content":"over.","lastModifiedDate":"2023-04-09"},{"lineNumber":758,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":759,"author":{"gitId":"nichyjt"},"content":"Summary of Pomodoro Technique: Repeated sessions of work followed by break to ensure maximum productivity during the","lastModifiedDate":"2023-04-09"},{"lineNumber":760,"author":{"gitId":"nichyjt"},"content":"work cycle and allow one to relax sufficiently during the break cycle before working again. Longer breaks are taken","lastModifiedDate":"2023-04-09"},{"lineNumber":761,"author":{"gitId":"nichyjt"},"content":"after a few consecutive sessions(**2** by default in our app). Find out more about the technique on the ","lastModifiedDate":"2023-04-09"},{"lineNumber":762,"author":{"gitId":"nichyjt"},"content":"[Wikipedia page](https://en.wikipedia.org/wiki/Pomodoro_Technique).","lastModifiedDate":"2023-04-09"},{"lineNumber":763,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":764,"author":{"gitId":"nichyjt"},"content":"**Command input is disabled when timer is counting down the last 10 seconds.**","lastModifiedDate":"2023-04-09"},{"lineNumber":765,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":766,"author":{"gitId":"nichyjt"},"content":"Format: `ft`\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":767,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":768,"author":{"gitId":"nichyjt"},"content":"Example of usage:\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":769,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":770,"author":{"gitId":"nichyjt"},"content":"`ft`","lastModifiedDate":"2023-03-31"},{"lineNumber":771,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":772,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":773,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":774,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":775,"author":{"gitId":"nichyjt"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":776,"author":{"gitId":"nichyjt"},"content":"    Welcome to Focus Timer.","lastModifiedDate":"2023-03-31"},{"lineNumber":777,"author":{"gitId":"nichyjt"},"content":"    Start a focus session with `start`, or `config` the session first!","lastModifiedDate":"2023-03-31"},{"lineNumber":778,"author":{"gitId":"nichyjt"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":779,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":780,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":781,"author":{"gitId":"YongbinWang"},"content":"\u003c!--@@author YongbinWang--\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":782,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":783,"author":{"gitId":"YongbinWang"},"content":"### `start` - Start Session","lastModifiedDate":"2023-04-06"},{"lineNumber":784,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":785,"author":{"gitId":"YongbinWang"},"content":"Ask WellNUS++ to start the focus session consisting of work and break cycles.","lastModifiedDate":"2023-03-31"},{"lineNumber":786,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":787,"author":{"gitId":"YongbinWang"},"content":"`start` can only be used when you first enter Focus, after a session has ended or after a session has been `stop`.","lastModifiedDate":"2023-04-09"},{"lineNumber":788,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":789,"author":{"gitId":"YongbinWang"},"content":"Format: `start`","lastModifiedDate":"2023-03-31"},{"lineNumber":790,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":791,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":792,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":793,"author":{"gitId":"YongbinWang"},"content":"`start`","lastModifiedDate":"2023-03-31"},{"lineNumber":794,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":795,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":796,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":797,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":798,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":799,"author":{"gitId":"YongbinWang"},"content":"    Your session has started! Please focus on your task.","lastModifiedDate":"2023-03-31"},{"lineNumber":800,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-08"},{"lineNumber":801,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":802,"author":{"gitId":"YongbinWang"},"content":"    Task","lastModifiedDate":"2023-03-31"},{"lineNumber":803,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":804,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":805,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":806,"author":{"gitId":"YongbinWang"},"content":"### `pause` - Pause session","lastModifiedDate":"2023-04-06"},{"lineNumber":807,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":808,"author":{"gitId":"YongbinWang"},"content":"Ask WellNUS++ to pause the focus session which pauses the current countdown timer.","lastModifiedDate":"2023-03-31"},{"lineNumber":809,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":810,"author":{"gitId":"YongbinWang"},"content":"`pause` can only be used when the timer is counting down.","lastModifiedDate":"2023-03-31"},{"lineNumber":811,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":812,"author":{"gitId":"YongbinWang"},"content":"Format: `pause`","lastModifiedDate":"2023-03-31"},{"lineNumber":813,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":814,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":815,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":816,"author":{"gitId":"YongbinWang"},"content":"`pause`","lastModifiedDate":"2023-03-31"},{"lineNumber":817,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":818,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":819,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":820,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":821,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":822,"author":{"gitId":"YongbinWang"},"content":"    Timer paused at: 0:54","lastModifiedDate":"2023-03-31"},{"lineNumber":823,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":824,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":825,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":826,"author":{"gitId":"YongbinWang"},"content":"### `resume` - Resume session","lastModifiedDate":"2023-04-06"},{"lineNumber":827,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":828,"author":{"gitId":"YongbinWang"},"content":"Ask WellNUS++ to resume the focus session which continues the current countdown timer.","lastModifiedDate":"2023-03-31"},{"lineNumber":829,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":830,"author":{"gitId":"YongbinWang"},"content":"`resume` can only be used when the timer has been paused.","lastModifiedDate":"2023-03-31"},{"lineNumber":831,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":832,"author":{"gitId":"YongbinWang"},"content":"Format: `resume`","lastModifiedDate":"2023-03-31"},{"lineNumber":833,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":834,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":835,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":836,"author":{"gitId":"YongbinWang"},"content":"`resume`","lastModifiedDate":"2023-03-31"},{"lineNumber":837,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":838,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":839,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":840,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":841,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":842,"author":{"gitId":"YongbinWang"},"content":"    Timer resumed at: 0:54","lastModifiedDate":"2023-03-31"},{"lineNumber":843,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":844,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":845,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":846,"author":{"gitId":"YongbinWang"},"content":"### `check` - Check time","lastModifiedDate":"2023-04-06"},{"lineNumber":847,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":848,"author":{"gitId":"YongbinWang"},"content":"Ask WellNUS++ to display the current time of the timer for users to check time remaining.","lastModifiedDate":"2023-03-31"},{"lineNumber":849,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":850,"author":{"gitId":"YongbinWang"},"content":"`check` can be used whenever during the ongoing session. If the timer has not `start`, is `stop` or reached 0 and is","lastModifiedDate":"2023-04-09"},{"lineNumber":851,"author":{"gitId":"YongbinWang"},"content":"waiting for the `next` command, check will not run.","lastModifiedDate":"2023-04-09"},{"lineNumber":852,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":853,"author":{"gitId":"YongbinWang"},"content":"Format: `check`","lastModifiedDate":"2023-03-31"},{"lineNumber":854,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":855,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":856,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":857,"author":{"gitId":"YongbinWang"},"content":"`check`","lastModifiedDate":"2023-03-31"},{"lineNumber":858,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":859,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":860,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":861,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":862,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":863,"author":{"gitId":"YongbinWang"},"content":"    Time left: 0:57","lastModifiedDate":"2023-03-31"},{"lineNumber":864,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":865,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":866,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":867,"author":{"gitId":"YongbinWang"},"content":"### `next` - Next timer","lastModifiedDate":"2023-04-06"},{"lineNumber":868,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":869,"author":{"gitId":"YongbinWang"},"content":"Ask WellNUS++ to start the next work or break iteration of the focus session.","lastModifiedDate":"2023-03-31"},{"lineNumber":870,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":871,"author":{"gitId":"YongbinWang"},"content":"`next` can only be used when a work or break timer has ended, and a prompt to proceed to the next timer is displayed.","lastModifiedDate":"2023-03-31"},{"lineNumber":872,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":873,"author":{"gitId":"YongbinWang"},"content":"Format: `next`","lastModifiedDate":"2023-03-31"},{"lineNumber":874,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":875,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":876,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":877,"author":{"gitId":"YongbinWang"},"content":"`next`","lastModifiedDate":"2023-03-31"},{"lineNumber":878,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":879,"author":{"gitId":"YongbinWang"},"content":"Expected outcome (if the next timer is a work timer):","lastModifiedDate":"2023-04-05"},{"lineNumber":880,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":881,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":882,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":883,"author":{"gitId":"YongbinWang"},"content":"    Task","lastModifiedDate":"2023-03-31"},{"lineNumber":884,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":885,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":886,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":887,"author":{"gitId":"YongbinWang"},"content":"Expected outcome (if the next timer is a break timer):","lastModifiedDate":"2023-04-05"},{"lineNumber":888,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":889,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-04-05"},{"lineNumber":890,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":891,"author":{"gitId":"YongbinWang"},"content":"    Break","lastModifiedDate":"2023-04-05"},{"lineNumber":892,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":893,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-04-05"},{"lineNumber":894,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":895,"author":{"gitId":"YongbinWang"},"content":"### `stop` - Stop session","lastModifiedDate":"2023-04-06"},{"lineNumber":896,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":897,"author":{"gitId":"YongbinWang"},"content":"Ask WellNUS++ to stop the focus session.","lastModifiedDate":"2023-03-31"},{"lineNumber":898,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":899,"author":{"gitId":"YongbinWang"},"content":"`stop` can only be used after the session has started.","lastModifiedDate":"2023-04-09"},{"lineNumber":900,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":901,"author":{"gitId":"YongbinWang"},"content":"Format: `stop`","lastModifiedDate":"2023-03-31"},{"lineNumber":902,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":903,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":904,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":905,"author":{"gitId":"YongbinWang"},"content":"`stop`","lastModifiedDate":"2023-03-31"},{"lineNumber":906,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":907,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":908,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":909,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":910,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":911,"author":{"gitId":"YongbinWang"},"content":"    Your focus session has ended.","lastModifiedDate":"2023-03-31"},{"lineNumber":912,"author":{"gitId":"YongbinWang"},"content":"    To start a new session, `start` it up!","lastModifiedDate":"2023-03-31"},{"lineNumber":913,"author":{"gitId":"YongbinWang"},"content":"    You can also configure the session to your liking with `config`!","lastModifiedDate":"2023-03-31"},{"lineNumber":914,"author":{"gitId":"YongbinWang"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":915,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":916,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":917,"author":{"gitId":"BernardLesley"},"content":"\u003c!-- @@author BernardLesley --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":918,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":919,"author":{"gitId":"BernardLesley"},"content":"### `help` - Viewing Focus Timer help","lastModifiedDate":"2023-04-06"},{"lineNumber":920,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":921,"author":{"gitId":"BernardLesley"},"content":"Lists all commands available and provide a short description of Focus Timer feature.","lastModifiedDate":"2023-04-05"},{"lineNumber":922,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":923,"author":{"gitId":"BernardLesley"},"content":"Format: `help [COMMAND_TO_CHECK]`","lastModifiedDate":"2023-04-05"},{"lineNumber":924,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":925,"author":{"gitId":"BernardLesley"},"content":"* List all commands available in the Focus Timer and a short description of the Focus Timer","lastModifiedDate":"2023-03-31"},{"lineNumber":926,"author":{"gitId":"BernardLesley"},"content":"* Give a detailed explanation of the parameters and subcommands for the given command `COMMAND_TO_CHECK`","lastModifiedDate":"2023-04-06"},{"lineNumber":927,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":928,"author":{"gitId":"BernardLesley"},"content":"Example of usage 1:","lastModifiedDate":"2023-03-31"},{"lineNumber":929,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":930,"author":{"gitId":"BernardLesley"},"content":"`help`","lastModifiedDate":"2023-03-31"},{"lineNumber":931,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":932,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":933,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":934,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":935,"author":{"gitId":"BernardLesley"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":936,"author":{"gitId":"BernardLesley"},"content":"    ft - Focus Timer - Set a configurable \u0027Pomodoro\u0027 timer with work and rest cycles to keep yourself focused and productive!","lastModifiedDate":"2023-04-09"},{"lineNumber":937,"author":{"gitId":"BernardLesley"},"content":"    Input `help` to see all available commands.","lastModifiedDate":"2023-03-31"},{"lineNumber":938,"author":{"gitId":"BernardLesley"},"content":"    Input `help [command-to-check]` to get usage help for a specific command.","lastModifiedDate":"2023-03-31"},{"lineNumber":939,"author":{"gitId":"BernardLesley"},"content":"    Here are all the commands available for you!","lastModifiedDate":"2023-03-31"},{"lineNumber":940,"author":{"gitId":"BernardLesley"},"content":"    ","lastModifiedDate":"2023-03-31"},{"lineNumber":941,"author":{"gitId":"BernardLesley"},"content":"    1. check - Check the time left in the current countdown.Only usable when a countdown is not finished!","lastModifiedDate":"2023-04-08"},{"lineNumber":942,"author":{"gitId":"BernardLesley"},"content":"    2. config - Change the number of cycles and length of your work, break and longbreak timings!","lastModifiedDate":"2023-04-08"},{"lineNumber":943,"author":{"gitId":"BernardLesley"},"content":"    3. help - Get help on what commands can be used in Focus Timer WellNUS++","lastModifiedDate":"2023-03-31"},{"lineNumber":944,"author":{"gitId":"BernardLesley"},"content":"    4. home - Stop the session and go back to WellNUS++.","lastModifiedDate":"2023-03-31"},{"lineNumber":945,"author":{"gitId":"BernardLesley"},"content":"    5. next - Move on to the next countdown. Can only be used when a countdown timer has ended.","lastModifiedDate":"2023-04-08"},{"lineNumber":946,"author":{"gitId":"BernardLesley"},"content":"    6. pause - Pause the session! Can only be used when a countdown is ticking.","lastModifiedDate":"2023-03-31"},{"lineNumber":947,"author":{"gitId":"BernardLesley"},"content":"    7. resume - Continue the countdown. Can only be used when a countdown is paused.","lastModifiedDate":"2023-04-08"},{"lineNumber":948,"author":{"gitId":"BernardLesley"},"content":"    8. start - Start your focus session!","lastModifiedDate":"2023-03-31"},{"lineNumber":949,"author":{"gitId":"BernardLesley"},"content":"    9. stop - Stop the session. You will have to `start` your focus session again!","lastModifiedDate":"2023-03-31"},{"lineNumber":950,"author":{"gitId":"BernardLesley"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":951,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":952,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":953,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":954,"author":{"gitId":"BernardLesley"},"content":"Example of usage 2:","lastModifiedDate":"2023-03-31"},{"lineNumber":955,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":956,"author":{"gitId":"BernardLesley"},"content":"`help stop`","lastModifiedDate":"2023-03-31"},{"lineNumber":957,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":958,"author":{"gitId":"BernardLesley"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":959,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":960,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":961,"author":{"gitId":"BernardLesley"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":962,"author":{"gitId":"BernardLesley"},"content":"    stop - Stop the session. You will have to `start` your focus session again!","lastModifiedDate":"2023-03-31"},{"lineNumber":963,"author":{"gitId":"BernardLesley"},"content":"    usage: stop","lastModifiedDate":"2023-03-31"},{"lineNumber":964,"author":{"gitId":"BernardLesley"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":965,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":966,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":967,"author":{"gitId":"nichyjt"},"content":"\u003c!--@@author nichyjt--\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":968,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":969,"author":{"gitId":"nichyjt"},"content":"### `config` - Configure the Timer","lastModifiedDate":"2023-04-06"},{"lineNumber":970,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":971,"author":{"gitId":"nichyjt"},"content":"Configures the focus timer\u0027s settings.","lastModifiedDate":"2023-03-31"},{"lineNumber":972,"author":{"gitId":"nichyjt"},"content":"The number of work-break cycles, work length and break length can be configured.","lastModifiedDate":"2023-03-31"},{"lineNumber":973,"author":{"gitId":"nichyjt"},"content":"When leaving `ft`, the configuration will be reset to the default values.","lastModifiedDate":"2023-03-31"},{"lineNumber":974,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":975,"author":{"gitId":"nichyjt"},"content":"Format: `config [--cycle NUM_OF_CYCLE --work WORK_TIME --break BREAK_TIME --longbreak LONG_BREAK_TIME]`","lastModifiedDate":"2023-04-06"},{"lineNumber":976,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":977,"author":{"gitId":"nichyjt"},"content":"* If no arguments are given, `config` prints out the current session settings","lastModifiedDate":"2023-04-08"},{"lineNumber":978,"author":{"gitId":"nichyjt"},"content":"* `NUM_OF_CYCLE` is an **integer** that is `\u003e\u003d 2`","lastModifiedDate":"2023-04-06"},{"lineNumber":979,"author":{"gitId":"nichyjt"},"content":"* `WORK_TIME, BREAK_TIME, LONG_BREAK_TIME` are **integers** that are all `\u003e\u003d 1`","lastModifiedDate":"2023-04-06"},{"lineNumber":980,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":981,"author":{"gitId":"nichyjt"},"content":"**Configuation Limits**","lastModifiedDate":"2023-04-08"},{"lineNumber":982,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":983,"author":{"gitId":"nichyjt"},"content":"* `LONG_BREAK_TIME` should be greater or equal to `BREAK_TIME`","lastModifiedDate":"2023-04-08"},{"lineNumber":984,"author":{"gitId":"nichyjt"},"content":"* `WORK_TIME, BREAK_TIME, LONG_BREAK_TIME` have an upper limit of 60","lastModifiedDate":"2023-04-08"},{"lineNumber":985,"author":{"gitId":"nichyjt"},"content":"* `NUM_CYCLE` has an upper limit of 5","lastModifiedDate":"2023-04-08"},{"lineNumber":986,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":987,"author":{"gitId":"nichyjt"},"content":"Why limit to 60 mins and 5 cycles?","lastModifiedDate":"2023-04-08"},{"lineNumber":988,"author":{"gitId":"nichyjt"},"content":"[Studies have shown](https://www.lib.sfu.ca/about/branches-depts/slc/learning/exam-prep/efficient-effective-study)","lastModifiedDate":"2023-04-08"},{"lineNumber":989,"author":{"gitId":"nichyjt"},"content":"that an hour of studying/task at a time is the most optimal. 5 cycles has been set to prevent guard you against","lastModifiedDate":"2023-04-08"},{"lineNumber":990,"author":{"gitId":"nichyjt"},"content":"excessive working. Anything higher than the upper limits may be counterproductive!","lastModifiedDate":"2023-04-08"},{"lineNumber":991,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":992,"author":{"gitId":"nichyjt"},"content":"**Default values for Focus Timer**","lastModifiedDate":"2023-04-08"},{"lineNumber":993,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":994,"author":{"gitId":"nichyjt"},"content":"* `NUM_OF_CYCLE \u003d 2`","lastModifiedDate":"2023-04-06"},{"lineNumber":995,"author":{"gitId":"nichyjt"},"content":"* `WORK_TIME \u003d 1`","lastModifiedDate":"2023-04-06"},{"lineNumber":996,"author":{"gitId":"nichyjt"},"content":"* `BREAK_TIME \u003d 1`","lastModifiedDate":"2023-04-06"},{"lineNumber":997,"author":{"gitId":"nichyjt"},"content":"* `LONG_BREAK_TIME \u003d 1`","lastModifiedDate":"2023-04-06"},{"lineNumber":998,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":999,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":1000,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1001,"author":{"gitId":"nichyjt"},"content":"`config`","lastModifiedDate":"2023-04-08"},{"lineNumber":1002,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1003,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":1004,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1005,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1006,"author":{"gitId":"nichyjt"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":1007,"author":{"gitId":"nichyjt"},"content":"    Okay, here\u0027s your new session details!","lastModifiedDate":"2023-03-31"},{"lineNumber":1008,"author":{"gitId":"nichyjt"},"content":"    Cycles: 2","lastModifiedDate":"2023-04-08"},{"lineNumber":1009,"author":{"gitId":"nichyjt"},"content":"    Work: 1 minute","lastModifiedDate":"2023-03-31"},{"lineNumber":1010,"author":{"gitId":"nichyjt"},"content":"    Break: 1 minute","lastModifiedDate":"2023-03-31"},{"lineNumber":1011,"author":{"gitId":"nichyjt"},"content":"    Long break: 1 minute","lastModifiedDate":"2023-03-31"},{"lineNumber":1012,"author":{"gitId":"nichyjt"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":1013,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1014,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1015,"author":{"gitId":"nichyjt"},"content":"Example of usage 2:","lastModifiedDate":"2023-03-31"},{"lineNumber":1016,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1017,"author":{"gitId":"nichyjt"},"content":"`config --longbreak 10 --cycle 4 --work 30 --break 5`","lastModifiedDate":"2023-04-08"},{"lineNumber":1018,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1019,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":1020,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1021,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1022,"author":{"gitId":"nichyjt"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":1023,"author":{"gitId":"nichyjt"},"content":"    Okay, here\u0027s your new session details!","lastModifiedDate":"2023-03-31"},{"lineNumber":1024,"author":{"gitId":"nichyjt"},"content":"    Cycles: 4","lastModifiedDate":"2023-03-31"},{"lineNumber":1025,"author":{"gitId":"nichyjt"},"content":"    Work: 30 minutes","lastModifiedDate":"2023-04-08"},{"lineNumber":1026,"author":{"gitId":"nichyjt"},"content":"    Break: 5 minutes","lastModifiedDate":"2023-04-08"},{"lineNumber":1027,"author":{"gitId":"nichyjt"},"content":"    Long break: 10 minutes","lastModifiedDate":"2023-04-08"},{"lineNumber":1028,"author":{"gitId":"nichyjt"},"content":"************************************************************","lastModifiedDate":"2023-04-05"},{"lineNumber":1029,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1030,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1031,"author":{"gitId":"nichyjt"},"content":"\u003c!--@@ author BernardLesley--\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":1032,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":1033,"author":{"gitId":"nichyjt"},"content":"## `home` - Return back main WellNUS++","lastModifiedDate":"2023-04-06"},{"lineNumber":1034,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1035,"author":{"gitId":"nichyjt"},"content":"To leave the current feature and return back to main interface. Each individual feature (i.e. atomic habit,","lastModifiedDate":"2023-03-31"},{"lineNumber":1036,"author":{"gitId":"nichyjt"},"content":"self reflection, focus timer and gamification) has this command with customised","lastModifiedDate":"2023-03-31"},{"lineNumber":1037,"author":{"gitId":"nichyjt"},"content":"output messages.","lastModifiedDate":"2023-03-31"},{"lineNumber":1038,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1039,"author":{"gitId":"nichyjt"},"content":"Format: `home`","lastModifiedDate":"2023-03-31"},{"lineNumber":1040,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1041,"author":{"gitId":"nichyjt"},"content":"Example of usage 1:","lastModifiedDate":"2023-04-06"},{"lineNumber":1042,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1043,"author":{"gitId":"nichyjt"},"content":"`home`","lastModifiedDate":"2023-03-31"},{"lineNumber":1044,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1045,"author":{"gitId":"nichyjt"},"content":"Expected outcome for atomic habit:","lastModifiedDate":"2023-03-31"},{"lineNumber":1046,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1047,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1048,"author":{"gitId":"nichyjt"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-06"},{"lineNumber":1049,"author":{"gitId":"nichyjt"},"content":"    Thank you for using atomic habits. Do not forget about me!","lastModifiedDate":"2023-03-31"},{"lineNumber":1050,"author":{"gitId":"nichyjt"},"content":"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~","lastModifiedDate":"2023-04-06"},{"lineNumber":1051,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1052,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1053,"author":{"gitId":"nichyjt"},"content":"Example of usage 2:","lastModifiedDate":"2023-04-06"},{"lineNumber":1054,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":1055,"author":{"gitId":"nichyjt"},"content":"`home`","lastModifiedDate":"2023-04-06"},{"lineNumber":1056,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":1057,"author":{"gitId":"nichyjt"},"content":"Expected outcome for self reflection:","lastModifiedDate":"2023-03-31"},{"lineNumber":1058,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1059,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1060,"author":{"gitId":"nichyjt"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":1061,"author":{"gitId":"nichyjt"},"content":"    How do you feel after reflecting on yourself?","lastModifiedDate":"2023-03-31"},{"lineNumber":1062,"author":{"gitId":"nichyjt"},"content":"    Hope you have gotten some takeaways from self reflection, see you again!!","lastModifiedDate":"2023-03-31"},{"lineNumber":1063,"author":{"gitId":"nichyjt"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-31"},{"lineNumber":1064,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1065,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1066,"author":{"gitId":"nichyjt"},"content":"**Note**: These are just particular examples taken from specific features, and are **_not representative_** of","lastModifiedDate":"2023-04-06"},{"lineNumber":1067,"author":{"gitId":"nichyjt"},"content":"other features\u0027 `home` commands. Please try the `home` command inside our application to view the actual customised","lastModifiedDate":"2023-04-06"},{"lineNumber":1068,"author":{"gitId":"nichyjt"},"content":"output for other features.","lastModifiedDate":"2023-04-06"},{"lineNumber":1069,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":1070,"author":{"gitId":"nichyjt"},"content":"## `exit` - Exit WellNUS++","lastModifiedDate":"2023-04-06"},{"lineNumber":1071,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1072,"author":{"gitId":"nichyjt"},"content":"Exits `WellNUS++`. Data of the current progress will be saved in data files and restored at the next launch","lastModifiedDate":"2023-04-08"},{"lineNumber":1073,"author":{"gitId":"nichyjt"},"content":"of `WellNUS++`.","lastModifiedDate":"2023-04-08"},{"lineNumber":1074,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1075,"author":{"gitId":"nichyjt"},"content":"Format: `exit`","lastModifiedDate":"2023-03-31"},{"lineNumber":1076,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1077,"author":{"gitId":"nichyjt"},"content":"Take note that users are only allowed to exit from **main** WellNUS++ (i.e. users cannot exit the program from","lastModifiedDate":"2023-04-06"},{"lineNumber":1078,"author":{"gitId":"nichyjt"},"content":"individual features like atomic habit, and the `exit` command is not recognised inside feature sessions).","lastModifiedDate":"2023-04-06"},{"lineNumber":1079,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1080,"author":{"gitId":"nichyjt"},"content":"Example of usage:","lastModifiedDate":"2023-03-31"},{"lineNumber":1081,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1082,"author":{"gitId":"nichyjt"},"content":"`exit`","lastModifiedDate":"2023-03-31"},{"lineNumber":1083,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1084,"author":{"gitId":"nichyjt"},"content":"Expected outcome:","lastModifiedDate":"2023-03-31"},{"lineNumber":1085,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1086,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1087,"author":{"gitId":"nichyjt"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":1088,"author":{"gitId":"nichyjt"},"content":"    Thank you for using WellNUS++! See you again soon Dx","lastModifiedDate":"2023-03-31"},{"lineNumber":1089,"author":{"gitId":"nichyjt"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-31"},{"lineNumber":1090,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-31"},{"lineNumber":1091,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1092,"author":{"gitId":"haoyangw"},"content":"\u003c!--@@author haoyangw --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":1093,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":1094,"author":{"gitId":"haoyangw"},"content":"## FAQ","lastModifiedDate":"2023-03-31"},{"lineNumber":1095,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1096,"author":{"gitId":"haoyangw"},"content":"**Q**: What do I need to run `WellNUS++` on my computer?","lastModifiedDate":"2023-04-07"},{"lineNumber":1097,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1098,"author":{"gitId":"haoyangw"},"content":"**A**: Your computer needs to have **Java 11 or above** installed. The operating system(Windows, macOS, etc) doesn\u0027t","lastModifiedDate":"2023-04-07"},{"lineNumber":1099,"author":{"gitId":"haoyangw"},"content":"matter.","lastModifiedDate":"2023-04-07"},{"lineNumber":1100,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1101,"author":{"gitId":"haoyangw"},"content":"**Q**: Would my data be saved after I close the `WellNUS++`?","lastModifiedDate":"2023-04-06"},{"lineNumber":1102,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1103,"author":{"gitId":"haoyangw"},"content":"**A**: Yes. All ours features will store data inside a `data` folder relative to where you placed the `WellNUS++` jar.","lastModifiedDate":"2023-04-06"},{"lineNumber":1104,"author":{"gitId":"haoyangw"},"content":"The next time you run `WellNUS++`, all your data will be restored.","lastModifiedDate":"2023-04-06"},{"lineNumber":1105,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1106,"author":{"gitId":"haoyangw"},"content":"**Q**: Do I need to be connected to the Internet to run `WellNUS++`?","lastModifiedDate":"2023-04-06"},{"lineNumber":1107,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1108,"author":{"gitId":"haoyangw"},"content":"**A**: No. `WellNUS++` runs offline to help you focus better. Your data is also saved locally, so it is preserved even","lastModifiedDate":"2023-04-06"},{"lineNumber":1109,"author":{"gitId":"haoyangw"},"content":"without an Internet connection.","lastModifiedDate":"2023-04-06"},{"lineNumber":1110,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1111,"author":{"gitId":"haoyangw"},"content":"**Q**: Can I transfer my data to another computer?","lastModifiedDate":"2023-04-06"},{"lineNumber":1112,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1113,"author":{"gitId":"haoyangw"},"content":"**A**: Yes. Copy the `data` folder found in the same path as the `WellNUS++` jar file to another","lastModifiedDate":"2023-04-06"},{"lineNumber":1114,"author":{"gitId":"haoyangw"},"content":"computer. All your data will be restored the next time you run `WellNUS++`.","lastModifiedDate":"2023-04-06"},{"lineNumber":1115,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":1116,"author":{"gitId":"haoyangw"},"content":"**Q**: How can I navigate through the program?","lastModifiedDate":"2023-04-07"},{"lineNumber":1117,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1118,"author":{"gitId":"haoyangw"},"content":"**A**: In `WellNUS++`, type `help` to view the list of feature supported by our app. From within a feature, type `help`","lastModifiedDate":"2023-04-06"},{"lineNumber":1119,"author":{"gitId":"haoyangw"},"content":"to learn about the commands available within that feature.","lastModifiedDate":"2023-04-06"},{"lineNumber":1120,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1121,"author":{"gitId":"nichyjt"},"content":"\u003c!-- @@author nichyjt --\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":1122,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":1123,"author":{"gitId":"nichyjt"},"content":"## Command Summary","lastModifiedDate":"2023-03-31"},{"lineNumber":1124,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":1125,"author":{"gitId":"nichyjt"},"content":"* Help `help [COMMAND_TO_CHECK]`","lastModifiedDate":"2023-04-09"},{"lineNumber":1126,"author":{"gitId":"nichyjt"},"content":"* Access feature`hb`","lastModifiedDate":"2023-03-31"},{"lineNumber":1127,"author":{"gitId":"nichyjt"},"content":"    * Add habit `add --name ATOMIC_HABIT_NAME`","lastModifiedDate":"2023-04-06"},{"lineNumber":1128,"author":{"gitId":"nichyjt"},"content":"    * View habit `list`","lastModifiedDate":"2023-03-31"},{"lineNumber":1129,"author":{"gitId":"nichyjt"},"content":"    * Update habit `update --id HABIT_INDEX [--by NUMBER_TO_CHANGE]`","lastModifiedDate":"2023-04-06"},{"lineNumber":1130,"author":{"gitId":"nichyjt"},"content":"    * Delete habit `delete --id HABIT_INDEX`","lastModifiedDate":"2023-04-09"},{"lineNumber":1131,"author":{"gitId":"nichyjt"},"content":"* Access feature `reflect`","lastModifiedDate":"2023-03-31"},{"lineNumber":1132,"author":{"gitId":"nichyjt"},"content":"    * Get reflect question `get`","lastModifiedDate":"2023-03-31"},{"lineNumber":1133,"author":{"gitId":"nichyjt"},"content":"    * Like reflect question `like INDEX`","lastModifiedDate":"2023-03-31"},{"lineNumber":1134,"author":{"gitId":"nichyjt"},"content":"    * View favorite list `fav`","lastModifiedDate":"2023-03-31"},{"lineNumber":1135,"author":{"gitId":"nichyjt"},"content":"    * Unlike reflect question `unlike INDEX`","lastModifiedDate":"2023-04-06"},{"lineNumber":1136,"author":{"gitId":"nichyjt"},"content":"    * View previous questions `prev`","lastModifiedDate":"2023-03-31"},{"lineNumber":1137,"author":{"gitId":"nichyjt"},"content":"* Access feature `gamif`","lastModifiedDate":"2023-03-31"},{"lineNumber":1138,"author":{"gitId":"nichyjt"},"content":"    * Display gamification statistics `stats`","lastModifiedDate":"2023-03-31"},{"lineNumber":1139,"author":{"gitId":"nichyjt"},"content":"* Access feature `ft`","lastModifiedDate":"2023-03-31"},{"lineNumber":1140,"author":{"gitId":"nichyjt"},"content":"    * Start the timer `start`","lastModifiedDate":"2023-03-31"},{"lineNumber":1141,"author":{"gitId":"nichyjt"},"content":"    * Pause the timer `pause`","lastModifiedDate":"2023-03-31"},{"lineNumber":1142,"author":{"gitId":"nichyjt"},"content":"    * Resume the timer `resume`","lastModifiedDate":"2023-03-31"},{"lineNumber":1143,"author":{"gitId":"nichyjt"},"content":"    * Check the time left `check`","lastModifiedDate":"2023-03-31"},{"lineNumber":1144,"author":{"gitId":"nichyjt"},"content":"    * Go to the next countdown `next`","lastModifiedDate":"2023-03-31"},{"lineNumber":1145,"author":{"gitId":"nichyjt"},"content":"    * Stop the timer `stop`","lastModifiedDate":"2023-03-31"},{"lineNumber":1146,"author":{"gitId":"nichyjt"},"content":"    * Configure the","lastModifiedDate":"2023-04-08"},{"lineNumber":1147,"author":{"gitId":"nichyjt"},"content":"      timer `config [--cycle NUM_OF_CYCLE --work WORK_TIME --break BREAK_TIME --longbreak LONG_BREAK_TIME]`","lastModifiedDate":"2023-04-08"},{"lineNumber":1148,"author":{"gitId":"nichyjt"},"content":"* Return to main interface `home`","lastModifiedDate":"2023-03-31"},{"lineNumber":1149,"author":{"gitId":"nichyjt"},"content":"* Exit program `exit`","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"wenxin-c":188,"BernardLesley":317,"haoyangw":93,"nichyjt":246,"YongbinWang":305}},{"path":"docs/diagrams/AtomicHabit.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"@startuml","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2023-04-08"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"!include style.puml","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"Class MainManager","lastModifiedDate":"2023-04-08"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"Class AtomicHabitManager {","lastModifiedDate":"2023-04-08"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"+ runEventDriver()","lastModifiedDate":"2023-04-08"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"Class AtomicHabitList {","lastModifiedDate":"2023-04-08"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"+ addAtomicHabit(AtomicHabit)","lastModifiedDate":"2023-04-08"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"+ deleteAtomicHabit(AtomicHabit)","lastModifiedDate":"2023-04-08"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"+ getAllHabits(): ArrayList\u003cAtomicHabit\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"+ getHabitByIndex(Integer): AtomicHabit","lastModifiedDate":"2023-04-08"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"Class AtomicHabit {","lastModifiedDate":"2023-04-08"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"- description: String","lastModifiedDate":"2023-04-08"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"- count: int","lastModifiedDate":"2023-04-08"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"+ increaseCount()","lastModifiedDate":"2023-04-08"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"+ decreaseCount()","lastModifiedDate":"2023-04-08"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"+ getDescription(): String","lastModifiedDate":"2023-04-08"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"+ getCount(): int","lastModifiedDate":"2023-04-08"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"+ toString(): String","lastModifiedDate":"2023-04-08"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"Class AtomicHabitCommand {","lastModifiedDate":"2023-04-08"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"+ execute()","lastModifiedDate":"2023-04-08"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-04-08"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"MainManager --\u003e AtomicHabitManager : \u003e Executes","lastModifiedDate":"2023-04-08"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager --\u003e \"1   \" AtomicHabitList : \u003e Initializes","lastModifiedDate":"2023-04-08"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager -down-\u003e \"6\" AtomicHabitCommand : \u003e Calls","lastModifiedDate":"2023-04-08"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitCommand -right-\u003e \"1\" AtomicHabitList: \u003e Controls","lastModifiedDate":"2023-04-08"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitCommand -up-|\u003e Command","lastModifiedDate":"2023-04-08"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitList -right-\u003e \"0..*\" AtomicHabit : \u003e Manages","lastModifiedDate":"2023-04-08"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"@enduml","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"YongbinWang":52}},{"path":"docs/diagrams/AtomicHabitSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"@startuml","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"!include style.puml","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"hide footbox","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"participant \":MainManager\" as MainManager MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"participant \":AtomicHabitManager\" as AtomicHabitManager MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"participant \":AtomicUi\" as AtomicUi MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"participant \":HabitList\" as HabitList MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"participant \":AddCommand\" as AddCommand MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"participant \":DeleteCommand\" as DeleteCommand MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"participant \":ListCommand\" as ListCommand MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"participant \":UpdateCommand\" as UpdateCommand MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"participant \":AtomicHabitCommand\" as AtomicHabitCommand MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"participant \":HelpCommand\" as HelpCommand MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"participant \":HomeCommand\" as HomeCommand MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"participant \":BadCommandException\" as BadCommandException MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"activate MainManager","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"create AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"MainManager -\u003e AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"activate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"create AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager -\u003e AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"activate AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"AtomicUi --\u003e AtomicHabitManager","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"deactivate AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"create HabitList","lastModifiedDate":"2023-04-09"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager -\u003e HabitList","lastModifiedDate":"2023-04-09"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"activate HabitList","lastModifiedDate":"2023-04-09"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"HabitList --\u003e AtomicHabitManager","lastModifiedDate":"2023-04-09"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"deactivate HabitList","lastModifiedDate":"2023-04-09"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager --\u003e MainManager","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"deactivate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"MainManager -\u003e AtomicHabitManager : runEventDriver()","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"activate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager -\u003e AtomicHabitManager : greet()","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"activate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager -\u003e AtomicUi : getTextUi()","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"activate AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"AtomicUi --\u003e AtomicHabitManager : AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"deactivate AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager -\u003e AtomicUi : printOutputMessage()","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"deactivate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager -\u003e AtomicHabitManager : runCommands()","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"activate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    loop until isExit is true","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"        AtomicHabitManager -\u003e AtomicHabitManager : getCommand()","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"        activate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"        AtomicHabitManager -\u003e AtomicUi : getTextUi()","lastModifiedDate":"2023-04-09"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"        activate AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"        AtomicUi --\u003e AtomicHabitManager : AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"        deactivate AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"        AtomicHabitManager -\u003e AtomicUi : getCommand()","lastModifiedDate":"2023-04-09"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"        activate AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"        AtomicUi --\u003e AtomicHabitManager : commandString","lastModifiedDate":"2023-04-09"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"        deactivate AtomicUi","lastModifiedDate":"2023-04-09"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        deactivate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        AtomicHabitManager -\u003e AtomicHabitManager : getCommandFor(commandString)","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"        activate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"            alt commandString \u003d add","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"                create AddCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"                AtomicHabitManager -\u003e AddCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"                activate AddCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"                AddCommand --\u003e AtomicHabitManager : AddCommand(arguments, HabitList)","lastModifiedDate":"2023-04-09"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"                deactivate AddCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"            else commandString \u003d delete","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"                create DeleteCommand","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"                AtomicHabitManager -\u003e DeleteCommand","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"                activate DeleteCommand","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"                DeleteCommand --\u003e AtomicHabitManager : DeleteCommand(arguments, HabitList)","lastModifiedDate":"2023-04-09"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"                deactivate DeleteCommand","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"            else commandString \u003d home","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"                create HomeCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"                AtomicHabitManager -\u003e HomeCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"                activate HomeCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"                HomeCommand --\u003e AtomicHabitManager : HomeCommand(arguments, HabitList)","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"                deactivate HomeCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"            else commandString \u003d list","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"                create ListCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"                AtomicHabitManager -\u003e ListCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"                activate ListCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"                ListCommand --\u003e AtomicHabitManager : ListCommand(arguments, HabitList)","lastModifiedDate":"2023-04-09"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"                deactivate ListCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"            else commandString \u003d update","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"                create UpdateCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"                AtomicHabitManager -\u003e UpdateCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"                activate UpdateCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"                UpdateCommand --\u003e AtomicHabitManager : UpdateCommand(arguments, HabitList)","lastModifiedDate":"2023-04-09"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"                deactivate UpdateCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"            else commandString \u003d help","lastModifiedDate":"2023-04-08"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"                create HelpCommand","lastModifiedDate":"2023-04-08"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"                AtomicHabitManager -\u003e HelpCommand","lastModifiedDate":"2023-04-08"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"                activate HelpCommand","lastModifiedDate":"2023-04-08"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"                HelpCommand --\u003e AtomicHabitManager : HelpCommand(arguments, HabitList)","lastModifiedDate":"2023-04-09"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"                deactivate HelpCommand","lastModifiedDate":"2023-04-09"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"            else","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"                create BadCommandException","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"                AtomicHabitManager -\u003e BadCommandException","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"                activate BadCommandException","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"                BadCommandException --\u003e AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"                deactivate BadCommandException","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"            end","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"        deactivate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"        AtomicHabitManager -\u003e AtomicHabitCommand : execute()","lastModifiedDate":"2023-04-09"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"    end","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"deactivate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"deactivate AtomicHabitManager","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager --\u003e MainManager","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"@enduml","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"BernardLesley":5,"YongbinWang":119}},{"path":"docs/diagrams/CommandParserClass.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"@startuml","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"!include style.puml","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"Class CommandParser {","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"    + parseUserInput(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    + getMainArgument(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    - splitIntoCommands(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    - getArgumentFromCommand(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    - getPayloadFromCommand(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"Class \"{abstract}\\nManager\" as Manager {","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    # commandParser : CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    + getCommandParser()","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"Class AtomicHabitManager {","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    # commandParser : CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    + getCommandParser()","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"Class ReflectionManager {","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    # commandParser : CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    + getCommandParser()","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"CommandParser \"1\" -- Manager : contains \u003c","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"Manager \u003c|-- AtomicHabitManager","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"Manager \u003c|-- ReflectionManager","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"@enduml","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"nichyjt":39}},{"path":"docs/diagrams/CommandParserSequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"@startuml","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"!include style.puml","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"hide footbox","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"participant Manager MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"participant CommandParser MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"Manager -\u003e CommandParser : parseUserInput(userInput)","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"activate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"CommandParser -\u003e CommandParser : splitIntoCommands(userInput)","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"activate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"CommandParser --\u003e CommandParser : String[] commands","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"deactivate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    loop for each command in commands","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"        CommandParser -\u003e CommandParser :getArgumentFromCommand(command)","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"        activate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"        CommandParser --\u003e CommandParser : argument","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        deactivate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"        CommandParser -\u003e CommandParser :getPayloadFromCommand(command)","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"        activate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"        CommandParser --\u003e CommandParser : payload","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"        deactivate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    end","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"CommandParser --\u003e Manager: HashMap\u003cString,String\u003e argumentPayload","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"deactivate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"@enduml","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"nichyjt":30}},{"path":"docs/diagrams/FocusTimerClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"@startuml","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"!include style.puml","lastModifiedDate":"2023-04-07"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-04-07"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-04-07"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"Class MainManager","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"Class FocusManager {","lastModifiedDate":"2023-04-07"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"+ runEventDriver()","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-04-07"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"Class Session {","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"- currentCountdownIndex: int","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"- cycle: int","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"- work: int","lastModifiedDate":"2023-04-07"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"- brk: int","lastModifiedDate":"2023-04-07"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"- longBrk: int","lastModifiedDate":"2023-04-07"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"+ startTimer()","lastModifiedDate":"2023-04-07"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"+ getCurrentCountdown(): Countdown","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"+ isSessionReady(): boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"+ isSessionCounting(): boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"+ isSessionWaiting(): boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"+ isSessionPaused(): boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-04-07"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"Class Countdown {","lastModifiedDate":"2023-04-07"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"- timer: Timer","lastModifiedDate":"2023-04-07"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"- minutes: int","lastModifiedDate":"2023-04-07"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"- seconds: int","lastModifiedDate":"2023-04-07"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"- isCompletedCountdown: AtomicBoolean","lastModifiedDate":"2023-04-07"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"- isRunClock: AtomicBoolean","lastModifiedDate":"2023-04-07"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"- isReady: boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"+ start()","lastModifiedDate":"2023-04-07"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"+ setStop()","lastModifiedDate":"2023-04-07"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"+ setStart()","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"+ setPause()","lastModifiedDate":"2023-04-07"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"+ getMinutes(): int","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"+ getSeconds(): int","lastModifiedDate":"2023-04-07"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"+ getIsRunning(): boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"+ getIsCompletedCountdown(): boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"+ isCountdownPrinting(): boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"+ getIsReady(): boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"Class FocusCommand {","lastModifiedDate":"2023-04-07"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"+ execute()","lastModifiedDate":"2023-04-07"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-04-07"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2023-04-07"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"MainManager --\u003e FocusManager : \u003e Executes","lastModifiedDate":"2023-04-07"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"FocusManager --\u003e \"1   \" Session : \u003e Initializes","lastModifiedDate":"2023-04-07"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"FocusManager -down-\u003e \"9\" FocusCommand : \u003e Calls","lastModifiedDate":"2023-04-07"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"FocusCommand -right-\u003e \"1\" Session: \u003e Controls","lastModifiedDate":"2023-04-07"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"FocusCommand -up-|\u003e Command","lastModifiedDate":"2023-04-07"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"Session -right-\u003e \"4..*\" Countdown : \u003e Manages","lastModifiedDate":"2023-04-07"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"@enduml","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"nichyjt":68}},{"path":"docs/diagrams/FocusTimerState.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"@startuml","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"\u0027https://plantuml.com/state-diagram","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"hide empty description","lastModifiedDate":"2023-04-07"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"[*] --\u003e Ready","lastModifiedDate":"2023-04-07"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"Ready --\u003e Ready: config","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"Ready --\u003e Counting : start","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"Counting -up-\u003e Ready : stop","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"Counting -down-\u003e Waiting","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"Counting --\u003e Counting: check","lastModifiedDate":"2023-04-07"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"Waiting --\u003e Counting : next","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"Waiting --\u003e Ready: stop","lastModifiedDate":"2023-04-07"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"Paused -down-\u003e Ready: stop","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"Paused -up-\u003e Counting: resume","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"Paused -up-\u003e Paused: check","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"Counting --\u003e Paused: pause","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"@enduml","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"nichyjt":20}},{"path":"docs/diagrams/GamificationClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"@startuml","lastModifiedDate":"2023-04-09"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2023-04-09"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"!include style.puml","lastModifiedDate":"2023-04-09"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-04-09"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"class GamificationData {","lastModifiedDate":"2023-04-09"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"    - xp: int \u003d 0","lastModifiedDate":"2023-04-09"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"    - level: int","lastModifiedDate":"2023-04-09"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"    + addXp(pointsToAdd: int): boolean","lastModifiedDate":"2023-04-09"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"    + getXpForCurrentLevelOnly(): int","lastModifiedDate":"2023-04-09"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"    + getTotalXp(): int","lastModifiedDate":"2023-04-09"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    + getXpLevel(): int","lastModifiedDate":"2023-04-09"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"    + getXpToReachNextLevel(): int","lastModifiedDate":"2023-04-09"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    + minusXp(pointsToMinus: int): boolean","lastModifiedDate":"2023-04-09"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"class GamificationStorage {","lastModifiedDate":"2023-04-09"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    + cleanDataFile()","lastModifiedDate":"2023-04-10"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    + loadData(): GamificationData","lastModifiedDate":"2023-04-09"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    + store(data: GamificationData)","lastModifiedDate":"2023-04-09"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"class Storage {","lastModifiedDate":"2023-04-09"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    + checkFileExists(fileName: String): boolean","lastModifiedDate":"2023-04-09"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    + loadData(fileName: String): ArrayList\u003cString\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    + saveData(tokenizedManager: ArrayList\u003cString\u003e, fileName: String)","lastModifiedDate":"2023-04-09"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"GamificationData \u003c..\u003e GamificationStorage","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"GamificationStorage --\u003e \"1\" Storage","lastModifiedDate":"2023-04-09"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"class \"\u003c\u003cinterface\u003e\u003e\\nTokenizer\" as Tokenizer {","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"class GamificationTokenizer {","lastModifiedDate":"2023-04-09"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    + tokenize(dataObjects: ArrayList\u003cGamificationData\u003e): ArrayList\u003cString\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"    + detokenize(tokenizedDataObjects: ArrayList\u003cString\u003e): ArrayList\u003cGamificationData\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"Tokenizer \u003c|.. GamificationTokenizer","lastModifiedDate":"2023-04-09"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"GamificationStorage -\u003e \"1\" GamificationTokenizer","lastModifiedDate":"2023-04-09"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"GamificationData \u003c.. GamificationTokenizer","lastModifiedDate":"2023-04-09"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2023-04-09"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"class HelpCommand {","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"class HomeCommand {","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"class StatsCommand {","lastModifiedDate":"2023-04-09"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"Command \u003c|-- HelpCommand","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"Command \u003c|-- HomeCommand","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"Command \u003c|-- StatsCommand","lastModifiedDate":"2023-04-09"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"StatsCommand ---\u003e \"1\" GamificationData","lastModifiedDate":"2023-04-09"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"class TextUi {","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"class GamificationUi {","lastModifiedDate":"2023-04-09"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    + {static} printCelebrateLevelUp()","lastModifiedDate":"2023-04-09"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    + {static} printGoodbye()","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"    + {static} printLogo()","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    + {static} printGamificationMessage(msg: String)","lastModifiedDate":"2023-04-09"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    + {static} printXpBar(gamData: GamificationData, shouldPrintXpRemaining: boolean)","lastModifiedDate":"2023-04-09"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"TextUi \u003c|-- GamificationUi","lastModifiedDate":"2023-04-09"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"GamificationData \u003c. GamificationUi","lastModifiedDate":"2023-04-09"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"class \"{abstract}\\nManager\" as Manager","lastModifiedDate":"2023-04-09"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"class GamificationManager {","lastModifiedDate":"2023-04-09"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    + getGamificationData(): GamificationData","lastModifiedDate":"2023-04-09"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"Manager \u003c|-- GamificationManager","lastModifiedDate":"2023-04-09"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"GamificationManager --\u003e \"1\" GamificationData","lastModifiedDate":"2023-04-09"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"GamificationManager --\u003e \"1\" GamificationUi","lastModifiedDate":"2023-04-09"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"GamificationManager ..\u003e HelpCommand","lastModifiedDate":"2023-04-09"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"GamificationManager ..\u003e HomeCommand","lastModifiedDate":"2023-04-09"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"GamificationManager ..\u003e StatsCommand","lastModifiedDate":"2023-04-09"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"@enduml","lastModifiedDate":"2023-04-09"}],"authorContributionMap":{"haoyangw":76}},{"path":"docs/diagrams/Manager.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"@startuml","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"!include style.puml","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"Package common {","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"Class MainManager {","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"+greet()","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"+runEventDriver()","lastModifiedDate":"2023-04-09"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"Class WellNus {","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"+greet()","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"+executeUserCommands()","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"+byeUser()","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"Package manager {","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"Class \"{abstract}\\nManager\" as Manager {","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"+{abstract} runEventDriver()","lastModifiedDate":"2023-04-09"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"Package atomichabit {","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"Class AtomicHabitManager {","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"+runEventDriver()","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"Package reflection {","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"Class ReflectionManager {","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"+runEventDriver()","lastModifiedDate":"2023-04-09"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"Manager \u003c|-- MainManager","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"Manager \u003c|- AtomicHabitManager","lastModifiedDate":"2023-04-09"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"Manager \u003c|- ReflectionManager","lastModifiedDate":"2023-04-09"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"WellNus -\u003e \"1\" MainManager : executes \u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"MainManager --\u003e \"1\" AtomicHabitManager : calls \u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"MainManager --\u003e \"1\" ReflectionManager : calls \u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"@enduml","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"haoyangw":46}},{"path":"docs/diagrams/ReflectionClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"@startuml","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"!include style.puml","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2023-04-06"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"class ReflectionManager{","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"-reflectUi : ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"+executeCommands() : void","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"+runEventDriver() : void","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"class ReflectUi{","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"#printLogoWithSeparator(logo : String) : void","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"class ReflectionQuestion{","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"-questionDescription : String","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"class QuestionList{","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"-setUpQuestions() : void","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"+getQuestions() : ArrayList\u003cReflectionQuestion\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"class ReflectionCommands","lastModifiedDate":"2023-04-07"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"class TextUi{","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"+printOutputMessage(message : String) : void","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"+printErrorFor(exception : Exception, additionalMessage : String) : void","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"class \"{abstract}\\nManager\" as Manager{","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"#{abstract}setSupportedCommands() : void","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"#{abstract}runEventDriver() : void","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"class \"{abstract}\\nCommand\" as Command{","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"-arguments : HashMap\u003cString, String\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"#{abstract}execute : void","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"#{abstract}validateCommand(commandMap: HashMap\u003cString, String\u003e) : void","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"class Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"class ReflectionTokenizer","lastModifiedDate":"2023-04-07"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager --\u003e \"1\" QuestionList : create \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager --|\u003e Manager","lastModifiedDate":"2023-03-22"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager ..\u003e ReflectionCommands","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"ReflectionCommands --\u003e \"1\" ReflectUi : uses \u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"ReflectionCommands ..\u003e QuestionList","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e \"10\" ReflectionQuestion : contains \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e \"1\" ReflectUi : uses \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e \"1\" Storage : uses \u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e \"1\" ReflectionTokenizer : uses \u003e","lastModifiedDate":"2023-04-07"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"ReflectUi --|\u003e TextUi","lastModifiedDate":"2023-03-22"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"ReflectionCommands --|\u003e Command","lastModifiedDate":"2023-04-06"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"@enduml","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"wenxin-c":53}},{"path":"docs/diagrams/ReflectionCommandsUML.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"@startuml","lastModifiedDate":"2023-04-06"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"!include style.puml","lastModifiedDate":"2023-04-06"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2023-04-06"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-04-06"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"Package command \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"class GetCommand{","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"+getRandomQuestions() : ArrayList\u003cReflectionQuestion\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"class FavCommand{","lastModifiedDate":"2023-04-06"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"class PrevCommand{","lastModifiedDate":"2023-04-06"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"+getPrevSetQuestions() : void","lastModifiedDate":"2023-04-06"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-06"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"class LikeCommand{","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"+addFavQuestion(questionIndex: String)","lastModifiedDate":"2023-04-06"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"+mapInputToQuestion() : HashMap\u003cInteger, Integer\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-06"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"class UnlikeCommand{","lastModifiedDate":"2023-04-06"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"+removeFavQuestion(questionIndex: String) : void","lastModifiedDate":"2023-04-06"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-06"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"class HelpCommand{","lastModifiedDate":"2023-04-06"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"+printHelpMessage() : void","lastModifiedDate":"2023-04-06"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-06"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"class HomeCommand{","lastModifiedDate":"2023-04-06"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-06"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"@enduml","lastModifiedDate":"2023-04-06"}],"authorContributionMap":{"wenxin-c":32}},{"path":"docs/diagrams/ReflectionSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"@startuml","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"!include style.puml","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"hide footbox","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"participant \":MainManager\" as MainManager MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"participant \":ReflectionManager\" as ReflectionManager MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"participant \":ReflectUi\" as ReflectUi MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"participant \":CommandParser\" as CommandParser MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"participant \":QuestionList\" as QuestionList MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"participant \":GetCommand\" as GetCommand MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"participant \":LikeCommand\" as LikeCommand MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"participant \":UnlikeCommand\" as UnlikeCommand MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"participant \":PrevCommand\" as PrevCommand MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"participant \":FavoriteCommand\" as FavoriteCommand MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"participant \":HelpCommand\" as HelpCommand MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"participant \":HomeCommand\" as HomeCommand MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"participant \":BadCommandException\" as BadCommandException MODEL_COLOR","lastModifiedDate":"2023-04-06"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"activate MainManager","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"create ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"MainManager -\u003e ReflectionManager:","lastModifiedDate":"2023-04-06"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"activate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"create ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e ReflectUi:","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"activate ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"ReflectUi --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"deactivate ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"create CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e CommandParser:","lastModifiedDate":"2023-04-06"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"activate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"CommandParser --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"deactivate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"create QuestionList","lastModifiedDate":"2023-04-06"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e QuestionList:","lastModifiedDate":"2023-04-06"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"activate QuestionList","lastModifiedDate":"2023-04-06"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"deactivate QuestionList","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager --\u003e MainManager","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"deactivate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"MainManager -\u003e ReflectionManager : runEventDriver()","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"activate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"loop until isExit is true","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    ReflectionManager -\u003e ReflectUi : getCommands()","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    activate ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    ReflectUi --\u003e ReflectionManager : inputCommand: String","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    deactivate ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"    ReflectionManager -\u003e CommandParser : setCommand(inputCommand: String)","lastModifiedDate":"2023-04-06"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"    activate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    CommandParser --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    deactivate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    ReflectionManager -\u003e ReflectionManager : executeCommands()","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    activate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"        alt commandType \u003d get","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"            create GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"            activate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"            GetCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"            deactivate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e GetCommand : execute()","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"            activate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"            GetCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"            deactivate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"            destroy GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"        else commandType \u003d like","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"            create LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"            activate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"            LikeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"            deactivate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e LikeCommand : execute()","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"            activate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"            LikeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"            deactivate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"            destroy LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"        else commandType \u003d unlike","lastModifiedDate":"2023-04-06"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"            create UnlikeCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e UnlikeCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"            activate UnlikeCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"            UnlikeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"            deactivate UnlikeCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e UnlikeCommand : execute()","lastModifiedDate":"2023-04-06"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"            activate UnlikeCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"            UnlikeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"            deactivate UnlikeCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"            destroy UnlikeCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"        else commandType \u003d prev","lastModifiedDate":"2023-04-06"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"            create PrevCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e PrevCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"            activate PrevCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"            PrevCommand --\u003e ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"            deactivate PrevCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e PrevCommand : execute()","lastModifiedDate":"2023-04-06"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"            activate PrevCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"            PrevCommand --\u003e ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"            deactivate PrevCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"            destroy PrevCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"        else commandType \u003d fav","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"            create FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"            activate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"            FavoriteCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"            deactivate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e FavoriteCommand : execute()","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"            activate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"            FavoriteCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"            deactivate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"            destroy FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        else commandType \u003d help","lastModifiedDate":"2023-04-06"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"            create HelpCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e HelpCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"            activate HelpCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"            HelpCommand --\u003e ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"            deactivate HelpCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e HelpCommand : execute()","lastModifiedDate":"2023-04-06"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"            activate HelpCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"            HelpCommand --\u003e ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"            deactivate HelpCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"            destroy HelpCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"        else commandType \u003d home","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"            create HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"            activate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"            HomeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"            deactivate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e HomeCommand : execute()","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"            activate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"            HomeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"            deactivate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"            destroy HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"        else","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"            create BadCommandException","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"            ReflectionManager -\u003e BadCommandException :","lastModifiedDate":"2023-04-06"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"            activate BadCommandException","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"            BadCommandException --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"            deactivate BadCommandException","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"        end","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager --\u003e ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"        deactivate ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"end","lastModifiedDate":"2023-03-29"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager --\u003e MainManager","lastModifiedDate":"2023-04-06"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"deactivate ReflectionManager","lastModifiedDate":"2023-04-06"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"@enduml","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"wenxin-c":177}},{"path":"docs/diagrams/StorageSequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"@startuml","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"!include style.puml","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"Participant FooManager MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"Participant FooTokenizer MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"Participant Storage MODEL_COLOR","lastModifiedDate":"2023-04-09"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"hide footbox","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"title Saving Data (Emphasis on Storage Subroutine)","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"FooManager -\u003e FooTokenizer : tokenize(ArrayList\u003cT\u003e)","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"activate FooTokenizer","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"activate FooManager","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"FooTokenizer --\u003e FooManager: ArrayList\u003cString\u003e tokenizedManager","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"deactivate FooTokenizer","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"FooManager -\u003e Storage : saveData(ArrayList\u003cString\u003e tokenizedManager, fileName)","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"Storage -\u003e Storage: isValidFileName(fileName)","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"Storage -\u003e Storage: getFile()","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e Storage: file","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"Storage -\u003e Storage: tokenizeString(tokenizedManager)","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e Storage: tokenizedString","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"Storage -\u003e Storage: writeDataToDisk(tokenizedString, file)","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e FooManager","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"@enduml","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"nichyjt":41}},{"path":"docs/diagrams/Tokenizer.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"@startuml","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"!include style.puml","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"package \"Storage\" {","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"  interface Tokenizer {","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"    + tokenize(ArrayList\u003cT\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"    + detokenize(ArrayList\u003cString\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"  }","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"  class AtomicHabitTokenizer {","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"    - splitTokenizedHabitIntoParameter(String)","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    + tokenize(ArrayList\u003cAtomicHabit\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"    + detokenize(ArrayList\u003cString\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"  }","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"  class ReflectionTokenizer {","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    - getTokenizedIndexes(String, Set\u003cInteger\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    - getSet(String)","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    + tokenize(ArrayList\u003cSet\u003cInteger\u003e\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    + detokenize(ArrayList\u003cString\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"  }","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"Tokenizer \u003c|-- AtomicHabitTokenizer","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"Tokenizer \u003c|-- ReflectionTokenizer","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"@enduml","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"BernardLesley":29}},{"path":"docs/diagrams/UiComponent.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"@startuml","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-04-07"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"!include style.puml","lastModifiedDate":"2023-04-07"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-04-07"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-04-07"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-04-07"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"class TextUi{","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"- scanner: Scanner","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"- separator: String","lastModifiedDate":"2023-04-07"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"+ getCommands(): String","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"+ printOutMessage(): void","lastModifiedDate":"2023-04-07"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"+ printErrorFor: void","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"class FocusUi{","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"+ isBlocking(Session session): boolean","lastModifiedDate":"2023-04-07"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-07"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"class AtomicHabitUi{","lastModifiedDate":"2023-04-07"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"+ printLogo(): void","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-07"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"class GamificationUi{","lastModifiedDate":"2023-04-08"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"+ printLogo(): void","lastModifiedDate":"2023-04-07"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-07"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"class ReflectUi{","lastModifiedDate":"2023-04-08"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"+ {static} printCelebrateLevelUp() : void","lastModifiedDate":"2023-04-08"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-08"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"FocusUi --|\u003e TextUi","lastModifiedDate":"2023-04-07"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"AtomicHabitUi --|\u003e TextUi","lastModifiedDate":"2023-04-07"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"ReflectUi --|\u003e TextUi","lastModifiedDate":"2023-04-07"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"GamificationUi --|\u003e TextUi","lastModifiedDate":"2023-04-08"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"@enduml","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"wenxin-c":40}},{"path":"docs/diagrams/WellnusSequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"@startuml","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"!include style.puml","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"hide footbox","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"participant \":WellNus\" as WellNus MODEL_COLOR","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"participant \":MainManager\" as MainManager MODEL_COLOR","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"participant \":FeatureManager\" as FeatureManager MODEL_COLOR","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"participant \":Command\" as Command MODEL_COLOR","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"[-\u003e WellNus : start()","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"activate WellNus","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"WellNus -\u003e MainManager: runEventDriver()","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"activate MainManager","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"MainManager -\u003e FeatureManager: runEventDriver()","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"activate FeatureManager","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"loop not home command","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"FeatureManager -\u003e Command : execute()","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"activate Command","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"Command --\u003e FeatureManager","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"deactivate Command","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"Command -[hidden]-\u003e FeatureManager","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"destroy Command","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"Command -[hidden]-\u003e FeatureManager","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"end","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"FeatureManager --\u003e MainManager : \u0027home\u0027 command given","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"deactivate FeatureManager","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"MainManager --\u003e WellNus : \u0027exit\u0027 command given","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"deactivate MainManager","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"[\u003c--WellNus","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"deactivate WellNus","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"@enduml","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"haoyangw":35}},{"path":"docs/diagrams/style.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"/\u0027","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":" \u0027Code is adopted from https://github.com/se-edu/addressbook-level3/blob/master/docs/diagrams/style.puml","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":" \u0027Commonly used styles and colors across diagrams.","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":" \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":" \u0027comprehensive list of skinparams.","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":" \u0027/","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"\u0027T1 through T4 are shades of the original color from lightest to darkest","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR #9D0012","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR_T1 #F97181","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR_T2 #E41F36","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR_T3 #7B000E","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR_T4 #51000A","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"!define USER_COLOR #FFFFFF","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"skinparam BackgroundColor #FFFFFFF","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"skinparam MinClassWidth 50","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"skinparam ParticipantPadding 10","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"skinparam DefaultTextAlignment center","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"skinparam packageStyle Rectangle","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"skinparam Shadowing false","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"skinparam classAttributeIconSize 0","lastModifiedDate":"2023-04-07"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"skinparam Class {","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    FontColor #FFFFFF","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    BorderThickness 1","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    BorderColor #FFFFFF","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    StereotypeFontColor #000000","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    FontName Arial","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"skinparam Actor {","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    BorderColor USER_COLOR","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    Color USER_COLOR","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    FontName Arial","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"skinparam Sequence {","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    MessageAlign center","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    BoxFontSize 15","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    BoxPadding 0","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    BoxFontColor #FFFFFF","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    FontName Arial","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"skinparam Participant {","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    FontColor #FFFFFF","lastModifiedDate":"2023-03-22"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    Padding 20","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"\u0027hide footbox","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"hide circle","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"wenxin-c":55,"nichyjt":1}},{"path":"docs/team/bernardlesley.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"# Bernard Lesley Efendy - Project Portfolio Page","lastModifiedDate":"2023-04-06"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"## Overview","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"`WellNUS++` is a Command Line Interface(CLI) app for NUS Computing students to keep track and improve their physical and","lastModifiedDate":"2023-04-06"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"mental wellness in various aspects. \u003cbr/\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"`WellNUS++` offers a wide variety of features, which focuses on many aspects of wellness.","lastModifiedDate":"2023-04-06"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"## Summary of Contributions","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"Bernard contributed to `WellNUS++` by building the `tokenizer` feature and integrating `helpCommand` to various `WellNUS++` feature. ","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"In addition, Bernard help to enhance `AtomicHabit` feature, such as `deleteCommand`","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"## Core Code Contributions","lastModifiedDate":"2023-04-06"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"[Link to reposense contribution graph](","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"https://nus-cs2113-ay2223s2.github.io/tp-dashboard/?search\u003dBernardLesley\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2023-02-17","lastModifiedDate":"2023-04-06"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":")","lastModifiedDate":"2023-04-06"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"### Tokenizer","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"Bernard built the `Tokenizer` feature that is responsible to connect `Feature Managers` and `Storage`. It converts Managers\u0027 data into Strings that can be stored as .txt file by `Storage`.\u003cbr/\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"`Tokenizer` mainly consist of 2 sub-features:\u003cbr/\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"1. `AtomicHabitTokenizer`","lastModifiedDate":"2023-04-06"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"2. `ReflectionTokenizer`","lastModifiedDate":"2023-04-06"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"In addition, this feature is also responsible to `Detokenize` the data back from the Storage, as well as handling corrupted data in case of the tampering of `Stroage` file.\u003cbr/\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"Justification: `Tokenizer` is fundamental as it allows the different object data, such as `AtomicHabit` and Integer from `LikeIndex` and `PrevIndex` to be converted and stored according to the needs of each Feature Manager. Therefore, allowing further extensions should there be a new feature introduced to the `WellNUS++` (Open Closed Principle).","lastModifiedDate":"2023-04-06"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"### HelpCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"Bernard is also responsible to integrate `helpCommand` to `AtomicHabit`, `Reflection`, `Focus Timer`, `Gamification`. This allows user to know the command available within each feature and how to use it.","lastModifiedDate":"2023-04-06"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"Justification: User might be confused with a plethora of feature that `WellNUS++` offered, therefore it is essential to have a command that can guide new user for each of the features.","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"### AtomicHabit: deleteCommand","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"Bernard also introduced a `deleteCommand` to allow user to delete a habit that they don\u0027t want to continue.","lastModifiedDate":"2023-04-06"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"Justification: As the user progresses to do their habit, they may feel that the habit is not relevant anymore. In addition, the users might simply mistype a habit, and they wish to delete it. Hence, `deleteCommand` is introduced in `WellNUS++ AtomicHabit`. ","lastModifiedDate":"2023-04-06"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"## User Guide Contribution","lastModifiedDate":"2023-04-06"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"- [Delete Atomic Habit](","lastModifiedDate":"2023-04-06"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#delete---delete-an-atomic-habit","lastModifiedDate":"2023-04-06"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":")","lastModifiedDate":"2023-04-06"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"- [Viewing Help Atomic Habit](","lastModifiedDate":"2023-04-06"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#help---viewing-atomic-habit-help","lastModifiedDate":"2023-04-06"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":")","lastModifiedDate":"2023-04-06"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"- [Viewing Help Reflection](","lastModifiedDate":"2023-04-06"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#help---viewing-reflection-help","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":")","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"- [Viewing Help Focus Timer](","lastModifiedDate":"2023-04-06"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#help---viewing-focus-timer-help","lastModifiedDate":"2023-04-06"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":")","lastModifiedDate":"2023-04-06"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"- [Viewing Help Gamification](","lastModifiedDate":"2023-04-06"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#help---viewing-gamification-help","lastModifiedDate":"2023-04-06"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":")","lastModifiedDate":"2023-04-06"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"## Developer Guide Contribution","lastModifiedDate":"2023-04-06"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"- [Tokenizer](","lastModifiedDate":"2023-04-06"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#tokenizer","lastModifiedDate":"2023-04-06"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":")","lastModifiedDate":"2023-04-06"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"- [Tokenizer Class Diagram](","lastModifiedDate":"2023-04-06"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"  https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/Tokenizer.png","lastModifiedDate":"2023-04-06"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":")","lastModifiedDate":"2023-04-06"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"BernardLesley":61}},{"path":"docs/team/haoyangw.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"# Wang Haoyang\u0027s Project Portfolio Page","lastModifiedDate":"2023-04-07"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"## Project: WellNUS++","lastModifiedDate":"2023-04-07"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"WellNUS++ is a Command Line Interface(CLI) app for NUS Computing students to keep track and improve their physical and","lastModifiedDate":"2023-04-07"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"mental wellness in various aspects. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-04-07"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2113-ay2223s2.github.io/tp-dashboard/?search\u003dhaoyangw\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-04-07"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"* **New feature**: `gamification` feature  ","lastModifiedDate":"2023-04-07"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"  [#178](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/178) [#265](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/265)","lastModifiedDate":"2023-04-07"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"  * What it does: Provides the user with experience points and levels ","lastModifiedDate":"2023-04-07"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"  * Justification: Increase XP points and levels for completing atomic habits to incentivize the user to keep doing so","lastModifiedDate":"2023-04-07"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"  * Highlights: This feature integrates with atomic habits and thus needs careful implementation to reduce coupling","lastModifiedDate":"2023-04-07"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"  between multiple classes within the two features. It was also challenging to fulfil SRP which requires gamification","lastModifiedDate":"2023-04-07"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"  data logic to be abstracted from other classes and encapsulated within one class.","lastModifiedDate":"2023-04-07"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"* **New feature**: `MainManager` implementation to provide the main CLI user interface","lastModifiedDate":"2023-04-07"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"  [#65](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/65)","lastModifiedDate":"2023-04-07"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"* **New feature**: `help` command implementation and architecture for other commands to provide `help` description ","lastModifiedDate":"2023-04-07"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"  [#30](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/30)","lastModifiedDate":"2023-04-07"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"* **New feature**: `exit` command to quit the app [#30](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/30)","lastModifiedDate":"2023-04-07"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"* **New feature**: `Command` abstract class to define the app\u0027s user command architecture ","lastModifiedDate":"2023-04-07"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"  [#29](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/29)","lastModifiedDate":"2023-04-07"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"* **New feature**: `Tokenizer` interface to define the architecture for app data -\u003e String and vice versa conversion","lastModifiedDate":"2023-04-07"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"  [#137](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/137) [#147](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/147)","lastModifiedDate":"2023-04-07"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-04-07"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"  * Redirect all logging to a log file to clean up CLI [#272](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/272)","lastModifiedDate":"2023-04-07"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"  * Refactor atomic habits feature to use `Command` and `Manager` abstract class and improve associated unit tests","lastModifiedDate":"2023-04-07"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"  [#72](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/72)","lastModifiedDate":"2023-04-07"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"  * Fix app crash in `reflect` feature [#86](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/86)","lastModifiedDate":"2023-04-07"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"  * General bug fixing [#203](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/203) ","lastModifiedDate":"2023-04-07"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"  [#207](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/207)","lastModifiedDate":"2023-04-07"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"  [#267](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/267)","lastModifiedDate":"2023-04-07"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"  [#269](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/269)","lastModifiedDate":"2023-04-07"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"  * General debugging [#139](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/139)","lastModifiedDate":"2023-04-07"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"  [#155](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/155#issuecomment-1479317735)","lastModifiedDate":"2023-04-07"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"  [#157](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/157)","lastModifiedDate":"2023-04-07"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"  [#256](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/256)","lastModifiedDate":"2023-04-07"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"  [#261](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/261)","lastModifiedDate":"2023-04-07"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"  [#278](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/278)","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"  [#279](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/279)","lastModifiedDate":"2023-04-07"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"  * Refactor main `WellNus` class for more OOP [#65](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/65)","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"* **Documentation**:","lastModifiedDate":"2023-04-07"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"  * User Guide:","lastModifiedDate":"2023-04-07"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    * Added documentation for gamification feature [#200](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/200)","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    * Make explanations clearer and fix inconsistent formatting [#280](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/280)","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    * Better FAQs [#283](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/283)","lastModifiedDate":"2023-04-07"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    * Fix RepoSense for some teammates [#209](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/209)","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"  * Developer Guide:","lastModifiedDate":"2023-04-07"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"    * Added implementation and lifecycle details for `Manager` classes [#158](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/158)","lastModifiedDate":"2023-04-07"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    [#184](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/184)","lastModifiedDate":"2023-04-07"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"* **Contributions to team-based tasks**:","lastModifiedDate":"2023-04-07"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"  * Setup checkstyle for the project [#90](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/90)","lastModifiedDate":"2023-04-07"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"  * Add new GitHub issue template for enhancements [#57](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/57)","lastModifiedDate":"2023-04-07"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"  * Setup GitHub repo permissions to enforce forking workflow [#13](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/13)","lastModifiedDate":"2023-04-07"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"  * Setup gradle for creating full-fat jar of project [#91](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/91)","lastModifiedDate":"2023-04-07"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"  * Detailed PR reviews(see below)","lastModifiedDate":"2023-04-07"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"  * Creating GitHub issues for suggested improvements/bugs","lastModifiedDate":"2023-04-07"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"  * Closing team GitHub issues","lastModifiedDate":"2023-04-07"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"  * Creating GitHub milestone v2.1","lastModifiedDate":"2023-04-07"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"  * Closing GitHub milestone v2.0","lastModifiedDate":"2023-04-07"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"  * Publishing git tag v1.0 and v2.0 and corresponding GitHub releases","lastModifiedDate":"2023-04-07"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"* **Review/Mentoring contributions**:","lastModifiedDate":"2023-04-07"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"  * Code quality reviews: [#19](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/19#pullrequestreview-1331066165)","lastModifiedDate":"2023-04-07"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"  [#27](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/27#pullrequestreview-1333065611)","lastModifiedDate":"2023-04-07"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"  [#31](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/31#pullrequestreview-1333329196)","lastModifiedDate":"2023-04-07"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"  [#35](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/35#pullrequestreview-1339014294)","lastModifiedDate":"2023-04-07"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"  [#151](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/151#pullrequestreview-1352440143)","lastModifiedDate":"2023-04-07"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"  [#155](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/155#pullrequestreview-1352217126)","lastModifiedDate":"2023-04-07"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"  [#253](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/253#pullrequestreview-1370261026)","lastModifiedDate":"2023-04-07"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"  [#274](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/274#pullrequestreview-1374373316)","lastModifiedDate":"2023-04-07"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"  * Code architecture review: [#33](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/33#pullrequestreview-1334183073)","lastModifiedDate":"2023-04-07"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"  * Logic/implementation reviews: [#77](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/77#pullrequestreview-1343698960)","lastModifiedDate":"2023-04-07"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"  [#121](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/121#pullrequestreview-1345355927)","lastModifiedDate":"2023-04-07"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"  [#164](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/164#pullrequestreview-1357941910)","lastModifiedDate":"2023-04-07"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"  [#179](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/179#pullrequestreview-1361712239)","lastModifiedDate":"2023-04-07"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"  [#260](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/260#pullrequestreview-1370332618)","lastModifiedDate":"2023-04-07"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"  * Exception handling/assertion reviews: [#140](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/140#pullrequestreview-1348134976)","lastModifiedDate":"2023-04-07"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"  [#146](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/146#pullrequestreview-1348716347)","lastModifiedDate":"2023-04-07"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"  [#164](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/164#pullrequestreview-1357941910)","lastModifiedDate":"2023-04-07"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"  * Team DG reviews: [#153](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/153#pullrequestreview-1352384116)","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"  [#154](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/154#pullrequestreview-1352507615)","lastModifiedDate":"2023-04-07"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"  * Team UML reviews: [#152](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/152#pullrequestreview-1350978626)","lastModifiedDate":"2023-04-07"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"  [#153](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/153#pullrequestreview-1352580505)","lastModifiedDate":"2023-04-07"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"  [#157](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/157)","lastModifiedDate":"2023-04-07"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"  * Help teammate with debugging Java `Thread` logic and teach him to use IntelliJ Profiler [#155](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/155/commits/3de219e27ebfabd3135ed3923489e52efb9cae4e)","lastModifiedDate":"2023-04-07"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"  * Team discussion on static variables and improving `reflect` feature implementation [#85](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/85)","lastModifiedDate":"2023-04-07"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"  * Proposal to further reduce static variable use [#148](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/148)","lastModifiedDate":"2023-04-07"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"  * Teach teammate to use more OOP in `reflect` feature [#164](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/164#pullrequestreview-1357941910)","lastModifiedDate":"2023-04-07"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"  * Teach team to set up checkstyle config locally [#90](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/90)","lastModifiedDate":"2023-04-07"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"  * Teach teammates how to use RepoSense `@@author` tags [#129](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/129)","lastModifiedDate":"2023-04-07"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"  * Teach teammates about git commands like `stash`, `rebase -i` and `patch`","lastModifiedDate":"2023-04-07"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"* **Community**:","lastModifiedDate":"2023-04-07"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"  * Contributed to forum: [#47](https://github.com/nus-cs2113-AY2223S2/forum/issues/47)","lastModifiedDate":"2023-04-07"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"  * Other teams\u0027 DG reviewed: [DG #1](https://github.com/nus-cs2113-AY2223S2/tp/pull/46#pullrequestreview-1364294694),","lastModifiedDate":"2023-04-07"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"  [DG #2](https://github.com/nus-cs2113-AY2223S2/tp/pull/52#pullrequestreview-1364319607)","lastModifiedDate":"2023-04-07"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"  * Other teams\u0027 UG reviewed: [W15-4 #105](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/105), ","lastModifiedDate":"2023-04-07"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #118](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/118)","lastModifiedDate":"2023-04-07"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"  * Other teams\u0027 code reviewed: [W15-4 #108](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/108), ","lastModifiedDate":"2023-04-07"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #114](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/114),","lastModifiedDate":"2023-04-07"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #125](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/125),","lastModifiedDate":"2023-04-07"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #127](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/127),","lastModifiedDate":"2023-04-07"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #132](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/132),","lastModifiedDate":"2023-04-07"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #135](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/135),","lastModifiedDate":"2023-04-07"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #138](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/138),","lastModifiedDate":"2023-04-07"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #141](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/141),","lastModifiedDate":"2023-04-07"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #145](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/145),","lastModifiedDate":"2023-04-07"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #147](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/147),","lastModifiedDate":"2023-04-07"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #149](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/149),","lastModifiedDate":"2023-04-07"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"  [W15-4 #151](https://github.com/AY2223S2-CS2113-W15-4/tp/issues/151)","lastModifiedDate":"2023-04-07"}],"authorContributionMap":{"haoyangw":109}},{"path":"docs/team/nichyjt.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"## Yek Jin Teck, Nicholas - Project Portfolio Page","lastModifiedDate":"2023-04-09"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"### Project: WellNUS++","lastModifiedDate":"2023-04-09"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"WellNUS++ is a Command Line Interface(CLI) app for NUS Computing students to keep track and improve their physical and","lastModifiedDate":"2023-04-05"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"mental wellness in various aspects.  ","lastModifiedDate":"2023-04-05"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"### Summary of Contributions","lastModifiedDate":"2023-04-09"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"- **Code Contributions:** [Link to reposense contribution](https://nus-cs2113-ay2223s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2023-02-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dnichyjt\u0026tabRepo\u003dAY2223S2-CS2113-T12-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026authorshipIsIgnoredFilesChecked\u003dfalse).  ","lastModifiedDate":"2023-04-09"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"- **Feature:** `CommandParser`","lastModifiedDate":"2023-04-09"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"  [#19](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/19).   ","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"  - **What:** Dictates the syntax of the commands ","lastModifiedDate":"2023-04-09"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"  and how the program unpacks user inputs into its various components.  ","lastModifiedDate":"2023-04-05"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"  - **Justification:** After researching on the ","lastModifiedDate":"2023-04-09"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"  [usability, design and justification](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#design-considerations-1)","lastModifiedDate":"2023-04-09"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"  of different CLI syntax forms, the `unix`-like syntax was chosen as it was the most user-friendly and maintainable. ","lastModifiedDate":"2023-04-09"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"- **Boilerplate Feature:** `Manager`, the core boilerplate that","lastModifiedDate":"2023-04-09"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"  all sub-features are built off.","lastModifiedDate":"2023-04-09"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"  [ #33](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/33).  ","lastModifiedDate":"2023-04-06"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"- **Feature:** `Storage`, built the interface for developers to store and load data","lastModifiedDate":"2023-04-09"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"  [#140](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/140).  ","lastModifiedDate":"2023-04-06"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"  - **Highlights:** The design of storage ensures usability for any arbitrary feature","lastModifiedDate":"2023-04-09"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"  that requires different data structures to be saved to file.","lastModifiedDate":"2023-04-09"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"- **Feature:** Focus Timer `config` command implementation,","lastModifiedDate":"2023-04-09"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"[#169](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/169).","lastModifiedDate":"2023-04-06"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"- **Feature:** MainManager - `help` command implementation, [#104](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/104).","lastModifiedDate":"2023-04-09"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"- **Enhancement:** Terminal Caret - an customizable \u0026 user-friendly caret,","lastModifiedDate":"2023-04-09"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"[#258](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/258).  ","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"  - **What**: Adds a caret to the start of the terminal screen,","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"  similar to what you\u0027d see in any shell-based terminal like `zsh, cmd, bash`.","lastModifiedDate":"2023-04-06"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    For example: `(reflect):~$`.  ","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"  - **[Design Justification](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/79)**:","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"  Feedback from the [PE-D](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/235) and peers showed that ","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"  they were often lost within the features.","lastModifiedDate":"2023-04-06"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"  - **Highlights**: Terminal caret unambiguously shows where the user is, and allows users to feel","lastModifiedDate":"2023-04-09"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"  comfortable as it mimics a terminal shell which they are familiar with.","lastModifiedDate":"2023-04-09"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"- **Enhancement:** Focus Timer - Streamlining state management,","lastModifiedDate":"2023-04-09"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"  [#169](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/169).  ","lastModifiedDate":"2023-04-09"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"  Created state-management methods, enforcing SRP with only `Session`managing state.","lastModifiedDate":"2023-04-09"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"  - **What:** The first focus timer implementation lacked proper state management. ","lastModifiedDate":"2023-04-09"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"  It was hard to figure out what commands can be run (e.g. `resume` cannot be run before `pause`).","lastModifiedDate":"2023-04-09"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"  - **Highlights:** Without changing the core logic, a developer-friendly API was made to make state management easier.","lastModifiedDate":"2023-04-09"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"  **Design \u0026 justification** are in the","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"  [Developer Guide](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#focus-timer-implementation).","lastModifiedDate":"2023-04-09"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"- **User Guide Contributions:**","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"  The user guide structure was [templated from](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/108#issue-1627844297)","lastModifiedDate":"2023-04-09"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"  Nicholas\u0027 [ip User Guide](https://nichyjt.github.io/ip/). ","lastModifiedDate":"2023-04-09"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"  Apart from proofreading the document, Nicholas added documentation for the following sections of the user guide:","lastModifiedDate":"2023-04-09"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    - [Command Format](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#command-format)","lastModifiedDate":"2023-04-05"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"    - [Focus Timer Access](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#ft---accessing-focus-timer-feature)","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    - [Focus Timer Config Command](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#configure-the-timer-config)","lastModifiedDate":"2023-04-06"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    - [Command Summary](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#command-summary)","lastModifiedDate":"2023-04-05"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"- **Developer Guide Contributions:**","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"  Nicholas added documentation and diagrams for the following sections of the developer guide, focussing on","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"  readability and simplicity:  ","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"  - [CommandParser](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#commandparser-component), and","lastModifiedDate":"2023-04-09"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"  its [Class diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/CommandParserClass.png) and","lastModifiedDate":"2023-04-09"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    [Sequence diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/CommandParserSequence.png)","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"  - [Storage](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#storage)","lastModifiedDate":"2023-04-05"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"   and its [Sequence diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/StorageSequence-Saving_Data__Emphasis_on_Storage_Subroutine_.png)","lastModifiedDate":"2023-04-09"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"  - [FocusTimer](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#focus-timer-component)","lastModifiedDate":"2023-04-09"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"   and its [Class diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/FocusTimerClassDiagram.png)","lastModifiedDate":"2023-04-09"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"   and [abridged \u0027Finite State Machine\u0027 diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/FocusTimerState.png)","lastModifiedDate":"2023-04-09"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"  - [Glossary](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#glossary)","lastModifiedDate":"2023-04-05"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"- **Team-Based Task Contributions:**","lastModifiedDate":"2023-04-09"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"  - Setting up of [issue templates, #4](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/4)","lastModifiedDate":"2023-04-06"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"    and issue tags","lastModifiedDate":"2023-04-09"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"  - [Issue creation, tracking and closing](https://github.com/AY2223S2-CS2113-T12-4/tp/issues?q\u003dis%3Aissue+involves%3Anichyjt)","lastModifiedDate":"2023-04-09"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"  - Took meeting minutes for meetings \u0026 booking \u0026 setup of weekly meeting venue","lastModifiedDate":"2023-04-09"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"- **Reviewing/Mentoring Contributions**","lastModifiedDate":"2023-04-09"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"  - [List of all reviewed PRs](https://github.com/AY2223S2-CS2113-T12-4/tp/pulls?q\u003dis%3Apr+reviewed-by%3Anichyjt).","lastModifiedDate":"2023-04-09"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"    Nicholas focussed on giving critical suggestions and on the quality of","lastModifiedDate":"2023-04-09"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"    the codebase. Some illustrative examples:","lastModifiedDate":"2023-04-09"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"    - [Avoiding deep nesting](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/155#discussion_r1144643398)","lastModifiedDate":"2023-04-09"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"    - [Usage of assertions and try-catch](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/76#discussion_r1136795952)","lastModifiedDate":"2023-04-05"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"    - [Leveraging on hidden method opportunity](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/27#discussion_r1131190083)","lastModifiedDate":"2023-04-09"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    - [Advising against dangerous use of static keyword](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/35#discussion_r1133057443)","lastModifiedDate":"2023-04-05"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"    - [Refactor suggestion for maintainability](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/155#discussion_r1144648259)","lastModifiedDate":"2023-04-09"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    - [Refactor suggestion for performance \u0026 maintainability](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/155#discussion_r1144683078)","lastModifiedDate":"2023-04-09"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    - [Discussion with team on static keyword](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/85#issuecomment-1471569085)","lastModifiedDate":"2023-04-05"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"    - [Code style consistency](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/65#discussion_r1134946097)","lastModifiedDate":"2023-04-09"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"- **Mentoring** ","lastModifiedDate":"2023-04-09"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"  - Taught the team informally through telegram to set up code auto-formatting on save","lastModifiedDate":"2023-04-06"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"  - Informally debugged and acted as a rubber duck for teammates on technical issues via Telegram","lastModifiedDate":"2023-04-09"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"- **Community Contributions**  ","lastModifiedDate":"2023-04-09"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"  - **Forum Contributions:** [Object-oriented programming](https://github.com/nus-cs2113-AY2223S2/forum/issues/24#issuecomment-1417417500)","lastModifiedDate":"2023-04-09"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"    theory, [Code design](https://github.com/nus-cs2113-AY2223S2/forum/issues/34#issuecomment-1463563460) and","lastModifiedDate":"2023-04-09"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"    [IDE help](https://github.com/nus-cs2113-AY2223S2/forum/issues/34#issuecomment-1463563460).","lastModifiedDate":"2023-04-09"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"  - **Reviewing other team\u0027s DG:** [DG #1](https://github.com/nus-cs2113-AY2223S2/tp/pull/14#discussion_r1152711554), ","lastModifiedDate":"2023-04-09"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"  [DG #2](https://github.com/nus-cs2113-AY2223S2/tp/pull/14#discussion_r1152715587),","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"  [DG #3](https://github.com/nus-cs2113-AY2223S2/tp/pull/14#discussion_r1152717757),","lastModifiedDate":"2023-04-09"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"  [DG #4](https://github.com/nus-cs2113-AY2223S2/tp/pull/14#discussion_r1152731276)","lastModifiedDate":"2023-04-09"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"  - **Reviewing other team\u0027s UG and Program**: [List of all 19 issues filed for T15-3](https://github.com/nichyjt/ped/issues)","lastModifiedDate":"2023-04-09"}],"authorContributionMap":{"nichyjt":92}},{"path":"docs/team/wenxin-c.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"# Wenxin\u0027s Project Portfolio Page","lastModifiedDate":"2023-04-08"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"## Project: WellNUS++","lastModifiedDate":"2023-04-08"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"WellNUS++ is a Command Line Interface(CLI) app for NUS Computing students to keep track and improve their physical and","lastModifiedDate":"2023-04-06"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"mental wellness in various aspects.","lastModifiedDate":"2023-04-06"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"### Summary of contributions","lastModifiedDate":"2023-04-08"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"- **New Feature 1**: `TextUi` class to read user input and print output. ","lastModifiedDate":"2023-04-08"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"[#27](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/27) [#48](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/48)","lastModifiedDate":"2023-04-08"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"  - What it does: Read user inputs from terminal and print output with a user-friendly layout.","lastModifiedDate":"2023-04-08"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"  - Justification: It allows users to input commands and receive outputs from WellNUS++.","lastModifiedDate":"2023-04-09"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"  - Highlights: Command usages are given with error message to guide users.","lastModifiedDate":"2023-04-09"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"- **New Feature 2**: Self Reflection `ReflectionManager` implementation. [#35](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/35)","lastModifiedDate":"2023-04-08"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"  - What it does: main event driver of Self Reflection section.","lastModifiedDate":"2023-04-08"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"- **New Feature 3**: Self Reflection `get` command implementation. [#35](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/35)","lastModifiedDate":"2023-04-08"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"  - What it does: Allows users to get a **random set of 5 reflection questions** to reflect on.","lastModifiedDate":"2023-04-08"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"  - Justification: It allows users to think and reflect on themselves. The set of questions is designed to be randomised ","lastModifiedDate":"2023-04-09"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"  so that users can reflect on different aspects","lastModifiedDate":"2023-04-09"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"  of lives.","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"  - Highlights: Data structures **ArrayList** and **Set** are used to randomise the sets of questions. ","lastModifiedDate":"2023-04-08"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"- **New Feature 4**: Self Reflection `like` command implementation. [#164](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/164)","lastModifiedDate":"2023-04-08"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"  - What it does: Allows users to add the reflection questions they resonate well into the favorite list for review in the future.","lastModifiedDate":"2023-04-08"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"  - Highlights: A **HashMap** is used with **display index** of questions being the **key** and **real question index** ","lastModifiedDate":"2023-04-08"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"  being the **value** to match questions. ","lastModifiedDate":"2023-04-08"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"- **New Feature 5**: Self Reflection `fav` command implementation. [#164](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/164)","lastModifiedDate":"2023-04-08"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"  - What it does: Allows users to list and review all reflection questions in the favorite list for review.","lastModifiedDate":"2023-04-08"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"- **New Feature 6**: Self Reflection `home` command to return back main WellNUS++. ","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"[#35](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/35) [#103](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/103)","lastModifiedDate":"2023-04-08"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"- **New Feature 7**: Helped in Self Reflection `prev` command implementation.","lastModifiedDate":"2023-04-08"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"- **Enhancement 1**: Abstract `QuestionList` class. [#164](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/164)","lastModifiedDate":"2023-04-08"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"  - What it does: A `QuestionList` class is abstracted to store and modify user data (e.g. the random sets and favorite list).","lastModifiedDate":"2023-04-08"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"  - Implementation: To centralise and share data among classes, a common `QuestionList` object is passed into different command objects.","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"- **Enhancement 2**: Self Reflection `unlike` command implementation. [#253](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/253)","lastModifiedDate":"2023-04-08"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"  - What it does: Allows users to remove reflection questions they no longer resonate from the favorite list to maintain the relevancy ","lastModifiedDate":"2023-04-09"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"  and size of the favorite list. ","lastModifiedDate":"2023-04-09"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"- **Enhancement 3**: Store Self Reflection data in data file. [#172](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/172)","lastModifiedDate":"2023-04-08"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"  - Justification: To ensure the usage of WellNUS++ in the long run.","lastModifiedDate":"2023-04-08"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"- **Enhancement 4**: Standardize error message across WellNUS++. [#260](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/260)","lastModifiedDate":"2023-04-08"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"  - Implementation: A standardised format of error message is used across WellNUS++. The messages pinpoint the specific ","lastModifiedDate":"2023-04-06"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"error made and give the correct command usage for users.","lastModifiedDate":"2023-04-09"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"- **Code Contributed:** [RepoSense Link](https://nus-cs2113-ay2223s2.github.io/tp-dashboard/?search\u003dwenxin-c\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-04-04"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"- **Project Management:**","lastModifiedDate":"2023-04-04"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"  - Set up the GitHub team organisation and repository.","lastModifiedDate":"2023-04-05"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"  - Maintain issue tracker and PR review.","lastModifiedDate":"2023-04-08"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"  - Team lead: responsible for the overall project coordination, defining, assigning, and tracking project tasks.","lastModifiedDate":"2023-04-08"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"  - In charge of the program and testing of TextUi class and Self Reflection section.","lastModifiedDate":"2023-04-08"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"  - Enable assertion in gradle file. [Enable Team Assertion](https://github.com/AY2223S2-CS2113-T12-4/tp/issues/141)","lastModifiedDate":"2023-04-08"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"- **Community:**","lastModifiedDate":"2023-04-06"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"  - PRs reviewed(with non-trivial comments):","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"[#31](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/31),","lastModifiedDate":"2023-04-09"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"[#65](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/65),","lastModifiedDate":"2023-04-09"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"[#72](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/72),","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"[#151](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/151),","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"[#252](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/252)","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"  - Reported bugs and suggestions to other teams:","lastModifiedDate":"2023-04-06"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"[#66](https://github.com/AY2223S2-CS2113-T15-4/tp/issues/66), [#72](https://github.com/AY2223S2-CS2113-T15-4/tp/issues/72),","lastModifiedDate":"2023-04-09"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"[#83](https://github.com/AY2223S2-CS2113-T15-4/tp/issues/83), [#92](https://github.com/AY2223S2-CS2113-T15-4/tp/issues/92)","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"[#103](https://github.com/AY2223S2-CS2113-T15-4/tp/issues/103), [#106](https://github.com/AY2223S2-CS2113-T15-4/tp/issues/106)","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"[#DG1](https://github.com/nus-cs2113-AY2223S2/tp/pull/15/files#diff-1a95edf069a4136e9cb71bee758b0dc86996f6051f0d438ec2c424557de7160b),","lastModifiedDate":"2023-04-09"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"[#DG2](https://github.com/nus-cs2113-AY2223S2/tp/pull/3/files/6539d4f8311a3ce7587eae50de850c64e742f2a3#diff-1a95edf069a4136e9cb71bee758b0dc86996f6051f0d438ec2c424557de7160b),","lastModifiedDate":"2023-04-09"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"[#DG3](https://github.com/nus-cs2113-AY2223S2/tp/pull/5/files/e3180a6667d0623ba95e1212667ebf9afc4ecbc1#diff-1a95edf069a4136e9cb71bee758b0dc86996f6051f0d438ec2c424557de7160b)","lastModifiedDate":"2023-04-09"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"- **Tools:**","lastModifiedDate":"2023-04-06"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"  - Integrated PlantUML into team repo","lastModifiedDate":"2023-04-06"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"- **Documentations:**","lastModifiedDate":"2023-04-04"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"  - **User Guide:**","lastModifiedDate":"2023-04-06"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    - Added [WellNUS++ structure overview](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#overview-of-wellnus) ","lastModifiedDate":"2023-04-09"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    and structure diagram [#263](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/263/)\u003cbr\u003e","lastModifiedDate":"2023-04-09"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"    - Added [Access Self Reflection](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#reflect---accessing-self-reflection-feature)","lastModifiedDate":"2023-04-09"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"      documentation [#198](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/198/)","lastModifiedDate":"2023-04-09"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    - Added Self Reflection documentation for [like](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#like---add-reflection-question-into-favorite-list),","lastModifiedDate":"2023-04-09"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"      [fav](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#fav---view-favorite-list) and","lastModifiedDate":"2023-04-09"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"      [prev](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#prev---get-the-previous-set-of-reflection-questions-generated)","lastModifiedDate":"2023-04-09"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"      [#198](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/198/)","lastModifiedDate":"2023-04-09"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    - Added Self Reflection documentation for [unlike](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#unlike---remove-questions-from-favorite-list) ","lastModifiedDate":"2023-04-09"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"    command [#253](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/253)","lastModifiedDate":"2023-04-09"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    - Adjusted cosmetic and errors [#206](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/206) [#263](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/263)","lastModifiedDate":"2023-04-09"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"  - **Developer Guide:** ","lastModifiedDate":"2023-04-06"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    - Set up initial developer guide [#144](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/144)","lastModifiedDate":"2023-04-08"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    - Added [UI Class Diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/UiComponent.png) ","lastModifiedDate":"2023-04-09"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"    and [Implementation Details](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#ui-implementation) ","lastModifiedDate":"2023-04-09"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"    [#291](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/291)","lastModifiedDate":"2023-04-09"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"    - Added [Reflection Class Diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/ReflectionClassDiagram.png) ","lastModifiedDate":"2023-04-09"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"    and [Implementation Details](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#self-reflection-implementation) ","lastModifiedDate":"2023-04-09"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"    [#153](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/153) ","lastModifiedDate":"2023-04-09"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"    - Added [Reflection Sequence Diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/ReflectionSequenceDiagram.png) ","lastModifiedDate":"2023-04-09"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"    [#181](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/181)","lastModifiedDate":"2023-04-09"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    [#183](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/183)","lastModifiedDate":"2023-04-09"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"    - Fixed Reflection class and sequence diagram errors [#268](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/268/)","lastModifiedDate":"2023-04-09"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    - Restructured Reflection documentation and ","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    added [Design Considerations](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#design-considerations) ","lastModifiedDate":"2023-04-09"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"    [#291](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/291)\u003cbr\u003e","lastModifiedDate":"2023-04-08"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"    ","lastModifiedDate":"2023-04-09"}],"authorContributionMap":{"wenxin-c":92}},{"path":"docs/team/yongbinwang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"# Yongbin - Project Portfolio Page","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"## Overview","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"WellNUS++ is a Command Line Interface(CLI) app for NUS Computing students to keep track and improve their physical and","lastModifiedDate":"2023-04-06"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"mental wellness in various aspects.","lastModifiedDate":"2023-04-06"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"## Summary of Contributions","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"Yongbin was an active PR reviewer for the project, and was designated as one of the members in charge of documentation.","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"Yongbin contributed to `WellNUS++` by providing insights on the overall application architecture logic and working on","lastModifiedDate":"2023-04-06"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"the","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"`AtomicHabits` and `FocusTimer` features.","lastModifiedDate":"2023-04-06"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"### Core Code Contributions","lastModifiedDate":"2023-04-06"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"[Link to reposense contribution graph](https://nus-cs2113-ay2223s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2023-02-17\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dYongbinWang\u0026tabRepo\u003dAY2223S2-CS2113-T12-4%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code\u0026authorshipIsBinaryFileTypeChecked\u003dfalse\u0026authorshipIsIgnoredFilesChecked\u003dfalse).","lastModifiedDate":"2023-04-06"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"#### AtomicHabit","lastModifiedDate":"2023-04-06"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"Yongbin conceptualised and built the main implementation of `AtomicHabits` feature.","lastModifiedDate":"2023-04-06"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"Yongbin built the main and initial implementation of the following features:","lastModifiedDate":"2023-04-06"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"* `AtomicHabitsManager` which is the main class that manages the `AtomicHabits`","lastModifiedDate":"2023-04-06"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"  feature.","lastModifiedDate":"2023-04-06"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"* `AtomicHabitList` which is the main class that manages the list of","lastModifiedDate":"2023-04-06"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"  AtomicHabits.","lastModifiedDate":"2023-04-06"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"* `AtomicHabit` which is the main class that represents an AtomicHabit.","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"* `add` command under the `wellnus/atomichabit/command` package in","lastModifiedDate":"2023-04-06"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"  the `AtomicHabits` feature.","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"* `list` command under the `wellnus/atomichabit/command` package in  ","lastModifiedDate":"2023-04-06"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"  the `AtomicHabits` feature.","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"* `home` command under the `wellnus/atomichabit/command` package in","lastModifiedDate":"2023-04-06"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"  the `AtomicHabits` feature.","lastModifiedDate":"2023-04-06"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"#### Focus Timer","lastModifiedDate":"2023-04-06"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"Yongbin conceptualised and built the main implementation of `FocusTimer` feature through","lastModifiedDate":"2023-04-06"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"experimenting with different implementation approaches.","lastModifiedDate":"2023-04-06"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"Yongbin built the main and initial implementation of the following features:","lastModifiedDate":"2023-04-06"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"* `FocusTimerManager` which is the main class that manages the `FocusTimer`","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"  feature.","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"* `Session` which represents a sequence of `Countdown` objects using an arraylist.","lastModifiedDate":"2023-04-06"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"* `Check Command` to allow users to check the current time left in the timer.","lastModifiedDate":"2023-04-06"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"* `Pause Command` to allow users to pause the timer.","lastModifiedDate":"2023-04-06"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"* `Resume Command` to allow users to resume the timer.","lastModifiedDate":"2023-04-06"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"* `Next Command` to allow users to proceed to the next countdown in the session.","lastModifiedDate":"2023-04-06"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"* `Stop Command` to allow users to stop the session.","lastModifiedDate":"2023-04-06"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"#### Focus Timer: Countdown","lastModifiedDate":"2023-04-06"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"Yongbin built the `Countdown` class to represent a countdown timer in command line.","lastModifiedDate":"2023-04-06"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"This feature required out of topic research on background threads through the use of `Timer` and `TimerTask` classes.","lastModifiedDate":"2023-04-06"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"Atomic data types were used to ensure thread safety. The implementation of `FocusTimer` was challenging as there was a","lastModifiedDate":"2023-04-06"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"need","lastModifiedDate":"2023-04-06"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"to ensure no bugs were introduced into the codebase while implementing a novel concept.","lastModifiedDate":"2023-04-06"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"### Enhancements Implemented","lastModifiedDate":"2023-04-06"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"Yongbin also contributed to improving the quality of life and defensiveness `WellNUS++`.\u003cbr\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"Yongbin implemented the following enhancements:","lastModifiedDate":"2023-04-06"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"* Improving user interface of the `AtomicHabit` and `FocusTimer` features.","lastModifiedDate":"2023-04-06"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"* Implementing duplicate checking for and list output clarity of `AtomicHabit` feature.","lastModifiedDate":"2023-04-06"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"### User Guide Contributions","lastModifiedDate":"2023-04-06"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"Yongbin set up the initial structure of the user guide and added documentation for the following sections of the user","lastModifiedDate":"2023-04-06"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"guide:","lastModifiedDate":"2023-04-06"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"- [Add new atomic habit](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#add---add-new-atomic-habit)","lastModifiedDate":"2023-04-06"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"- [List all atomic habit](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#list---list-all-atomic-habit)","lastModifiedDate":"2023-04-06"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"- [Start Session](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#start---start-session)","lastModifiedDate":"2023-04-06"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"- [Pause Session](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#pause---pause-session)","lastModifiedDate":"2023-04-06"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"- [Resume Session](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#resume---resume-session)","lastModifiedDate":"2023-04-06"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"- [Check Session](https://ay2223s2-cs2113-t12-4.github.io/tp/UserGuide.html#check---check-time)","lastModifiedDate":"2023-04-06"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"### Developer Guide Contributions","lastModifiedDate":"2023-04-06"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"Yongbin added documentation for the following sections of the developer guide:","lastModifiedDate":"2023-04-06"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"- [Atomic Habit](https://ay2223s2-cs2113-t12-4.github.io/tp/DeveloperGuide.html#atomichabit-component)","lastModifiedDate":"2023-04-06"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"    - [Class diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/AtomicHabit.png)","lastModifiedDate":"2023-04-06"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    - [Sequence diagram](https://ay2223s2-cs2113-t12-4.github.io/tp/diagrams/AtomicHabitSequenceDiagram.png)","lastModifiedDate":"2023-04-06"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"### Team-Based Task Contributions","lastModifiedDate":"2023-04-06"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"Yongbin also contributed in the following team tasks:","lastModifiedDate":"2023-04-06"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"- PR reviews","lastModifiedDate":"2023-04-06"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"- Clarifying certain misconceptions in group chat","lastModifiedDate":"2023-04-06"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"- Noting down important matters","lastModifiedDate":"2023-04-06"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"### Reviewing/Mentoring Contributions","lastModifiedDate":"2023-04-06"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"#### PR Reviews","lastModifiedDate":"2023-04-06"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"Yongbin was involved in reviewing PRs pertaining to Focus Timer/Atomic Habit features. As well as key features for the","lastModifiedDate":"2023-04-06"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"application such as storage and manager.","lastModifiedDate":"2023-04-06"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"- [Add config and restart logic for FocusTimer](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/169)","lastModifiedDate":"2023-04-06"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"- [Refactor atomic habits feature ](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/72)","lastModifiedDate":"2023-04-06"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"- [Add Manager class](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/33)","lastModifiedDate":"2023-04-06"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"- [Feature-Update Atomic Habit](https://github.com/AY2223S2-CS2113-T12-4/tp/pull/59)","lastModifiedDate":"2023-04-06"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"#### Mentoring","lastModifiedDate":"2023-04-06"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"- Helped to clarify certain misconceptions on application architecture and integration of different features","lastModifiedDate":"2023-04-06"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"}],"authorContributionMap":{"YongbinWang":113}},{"path":"src/main/java/wellnus/WellNus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.MainManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":" * Main class of our WellNUS++ application. main() is executed when the application is launched.\u003cbr/\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" * Control is then passed to MainManager.runEventDriver().","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":" *","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" * @see MainManager#runEventDriver()","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"public class WellNus {","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"    private static final String BYE_MESSAGE \u003d \"Thank you for using WellNUS++! See you again soon Dx\";","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    private static final String GREETING_MESSAGE \u003d \"Very good day to you! Welcome to \";","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    private static final String NEWLINE \u003d System.lineSeparator();","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    private final MainManager mainManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"     * Initialises an instance of WellNUS++, which needs \u003ccode\u003eTextUi\u003c/code\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"     * and \u003ccode\u003eMainManager\u003c/code\u003e.","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    public WellNus() {","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"        this.mainManager \u003d new MainManager();","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    private static String getWellNusLogo() {","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"        return NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"                + \",--.   ,--.       ,--.,--.,--.  ,--.,--. ,--. ,---.     |  |        |  |     \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"                + \"|  |   |  | ,---. |  ||  ||  ,\u0027.|  ||  | |  |\u0027   .-\u0027,---|  |---.,---|  |---. \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"                + \"|  |.\u0027.|  || .-. :|  ||  ||  |\u0027 \u0027  ||  | |  |`.  `-.\u0027---|  |---\u0027\u0027---|  |---\u0027 \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"                + \"|   ,\u0027.   |\\\\   --.|  ||  ||  | `   |\u0027  \u0027-\u0027  \u0027.-\u0027    |   |  |        |  |     \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"                + \"\u0027--\u0027   \u0027--\u0027 `----\u0027`--\u0027`--\u0027`--\u0027  `--\u0027 `-----\u0027 `-----\u0027    `--\u0027        `--\u0027     \" + NEWLINE;","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    private void byeUser() {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"        this.getTextUi().printOutputMessage(WellNus.BYE_MESSAGE);","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     * Calls MainManager to read and execute the user\u0027s commands.","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     * @see Manager#runEventDriver()","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    private void executeUserCommands() {","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"        this.getMainManager().runEventDriver();","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    private MainManager getMainManager() {","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        return this.mainManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    private void greet() {","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"        this.getTextUi().printOutputMessage(WellNus.GREETING_MESSAGE + WellNus.NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"                + WellNus.getWellNusLogo());","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"     * Executes the WellNus application and provides the user with our features.","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     * @param args Commandline arguments passed to the WellNus Java ARchive","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        new WellNus().start();","lastModifiedDate":"2023-03-23"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"     * Starts up WellNUS++: Greets the user, reads for commands until a exit command is given,","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"     * and bids the user goodbye.\u003cbr/\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"     * The bulk of the work is done in executeUserCommands(), which delegates control to the","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"     * appropriate Manager.","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     * @see Manager#runEventDriver()","lastModifiedDate":"2023-03-18"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"    public void start() {","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"        this.greet();","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"        this.executeUserCommands();","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"        this.byeUser();","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":7,"haoyangw":79,"YongbinWang":4}},{"path":"src/main/java/wellnus/atomichabit/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.feature.AtomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":" * The AddCommand class is a command class that adds a new atomic habit to an AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"add - Add a habit to your habit tracker.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: add --name (your habit name)\";","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"add\";","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027add\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027add\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_EMPTY_NAME \u003d \"Invalid habit name given to \u0027add\u0027!\";","lastModifiedDate":"2023-04-08"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private static final String DUPLICATE_HABIT_MESSAGE \u003d \"You already have this habit in your list!\"","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"            + \" Use \u0027update\u0027 instead.\";","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_INVALID_HABIT_NAME_MESSAGE \u003d \"Invalid habit name given to \u0027add\u0027!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"            + \"Habit name should not contain only numbers and symbols!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_NAME_ARGUMENT \u003d \"name\";","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be add.\";","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should not be empty.\";","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 2;","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    private static final String REGEX_NUMBER_AND_SYMBOL_ONLY_PATTERN \u003d \"^[\\\\d\\\\p{Punct}\\\\p{S}]*$\";","lastModifiedDate":"2023-04-09"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_WRONG_KEYWORD_MESSAGE \u003d \"Invalid command issued, expected \u0027add\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_STRING_ONE \u003d \"Yay! You have added a new habit:\";","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_STRING_TWO \u003d \"was successfully added\";","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"add command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    private final AtomicHabitUi atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an AddCommand object.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object to add the habit to.","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    public AddCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi \u003d new AtomicHabitUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    private AtomicHabitList getAtomicHabits() {","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"        return atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    private AtomicHabitUi getTextUi() {","lastModifiedDate":"2023-04-06"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"        return atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"    private boolean hasDuplicate(String newHabit, ArrayList\u003cAtomicHabit\u003e habitList) {","lastModifiedDate":"2023-04-04"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"        for (AtomicHabit habit : habitList) {","lastModifiedDate":"2023-04-04"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"            if (convertToBase(habit.getDescription()).equals(convertToBase(newHabit))) {","lastModifiedDate":"2023-04-04"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"                return true;","lastModifiedDate":"2023-04-04"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"        return false;","lastModifiedDate":"2023-04-04"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"    private String convertToBase(String habitName) {","lastModifiedDate":"2023-04-04"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"        return habitName.toLowerCase().replaceAll(\"\\\\s\", \"\");","lastModifiedDate":"2023-04-04"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"        assert COMMAND_KEYWORD !\u003d null : \"COMMAND_KEYWORD cannot be null\";","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"     * Adds of the new atomic habit into our list of atomic habits.","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"     * After that, print a message telling the user what the new habit added is","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"     * @throws AtomicHabitException If the habit already exists in the list","lastModifiedDate":"2023-04-04"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"    public void execute() throws AtomicHabitException {","lastModifiedDate":"2023-04-04"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"            this.getTextUi().printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"        assert super.getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"        String name \u003d super.getArguments().get(AddCommand.COMMAND_NAME_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"        if (hasDuplicate(name, atomicHabits.getAllHabits())) {","lastModifiedDate":"2023-04-04"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"            throw new AtomicHabitException(DUPLICATE_HABIT_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"        AtomicHabit habit \u003d new AtomicHabit(name);","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"        this.getAtomicHabits().addAtomicHabit(habit);","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"        String messageToUser \u003d FEEDBACK_STRING_ONE + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"        messageToUser +\u003d String.format(\"\u0027%s\u0027 %s\", habit, FEEDBACK_STRING_TWO);","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"        getTextUi().printOutputMessage(messageToUser);","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"     * If no exceptions are thrown, command is valid.","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-04-09"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() !\u003d AddCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(AddCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(AddCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(AddCommand.COMMAND_WRONG_KEYWORD_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.get(COMMAND_KEYWORD) !\u003d \"\") {","lastModifiedDate":"2023-03-18"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(AddCommand.COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(AddCommand.COMMAND_NAME_ARGUMENT)) {","lastModifiedDate":"2023-04-03"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(AddCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"        String nameArg \u003d arguments.get(AddCommand.COMMAND_NAME_ARGUMENT);","lastModifiedDate":"2023-04-09"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"        if (nameArg.equals(\"\")) {","lastModifiedDate":"2023-04-09"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(AddCommand.COMMAND_EMPTY_NAME);","lastModifiedDate":"2023-04-08"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"        if (nameArg.matches(REGEX_NUMBER_AND_SYMBOL_ONLY_PATTERN)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(AddCommand.COMMAND_INVALID_HABIT_NAME_MESSAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":184,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":6,"BernardLesley":23,"haoyangw":72,"YongbinWang":53,"nichyjt":30}},{"path":"src/main/java/wellnus/atomichabit/command/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.feature.AtomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":" * The DeleteCommand class is a command class that deletes a habit","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":" * has been preformed.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"delete - Delete the habit you don\u0027t want to continue.\";","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: delete --id habit-index\";","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"delete\";","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_INDEX_ARGUMENT \u003d \"id\";","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 2;","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027delete\u0027\";","lastModifiedDate":"2023-04-05"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027delete\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_STRING \u003d \"The following habit has been deleted:\";","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_STRING_TWO \u003d \"has been successfully deleted\";","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEEDBACK_INDEX_NOT_INTEGER_ERROR \u003d \"Invalid index payload given in \u0027delete\u0027, expected \"","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"            + \"a valid integer\";","lastModifiedDate":"2023-04-09"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEEDBACK_INDEX_OUT_OF_BOUNDS_ERROR \u003d \"Invalid index payload given in \u0027delete\u0027, \"","lastModifiedDate":"2023-04-09"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"            + \"index is out of range!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_EMPTY_LIST_UPDATE \u003d \"There are no habits to delete! \"","lastModifiedDate":"2023-04-08"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"            + \"Please `add` a habit first!\";","lastModifiedDate":"2023-04-08"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_OFFSET \u003d 1;","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    private static final String DELETE_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027delete\u0027\";","lastModifiedDate":"2023-04-05"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"delete command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"DeleteAtomicHabitLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"    private static final String LOG_STR_INPUT_NOT_INTEGER \u003d \"Input string is not an integer.\"","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"            + \"This should be properly handled\";","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"    private static final String LOG_INDEX_OUT_OF_BOUNDS \u003d \"Input index is out of bounds.\"","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"            + \"This should be properly handled\";","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    private final AtomicHabitUi atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an DeleteCommand object with the given arguments and AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object containing habit to be deleted.","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"    public DeleteCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi \u003d new AtomicHabitUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an DeleteCommand object with the given InputStream, arguments and AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"     * @param inputStream  An InputStream object representing the input stream to be used.","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object containing habit to be deleted.","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"    public DeleteCommand(InputStream inputStream, HashMap\u003cString, String\u003e arguments,","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"                         AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi \u003d new AtomicHabitUi(inputStream);","lastModifiedDate":"2023-04-06"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"    private AtomicHabitList getAtomicHabits() {","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        return this.atomicHabits;","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"        return this.atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"    private int getIndexFrom(HashMap\u003cString, String\u003e arguments) throws BadCommandException, NumberFormatException {","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"        if (!arguments.containsKey(COMMAND_INDEX_ARGUMENT)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(DELETE_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"        String indexString \u003d arguments.get(COMMAND_INDEX_ARGUMENT);","lastModifiedDate":"2023-03-30"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"        return Integer.parseInt(indexString);","lastModifiedDate":"2023-03-30"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-30"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-30"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-30"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-30"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-30"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-30"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-30"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-30"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-30"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"     * Executes the delete command for atomic habits.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"     * This command is interactive, so user will continue providing arguments via","lastModifiedDate":"2023-03-30"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"     * further prompts provided.","lastModifiedDate":"2023-03-30"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"    public void execute() throws AtomicHabitException {","lastModifiedDate":"2023-03-30"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-30"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-30"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-30"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"            getTextUi().printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-30"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-30"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"            if (getAtomicHabits().getAllHabits().isEmpty()) {","lastModifiedDate":"2023-04-08"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"                getTextUi().printOutputMessage(FEEDBACK_EMPTY_LIST_UPDATE);","lastModifiedDate":"2023-04-08"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"                return;","lastModifiedDate":"2023-04-08"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"            int index \u003d this.getIndexFrom(super.getArguments()) - INDEX_OFFSET;","lastModifiedDate":"2023-03-30"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"            AtomicHabit habitToDelete \u003d getAtomicHabits().getHabitByIndex(index);","lastModifiedDate":"2023-03-30"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"            atomicHabits.deleteAtomicHabit(habitToDelete);","lastModifiedDate":"2023-03-30"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"            String stringOfDeletedHabit \u003d habitToDelete + \" \" + \"[\" + habitToDelete.getCount() + \"]\" + \" \"","lastModifiedDate":"2023-03-30"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"                    + FEEDBACK_STRING_TWO","lastModifiedDate":"2023-03-30"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"                    + LINE_SEPARATOR;","lastModifiedDate":"2023-03-30"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"            getTextUi().printOutputMessage(FEEDBACK_STRING + LINE_SEPARATOR","lastModifiedDate":"2023-03-30"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"                    + stringOfDeletedHabit);","lastModifiedDate":"2023-03-30"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-03-30"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"            LOGGER.log(Level.INFO, LOG_STR_INPUT_NOT_INTEGER);","lastModifiedDate":"2023-04-06"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"            throw new AtomicHabitException(FEEDBACK_INDEX_NOT_INTEGER_ERROR);","lastModifiedDate":"2023-03-30"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-30"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"            LOGGER.log(Level.INFO, LOG_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2023-04-06"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"            throw new AtomicHabitException(FEEDBACK_INDEX_OUT_OF_BOUNDS_ERROR);","lastModifiedDate":"2023-03-30"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-30"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"            getTextUi().printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"     * If no exceptions are thrown, arguments are valid.","lastModifiedDate":"2023-03-30"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-30"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-30"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-30"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":165,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-30"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-30"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-30"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(DELETE_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"        if (!arguments.containsKey(COMMAND_INDEX_ARGUMENT)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(DELETE_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-30"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":181,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":182,"author":{"gitId":"BernardLesley"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-30"},{"lineNumber":183,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":184,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-30"},{"lineNumber":185,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":186,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":187,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-30"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-30"},{"lineNumber":189,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":190,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":191,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":192,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-30"},{"lineNumber":193,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":194,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":195,"author":{"gitId":"BernardLesley"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-30"},{"lineNumber":196,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":197,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-30"},{"lineNumber":198,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":199,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":200,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-30"},{"lineNumber":201,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-30"},{"lineNumber":202,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":203,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":204,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"wenxin-c":13,"BernardLesley":176,"haoyangw":4,"YongbinWang":11}},{"path":"src/main/java/wellnus/atomichabit/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.feature.AtomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" * Implementation of Atomic Habit WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" * by Atomic Habit and how to use each command.","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"help - Get help on what commands can be used \"","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"            + \"in Atomic Habit WellNUS++\";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: help [command-to-check]\";","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String BAD_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String HELP_PREAMBLE \u003d \"Input `help` to see all available commands.\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-09"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            + \"Input `help [command-to-check] to get usage help for a specific command.\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-09"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"            + \"Here are all the commands available for you!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"help command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    private final AtomicHabitUi atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"     * Initialises a HelpCommand Object using the command arguments issued by the user.","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi \u003d new AtomicHabitUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    private AtomicHabitUi getTextUi() {","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"        return this.atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(AddCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(DeleteCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HelpCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HomeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(ListCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(UpdateCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        return commandDescriptions;","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"     * Prints either the general help message or the command-specific help message","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"     * based on the presence of a payload.","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"        String commandToSearch \u003d argumentPayload.get(COMMAND_KEYWORD).trim().toLowerCase();","lastModifiedDate":"2023-04-01"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        if (commandToSearch.equals(NO_FEATURE_KEYWORD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"            printGeneralHelpMessage();","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        printSpecificHelpMessage(commandToSearch);","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"     * Lists all features available in Atomic Habit WellNUS++ and a short description.","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"    public void printGeneralHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d getCommandDescriptions();","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        String outputMessage \u003d AtomicHabitManager.FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(HELP_PREAMBLE);","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator() + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c commandDescriptions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions.get(i) + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"        this.getTextUi().printOutputMessage(outputMessage);","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"     * Prints the help message for a given commandToSearch. \u003cbr/\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"     * If the commandToSearch does not exist, help will print an unknown command","lastModifiedDate":"2023-04-06"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"     * error message.","lastModifiedDate":"2023-04-06"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"    public void printSpecificHelpMessage(String commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"        switch (commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"        case AddCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(AddCommand.COMMAND_DESCRIPTION, AddCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"        case DeleteCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-30"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(DeleteCommand.COMMAND_DESCRIPTION, DeleteCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"        case HelpCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HelpCommand.COMMAND_DESCRIPTION, HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"        case HomeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HomeCommand.COMMAND_DESCRIPTION, HomeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"        case ListCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(ListCommand.COMMAND_DESCRIPTION, ListCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"        case UpdateCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(UpdateCommand.COMMAND_DESCRIPTION, UpdateCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        default:","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"            BadCommandException unknownCommand \u003d new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"            atomicHabitUi.printErrorFor(unknownCommand, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-06"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"    private void printUsageMessage(String commandDescription, String usageString) {","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"        String message \u003d commandDescription + System.lineSeparator() + usageString;","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"        atomicHabitUi.printOutputMessage(message);","lastModifiedDate":"2023-04-06"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"     * Prints a brief description of all of Atomic Habit WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"    public void execute() {","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"            getTextUi().printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"BernardLesley"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-29"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(BAD_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":174,"author":{"gitId":"BernardLesley"},"content":"     * Abstract method to ensure developers add in a command usage.","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-28"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-28"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":181,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":182,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":183,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":184,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":185,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":186,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":187,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-28"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":190,"author":{"gitId":"BernardLesley"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-28"},{"lineNumber":191,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":192,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-28"},{"lineNumber":193,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":194,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":195,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-28"},{"lineNumber":196,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":197,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":198,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"wenxin-c":9,"BernardLesley":180,"YongbinWang":9}},{"path":"src/main/java/wellnus/atomichabit/command/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.feature.AtomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":" * The HomeCommand class is a command class that returns user back to the main WellNUS++ program.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class HomeCommand extends Command {","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"home - Return back to the main menu of WellNUS++.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: home\";","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027home\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS \u003d \"Invalid arguments given to \u0027home\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027home\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_MESSAGE \u003d \"Thank you for using atomic habits. Do not forget about me!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private final AtomicHabitUi atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an HomeCommand object.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    public HomeCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi \u003d new AtomicHabitUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"    private AtomicHabitUi getTextUi() {","lastModifiedDate":"2023-04-06"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        return this.atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"     * Check if a HomeCommand is executed and user wants to return to home.","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"     * @param command User command","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * @return true If user wants to exit feature false if not","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    public static boolean isExit(Command command) {","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"        return command instanceof HomeCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"     * Prints the exit feature message for the atomic habits feature on the user\u0027s screen.","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    public void execute() throws WellNusException {","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"        validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"        getTextUi().printOutputMessage(HOME_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"     * The validation logic and strictness is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"     * As a guideline, \u003ccode\u003eisValidCommand\u003c/code\u003e should minimally: \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY arguments exist\u003c/li\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY payloads exist\u003c/li\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"     * \u003cli\u003eSafely verify the payload type (int, date, etc should be properly processed)\u003c/li\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"     * Additionally, payload value cleanup (such as trimming) is also possible. \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"     * As Java is pass (object reference) by value, any changes made to commandMap","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"     * will persist out of the function call.","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException if the commandMap has any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d HomeCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-16"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_ARGUMENTS);","lastModifiedDate":"2023-04-05"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(HomeCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"        String payload \u003d arguments.get(getCommandKeyword());","lastModifiedDate":"2023-03-30"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        if (!payload.isBlank()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":5,"BernardLesley":11,"haoyangw":65,"YongbinWang":27,"nichyjt":30}},{"path":"src/main/java/wellnus/atomichabit/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.feature.AtomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" * The ListCommand class is a command class that lists all atomic habit in AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"list - Lists out all the habits in your tracker.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: list\";","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"list\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027list\u0027!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027list\u0027!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027list\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private static final String FIRST_STRING \u003d \"Here is the current accumulation of your atomic habits!\"","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"            + LINE_SEPARATOR + \"Keep up the good work and you will develop a helpful habit in no time\";","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"list command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    private static final String EMPTY_LIST_MESSAGE \u003d \"You have no habits in your list!\"","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"            + LINE_SEPARATOR","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"            + \"Start adding some habits by using \u0027add\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    private final AtomicHabitUi atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an ListCommand object.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object to get all atomic habit.","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    public ListCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi \u003d new AtomicHabitUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    private AtomicHabitUi getTextUi() {","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"        return atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"     * Executes the list command for atomic habits, which prints all atomic habits","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"     * added by the user so far.","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"            this.getTextUi().printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"        if (atomicHabits.getAllHabits().isEmpty()) {","lastModifiedDate":"2023-04-04"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"            getTextUi().printOutputMessage(EMPTY_LIST_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-04-04"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"        int taskNo \u003d 1;","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"        int firstChar \u003d 0;","lastModifiedDate":"2023-03-19"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        StringBuilder stringOfHabitsBuilder \u003d new StringBuilder(FIRST_STRING + LINE_SEPARATOR);","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"        for (AtomicHabit habit : atomicHabits.getAllHabits()) {","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"            String currentHabitString \u003d String.format(\"%d.%s [%d]\",","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"                    taskNo, habit.toString(), habit.getCount());","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"            stringOfHabitsBuilder.append(currentHabitString).append(LINE_SEPARATOR);","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"            taskNo +\u003d 1;","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"        String messageToUser \u003d stringOfHabitsBuilder.substring(firstChar,","lastModifiedDate":"2023-03-19"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"                stringOfHabitsBuilder.length() - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"        getTextUi().printOutputMessage(messageToUser);","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"     * If no exceptions are thrown, arguments are valid.","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the commandMap has any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() !\u003d ListCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-18"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(ListCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(ListCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(ListCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.get(COMMAND_KEYWORD) !\u003d \"\") {","lastModifiedDate":"2023-03-18"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(ListCommand.COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":7,"BernardLesley":18,"haoyangw":66,"YongbinWang":28,"nichyjt":30}},{"path":"src/main/java/wellnus/atomichabit/command/UpdateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.feature.AtomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-04-05"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":" * The UpdateCommand class is a command class that updates the number of times a habit","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":" * has been preformed.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"public class UpdateCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"update - Update how many times you\u0027ve done a habit.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: update --id habit-index [--by increment_number]\";","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"update\";","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INCREMENT_ARGUMENT \u003d \"by\";","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INDEX_ARGUMENT \u003d \"id\";","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    private static final int COMMAND_MIN_NUM_OF_ARGUMENTS \u003d 2;","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final int COMMAND_MAX_NUM_OF_ARGUMENTS \u003d 3;","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027update\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"update command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENT_MESSAGE \u003d \"Invalid arguments given to \u0027update\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027update\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD_INCREMENT \u003d \"Invalid payload given in \u0027update\u0027 \"","lastModifiedDate":"2023-04-09"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"            + \"command!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"    private static final int DEFAULT_INCREMENT \u003d 1;","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    private static final int ZERO \u003d 0;","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_STRING \u003d \"The following habit has been incremented! Keep up the good work!\";","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEEDBACK_INDEX_NOT_INTEGER_ERROR \u003d \"Invalid payload given in \u0027update\u0027 command, \"","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"            + \"expected a valid integer!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEEDBACK_INDEX_OUT_OF_BOUNDS_ERROR \u003d \"Invalid payload given in \u0027update\u0027 command, \"","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"            + \"index is out of range!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEEDBACK_DECREMENT_ERROR \u003d \"Invalid decrement payload given in \u0027update\u0027 command, \"","lastModifiedDate":"2023-04-09"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"            + \"decrement value is out of range!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_STRING_INCREMENT \u003d \"The following habit has been incremented! \"","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"            + \"Keep up the good work!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_STRING_DECREMENT \u003d \"The following habit has been decremented.\";","lastModifiedDate":"2023-04-08"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_EMPTY_LIST_UPDATE \u003d \"There are no habits to update! \"","lastModifiedDate":"2023-04-08"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"            + \"Please `add` a habit first!\";","lastModifiedDate":"2023-04-08"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_CHANGE_COUNT_ZERO \u003d \"Invalid count integer, updating by 0 is not allowed!\";","lastModifiedDate":"2023-04-08"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_OFFSET \u003d 1;","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"    private static final int MINIMUM_INCREMENT \u003d 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    private static final String UPDATE_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027update\u0027!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    private static final String UPDATE_INVALID_INCREMENT_COUNT \u003d \"Invalid increment payload given in \u0027update\u0027 command, \"","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"            + \"increment with minimum of 1 is expected!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"    private static final String STORE_GAMIF_DATA_FAILED_NOTE_MESSAGE \u003d \"Error saving to storage!\";","lastModifiedDate":"2023-04-06"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"    private static final String REGEX_INTEGER_ONLY_PATTERN \u003d \"\\\\s*-?\\\\d+\\\\s*\";","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"UpdateAtomicHabitLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"    private static final String LOG_STR_INPUT_NOT_INTEGER \u003d \"Input string is not an integer.\"","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"            + \"This should be properly handled\";","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"    private static final String LOG_INDEX_OUT_OF_BOUNDS \u003d \"Input index is out of bounds.\"","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"            + \"This should be properly handled\";","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    private static final int NUM_OF_XP_PER_INCREMENT \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"    private final GamificationData gamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    private final AtomicHabitUi atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an UpdateCommand object with the given arguments and AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object containing habit to be updates.","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"    public UpdateCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits,","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"                         GamificationData gamificationData) {","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"        this.gamificationData \u003d gamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi \u003d new AtomicHabitUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an UpdateCommand object with the given InputStream, arguments and AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"     * @param inputStream  An InputStream object representing the input stream to be used.","lastModifiedDate":"2023-03-19"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object containing habit to be updates.","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"    public UpdateCommand(InputStream inputStream, HashMap\u003cString, String\u003e arguments,","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"                         AtomicHabitList atomicHabits, GamificationData gamificationData) {","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"        this.gamificationData \u003d gamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi \u003d new AtomicHabitUi(inputStream);","lastModifiedDate":"2023-04-06"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"    private AtomicHabitList getAtomicHabits() {","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"        return this.atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"    private AtomicHabitUi getTextUi() {","lastModifiedDate":"2023-04-06"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"        return this.atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"    private int getIncrementCountFrom(HashMap\u003cString, String\u003e arguments)","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"            throws BadCommandException, NumberFormatException {","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"        assert arguments.containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)","lastModifiedDate":"2023-03-17"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"                : \"--by argument missing for \u0027hb update\u0027 command\";","lastModifiedDate":"2023-04-04"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"        String incrementCountString \u003d arguments.get(UpdateCommand.COMMAND_INCREMENT_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"        if (Integer.parseInt(incrementCountString) \u003c MINIMUM_INCREMENT","lastModifiedDate":"2023-04-04"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"                \u0026\u0026 isPositive(Integer.parseInt(incrementCountString))) {","lastModifiedDate":"2023-04-04"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(UpdateCommand.UPDATE_INVALID_INCREMENT_COUNT);","lastModifiedDate":"2023-03-17"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"        return Integer.parseInt(incrementCountString);","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"    private int getIndexFrom(HashMap\u003cString, String\u003e arguments)","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"            throws BadCommandException, NumberFormatException {","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_INDEX_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.UPDATE_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"        String indexString \u003d arguments.get(UpdateCommand.COMMAND_INDEX_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"        return Integer.parseInt(indexString);","lastModifiedDate":"2023-03-15"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"    private int getPositive(int changeCount) {","lastModifiedDate":"2023-04-04"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"        if (changeCount \u003c 0) {","lastModifiedDate":"2023-04-04"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"            return -changeCount;","lastModifiedDate":"2023-04-04"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"        } else {","lastModifiedDate":"2023-04-04"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"            return changeCount;","lastModifiedDate":"2023-04-04"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"    private boolean isPositive(int changeCount) {","lastModifiedDate":"2023-04-04"},{"lineNumber":139,"author":{"gitId":"YongbinWang"},"content":"        return changeCount \u003e 0;","lastModifiedDate":"2023-04-04"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":142,"author":{"gitId":"YongbinWang"},"content":"    private void printFeedback(String updatedHabit, int changeCount) {","lastModifiedDate":"2023-04-08"},{"lineNumber":143,"author":{"gitId":"YongbinWang"},"content":"        if (changeCount \u003c 0) {","lastModifiedDate":"2023-04-08"},{"lineNumber":144,"author":{"gitId":"YongbinWang"},"content":"            getTextUi().printOutputMessage(FEEDBACK_STRING_DECREMENT + LINE_SEPARATOR","lastModifiedDate":"2023-04-08"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"                    + updatedHabit);","lastModifiedDate":"2023-04-08"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"        } else {","lastModifiedDate":"2023-04-08"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"            getTextUi().printOutputMessage(FEEDBACK_STRING_INCREMENT + LINE_SEPARATOR","lastModifiedDate":"2023-04-08"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"                    + updatedHabit);","lastModifiedDate":"2023-04-08"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":153,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":155,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":157,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":158,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":162,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":169,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"haoyangw"},"content":"     * Executes the update command for atomic habits.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-17"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"     * This command is interactive, so user will continue providing arguments via","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"haoyangw"},"content":"     * further prompts provided.","lastModifiedDate":"2023-03-15"},{"lineNumber":179,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":180,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":181,"author":{"gitId":"haoyangw"},"content":"    public void execute() throws AtomicHabitException {","lastModifiedDate":"2023-03-15"},{"lineNumber":182,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":183,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":184,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"            getTextUi().printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":186,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":187,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-13"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"            if (getAtomicHabits().getAllHabits().isEmpty()) {","lastModifiedDate":"2023-04-08"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"                getTextUi().printOutputMessage(FEEDBACK_EMPTY_LIST_UPDATE);","lastModifiedDate":"2023-04-08"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"                return;","lastModifiedDate":"2023-04-08"},{"lineNumber":192,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":193,"author":{"gitId":"YongbinWang"},"content":"            int changeCount \u003d DEFAULT_INCREMENT;","lastModifiedDate":"2023-04-04"},{"lineNumber":194,"author":{"gitId":"YongbinWang"},"content":"            boolean hasLevelUp \u003d false;","lastModifiedDate":"2023-04-04"},{"lineNumber":195,"author":{"gitId":"haoyangw"},"content":"            if (super.getArguments().containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":196,"author":{"gitId":"YongbinWang"},"content":"                changeCount \u003d this.getIncrementCountFrom(super.getArguments());","lastModifiedDate":"2023-04-04"},{"lineNumber":197,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":198,"author":{"gitId":"haoyangw"},"content":"            int index \u003d this.getIndexFrom(super.getArguments()) - INDEX_OFFSET;","lastModifiedDate":"2023-03-15"},{"lineNumber":199,"author":{"gitId":"haoyangw"},"content":"            AtomicHabit habit \u003d getAtomicHabits().getHabitByIndex(index);","lastModifiedDate":"2023-03-15"},{"lineNumber":200,"author":{"gitId":"YongbinWang"},"content":"            if (changeCount \u003d\u003d 0) {","lastModifiedDate":"2023-04-08"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"                getTextUi().printOutputMessage(FEEDBACK_CHANGE_COUNT_ZERO);","lastModifiedDate":"2023-04-08"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"                return;","lastModifiedDate":"2023-04-08"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-04-08"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"            if (changeCount \u003e ZERO) {","lastModifiedDate":"2023-04-04"},{"lineNumber":205,"author":{"gitId":"YongbinWang"},"content":"                habit.increaseCount(changeCount);","lastModifiedDate":"2023-04-04"},{"lineNumber":206,"author":{"gitId":"haoyangw"},"content":"                // Add XP for completing atomic habits as an incentive","lastModifiedDate":"2023-04-05"},{"lineNumber":207,"author":{"gitId":"YongbinWang"},"content":"                hasLevelUp \u003d gamificationData.addXp(","lastModifiedDate":"2023-04-04"},{"lineNumber":208,"author":{"gitId":"YongbinWang"},"content":"                        changeCount * NUM_OF_XP_PER_INCREMENT);","lastModifiedDate":"2023-04-04"},{"lineNumber":209,"author":{"gitId":"YongbinWang"},"content":"            } else {","lastModifiedDate":"2023-04-04"},{"lineNumber":210,"author":{"gitId":"YongbinWang"},"content":"                if (getPositive(changeCount) \u003e habit.getCount()) {","lastModifiedDate":"2023-04-04"},{"lineNumber":211,"author":{"gitId":"YongbinWang"},"content":"                    throw new AtomicHabitException(FEEDBACK_DECREMENT_ERROR);","lastModifiedDate":"2023-04-04"},{"lineNumber":212,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-04-04"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"                habit.decreaseCount(getPositive(changeCount));","lastModifiedDate":"2023-04-04"},{"lineNumber":214,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":215,"author":{"gitId":"haoyangw"},"content":"            String stringOfUpdatedHabit \u003d (index + 1) + DOT + habit + \" \" + \"[\" + habit.getCount() + \"]\"","lastModifiedDate":"2023-03-15"},{"lineNumber":216,"author":{"gitId":"BernardLesley"},"content":"                    + LINE_SEPARATOR;","lastModifiedDate":"2023-03-13"},{"lineNumber":217,"author":{"gitId":"YongbinWang"},"content":"            printFeedback(stringOfUpdatedHabit, changeCount);","lastModifiedDate":"2023-04-08"},{"lineNumber":218,"author":{"gitId":"haoyangw"},"content":"            if (hasLevelUp) {","lastModifiedDate":"2023-03-28"},{"lineNumber":219,"author":{"gitId":"haoyangw"},"content":"                // Congratulate the user about levelling up","lastModifiedDate":"2023-04-05"},{"lineNumber":220,"author":{"gitId":"haoyangw"},"content":"                GamificationUi.printCelebrateLevelUp();","lastModifiedDate":"2023-03-28"},{"lineNumber":221,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-28"},{"lineNumber":222,"author":{"gitId":"haoyangw"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":223,"author":{"gitId":"haoyangw"},"content":"            LOGGER.log(Level.INFO, LOG_STR_INPUT_NOT_INTEGER);","lastModifiedDate":"2023-04-06"},{"lineNumber":224,"author":{"gitId":"BernardLesley"},"content":"            throw new AtomicHabitException(FEEDBACK_INDEX_NOT_INTEGER_ERROR);","lastModifiedDate":"2023-03-13"},{"lineNumber":225,"author":{"gitId":"BernardLesley"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-13"},{"lineNumber":226,"author":{"gitId":"haoyangw"},"content":"            LOGGER.log(Level.INFO, LOG_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2023-04-06"},{"lineNumber":227,"author":{"gitId":"BernardLesley"},"content":"            throw new AtomicHabitException(FEEDBACK_INDEX_OUT_OF_BOUNDS_ERROR);","lastModifiedDate":"2023-03-13"},{"lineNumber":228,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":229,"author":{"gitId":"wenxin-c"},"content":"            getTextUi().printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":230,"author":{"gitId":"haoyangw"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-04-05"},{"lineNumber":231,"author":{"gitId":"haoyangw"},"content":"            getTextUi().printErrorFor(storageException, STORE_GAMIF_DATA_FAILED_NOTE_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":232,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":233,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":234,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":235,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":236,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":237,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-17"},{"lineNumber":238,"author":{"gitId":"haoyangw"},"content":"     * If no exceptions are thrown, arguments are valid.","lastModifiedDate":"2023-03-15"},{"lineNumber":239,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":240,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":241,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":242,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":243,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":244,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":245,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":246,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":247,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":248,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.get(COMMAND_KEYWORD) !\u003d \"\") {","lastModifiedDate":"2023-03-17"},{"lineNumber":249,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":250,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":251,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() \u003c UpdateCommand.COMMAND_MIN_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-15"},{"lineNumber":252,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_ARGUMENT_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":253,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":254,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003e UpdateCommand.COMMAND_MAX_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-17"},{"lineNumber":255,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_ARGUMENT_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":256,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":257,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_INDEX_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":258,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_ARGUMENT_MESSAGE);","lastModifiedDate":"2023-04-03"},{"lineNumber":259,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":260,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003d\u003d UpdateCommand.COMMAND_MAX_NUM_OF_ARGUMENTS","lastModifiedDate":"2023-03-17"},{"lineNumber":261,"author":{"gitId":"BernardLesley"},"content":"                \u0026\u0026 !arguments.containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)) {","lastModifiedDate":"2023-03-17"},{"lineNumber":262,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_ARGUMENT_MESSAGE);","lastModifiedDate":"2023-04-03"},{"lineNumber":263,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":264,"author":{"gitId":"haoyangw"},"content":"        if (arguments.containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":265,"author":{"gitId":"haoyangw"},"content":"            String incrementString \u003d arguments.get(COMMAND_INCREMENT_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":266,"author":{"gitId":"haoyangw"},"content":"            if (incrementString.isBlank()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":267,"author":{"gitId":"wenxin-c"},"content":"                throw new BadCommandException(UpdateCommand.COMMAND_INVALID_PAYLOAD_INCREMENT);","lastModifiedDate":"2023-04-05"},{"lineNumber":268,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":269,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":270,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":271,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":285,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":287,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":288,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":289,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":290,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":291,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":292,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":293,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":294,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":295,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":296,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":297,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":298,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"wenxin-c":22,"BernardLesley":59,"haoyangw":126,"YongbinWang":64,"nichyjt":27}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabit.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":" * Class to represent a unique atomic habit that the user will practice","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":" * It contains primarily the description of the habit and the count of the habit","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabit {","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"    private final String description;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"    private int count;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"     * Constructor of atomic habit class","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"     * Will initialise private description to the input parameter","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"     * Assigns count to 1 when a new habit is added","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"     * @param description Description of this new atomic habit provided by the user","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabit(String description) {","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"        this.count \u003d 0;","lastModifiedDate":"2023-04-08"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"     * Constructor of atomic habit class.","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"     * Will initialise private description and count to the input parameter.","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"     * @param description Description of atomic habit.","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"     * @param count       Number of habit to be initialized.","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    public AtomicHabit(String description, int count) {","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"        this.count \u003d count;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        return description;","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    public int getCount() {","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"        return count;","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"    public void increaseCount(int increment) {","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"        count +\u003d increment;","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"    public void decreaseCount(int decrement) {","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"        count -\u003d decrement;","lastModifiedDate":"2023-04-04"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    public String toString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"        return getDescription();","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":15,"haoyangw":3,"YongbinWang":38}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabitList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"import wellnus.storage.AtomicHabitTokenizer;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.storage.Storage;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":" * Class to represent a container that will contain all unique AtomicHabit objects in an arraylist","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitList {","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    private static final String TOKENIZER_ERROR \u003d \"Previous atomic habit data will not be restored.\";","lastModifiedDate":"2023-04-09"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final String STORAGE_ERROR \u003d \"The data cannot be stored properly!!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"AtomicHabitListLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final AtomicHabitTokenizer atomicHabitTokenizer \u003d new AtomicHabitTokenizer();","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private ArrayList\u003cAtomicHabit\u003e allAtomicHabits;","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private Storage storage;","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private TextUi textUi;","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for AtomicHabitList class, initializes the storage,textUi and allAtomicHabits objects.","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"     * Loads the data from the data file into the arraylist of atomic habits.","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"            this.storage \u003d new Storage();","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"            textUi.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        textUi \u003d new TextUi();","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"        allAtomicHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"            this.loadHabitData();","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"            textUi.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"        } catch (TokenizerException tokenizerException) {","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"            overrideErrorHabitData();","lastModifiedDate":"2023-04-09"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"            LOGGER.log(Level.WARNING, TOKENIZER_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"            textUi.printErrorFor(tokenizerException, TOKENIZER_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"    private void overrideErrorHabitData() {","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e emptyTokenizedHabit \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"            storage.saveData(emptyTokenizedHabit, Storage.FILE_HABIT);","lastModifiedDate":"2023-04-09"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"     * Method to add atomicHabit to list containing all habits.","lastModifiedDate":"2023-04-04"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"     * @param atomicHabit New atomic habit to add into the list that this class manages","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    public void addAtomicHabit(AtomicHabit atomicHabit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        allAtomicHabits.add(atomicHabit);","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"     * Method to delete atomicHabit from the list containing all habits.","lastModifiedDate":"2023-04-04"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabit Atomic habit to be deleted","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"    public void deleteAtomicHabit(AtomicHabit atomicHabit) {","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        allAtomicHabits.remove(atomicHabit);","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"     * Tokenize the atomic habits and store them in a data file.","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"     * @throws TokenizerException If there is error during tokenization","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"     * @throws StorageException   If data cannot be stored properly","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"    public void storeHabitData() throws StorageException {","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"        ArrayList\u003cString\u003e tokenizedHabitList \u003d atomicHabitTokenizer.tokenize(allAtomicHabits);","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"        storage.saveData(tokenizedHabitList, Storage.FILE_HABIT);","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     * Load a list of strings from data file and detokenize it into the values of atomic habits.","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * @throws StorageException   If there is error during tokenization","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     * @throws TokenizerException If there is error during detokenization","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"    public void loadHabitData() throws StorageException, TokenizerException {","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"        boolean fileExists \u003d storage.checkFileExists(Storage.FILE_HABIT);","lastModifiedDate":"2023-04-09"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e loadedHabitList \u003d storage.loadData(Storage.FILE_HABIT);","lastModifiedDate":"2023-04-09"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"        if (fileExists) {","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"            ArrayList\u003cAtomicHabit\u003e detokenizedHabitList \u003d atomicHabitTokenizer.detokenize(loadedHabitList);","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"            allAtomicHabits \u003d detokenizedHabitList;","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"     * Method to get list containing all habits.","lastModifiedDate":"2023-04-04"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     * @return allAtomicHabits which is an arraylist containing all habits","lastModifiedDate":"2023-03-11"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"    public ArrayList\u003cAtomicHabit\u003e getAllHabits() {","lastModifiedDate":"2023-03-09"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"        return allAtomicHabits;","lastModifiedDate":"2023-03-09"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"    public AtomicHabit getHabitByIndex(int index) {","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        return allAtomicHabits.get(index);","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"BernardLesley":36,"haoyangw":4,"YongbinWang":79}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabitManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.AddCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.command.DeleteCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.command.HelpCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.command.HomeCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.ListCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.UpdateCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":" * Class to represent the event driver of Atomic Habits feature","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":" * This class will handle calling the different available commands for Atomic Habits according to user input","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"public class AtomicHabitManager extends Manager {","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    public static final String FEATURE_HELP_DESCRIPTION \u003d \"hb - Atomic Habits - Track and manage your habits \"","lastModifiedDate":"2023-04-09"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            + \"with our suite of tools to help you grow and nurture a better you!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    public static final String FEATURE_NAME \u003d \"hb\";","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    private static final String ADD_COMMAND_KEYWORD \u003d \"add\";","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"    private static final String ATOMIC_HABIT_LOGO \u003d \"    _  _             _      _  _      _    _ _      \"","lastModifiedDate":"2023-04-06"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-03"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"            \"   /_\\\\| |_ ___ _ __ (_)__  | || |__ _| |__(_) |_ ___\" + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-03"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"            \"  / _ \\\\  _/ _ \\\\ \u0027  \\\\| / _| | __ / _` | \u0027_ \\\\ |  _(_-\u003c\" + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-03"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"            \" /_/ \\\\_\\\\__\\\\___/_|_|_|_\\\\__| |_||_\\\\__,_|_.__/_|\\\\__/__/\" + System.lineSeparator();","lastModifiedDate":"2023-04-06"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    private static final String GREETING_MESSAGE \u003d \"Welcome to WellNUS++ Atomic Habits section!\"","lastModifiedDate":"2023-04-06"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"            + System.lineSeparator() + \"Track and inculcate good habits into your life with us!\";","lastModifiedDate":"2023-04-06"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    private static final String LIST_COMMAND_KEYWORD \u003d \"list\";","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private static final String UNKNOWN_COMMAND_MESSAGE \u003d \"Invalid command issued!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    private static final String UPDATE_COMMAND_KEYWORD \u003d \"update\";","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"    private static final String HELP_COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"    private static final String DELETE_COMMAND_KEYWORD \u003d \"delete\";","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"    private static final String ERROR_STORAGE_MESSAGE \u003d \"Error saving to storage!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-04-05"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d","lastModifiedDate":"2023-04-05"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"            \"Supported commands in Atomic Habit: \" + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"                    + \"add command \" + AddCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"                    + \"delete command \" + DeleteCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"                    + \"list command \" + ListCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"                    + \"update command \" + UpdateCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"                    + \"help command \" + HelpCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"                    + \"home command \" + HomeCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    private static final String ADD_USAGE \u003d \"add command \" + AddCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-09"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    private static final String DELETE_USAGE \u003d \"delete command \" + DeleteCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-09"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_USAGE \u003d \"home command \" + HomeCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    private static final String UPDATE_USAGE \u003d \"update command \" + UpdateCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    private final AtomicHabitUi atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"    private final AtomicHabitList habitList;","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    private final GamificationData gamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * Constructor of AtomicHabitManager","lastModifiedDate":"2023-03-18"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     * Will initialise the private objects habitList and textUi","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    public AtomicHabitManager(GamificationData gamificationData) {","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        this.gamificationData \u003d gamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        this.habitList \u003d new AtomicHabitList();","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi \u003d new AtomicHabitUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        this.atomicHabitUi.setCursorName(FEATURE_NAME);","lastModifiedDate":"2023-04-06"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"    private static String getHelpDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        return \"Atomic Habits: \";","lastModifiedDate":"2023-03-23"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"     * Parses the given command from the user and determines the correct Command","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"     * subclass that can handle its execution.","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"     * @param commandString Full command issued by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If an unknown command was issued by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"    private Command getCommandFor(String commandString) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d getCommandParser().parseUserInput(commandString);","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        String commandKeyword \u003d getCommandParser().getMainArgument(commandString);","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"        switch (commandKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        case ADD_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"            return new AddCommand(arguments, getHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"        case DELETE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-30"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"            return new DeleteCommand(arguments, getHabitList());","lastModifiedDate":"2023-03-30"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"        case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-16"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"            return new HomeCommand(arguments);","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"        case LIST_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"            return new ListCommand(arguments, getHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"        case UPDATE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"            return new UpdateCommand(arguments, getHabitList(), gamificationData);","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"        case HELP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"            return new HelpCommand(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"        default:","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UNKNOWN_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"    private AtomicHabitList getHabitList() {","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"        return this.habitList;","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"    private AtomicHabitUi getTextUi() {","lastModifiedDate":"2023-04-06"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"        return this.atomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"    private void greet() {","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"        getTextUi().printLogoWithSeparator(ATOMIC_HABIT_LOGO);","lastModifiedDate":"2023-04-06"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"        getTextUi().printOutputMessage(GREETING_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"     * Reads user commands continuously and execute those that are supported","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"     * until the exit command is given.","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"    private void runCommands() {","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"            try {","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"                String commandString \u003d getTextUi().getCommand();","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"                Command command \u003d getCommandFor(commandString);","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"                command.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"                try {","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"                    habitList.storeHabitData();","lastModifiedDate":"2023-03-29"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"                } catch (StorageException exception) {","lastModifiedDate":"2023-03-29"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"                    this.getTextUi().printErrorFor(exception, ERROR_STORAGE_MESSAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"                isExit \u003d HomeCommand.isExit(command);","lastModifiedDate":"2023-03-16"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"            } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"                String errorMessage \u003d badCommandException.getMessage();","lastModifiedDate":"2023-04-09"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"                if (errorMessage.contains(ADD_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(badCommandException, ADD_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"                } else if (errorMessage.contains(DELETE_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(badCommandException, DELETE_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"                } else if (errorMessage.contains(HOME_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(badCommandException, HOME_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"                } else if (errorMessage.contains(UPDATE_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(badCommandException, UPDATE_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"                } else {","lastModifiedDate":"2023-04-09"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"                }","lastModifiedDate":"2023-04-09"},{"lineNumber":150,"author":{"gitId":"haoyangw"},"content":"            } catch (WellNusException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"                String errorMessage \u003d exception.getMessage();","lastModifiedDate":"2023-04-09"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"                if (errorMessage.contains(ADD_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(exception, ADD_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"                } else if (errorMessage.contains(DELETE_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(exception, DELETE_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"                } else if (errorMessage.contains(HOME_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(exception, HOME_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"                } else if (errorMessage.contains(UPDATE_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(exception, UPDATE_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"                } else {","lastModifiedDate":"2023-04-09"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"                    getTextUi().printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-09"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"                }","lastModifiedDate":"2023-04-09"},{"lineNumber":163,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":167,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"     * Returns the commandline name of the atomic habits feature","lastModifiedDate":"2023-03-15"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"     * @return Commandline name of this feature","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":172,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":173,"author":{"gitId":"haoyangw"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-15"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"     * Abstract function to ensure developers add in a getter for the feature\u0027s help description.","lastModifiedDate":"2023-03-23"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"     * This description will be shown when the user types in the help command. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"     * The description should be a brief overview of what the feature does. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"     * For example: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"     * \"reflect: Reflect is your go-to tool to get, save and reflect on our specially","lastModifiedDate":"2023-03-23"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"     * curated list of questions to reflect on\"","lastModifiedDate":"2023-03-23"},{"lineNumber":185,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"     * @return String of the feature\u0027s help description","lastModifiedDate":"2023-03-23"},{"lineNumber":187,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":188,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"    public String getFeatureHelpDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"        return FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":192,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":193,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":194,"author":{"gitId":"haoyangw"},"content":"     * First welcomes user with our unique greeting.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":195,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":196,"author":{"gitId":"haoyangw"},"content":"     * Then continuously read commands from the user and execute those that are supported.","lastModifiedDate":"2023-03-15"},{"lineNumber":197,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":198,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":199,"author":{"gitId":"haoyangw"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-15"},{"lineNumber":200,"author":{"gitId":"haoyangw"},"content":"        greet();","lastModifiedDate":"2023-03-15"},{"lineNumber":201,"author":{"gitId":"haoyangw"},"content":"        runCommands();","lastModifiedDate":"2023-03-15"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":205,"author":{"gitId":"YongbinWang"},"content":"     * Method to test for exception handling of invalid command using JUnit","lastModifiedDate":"2023-03-10"},{"lineNumber":206,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":207,"author":{"gitId":"haoyangw"},"content":"     * @param userCommand Command identified after parsing through userInput","lastModifiedDate":"2023-03-15"},{"lineNumber":208,"author":{"gitId":"YongbinWang"},"content":"     * @return Command according to userInput","lastModifiedDate":"2023-03-10"},{"lineNumber":209,"author":{"gitId":"haoyangw"},"content":"     * @throws AtomicHabitException For every invalid command being tested below","lastModifiedDate":"2023-03-15"},{"lineNumber":210,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":211,"author":{"gitId":"YongbinWang"},"content":"    public Command testInvalidCommand(String userCommand) throws AtomicHabitException {","lastModifiedDate":"2023-03-10"},{"lineNumber":212,"author":{"gitId":"YongbinWang"},"content":"        String descriptionTest \u003d \"testing\";","lastModifiedDate":"2023-03-18"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"        String exitCommand \u003d \"hb exit\";","lastModifiedDate":"2023-03-18"},{"lineNumber":214,"author":{"gitId":"YongbinWang"},"content":"        String listCommand \u003d \"hb list\";","lastModifiedDate":"2023-03-18"},{"lineNumber":215,"author":{"gitId":"BernardLesley"},"content":"        String indexTest \u003d \"1\";","lastModifiedDate":"2023-03-14"},{"lineNumber":216,"author":{"gitId":"wenxin-c"},"content":"        String invalidCommandErrorMessage \u003d \"Invalid command issued!!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":217,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2023-03-15"},{"lineNumber":218,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":219,"author":{"gitId":"YongbinWang"},"content":"            switch (userCommand) {","lastModifiedDate":"2023-03-10"},{"lineNumber":220,"author":{"gitId":"haoyangw"},"content":"            case ADD_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":221,"author":{"gitId":"YongbinWang"},"content":"                arguments \u003d getCommandParser().parseUserInput(descriptionTest);","lastModifiedDate":"2023-03-18"},{"lineNumber":222,"author":{"gitId":"haoyangw"},"content":"                return new AddCommand(arguments, new AtomicHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":223,"author":{"gitId":"BernardLesley"},"content":"            case DELETE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-30"},{"lineNumber":224,"author":{"gitId":"BernardLesley"},"content":"                arguments \u003d getCommandParser().parseUserInput(indexTest);","lastModifiedDate":"2023-03-30"},{"lineNumber":225,"author":{"gitId":"BernardLesley"},"content":"                return new DeleteCommand(arguments, new AtomicHabitList());","lastModifiedDate":"2023-03-30"},{"lineNumber":226,"author":{"gitId":"haoyangw"},"content":"            case LIST_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":227,"author":{"gitId":"YongbinWang"},"content":"                arguments \u003d getCommandParser().parseUserInput(listCommand);","lastModifiedDate":"2023-03-18"},{"lineNumber":228,"author":{"gitId":"haoyangw"},"content":"                return new ListCommand(arguments, new AtomicHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":229,"author":{"gitId":"YongbinWang"},"content":"            case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-16"},{"lineNumber":230,"author":{"gitId":"YongbinWang"},"content":"                arguments \u003d getCommandParser().parseUserInput(exitCommand);","lastModifiedDate":"2023-03-18"},{"lineNumber":231,"author":{"gitId":"YongbinWang"},"content":"                return new HomeCommand(arguments);","lastModifiedDate":"2023-03-16"},{"lineNumber":232,"author":{"gitId":"haoyangw"},"content":"            case UPDATE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":233,"author":{"gitId":"haoyangw"},"content":"                arguments \u003d getCommandParser().parseUserInput(indexTest);","lastModifiedDate":"2023-03-15"},{"lineNumber":234,"author":{"gitId":"haoyangw"},"content":"                return new UpdateCommand(arguments, new AtomicHabitList(), gamificationData);","lastModifiedDate":"2023-03-28"},{"lineNumber":235,"author":{"gitId":"YongbinWang"},"content":"            default:","lastModifiedDate":"2023-03-10"},{"lineNumber":236,"author":{"gitId":"BernardLesley"},"content":"                throw new AtomicHabitException(invalidCommandErrorMessage);","lastModifiedDate":"2023-03-14"},{"lineNumber":237,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":238,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":239,"author":{"gitId":"wenxin-c"},"content":"            getTextUi().printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":240,"author":{"gitId":"haoyangw"},"content":"            return null;","lastModifiedDate":"2023-03-15"},{"lineNumber":241,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":242,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":243,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":244,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":245,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":246,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":41,"BernardLesley":14,"haoyangw":84,"YongbinWang":92,"nichyjt":15}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabitUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-04-06"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-04-06"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-04-06"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":" * This class is to provide a customised interface and output message formatting for the atomic habit feature.","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitUi extends TextUi {","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"    private static final String SEPARATOR \u003d \"~\";","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"     * Call setSeparator() method inherited from TextUi superclass to re-define separator.","lastModifiedDate":"2023-04-06"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-06"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitUi() {","lastModifiedDate":"2023-04-06"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"        super();","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"        setSeparator(SEPARATOR);","lastModifiedDate":"2023-04-06"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-06"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-06"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for AtomicHabitUi to include specified input stream for testing purposes.","lastModifiedDate":"2023-04-06"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-06"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"     * @param inputStream An InputStream object representing the input stream to be used","lastModifiedDate":"2023-04-06"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-06"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitUi(InputStream inputStream) {","lastModifiedDate":"2023-04-06"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"        super(inputStream);","lastModifiedDate":"2023-04-06"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"        setSeparator(SEPARATOR);","lastModifiedDate":"2023-04-06"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-06"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    private void printLogo(String logo) {","lastModifiedDate":"2023-04-06"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"        System.out.print(logo);","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-06"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"    protected void printLogoWithSeparator(String logo) {","lastModifiedDate":"2023-04-06"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        printSeparator();","lastModifiedDate":"2023-04-06"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        printLogo(logo);","lastModifiedDate":"2023-04-06"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-06"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-04-06"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"}],"authorContributionMap":{"YongbinWang":40}},{"path":"src/main/java/wellnus/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" * Superclass for all supported commands in Duke.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" * Each Command is initialised with the arguments issued","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":" * by the user. Execute the specified Command by calling","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":" * execute().\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":" * Child classes must provide the static isValidCommand() method for checking whether a set of","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":" * arguments are valid for a given command.","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"public abstract class Command {","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    private static final String ARGUMENT_DELIMITER \u003d \"--\";","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final String DELIMITER_FOR_WORDS \u003d \" \";","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private static final String WEIRD_ARGUMENTS_GIVEN \u003d \"Weird arguments given for command, cannot continue\";","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    // Key: An argument\u0027s name. Value: An argument\u0027s provided value from the user","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private final HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"     * Initialises a Command Object with the given arguments from the user","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"     * @param arguments","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    public Command(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"        // Arguments should never be null, or later code will call methods on a null reference","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        assert arguments !\u003d null : WEIRD_ARGUMENTS_GIVEN;","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    protected HashMap\u003cString, String\u003e getArguments() {","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"        return this.arguments;","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    protected abstract String getCommandKeyword();","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"    protected abstract String getFeatureKeyword();","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     * Executes the specified command from the user.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     * May throw Exceptions if command fails.","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     * @throws WellNusException If command fails","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    public abstract void execute() throws WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     * Very basic specialised toString() method for commands that returns","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     * a formatted list of all arguments issued by the user.\u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"     * Example:","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"     * For the \u003ccode\u003ehb add\u003c/code\u003e command, toString() will output","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"     * \u003ccode\u003ehb [add] [--name] \u0026lt;habit name\u0026gt;\u003c/code\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * @return String Representation of this Command that includes all given arguments","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"    public String toString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"        builder.append(this.getFeatureKeyword());","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        builder.append(Command.DELIMITER_FOR_WORDS);","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"        builder.append(this.getCommandKeyword());","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"        for (Map.Entry\u003cString, String\u003e set : this.getArguments().entrySet()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"            builder.append(Command.DELIMITER_FOR_WORDS);","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"            builder.append(Command.ARGUMENT_DELIMITER);","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"            builder.append(set.getKey());","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"            builder.append(Command.DELIMITER_FOR_WORDS);","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"            builder.append(set.getValue());","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser. \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"     * The validation logic and strictness is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"     * As a guideline, \u003ccode\u003eisValidCommand\u003c/code\u003e should minimally: \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY arguments exist\u003c/li\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY payloads exist\u003c/li\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eSafely verify the payload type (int, date, etc should be properly processed)\u003c/li\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"     * Additionally, payload value cleanup (such as trimming) is also possible. \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"     * As Java is pass (object reference) by value, any changes made to commandMap","lastModifiedDate":"2023-03-13"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     * will persist out of the function call.","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"    public abstract void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-23"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    public abstract String getCommandUsage();","lastModifiedDate":"2023-03-23"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"    public abstract String getCommandDescription();","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"haoyangw":89,"nichyjt":42}},{"path":"src/main/java/wellnus/command/CommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * A CommandParser processes user input from a defined format \u003cp\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" * Each user input via console consists of: \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" * \u003col\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eCOMMANDS - A Argument and Payload pairs \u003c/li\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eARGUMENTS - String representing the action/parameters of the command \u003c/li\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003ePAYLOADS - value of the action/parameters \u003c/li\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * \u003c/ol\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * In short, user input is a list of commands, each command containing arguments and payloads. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * Further, we define the FIRST command to be the MAIN command of any given user input. \u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * So, \u003ccode\u003e\"deadline work on CS2113 --by Sunday\"\u003c/code\u003e has \u003ccode\u003e\"deadline work on CS2113\"\u003c/code\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * as the main command \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" * Each command (argument-payload pair) except for the main command MUST","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":" * be delimited by \u003ccode\u003e\" --\"\u003c/code\u003e (whitespace intentional)","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" * For example, a given user input: \u003ccode\u003e\"deadline work on CS2113 --by Sunday\"\u003c/code\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eHas commands [\"deadline work on CS2113\", \"by Sunday\"]\u003c/li\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eHas arguments [\"deadline\", \"by\"]\u003c/li\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eHas payloads [\"work on CS2113\", [\"Sunday\"]\u003c/li\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"public class CommandParser {","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private static final String ARGUMENT_DELIMITER \u003d \" --\";","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    private static final String UNPADDED_DELIMITER \u003d \"--\";","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    private static final String PAYLOAD_DELIMITER \u003d \" \";","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    // Message string constants for errors and ui","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_EMPTY_COMMAND \u003d \"Invalid command issued, command cannot be empty!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_EMPTY_ARGUMENT \u003d \"Invalid arguments given, command is missing an argument!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_REPEATED_ARGUMENT \u003d \"Invalid arguments given, command cannot have \"","lastModifiedDate":"2023-04-04"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"            + \"repeated arguments!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"CommandParserLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_STR_EMPTY_INPUT \u003d \"Input string is empty. This should be properly handled\";","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_EMPTY_ARG \u003d \"Argument is empty. This should be properly handled\";","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     * Constructs an instance of CommandParser. \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     * CommandParser should be used to break down raw user input into","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"     * logical \u003ccode\u003e[Argument,Payload]\u003c/code\u003e pairs","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    public CommandParser() {","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * Split a userInput by the standardized delimiter.","lastModifiedDate":"2023-03-24"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"     * This function handles some adversarial user input.","lastModifiedDate":"2023-03-24"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"     * There are 2 possible adversarial inputs that this function checks for:","lastModifiedDate":"2023-03-24"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"     * 1. Whitespace/Empty Arguments: `cmd payload -- payload1 -- ` \u003cbr\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"     * Split renders it as [\"cmd payload\", \" payload1\", \"\"]","lastModifiedDate":"2023-03-24"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"     * \" payload1\" will cause issues with rendering","lastModifiedDate":"2023-03-24"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"     * So, check for empty commands and whitespace prefix. \u003cbr\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"     * 2. Missing main argument: `--argument payload` \u003cbr\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"     * Split renders this as [\"--argument payload\"]","lastModifiedDate":"2023-03-24"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"     * So, check for \"--\" prefix.","lastModifiedDate":"2023-03-24"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"     * @param fullCommandString Raw user input from stdin in string form","lastModifiedDate":"2023-03-24"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * @return String array of command substrings","lastModifiedDate":"2023-03-24"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     * @throws BadCommandException when command is empty or is problematic","lastModifiedDate":"2023-03-24"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"    private String[] splitIntoCommands(String fullCommandString) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        assert fullCommandString !\u003d null : \"fullCommandString should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        // Perform a string length sanity check","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        fullCommandString \u003d fullCommandString.strip();","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        if (fullCommandString.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"            LOGGER.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-04-06"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        int noLimit \u003d -1;","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        String[] rawCommands \u003d fullCommandString.split(ARGUMENT_DELIMITER, noLimit);","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        String[] cleanCommands \u003d new String[rawCommands.length];","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 0; i \u003c rawCommands.length; ++i) {","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"            String currentCommand \u003d rawCommands[i];","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"            // Case 1 check","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"            if (currentCommand.startsWith(\" \") || currentCommand.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"                LOGGER.log(Level.INFO, LOG_EMPTY_ARG);","lastModifiedDate":"2023-04-06"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(ERROR_EMPTY_ARGUMENT);","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"            // Strip command of whitespace to clean input","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"            currentCommand \u003d currentCommand.strip();","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"            // Case 2 check","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"            if (currentCommand.startsWith(UNPADDED_DELIMITER)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"                LOGGER.log(Level.INFO, LOG_EMPTY_ARG);","lastModifiedDate":"2023-04-06"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"            cleanCommands[i] \u003d currentCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"        return cleanCommands;","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    private String getArgumentFromCommand(String commandString) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        assert commandString !\u003d null : \"commandString should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d commandString.split(PAYLOAD_DELIMITER);","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        // Bad input checks","lastModifiedDate":"2023-03-08"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"        if (words.length \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"            LOGGER.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-04-06"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_ARGUMENT);","lastModifiedDate":"2023-03-08"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"        return words[0].toLowerCase().strip();","lastModifiedDate":"2023-04-09"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"    private String getPayloadFromCommand(String commandString) {","lastModifiedDate":"2023-03-08"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        assert commandString !\u003d null : \"commandString should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d commandString.split(PAYLOAD_DELIMITER);","lastModifiedDate":"2023-03-08"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"        String payload \u003d \"\";","lastModifiedDate":"2023-03-08"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        // Ignore the first word (Main Command), so start from 1","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 1; i \u003c words.length; ++i) {","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"            payload \u003d payload.concat(words[i]);","lastModifiedDate":"2023-03-08"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"            if (i !\u003d words.length - 1) {","lastModifiedDate":"2023-03-08"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"                payload \u003d payload.concat(PAYLOAD_DELIMITER);","lastModifiedDate":"2023-03-08"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        // No checks for payload length is done as payload CAN be empty","lastModifiedDate":"2023-03-08"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        return payload.strip();","lastModifiedDate":"2023-04-09"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"     * Takes in raw user input and splits it into Argument-Payload pairs","lastModifiedDate":"2023-03-08"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"     * @param userInput Raw user input from stdin in string form","lastModifiedDate":"2023-03-08"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"     * @return HashMap mapping a Argument (key) to a Payload (value)","lastModifiedDate":"2023-03-08"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"     * @throws BadCommandException when command is empty or is problematic","lastModifiedDate":"2023-03-08"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"    public HashMap\u003cString, String\u003e parseUserInput(String userInput) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        assert userInput !\u003d null : \"userInput should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"        if (userInput.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":148,"author":{"gitId":"haoyangw"},"content":"            LOGGER.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-04-06"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-08"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"        String[] commands \u003d splitIntoCommands(userInput);","lastModifiedDate":"2023-03-08"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"        for (String command : commands) {","lastModifiedDate":"2023-03-08"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"            String argument \u003d getArgumentFromCommand(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"            // Safety check if arguments already exists","lastModifiedDate":"2023-03-23"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"            if (argumentPayload.containsKey(argument)) {","lastModifiedDate":"2023-03-23"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(ERROR_REPEATED_ARGUMENT);","lastModifiedDate":"2023-03-23"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-23"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"            String payload \u003d getPayloadFromCommand(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(argument, payload);","lastModifiedDate":"2023-03-08"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"        return argumentPayload;","lastModifiedDate":"2023-03-08"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"     * Takes in a string and returns the inferred \"Main Argument\"","lastModifiedDate":"2023-03-08"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"     * Practically, this is the \u003cb\u003eFirst\u003c/b\u003e argument of any command string.","lastModifiedDate":"2023-03-08"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"     * For example, \u003ccode\u003e\"hb add --name foobar\"\u003c/code\u003e \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"     * Has main argument \"hb\"","lastModifiedDate":"2023-03-08"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"     * @param userInput Any string input representing a command","lastModifiedDate":"2023-03-08"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"     * @return the inferred Main Argument, converted to lowercase","lastModifiedDate":"2023-03-24"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"     * @throws BadCommandException when String is empty","lastModifiedDate":"2023-03-08"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"    public String getMainArgument(String userInput) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"        assert userInput !\u003d null : \"userInput should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"        userInput \u003d userInput.strip();","lastModifiedDate":"2023-03-08"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"        if (userInput.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-10"},{"lineNumber":181,"author":{"gitId":"haoyangw"},"content":"            LOGGER.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-04-06"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"        String[] parameters \u003d userInput.split(\" \");","lastModifiedDate":"2023-03-10"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"        return parameters[0].toLowerCase();","lastModifiedDate":"2023-03-24"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"wenxin-c":4,"haoyangw":13,"nichyjt":170}},{"path":"src/main/java/wellnus/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-04-05"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" * Provides the exit command of the WellNUS++ app.","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"exit - Close WellNUS++ and return to your terminal.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: exit\";","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_KEYWORD \u003d \"exit\";","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027exit\u0027!\";","lastModifiedDate":"2023-04-06"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final String EXTRA_PAYLOAD_MESSAGE \u003d \"Invalid payload given to \u0027exit\u0027!\";","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private static final String FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    private static final int NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-04-05"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027exit\u0027\";","lastModifiedDate":"2023-04-06"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"     * Initialises an ExitCommand Object using the arguments issued by the user.","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"     * @see ExitCommand#validateCommand(HashMap)","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    public ExitCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    public static boolean isExit(Command command) {","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        return command instanceof ExitCommand;","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"        return ExitCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"        return ExitCommand.FEATURE_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"     * Exits the WellNUS++ application.","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"    public void execute() throws WellNusException {","lastModifiedDate":"2023-04-05"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"        validateCommand(super.getArguments());","lastModifiedDate":"2023-04-05"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments passed by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using the user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the commandMap has any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(ExitCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(ExitCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() \u003e NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-04-05"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(ExitCommand.INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"        String commandPayload \u003d arguments.get(ExitCommand.COMMAND_KEYWORD);","lastModifiedDate":"2023-04-05"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        if (!commandPayload.isBlank()) {","lastModifiedDate":"2023-04-05"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(EXTRA_PAYLOAD_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-23"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"wenxin-c":5,"haoyangw":82,"nichyjt":30}},{"path":"src/main/java/wellnus/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import wellnus.common.MainManager;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.GamificationManager;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":" * Implementation of WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":" * by WellNus and how to use each command.","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"//@@author: nichyjt","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"help - Get help on what commands can be used in WellNUS++.\";","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: help [command-to-check]\";","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String BAD_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"help command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String HELP_PREAMBLE \u003d \"Input `help` to see all available commands.\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"            + \"Input `help [command-to-check]` to get usage help for a specific command.\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-09"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"            + \"Here are all the commands available for you!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    private static final String USAGE_HABIT \u003d \"\\tusage: hb\";","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    private static final String USAGE_REFLECT \u003d \"\\tusage: reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    private static final String USAGE_FOCUS \u003d \"\\tusage: ft\";","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private static final String USAGE_GAMIFICATION \u003d \"\\tusage: gamif\";","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    private static final int EMPTY_ARG_LENGTH \u003d 0;","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * Initialises a HelpCommand Object using the command arguments issued by the user.","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-23"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(AtomicHabitManager.FEATURE_HELP_DESCRIPTION);","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(ReflectionManager.FEATURE_HELP_DESCRIPTION);","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(FocusManager.FEATURE_HELP_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"        commandDescriptions.add(GamificationManager.FEATURE_HELP_DESCRIPTION);","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(ExitCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        return commandDescriptions;","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"     * Prints either the general help message or the command-specific help message","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"     * based on the presence of a payload.","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"        String commandToSearch \u003d argumentPayload.get(COMMAND_KEYWORD).trim().toLowerCase();","lastModifiedDate":"2023-04-01"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        if (commandToSearch.equals(NO_FEATURE_KEYWORD)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"            printGeneralHelpMessage();","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        printSpecificHelpMessage(commandToSearch);","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"     * Lists all features available in WellNUS++ and a short description.","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"    public void printGeneralHelpMessage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d getCommandDescriptions();","lastModifiedDate":"2023-03-23"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        String outputMessage \u003d MainManager.FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator());","lastModifiedDate":"2023-03-23"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        outputMessage \u003d outputMessage.concat(HELP_PREAMBLE);","lastModifiedDate":"2023-03-23"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator() + System.lineSeparator());","lastModifiedDate":"2023-03-23"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 0; i \u003c commandDescriptions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions.get(i) + System.lineSeparator());","lastModifiedDate":"2023-03-23"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        this.getTextUi().printOutputMessage(outputMessage);","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"     * Prints the help message for a given commandToSearch. \u003cbr/\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"     * If the commandToSearch does not exist, help will print an unknown command","lastModifiedDate":"2023-04-06"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"     * error message.","lastModifiedDate":"2023-04-06"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"    public void printSpecificHelpMessage(String commandToSearch) {","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"        switch (commandToSearch) {","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"        case AtomicHabitManager.FEATURE_NAME:","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"            printUsageMessage(AtomicHabitManager.FEATURE_HELP_DESCRIPTION, USAGE_HABIT);","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        case ReflectionManager.FEATURE_NAME:","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"            printUsageMessage(ReflectionManager.FEATURE_HELP_DESCRIPTION, USAGE_REFLECT);","lastModifiedDate":"2023-03-28"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"        case FocusManager.FEATURE_NAME:","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"            printUsageMessage(FocusManager.FEATURE_HELP_DESCRIPTION, USAGE_FOCUS);","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"        case GamificationManager.FEATURE_NAME:","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"            printUsageMessage(GamificationManager.FEATURE_HELP_DESCRIPTION, USAGE_GAMIFICATION);","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        case HelpCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"            printUsageMessage(HelpCommand.COMMAND_DESCRIPTION, HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        case ExitCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"            printUsageMessage(ExitCommand.COMMAND_DESCRIPTION, ExitCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"        default:","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"            BadCommandException unknownCommand \u003d new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"            textUi.printErrorFor(unknownCommand, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"    private void printUsageMessage(String commandDescription, String usageString) {","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        String message \u003d commandDescription + System.lineSeparator() + usageString;","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        textUi.printOutputMessage(message);","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-09"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-09"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-09"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-09"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":145,"author":{"gitId":"haoyangw"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"     * Prints a brief description of all of WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-09"},{"lineNumber":148,"author":{"gitId":"haoyangw"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":150,"author":{"gitId":"haoyangw"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-09"},{"lineNumber":151,"author":{"gitId":"haoyangw"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-09"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":153,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-09"},{"lineNumber":155,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-16"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-16"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"            getTextUi().printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":159,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-16"},{"lineNumber":162,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-15"},{"lineNumber":169,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-16"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"        if (arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(BAD_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"     * Abstract method to ensure developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":204,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":11,"BernardLesley":4,"haoyangw":75,"nichyjt":114}},{"path":"src/main/java/wellnus/common/MainManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.common;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.util.List;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.ExitCommand;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.HelpCommand;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.GamificationManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * MainManager is the primary event driver for WellNUS++ \u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" * MainManager creates and stores exactly one instance of each feature\u0027s Manager in WellNUS++.","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":" * It runs an event driver, matches user input to the selected feature","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" * and executes its instance to launch the feature Manager.","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"public class MainManager extends Manager {","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    public static final String FEATURE_HELP_DESCRIPTION \u003d \"WellNUS++ is a Command Line Interface (CLI)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"            + \" app for you to keep track, manage and improve your physical and mental wellness.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_IS_BLANK_MESSAGE \u003d \"Command is blank - please check user input code for \"","lastModifiedDate":"2023-04-05"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"            + \"MainManager.\";","lastModifiedDate":"2023-04-05"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_IS_NULL_MESSAGE \u003d \"Command is null - please check user input code for \"","lastModifiedDate":"2023-04-05"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"            + \"MainManager.\";","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    private static final String EXIT_COMMAND_KEYWORD \u003d \"exit\";","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    private static final String FEATURE_NAME \u003d \"main\";","lastModifiedDate":"2023-04-03"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    private static final String GREETING_MESSAGE \u003d \"Enter a command to start using WellNUS++! Try \u0027help\u0027 \"","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"            + \"if you\u0027re new, or just unsure.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    private static final String HELP_COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-04-05"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_ADDITIONAL_MESSAGE \u003d","lastModifiedDate":"2023-04-05"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"            \"Supported features: \" + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"            + \"Access Atomic Habit: hb\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"            + \"Access Self Reflection : reflect\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"            + \"Access Focus Timer: ft\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"            + \"Access Gamification: gamif\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"            + \"Help command: help\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"            + \"Exit program: exit\";","lastModifiedDate":"2023-04-05"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_FEATURE_KEYWORD_MESSAGE \u003d \"Feature keyword can\u0027t be empty dear\";","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    private static final int NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-04-05"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027%s\u0027!\";","lastModifiedDate":"2023-04-06"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    private static final String UNNECESSARY_PAYLOAD_MESSAGE \u003d \"Invalid payload given to \u0027%s\u0027, drop the \u0027%s\u0027 \"","lastModifiedDate":"2023-04-06"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"            + \"and try again!\";","lastModifiedDate":"2023-04-06"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    private static final String WELLNUS_FEATURE_NAME \u003d \"\";","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    private final ArrayList\u003cManager\u003e featureManagers;","lastModifiedDate":"2023-04-05"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"    private boolean hasExecutedCommands \u003d false;","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"     * Constructs an instance of MainManager. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"     * Instantiates boilerplate utilities like TextUi","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"     * and populates featureManagers with exactly one instance to be executed on user selection","lastModifiedDate":"2023-03-18"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    public MainManager() {","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"        super();","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        this.featureManagers \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"        this.textUi.setCursorName(FEATURE_NAME);","lastModifiedDate":"2023-04-03"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"     * Continuously reads user\u0027s commands and executes those that are supported","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"     * by WellNUS++ until the `exit` command is given.\u003cbr\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"     * If an unrecognised command is given, a warning is printed on the user\u0027s screen.","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"    private void executeCommands() {","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        if (!hasExecutedCommands) {","lastModifiedDate":"2023-04-09"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"            this.setSupportedFeatureManagers();","lastModifiedDate":"2023-04-09"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"            hasExecutedCommands \u003d true;","lastModifiedDate":"2023-04-09"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"            try {","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"                String nextCommand \u003d this.getTextUi().getCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"                validate(nextCommand);","lastModifiedDate":"2023-04-05"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"                // nextCommand now guaranteed to be a supported feature/main command","lastModifiedDate":"2023-04-05"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"                String featureKeyword \u003d parser.getMainArgument(nextCommand);","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"                Optional\u003cManager\u003e featureManager \u003d this.getManagerFor(featureKeyword);","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"                // User issued a feature keyword, pass control to the corresponding feature\u0027s Manager","lastModifiedDate":"2023-03-16"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"                featureManager.ifPresent((manager) -\u003e {","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"                    // TODO: Consider if there\u0027s a way to avoid this extra try-catch?","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"                    try {","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"                        manager.runEventDriver();","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"                    } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"                        this.getTextUi().printErrorFor(badCommandException, INVALID_COMMAND_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"                    }","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"                });","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"                // User issued a main command, e.g. \u0027help\u0027","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"                if (featureManager.isEmpty()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"                    Command mainCommand \u003d this.getMainCommandFor(nextCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"                    mainCommand.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"                    isExit \u003d ExitCommand.isExit(mainCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"                }","lastModifiedDate":"2023-03-16"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"            } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-04-05"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"                this.getTextUi().printErrorFor(badCommandException, MainManager.INVALID_COMMAND_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"            } catch (WellNusException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"                this.getTextUi().printErrorFor(exception, INVALID_COMMAND_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"        // We are about to quit WellNUS++. Close the log file used in this session","lastModifiedDate":"2023-04-09"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"        WellNusLogger.closeLogFile();","lastModifiedDate":"2023-04-09"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"     * Parses the given command String issued by the user and returns the corresponding","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"     * Command object that can execute it.","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"     * @param command Command issued by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If command issued is not supported or invalid","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"    private Command getMainCommandFor(String command) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"        String commandKeyword \u003d getCommandParser().getMainArgument(command);","lastModifiedDate":"2023-03-15"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d getCommandParser().parseUserInput(command);","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"        switch (commandKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"        case MainManager.HELP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"            return new HelpCommand(arguments);","lastModifiedDate":"2023-03-19"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"        case MainManager.EXIT_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"            return new ExitCommand(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"        default:","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(MainManager.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"    private List\u003cString\u003e getSupportedCommandKeywords() {","lastModifiedDate":"2023-03-15"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"        List\u003cString\u003e commandKeywords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"        // TODO: Consider if there\u0027s a better way than exposing a static variable(a helper method?)","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"        commandKeywords.add(MainManager.HELP_COMMAND_KEYWORD);","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"        commandKeywords.add(MainManager.EXIT_COMMAND_KEYWORD);","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"        return commandKeywords;","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"    private List\u003cManager\u003e getSupportedFeatureManagers() {","lastModifiedDate":"2023-03-14"},{"lineNumber":148,"author":{"gitId":"haoyangw"},"content":"        return this.featureManagers;","lastModifiedDate":"2023-03-15"},{"lineNumber":149,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":150,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":151,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"haoyangw"},"content":"    private void greet() {","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"haoyangw"},"content":"        this.getTextUi().printOutputMessage(MainManager.GREETING_MESSAGE);","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"haoyangw"},"content":"    private boolean isSupportedCommand(String commandKeyword) {","lastModifiedDate":"2023-03-14"},{"lineNumber":160,"author":{"gitId":"haoyangw"},"content":"        List\u003cString\u003e cmdKeywords \u003d this.getSupportedCommandKeywords();","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"haoyangw"},"content":"        for (String cmdKeyword : cmdKeywords) {","lastModifiedDate":"2023-03-15"},{"lineNumber":162,"author":{"gitId":"haoyangw"},"content":"            if (commandKeyword.equals(cmdKeyword)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"                return true;","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"haoyangw"},"content":"        return false;","lastModifiedDate":"2023-03-15"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":169,"author":{"gitId":"haoyangw"},"content":"    private void validate(String command) throws BadCommandException {","lastModifiedDate":"2023-04-05"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"        assert command !\u003d null : MainManager.COMMAND_IS_NULL_MESSAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":171,"author":{"gitId":"haoyangw"},"content":"        assert !command.isBlank() : MainManager.COMMAND_IS_BLANK_MESSAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":172,"author":{"gitId":"haoyangw"},"content":"        String featureKeyword \u003d commandParser.getMainArgument(command);","lastModifiedDate":"2023-04-05"},{"lineNumber":173,"author":{"gitId":"haoyangw"},"content":"        Optional\u003cManager\u003e featureManager \u003d this.getManagerFor(featureKeyword);","lastModifiedDate":"2023-04-05"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"        // User gave a command that\u0027s not any feature\u0027s keyword nor a recognised main command","lastModifiedDate":"2023-04-05"},{"lineNumber":175,"author":{"gitId":"haoyangw"},"content":"        if (featureManager.isEmpty() \u0026\u0026 !this.isSupportedCommand(featureKeyword)) {","lastModifiedDate":"2023-04-05"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(MainManager.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":178,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d commandParser.parseUserInput(command);","lastModifiedDate":"2023-04-05"},{"lineNumber":179,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() \u003e NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-04-05"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(String.format(MainManager.INVALID_ARGUMENTS_MESSAGE,","lastModifiedDate":"2023-04-06"},{"lineNumber":181,"author":{"gitId":"haoyangw"},"content":"                    featureKeyword));","lastModifiedDate":"2023-04-05"},{"lineNumber":182,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":183,"author":{"gitId":"haoyangw"},"content":"        String argumentPayload \u003d arguments.get(featureKeyword);","lastModifiedDate":"2023-04-05"},{"lineNumber":184,"author":{"gitId":"haoyangw"},"content":"        if (!featureKeyword.equals(HELP_COMMAND_KEYWORD) \u0026\u0026 !argumentPayload.isBlank()) {","lastModifiedDate":"2023-04-05"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(String.format(MainManager.UNNECESSARY_PAYLOAD_MESSAGE,","lastModifiedDate":"2023-04-06"},{"lineNumber":186,"author":{"gitId":"haoyangw"},"content":"                    featureKeyword, argumentPayload));","lastModifiedDate":"2023-04-05"},{"lineNumber":187,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":188,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-05"},{"lineNumber":189,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":190,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"     * Returns a help description of the WellNUS++ app.","lastModifiedDate":"2023-03-25"},{"lineNumber":192,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"     * @return Help description of this app","lastModifiedDate":"2023-03-23"},{"lineNumber":194,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":195,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"    public String getFeatureHelpDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"        return FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":198,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":199,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":200,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":201,"author":{"gitId":"haoyangw"},"content":"     * Returns the name of this feature. In this case, it\u0027s just empty(not any particular feature).","lastModifiedDate":"2023-03-13"},{"lineNumber":202,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":203,"author":{"gitId":"haoyangw"},"content":"     * @return Empty String to imply that this Manager is not associated with any feature","lastModifiedDate":"2023-03-13"},{"lineNumber":204,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":205,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":206,"author":{"gitId":"haoyangw"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":207,"author":{"gitId":"haoyangw"},"content":"        return WELLNUS_FEATURE_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":208,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":209,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":210,"author":{"gitId":"haoyangw"},"content":"    public Optional\u003cManager\u003e getManagerFor(String featureKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":211,"author":{"gitId":"haoyangw"},"content":"        assert (featureKeyword !\u003d null \u0026\u0026 !featureKeyword.isBlank())","lastModifiedDate":"2023-03-15"},{"lineNumber":212,"author":{"gitId":"haoyangw"},"content":"                : MainManager.INVALID_FEATURE_KEYWORD_MESSAGE;","lastModifiedDate":"2023-03-15"},{"lineNumber":213,"author":{"gitId":"haoyangw"},"content":"        for (Manager featureManager : this.getSupportedFeatureManagers()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":214,"author":{"gitId":"haoyangw"},"content":"            if (featureManager.getFeatureName().equals(featureKeyword)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":215,"author":{"gitId":"haoyangw"},"content":"                return Optional.of(featureManager);","lastModifiedDate":"2023-03-15"},{"lineNumber":216,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":217,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":218,"author":{"gitId":"haoyangw"},"content":"        return Optional.empty();","lastModifiedDate":"2023-03-15"},{"lineNumber":219,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":220,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":221,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":222,"author":{"gitId":"haoyangw"},"content":"     * Executes the basic commands(e.g. \u003ccode\u003ehelp\u003c/code\u003e) as well as any feature-specific","lastModifiedDate":"2023-03-13"},{"lineNumber":223,"author":{"gitId":"haoyangw"},"content":"     * commands, which are delegated to the corresponding features\u0027 Managers.\u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":224,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":225,"author":{"gitId":"haoyangw"},"content":"     * This method will keep reading the user\u0027s command until the exit command is given.","lastModifiedDate":"2023-03-14"},{"lineNumber":226,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":227,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":228,"author":{"gitId":"haoyangw"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-14"},{"lineNumber":229,"author":{"gitId":"haoyangw"},"content":"        this.greet();","lastModifiedDate":"2023-03-13"},{"lineNumber":230,"author":{"gitId":"haoyangw"},"content":"        this.executeCommands();","lastModifiedDate":"2023-03-14"},{"lineNumber":231,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":232,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":233,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"     * Returns a list of features supported by WellNUS++. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":235,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":236,"author":{"gitId":"haoyangw"},"content":"     * Suggested implementation: \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":237,"author":{"gitId":"haoyangw"},"content":"     * \u003ccode\u003e this.supportedManagers.add([mgr1, mgr2, ...]); \u003c/code\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":238,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":239,"author":{"gitId":"haoyangw"},"content":"    protected void setSupportedFeatureManagers() {","lastModifiedDate":"2023-03-13"},{"lineNumber":240,"author":{"gitId":"haoyangw"},"content":"        GamificationManager gamificationManager \u003d new GamificationManager();","lastModifiedDate":"2023-03-28"},{"lineNumber":241,"author":{"gitId":"haoyangw"},"content":"        this.getSupportedFeatureManagers().add(gamificationManager);","lastModifiedDate":"2023-03-28"},{"lineNumber":242,"author":{"gitId":"haoyangw"},"content":"        this.getSupportedFeatureManagers().add(","lastModifiedDate":"2023-03-28"},{"lineNumber":243,"author":{"gitId":"haoyangw"},"content":"                new AtomicHabitManager(gamificationManager.getGamificationData()));","lastModifiedDate":"2023-03-28"},{"lineNumber":244,"author":{"gitId":"haoyangw"},"content":"        this.getSupportedFeatureManagers().add(new ReflectionManager());","lastModifiedDate":"2023-03-16"},{"lineNumber":245,"author":{"gitId":"YongbinWang"},"content":"        this.getSupportedFeatureManagers().add(new FocusManager());","lastModifiedDate":"2023-03-25"},{"lineNumber":246,"author":{"gitId":"haoyangw"},"content":"        // TODO: Implement once all Managers are in","lastModifiedDate":"2023-03-13"},{"lineNumber":247,"author":{"gitId":"haoyangw"},"content":"        // e.g. this.getSupportedFeatureManagers().add(new AtomicHabitManager());","lastModifiedDate":"2023-03-15"},{"lineNumber":248,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":249,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":250,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"wenxin-c":18,"haoyangw":201,"nichyjt":29,"YongbinWang":2}},{"path":"src/main/java/wellnus/common/WellNusLogger.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.common;","lastModifiedDate":"2023-04-06"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.io.File;","lastModifiedDate":"2023-04-06"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import java.io.IOException;","lastModifiedDate":"2023-04-06"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-04-06"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2023-04-06"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-04-06"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import java.util.Optional;","lastModifiedDate":"2023-04-09"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-04-06"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-04-06"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":" * Wrapper class for \u003ccode\u003ejava.util.logging.Logger\u003c/code\u003e that redirects logging","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":" * to a specific log file instead of printing it on the user\u0027s screen.","lastModifiedDate":"2023-04-06"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":" * @see Logger","lastModifiedDate":"2023-04-06"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-04-06"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"public class WellNusLogger {","lastModifiedDate":"2023-04-06"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private static final String CREATE_LOG_FILE_IO_EXCEPTION_MESSAGE \u003d \"Failed to create log file.\";","lastModifiedDate":"2023-04-06"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    private static final String EXCEPTION_NOTE_MESSAGE \u003d \"Logging will not be saved to a log file during this app \"","lastModifiedDate":"2023-04-09"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"            + \"session.\";","lastModifiedDate":"2023-04-09"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private static final int FIVE_MEGABYTES \u003d 5 * 1024 * 1024;","lastModifiedDate":"2023-04-09"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_LOG_PATH_MESSAGE \u003d \"Invalid log path, cannot create log file.\";","lastModifiedDate":"2023-04-06"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    private static final boolean IS_LOG_FILE_APPEND_MODE \u003d true;","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    private static final String LOG_DIR_PATH \u003d \"log/\";","lastModifiedDate":"2023-04-06"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    private static final String LOG_FILE_NAME \u003d \"wellnus.log\";","lastModifiedDate":"2023-04-06"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    private static final String LOG_PATH_BLANK_MESSAGE \u003d \"Blank log path passed to WellNusLogger.checkLogPath().\";","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    private static final String LOG_PATH_NULL_MESSAGE \u003d \"null log path passed to WellNusLogger.checkLogPath().\";","lastModifiedDate":"2023-04-06"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    private static final String LOGGER_NAME_BLANK_MESSAGE \u003d \"Name parameter given to WellNusLogger.getLogger() cannot \"","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"            + \"be blank\";","lastModifiedDate":"2023-04-06"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private static final String LOGGER_NAME_NULL_MESSAGE \u003d \"Name parameter given to WellNusLogger.getLogger() cannot \"","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"            + \"be null\";","lastModifiedDate":"2023-04-06"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    private static final String IO_EXCEPTION_MESSAGE \u003d \"Failed to load log file.\";","lastModifiedDate":"2023-04-06"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    private static final int MAX_LOG_FILE_SIZE_MEGA_BYTES \u003d 5;","lastModifiedDate":"2023-04-06"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    private static final int MEGABYTE_DIVISOR \u003d 1024 * 1024;","lastModifiedDate":"2023-04-09"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    private static final int NUM_LOG_FILE \u003d 1;","lastModifiedDate":"2023-04-09"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    private static final String SECURITY_EXCEPTION_MESSAGE \u003d \"Unable to create log file due to security policies.\";","lastModifiedDate":"2023-04-06"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    private static final String UNKNOWN_ERROR_MESSAGE \u003d \"Unable to create log file due to unknown error.\";","lastModifiedDate":"2023-04-09"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    private static Optional\u003cFileHandler\u003e logFileHandler \u003d Optional.empty();","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    private static void checkLogPath(String logPath) {","lastModifiedDate":"2023-04-06"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"        assert logPath !\u003d null : LOG_PATH_NULL_MESSAGE;","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"        assert !logPath.isBlank() : LOG_PATH_BLANK_MESSAGE;","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        TextUi textUi \u003d new TextUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-04-06"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"            File logFile \u003d new File(logPath);","lastModifiedDate":"2023-04-06"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"            Path parentDir \u003d logFile.getParentFile().toPath();","lastModifiedDate":"2023-04-06"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2023-04-06"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"            if (!logFile.exists()) {","lastModifiedDate":"2023-04-06"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"                logFile.createNewFile();","lastModifiedDate":"2023-04-06"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"            } else {","lastModifiedDate":"2023-04-06"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"                long logFileSizeInMegaBytes \u003d logFile.length() / MEGABYTE_DIVISOR;","lastModifiedDate":"2023-04-09"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"                if (logFileSizeInMegaBytes \u003c\u003d MAX_LOG_FILE_SIZE_MEGA_BYTES) {","lastModifiedDate":"2023-04-06"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"                    return;","lastModifiedDate":"2023-04-06"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"                }","lastModifiedDate":"2023-04-06"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"                // Log file is more than 5 MBs in size, clear it to preserve user\u0027s storage space","lastModifiedDate":"2023-04-06"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"                logFile.delete();","lastModifiedDate":"2023-04-06"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"                logFile.createNewFile();","lastModifiedDate":"2023-04-06"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-04-06"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"        } catch (InvalidPathException invalidPathException) {","lastModifiedDate":"2023-04-06"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"            StorageException storageException \u003d new StorageException(INVALID_LOG_PATH_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"            textUi.printErrorFor(storageException, EXCEPTION_NOTE_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2023-04-06"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"            StorageException storageException \u003d new StorageException(CREATE_LOG_FILE_IO_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"            textUi.printErrorFor(storageException, EXCEPTION_NOTE_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"        } catch (SecurityException securityException) {","lastModifiedDate":"2023-04-06"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"            StorageException storageException \u003d new StorageException(SECURITY_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"            textUi.printErrorFor(storageException, EXCEPTION_NOTE_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-06"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-06"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    private static FileHandler getFileHandler() {","lastModifiedDate":"2023-04-09"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"        if (logFileHandler.isPresent()) {","lastModifiedDate":"2023-04-09"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"            return logFileHandler.get();","lastModifiedDate":"2023-04-09"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"        FileHandler fileHandler \u003d null;","lastModifiedDate":"2023-04-09"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        TextUi textUi \u003d new TextUi();","lastModifiedDate":"2023-04-09"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"            String logPath \u003d LOG_DIR_PATH + LOG_FILE_NAME;","lastModifiedDate":"2023-04-09"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"            checkLogPath(logPath);","lastModifiedDate":"2023-04-09"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"            fileHandler \u003d new FileHandler(logPath, FIVE_MEGABYTES, NUM_LOG_FILE, IS_LOG_FILE_APPEND_MODE);","lastModifiedDate":"2023-04-09"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"            SimpleFormatter simpleFormatter \u003d new SimpleFormatter();","lastModifiedDate":"2023-04-09"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"            fileHandler.setFormatter(simpleFormatter);","lastModifiedDate":"2023-04-09"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"            logFileHandler \u003d Optional.of(fileHandler);","lastModifiedDate":"2023-04-09"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        } catch (SecurityException securityException) {","lastModifiedDate":"2023-04-09"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"            StorageException storageException \u003d new StorageException(SECURITY_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"            textUi.printErrorFor(storageException, EXCEPTION_NOTE_MESSAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"        } catch (IOException ioException) {","lastModifiedDate":"2023-04-09"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"            StorageException storageException \u003d new StorageException(IO_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"            textUi.printErrorFor(storageException, EXCEPTION_NOTE_MESSAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"        return fileHandler;","lastModifiedDate":"2023-04-09"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     * Closes the log file used by WellNUS++.","lastModifiedDate":"2023-04-09"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"    public static void closeLogFile() {","lastModifiedDate":"2023-04-09"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"        logFileHandler.ifPresent(FileHandler::close);","lastModifiedDate":"2023-04-09"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-06"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"     * Returns an instance of Java\u0027s Logger class that directs all logging to a specific","lastModifiedDate":"2023-04-06"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"     * log file instead of the user\u0027s screen.","lastModifiedDate":"2023-04-06"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"     * @param loggerName Name of the logger instance to create and return","lastModifiedDate":"2023-04-06"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"     * @return Instance of Logger that logs to a specific file","lastModifiedDate":"2023-04-06"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-06"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"    public static Logger getLogger(String loggerName) {","lastModifiedDate":"2023-04-06"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"        assert loggerName !\u003d null : LOGGER_NAME_NULL_MESSAGE;","lastModifiedDate":"2023-04-06"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"        assert !loggerName.isBlank() : LOGGER_NAME_BLANK_MESSAGE;","lastModifiedDate":"2023-04-06"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"        Logger logger \u003d Logger.getLogger(loggerName);","lastModifiedDate":"2023-04-06"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"        TextUi textUi \u003d new TextUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"        FileHandler fileHandler \u003d getFileHandler();","lastModifiedDate":"2023-04-09"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"        if (fileHandler !\u003d null) {","lastModifiedDate":"2023-04-09"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"            try {","lastModifiedDate":"2023-04-06"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"                logger.addHandler(fileHandler);","lastModifiedDate":"2023-04-06"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"                logger.setUseParentHandlers(false);","lastModifiedDate":"2023-04-06"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"            } catch (SecurityException securityException) {","lastModifiedDate":"2023-04-06"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"                StorageException storageException \u003d new StorageException(SECURITY_EXCEPTION_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"                textUi.printErrorFor(storageException, EXCEPTION_NOTE_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-04-09"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"        } else {","lastModifiedDate":"2023-04-09"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"            StorageException storageException \u003d new StorageException(UNKNOWN_ERROR_MESSAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"            textUi.printErrorFor(storageException, EXCEPTION_NOTE_MESSAGE);","lastModifiedDate":"2023-04-06"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-06"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"        return logger;","lastModifiedDate":"2023-04-06"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-06"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-06"}],"authorContributionMap":{"haoyangw":131}},{"path":"src/main/java/wellnus/exception/AtomicHabitException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * AtomicHabitException is thrown when a conceptual/logical error occurs in the AtomicHabit package \u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception should only be used within the AtomicHabit package.","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * It differentiates between WellNUS and regular Java exceptions,","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * which allows better pinpointing of errors to the AtomicHabit logic.","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitException extends WellNusException {","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitException(String errorMessage) {","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"haoyangw":1,"YongbinWang":6,"nichyjt":7}},{"path":"src/main/java/wellnus/exception/BadCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * BadCommandException is thrown when a conceptual/logical error occurs in Command (sub)classes \u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception should be used in classes extending from the Command class.","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * It differentiates between WellNUS and regular Java exceptions,","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * allowing better pinpointing of errors to Command subclasses.","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"public class BadCommandException extends WellNusException {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    public BadCommandException(String errorMessage) {","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"BernardLesley":1,"haoyangw":1,"nichyjt":12}},{"path":"src/main/java/wellnus/exception/FocusException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * FocusException is thrown when a conceptual/logical error occurs in Focus.","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception is only thrown within the functional code for Focus.","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"public class FocusException extends WellNusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"    public FocusException(String message) {","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"        super(message);","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"nichyjt":13}},{"path":"src/main/java/wellnus/exception/GamificationException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":" * Category of Exceptions related to the gamification feature.","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"public class GamificationException extends WellNusException {","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"     * Returns an instance of the GamificationException.","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"     * @param message Error message to display on the user\u0027s screen","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"    public GamificationException(String message) {","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"        super(message);","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"haoyangw":14}},{"path":"src/main/java/wellnus/exception/ReflectionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.exception;","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":" * ReflectionException is thrown when a conceptual/logical error occurs in the reflection package \u003cbr\u003e","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":" * This exception should only be used within the reflection package.","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"public class ReflectionException extends WellNusException {","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"    public ReflectionException(String message) {","lastModifiedDate":"2023-04-04"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"        super(message);","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"wenxin-c":12}},{"path":"src/main/java/wellnus/exception/StorageException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * StorageException is thrown when a conceptual/logical error occurs in Storage.","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception is only thrown within the functional code for Storage.","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"public class StorageException extends Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"    public StorageException(String message) {","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"        super(message);","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"nichyjt":12}},{"path":"src/main/java/wellnus/exception/TokenizerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":" * Category of Exceptions related to the \u003ccode\u003eTokenizer\u003c/code\u003e interface and its operations/subclasses.","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":" * @see wellnus.storage.Tokenizer","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"public class TokenizerException extends WellNusException {","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"     * Initializes an instance of TokenizerException with the given error message.","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"     * @param errorMessage Error message to show to the user","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"    public TokenizerException(String errorMessage) {","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"haoyangw":15}},{"path":"src/main/java/wellnus/exception/WellNusException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * WellNusException is thrown when a conceptual/logical error occurs in WellNUS++","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception may be thrown for any general error in WellNUS++\u0027s execution.","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * It is meant to differentiate between Java exceptions to allow better pinpointing of errors.","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"public class WellNusException extends Exception {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"    public WellNusException(String errorMessage) {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":6,"haoyangw":1,"nichyjt":6}},{"path":"src/main/java/wellnus/focus/command/CheckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a command to check the time left in the current session.","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class CheckCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"check - Check the time left in the current countdown.\"","lastModifiedDate":"2023-04-08"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"            + \"Only usable when a countdown is not finished!\";","lastModifiedDate":"2023-04-08"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: check\";","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"check\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027check\u0027\";","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027check\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String CHECK_OUTPUT \u003d \"Time left: \";","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_COUNTDOWN_NOT_RUNNING \u003d \"Nothing to check - the countdown has not started yet!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"check command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027check\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a CheckCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    public CheckCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     * Checks the current time left in the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     * Prints the time left in the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"            focusUi.printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_COUNTDOWN_NOT_RUNNING);","lastModifiedDate":"2023-04-05"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionWaiting()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_COUNTDOWN_NOT_RUNNING);","lastModifiedDate":"2023-04-05"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        int minutes \u003d session.getCurrentCountdown().getMinutes();","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        int seconds \u003d session.getCurrentCountdown().getSeconds();","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(CHECK_OUTPUT + String.format(\"%d:%d\", minutes, seconds));","lastModifiedDate":"2023-04-05"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"wenxin-c":8,"BernardLesley":1,"YongbinWang":106,"nichyjt":20}},{"path":"src/main/java/wellnus/focus/command/ConfigCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-26"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.FocusException;","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-26"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * ConfigCommand sets the configuration for a Session\u0027s parameters.","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * These parameters are: cycles, work time, break time, long break time.","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"//@@author nichyjt","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"public class ConfigCommand extends Command {","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"config - Change the number of cycles \"","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            + \"and length of your work, break and longbreak timings!\";","lastModifiedDate":"2023-04-08"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: config [--cycle number] [--work minutes] \"","lastModifiedDate":"2023-04-08"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"            + \"[--break minutes] [--longbreak minutes]\";","lastModifiedDate":"2023-04-08"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    protected static final String COMMAND_KEYWORD \u003d \"config\";","lastModifiedDate":"2023-03-26"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    protected static final String ARGUMENT_CYCLE \u003d \"cycle\";","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    protected static final String ARGUMENT_WORK \u003d \"work\";","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    protected static final String ARGUMENT_BREAK \u003d \"break\";","lastModifiedDate":"2023-03-26"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    protected static final String ARGUMENT_LONG_BREAK \u003d \"longbreak\";","lastModifiedDate":"2023-03-26"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_MESSAGE \u003d \"Okay, here\u0027s your configured session details!\"","lastModifiedDate":"2023-04-08"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator();","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_CYCLES \u003d \"Cycles: \";","lastModifiedDate":"2023-03-26"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_WORK \u003d \"Work: \";","lastModifiedDate":"2023-03-26"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_BREAK \u003d \"Break: \";","lastModifiedDate":"2023-03-26"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_LONG_BREAK \u003d \"Long break: \";","lastModifiedDate":"2023-03-26"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    private static final String SINGLE_SPACE_PAD \u003d \" \";","lastModifiedDate":"2023-03-26"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_MINS \u003d \"minutes\";","lastModifiedDate":"2023-03-26"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_MIN \u003d \"minute\";","lastModifiedDate":"2023-03-26"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-04-08"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    private static final int COMMAND_MAX_NUM_ARGUMENTS \u003d 5;","lastModifiedDate":"2023-03-26"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    private static final int COMMAND_MIN_NUM_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-04-08"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    private static final int MAX_MINUTES \u003d 60;","lastModifiedDate":"2023-03-26"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    private static final int MIN_MINUTES \u003d 1;","lastModifiedDate":"2023-03-26"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    private static final int MAX_CYCLES \u003d 5;","lastModifiedDate":"2023-03-26"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"    private static final int MIN_CYCLES \u003d 2;","lastModifiedDate":"2023-03-26"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    // Message constants","lastModifiedDate":"2023-03-26"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_STRING_INPUT_NOT_NULL \u003d \"String input should not be null!\";","lastModifiedDate":"2023-03-26"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_NOT_A_NUMBER \u003d \"Invalid payload given in \u0027config\u0027, expected a valid integer!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_LARGE_CYCLES \u003d \"Invalid cycle payload given in \u0027config\u0027, the maximum cycles you \"","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"            + \"can set is \" + MAX_CYCLES + \"!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_LESS_EQUAL_MIN_CYCLES \u003d \"Invalid cycle payload given in \u0027config\u0027, the minimum \"","lastModifiedDate":"2023-04-09"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"            + \"cycles you can set is \" + MIN_CYCLES + \"!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_LARGE_MINUTES \u003d \"Invalid minutes payload given in \u0027config\u0027, the maximum time \"","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"            + \"you can set is \" + MAX_MINUTES + \"!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_LESS_EQUAL_MIN_MINUTES \u003d \"Invalid minutes payload given in \u0027config\u0027, the minimum \"","lastModifiedDate":"2023-04-09"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"            + \"time you can set is \" + MIN_MINUTES + \"!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_LONGBREAK_LARGER \u003d \"Invalid new \u0027config\u0027! Your break time, %s min \"","lastModifiedDate":"2023-04-09"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            + \"should be greater or equal to your \"","lastModifiedDate":"2023-04-08"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"            + \"longbreak timing, %s min!\";","lastModifiedDate":"2023-04-08"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS \u003d \"Invalid arguments given to \u0027config\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027config\u0027!\";","lastModifiedDate":"2023-04-08"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"config command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-08"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_MISSING_KEYWORD \u003d \"Missing command keyword\";","lastModifiedDate":"2023-04-04"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"ConfigCommandLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_VALIDATION_ASSUMPTION_FAIL \u003d \"New cycle/break/work time is assumed to \"","lastModifiedDate":"2023-03-26"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"            + \"have passed the validation bounds and type checking, but has\"","lastModifiedDate":"2023-03-26"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"            + \"unexpectedly failed the second redundant check! This may be a developer error.\";","lastModifiedDate":"2023-03-26"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_SESSION_STARTED \u003d \"Cannot config the session as it has already started.\"","lastModifiedDate":"2023-04-04"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-04"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"            + \"If you want to reconfigure, `stop` the session and then `config`!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"    private final Session session;","lastModifiedDate":"2023-03-26"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    private int newCycle;","lastModifiedDate":"2023-03-26"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    private int newWork;","lastModifiedDate":"2023-03-26"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"    private int newBreak;","lastModifiedDate":"2023-03-26"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"    private int newLongBreak;","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"     * Builds an instance of ConfigCommand to allow modification of the common Session attributes","lastModifiedDate":"2023-03-26"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-26"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-26"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"    public ConfigCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-26"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"        super(arguments);","lastModifiedDate":"2023-03-26"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-26"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        newCycle \u003d session.getCycle();","lastModifiedDate":"2023-03-26"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        newWork \u003d session.getWork();","lastModifiedDate":"2023-03-26"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        newBreak \u003d session.getBrk();","lastModifiedDate":"2023-03-26"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        newLongBreak \u003d session.getLongBrk();","lastModifiedDate":"2023-03-26"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-26"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-26"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-26"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-26"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-26"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-26"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-26"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-26"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-26"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-26"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"     * Executes the specified command from the user.\u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"     * May throw Exceptions if command fails.","lastModifiedDate":"2023-03-26"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     * @throws wellnus.exception.WellNusException If command fails","lastModifiedDate":"2023-03-26"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"    public void execute() throws WellNusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        if (!session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_SESSION_STARTED);","lastModifiedDate":"2023-04-05"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayloads \u003d getArguments();","lastModifiedDate":"2023-03-26"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"            validateCommand(argumentPayloads);","lastModifiedDate":"2023-03-26"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"            focusUi.printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-08"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-04-08"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayloads.size() \u003d\u003d COMMAND_MIN_NUM_ARGUMENTS) {","lastModifiedDate":"2023-04-08"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"            printNewConfiguration();","lastModifiedDate":"2023-04-08"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-04-08"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        // Set all the session details as necessary","lastModifiedDate":"2023-03-26"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayloads.containsKey(ARGUMENT_CYCLE)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"            setSessionCycle(argumentPayloads.get(ARGUMENT_CYCLE));","lastModifiedDate":"2023-03-26"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayloads.containsKey(ARGUMENT_WORK)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"            setSessionWork(argumentPayloads.get(ARGUMENT_WORK));","lastModifiedDate":"2023-03-26"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayloads.containsKey(ARGUMENT_BREAK)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"            setSessionBreak(argumentPayloads.get(ARGUMENT_BREAK));","lastModifiedDate":"2023-03-26"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayloads.containsKey(ARGUMENT_LONG_BREAK)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"            setSessionLongBreak(argumentPayloads.get(ARGUMENT_LONG_BREAK));","lastModifiedDate":"2023-03-26"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        // Notify the user of the new configuration for user-side verification","lastModifiedDate":"2023-03-26"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"        printNewConfiguration();","lastModifiedDate":"2023-03-26"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser. \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"     * The validation logic and strictness is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"     * As a guideline, \u003ccode\u003eisValidCommand\u003c/code\u003e should minimally: \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY arguments exist\u003c/li\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY payloads exist\u003c/li\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eSafely verify the payload type (int, date, etc should be properly processed)\u003c/li\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"     * Additionally, payload value cleanup (such as trimming) is also possible. \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"     * As Java is pass (object reference) by value, any changes made to commandMap","lastModifiedDate":"2023-03-26"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"     * will persist out of the function call.","lastModifiedDate":"2023-03-26"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-26"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"     * @throws wellnus.exception.BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-26"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-26"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : ASSERT_MISSING_KEYWORD;","lastModifiedDate":"2023-04-04"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"        if (arguments.size() \u003e COMMAND_MAX_NUM_ARGUMENTS) {","lastModifiedDate":"2023-03-26"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS);","lastModifiedDate":"2023-04-05"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"        if (arguments.size() \u003c COMMAND_MIN_NUM_ARGUMENTS) {","lastModifiedDate":"2023-03-26"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS);","lastModifiedDate":"2023-04-05"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(EMPTY_STRING)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-08"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"        // Validate all the argument payload pairs","lastModifiedDate":"2023-03-26"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"        for (Map.Entry\u003cString, String\u003e argumentPair : arguments.entrySet()) {","lastModifiedDate":"2023-03-26"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"            switch (argumentPair.getKey()) {","lastModifiedDate":"2023-03-26"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"            case COMMAND_KEYWORD:","lastModifiedDate":"2023-03-26"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"                continue;","lastModifiedDate":"2023-03-26"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"            case ARGUMENT_CYCLE:","lastModifiedDate":"2023-03-26"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"                validateCycles(argumentPair.getValue());","lastModifiedDate":"2023-03-26"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"                break;","lastModifiedDate":"2023-03-26"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"            case ARGUMENT_BREAK:","lastModifiedDate":"2023-03-26"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"            case ARGUMENT_WORK:","lastModifiedDate":"2023-03-26"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"            case ARGUMENT_LONG_BREAK:","lastModifiedDate":"2023-03-26"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"                validateTimes(argumentPair.getValue());","lastModifiedDate":"2023-03-26"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"                break;","lastModifiedDate":"2023-03-26"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"            default:","lastModifiedDate":"2023-03-26"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(COMMAND_INVALID_ARGUMENTS);","lastModifiedDate":"2023-04-05"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-26"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"        validateLongBreak(arguments);","lastModifiedDate":"2023-04-08"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"    private void validateLongBreak(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-04-08"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"        int breakTime \u003d this.newBreak;","lastModifiedDate":"2023-04-08"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"        int longBreakTime \u003d this.newLongBreak;","lastModifiedDate":"2023-04-08"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"        if (arguments.containsKey(ARGUMENT_BREAK)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"            breakTime \u003d validateTimes(arguments.get(ARGUMENT_BREAK));","lastModifiedDate":"2023-04-08"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"        if (arguments.containsKey(ARGUMENT_LONG_BREAK)) {","lastModifiedDate":"2023-04-08"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"            longBreakTime \u003d validateTimes(arguments.get(ARGUMENT_LONG_BREAK));","lastModifiedDate":"2023-04-08"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"        if (breakTime \u003e longBreakTime) {","lastModifiedDate":"2023-04-08"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d String.format(ERROR_LONGBREAK_LARGER, breakTime, longBreakTime);","lastModifiedDate":"2023-04-08"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(errorMessage);","lastModifiedDate":"2023-04-08"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-08"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"    private int getIntegerFromString(String inputString) throws BadCommandException {","lastModifiedDate":"2023-03-26"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"        assert inputString !\u003d null : ASSERT_STRING_INPUT_NOT_NULL;","lastModifiedDate":"2023-03-26"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"        int result;","lastModifiedDate":"2023-03-26"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"            result \u003d Integer.parseInt(inputString);","lastModifiedDate":"2023-03-26"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":233,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_NOT_A_NUMBER);","lastModifiedDate":"2023-03-26"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":235,"author":{"gitId":"nichyjt"},"content":"        return result;","lastModifiedDate":"2023-03-26"},{"lineNumber":236,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":237,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":238,"author":{"gitId":"nichyjt"},"content":"    private int validateCycles(String cyclePayload) throws BadCommandException {","lastModifiedDate":"2023-03-26"},{"lineNumber":239,"author":{"gitId":"nichyjt"},"content":"        assert cyclePayload !\u003d null : ASSERT_STRING_INPUT_NOT_NULL;","lastModifiedDate":"2023-03-26"},{"lineNumber":240,"author":{"gitId":"nichyjt"},"content":"        int newCycle \u003d getIntegerFromString(cyclePayload);","lastModifiedDate":"2023-03-26"},{"lineNumber":241,"author":{"gitId":"nichyjt"},"content":"        if (newCycle \u003e MAX_CYCLES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":242,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_LARGE_CYCLES);","lastModifiedDate":"2023-03-26"},{"lineNumber":243,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":244,"author":{"gitId":"nichyjt"},"content":"        if (newCycle \u003c MIN_CYCLES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":245,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_LESS_EQUAL_MIN_CYCLES);","lastModifiedDate":"2023-03-26"},{"lineNumber":246,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":247,"author":{"gitId":"nichyjt"},"content":"        return newCycle;","lastModifiedDate":"2023-03-26"},{"lineNumber":248,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":249,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":250,"author":{"gitId":"nichyjt"},"content":"    private int validateTimes(String timePayload) throws BadCommandException {","lastModifiedDate":"2023-03-26"},{"lineNumber":251,"author":{"gitId":"nichyjt"},"content":"        assert timePayload !\u003d null : ASSERT_STRING_INPUT_NOT_NULL;","lastModifiedDate":"2023-03-26"},{"lineNumber":252,"author":{"gitId":"nichyjt"},"content":"        int newTime \u003d getIntegerFromString(timePayload);","lastModifiedDate":"2023-03-26"},{"lineNumber":253,"author":{"gitId":"nichyjt"},"content":"        if (newTime \u003e MAX_MINUTES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":254,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_LARGE_MINUTES);","lastModifiedDate":"2023-03-26"},{"lineNumber":255,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":256,"author":{"gitId":"nichyjt"},"content":"        if (newTime \u003c MIN_MINUTES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":257,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_LESS_EQUAL_MIN_MINUTES);","lastModifiedDate":"2023-03-26"},{"lineNumber":258,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":259,"author":{"gitId":"nichyjt"},"content":"        return newTime;","lastModifiedDate":"2023-03-26"},{"lineNumber":260,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":261,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":262,"author":{"gitId":"nichyjt"},"content":"    private void setSessionCycle(String sessionCycle) throws FocusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":263,"author":{"gitId":"nichyjt"},"content":"        // Assume that session cycle must be within the correct range","lastModifiedDate":"2023-03-26"},{"lineNumber":264,"author":{"gitId":"nichyjt"},"content":"        // Re-run through the validation logic for redundancy \u0026 safety","lastModifiedDate":"2023-03-26"},{"lineNumber":265,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":266,"author":{"gitId":"nichyjt"},"content":"            this.newCycle \u003d validateCycles(sessionCycle);","lastModifiedDate":"2023-03-26"},{"lineNumber":267,"author":{"gitId":"nichyjt"},"content":"            session.setCycle(newCycle);","lastModifiedDate":"2023-03-26"},{"lineNumber":268,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":269,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_VALIDATION_ASSUMPTION_FAIL);","lastModifiedDate":"2023-03-26"},{"lineNumber":270,"author":{"gitId":"nichyjt"},"content":"            throw new FocusException(exception.getMessage());","lastModifiedDate":"2023-03-26"},{"lineNumber":271,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"    private void setSessionWork(String sessionWork) throws FocusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"        // Assume that session work must be within the correct range","lastModifiedDate":"2023-03-26"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"        // Re-run through the validation logic for redundancy \u0026 safety","lastModifiedDate":"2023-03-26"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"            this.newWork \u003d validateTimes(sessionWork);","lastModifiedDate":"2023-03-26"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"            session.setWork(newWork);","lastModifiedDate":"2023-03-26"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_VALIDATION_ASSUMPTION_FAIL);","lastModifiedDate":"2023-03-26"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"            throw new FocusException(exception.getMessage());","lastModifiedDate":"2023-03-26"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":285,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"    private void setSessionBreak(String sessionBreak) throws FocusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":287,"author":{"gitId":"nichyjt"},"content":"        // Assume that session break must be within the correct range","lastModifiedDate":"2023-03-26"},{"lineNumber":288,"author":{"gitId":"nichyjt"},"content":"        // Re-run through the validation logic for redundancy \u0026 safety","lastModifiedDate":"2023-03-26"},{"lineNumber":289,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":290,"author":{"gitId":"nichyjt"},"content":"            this.newBreak \u003d validateTimes(sessionBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":291,"author":{"gitId":"nichyjt"},"content":"            session.setBrk(newBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":292,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":293,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_VALIDATION_ASSUMPTION_FAIL);","lastModifiedDate":"2023-03-26"},{"lineNumber":294,"author":{"gitId":"nichyjt"},"content":"            throw new FocusException(exception.getMessage());","lastModifiedDate":"2023-03-26"},{"lineNumber":295,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":296,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":297,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":298,"author":{"gitId":"nichyjt"},"content":"    private void setSessionLongBreak(String sessionLongBreak) throws FocusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":299,"author":{"gitId":"nichyjt"},"content":"        // Assume that session work must be within the correct range","lastModifiedDate":"2023-03-26"},{"lineNumber":300,"author":{"gitId":"nichyjt"},"content":"        // Re-run through the validation logic for redundancy \u0026 safety","lastModifiedDate":"2023-03-26"},{"lineNumber":301,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":302,"author":{"gitId":"nichyjt"},"content":"            this.newLongBreak \u003d validateTimes(sessionLongBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":303,"author":{"gitId":"nichyjt"},"content":"            session.setLongBrk(newLongBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":304,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":305,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_VALIDATION_ASSUMPTION_FAIL);","lastModifiedDate":"2023-03-26"},{"lineNumber":306,"author":{"gitId":"nichyjt"},"content":"            throw new FocusException(exception.getMessage());","lastModifiedDate":"2023-03-26"},{"lineNumber":307,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":308,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":309,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":310,"author":{"gitId":"nichyjt"},"content":"    private void printNewConfiguration() {","lastModifiedDate":"2023-03-26"},{"lineNumber":311,"author":{"gitId":"nichyjt"},"content":"        String message \u003d PRINT_CONFIG_MESSAGE;","lastModifiedDate":"2023-03-26"},{"lineNumber":312,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(PRINT_CONFIG_CYCLES + this.newCycle);","lastModifiedDate":"2023-03-26"},{"lineNumber":313,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(System.lineSeparator());","lastModifiedDate":"2023-03-26"},{"lineNumber":314,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(PRINT_CONFIG_WORK + this.newWork);","lastModifiedDate":"2023-03-26"},{"lineNumber":315,"author":{"gitId":"nichyjt"},"content":"        if (this.newWork \u003d\u003d MIN_MINUTES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":316,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MIN);","lastModifiedDate":"2023-03-26"},{"lineNumber":317,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-03-26"},{"lineNumber":318,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MINS);","lastModifiedDate":"2023-03-26"},{"lineNumber":319,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":320,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(System.lineSeparator());","lastModifiedDate":"2023-03-26"},{"lineNumber":321,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(PRINT_CONFIG_BREAK + this.newBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":322,"author":{"gitId":"nichyjt"},"content":"        if (this.newBreak \u003d\u003d MIN_MINUTES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":323,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MIN);","lastModifiedDate":"2023-03-26"},{"lineNumber":324,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-03-26"},{"lineNumber":325,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MINS);","lastModifiedDate":"2023-03-26"},{"lineNumber":326,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":327,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(System.lineSeparator());","lastModifiedDate":"2023-03-26"},{"lineNumber":328,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(PRINT_CONFIG_LONG_BREAK + this.newLongBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":329,"author":{"gitId":"nichyjt"},"content":"        if (this.newLongBreak \u003d\u003d MIN_MINUTES) {","lastModifiedDate":"2023-04-04"},{"lineNumber":330,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MIN);","lastModifiedDate":"2023-03-26"},{"lineNumber":331,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-03-26"},{"lineNumber":332,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MINS);","lastModifiedDate":"2023-03-26"},{"lineNumber":333,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":334,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(message);","lastModifiedDate":"2023-04-05"},{"lineNumber":335,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":336,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":337,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":338,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-26"},{"lineNumber":339,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":340,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":341,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-26"},{"lineNumber":342,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":343,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-26"},{"lineNumber":344,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":345,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":346,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-26"},{"lineNumber":347,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-26"},{"lineNumber":348,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":349,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":350,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":351,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-26"},{"lineNumber":352,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":353,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":354,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-26"},{"lineNumber":355,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":356,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-26"},{"lineNumber":357,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":358,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":359,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-26"},{"lineNumber":360,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-26"},{"lineNumber":361,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":362,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"haoyangw":1,"nichyjt":361}},{"path":"src/main/java/wellnus/focus/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" * Implementation of Focus Timer WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" * by Focus Timer and how to use each command.","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"help - Get help on what commands can be used \"","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"            + \"in Focus Timer WellNUS++\";","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: help [command-to-check]\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String BAD_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"help command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final String HELP_PREAMBLE \u003d \"Input `help` to see all available commands.\"","lastModifiedDate":"2023-04-08"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-08"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"            + \"Input `help [command-to-check]` to get usage help for a specific command.\"","lastModifiedDate":"2023-04-08"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-08"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"            + \"Here are all the commands available for you!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_UNKNOWN_COMMAND \u003d \"Invalid command issued!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"     * Initialises a HelpCommand Object using the command arguments issued by the user.","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    private TextUi getFocusUi() {","lastModifiedDate":"2023-04-05"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"        return this.focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(CheckCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(ConfigCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HelpCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HomeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(NextCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(PauseCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(ResumeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(StartCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(StopCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"        return commandDescriptions;","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"     * Prints either the general help message or the command-specific help message","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"     * based on the presence of a payload.","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"        String commandToSearch \u003d argumentPayload.get(COMMAND_KEYWORD).trim().toLowerCase();","lastModifiedDate":"2023-04-01"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        if (commandToSearch.equals(NO_FEATURE_KEYWORD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"            printGeneralHelpMessage();","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"        printSpecificHelpMessage(commandToSearch);","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"     * Lists all features available in Atomic Habit WellNUS++ and a short description.","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"    public void printGeneralHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d getCommandDescriptions();","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"        String outputMessage \u003d FocusManager.FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(HELP_PREAMBLE);","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator() + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c commandDescriptions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions.get(i) + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        this.getFocusUi().printOutputMessage(outputMessage);","lastModifiedDate":"2023-04-05"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"     * Prints the help message for a given commandToSearch. \u003cbr/\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"     * If the commandToSearch does not exist, help will print an unknown command","lastModifiedDate":"2023-04-06"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"     * error message.","lastModifiedDate":"2023-04-06"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"    public void printSpecificHelpMessage(String commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"        switch (commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"        case CheckCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(CheckCommand.COMMAND_DESCRIPTION, CheckCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"        case ConfigCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(ConfigCommand.COMMAND_DESCRIPTION, ConfigCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"        case HelpCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HelpCommand.COMMAND_DESCRIPTION, HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"        case HomeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HomeCommand.COMMAND_DESCRIPTION, HomeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"        case NextCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(NextCommand.COMMAND_DESCRIPTION, NextCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"        case PauseCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(PauseCommand.COMMAND_DESCRIPTION, PauseCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"        case ResumeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(ResumeCommand.COMMAND_DESCRIPTION, ResumeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"        case StartCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(StartCommand.COMMAND_DESCRIPTION, StartCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"        case StopCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(StopCommand.COMMAND_DESCRIPTION, StopCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"        default:","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"            BadCommandException unknownCommand \u003d new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"            focusUi.printErrorFor(unknownCommand, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"    private void printUsageMessage(String commandDescription, String usageString) {","lastModifiedDate":"2023-03-29"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"        String message \u003d commandDescription + System.lineSeparator() + usageString;","lastModifiedDate":"2023-03-29"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(message);","lastModifiedDate":"2023-04-05"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"     * Prints a brief description of all of Focus Timer WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"    public void execute() {","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"            getFocusUi().printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-28"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":174,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-28"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-28"},{"lineNumber":181,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-29"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(BAD_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":183,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":184,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":185,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":186,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":187,"author":{"gitId":"BernardLesley"},"content":"     * Abstract method to ensure developers add in a command usage.","lastModifiedDate":"2023-03-28"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":190,"author":{"gitId":"BernardLesley"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-28"},{"lineNumber":191,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":192,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-28"},{"lineNumber":193,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":194,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":195,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":196,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":197,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":198,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":199,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":200,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-28"},{"lineNumber":201,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":202,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":203,"author":{"gitId":"BernardLesley"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-28"},{"lineNumber":204,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":205,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-28"},{"lineNumber":206,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":207,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":208,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-28"},{"lineNumber":209,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":210,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":211,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"wenxin-c":8,"BernardLesley":191,"nichyjt":12}},{"path":"src/main/java/wellnus/focus/command/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" * The HomeCommand class is a command class that returns user back to the main WellNUS++ program.","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"public class HomeCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"home - Stop the session and go back to WellNUS++.\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: home\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027home\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS \u003d \"Invalid arguments given to \u0027home\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027home\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_MESSAGE \u003d \"Thank you for using focus timer. Keep up the productivity!\";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for HomeCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    public HomeCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"     * Check if a HomeCommand is executed and user wants to return to home.","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * @param command User command","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     * @return true If user wants to exit feature false if not","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    public static boolean isExit(Command command) {","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"        return command instanceof HomeCommand;","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"     * Stops the current countdown to close background thread.","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"     * Prints the exit feature message for the focus timer feature on the user\u0027s screen.","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"    public void execute() throws WellNusException {","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"        validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        if (!session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            session.getCurrentCountdown().setStop();","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        // Reset the state of the countdown timer","lastModifiedDate":"2023-04-04"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        session.resetCurrentCountdownIndex();","lastModifiedDate":"2023-04-04"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        session.initialiseSession();","lastModifiedDate":"2023-04-04"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(HOME_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException if the commandMap has any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() \u003e HomeCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-30"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_ARGUMENTS);","lastModifiedDate":"2023-04-05"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(HomeCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"        String payload \u003d arguments.get(getCommandKeyword());","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        if (!payload.isBlank()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"wenxin-c":5,"BernardLesley":1,"haoyangw":6,"YongbinWang":109,"nichyjt":13}},{"path":"src/main/java/wellnus/focus/command/NextCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a class to start the next countdown in the session.","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class NextCommand extends Command {","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"next - Move on to the next countdown. \"","lastModifiedDate":"2023-04-08"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"            + \"Can only be used when a countdown timer has ended.\";","lastModifiedDate":"2023-04-08"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: next\";","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"next\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027next\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027next\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027next\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_SESSION_NOT_STARTED \u003d \"A focus session has not started yet, \"","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"            + \"try `start`ing one first!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_COUNTDOWN_RUNNING \u003d \"Oops, your timer for this session is still ticking!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"next command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for NextCommand object.","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    public NextCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     * Outputs unique description of the countdown.","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"     * Starts the session by starting the first countdown.","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"     * If the session has already started, it will start the next countdown.","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"            focusUi.printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_SESSION_NOT_STARTED);","lastModifiedDate":"2023-04-05"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionCounting() || session.isSessionPaused()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_COUNTDOWN_RUNNING);","lastModifiedDate":"2023-04-05"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        session.startTimer();","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(session.getCurrentCountdown().getDescription());","lastModifiedDate":"2023-04-05"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":8,"BernardLesley":1,"YongbinWang":109,"nichyjt":19}},{"path":"src/main/java/wellnus/focus/command/PauseCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a class to pause the current countdown in the session.","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class PauseCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"pause - Pause the session! \"","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"            + \"Can only be used when a countdown is ticking.\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: pause\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"pause\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027pause\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027pause\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027pause\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String PAUSE_OUTPUT \u003d \"Timer paused at: \";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_COUNTDOWN_NOT_RUNNING \u003d \"Nothing to pause - the timer has not started yet!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_IS_PAUSED \u003d \"Nothing to pause - you have already paused the timer!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"pause command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for PauseCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    public PauseCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     * Pause the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     * Prints the time left in the current countdown for user to view.","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"            focusUi.printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        // Only execute the pause logic if the countdown is not running","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionPaused()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_IS_PAUSED);","lastModifiedDate":"2023-04-05"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        if (!session.isSessionCounting()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"            // Gently tell the user why pause did not execute","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_COUNTDOWN_NOT_RUNNING);","lastModifiedDate":"2023-04-05"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        session.getCurrentCountdown().setPause();","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        int minutes \u003d session.getCurrentCountdown().getMinutes();","lastModifiedDate":"2023-03-27"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        int seconds \u003d session.getCurrentCountdown().getSeconds();","lastModifiedDate":"2023-03-27"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(PAUSE_OUTPUT + String.format(\"%d:%d\", minutes, seconds));","lastModifiedDate":"2023-04-05"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"wenxin-c":7,"BernardLesley":1,"YongbinWang":105,"nichyjt":25}},{"path":"src/main/java/wellnus/focus/command/ResumeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a command to resume the countdown timer in the current session.","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class ResumeCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"resume - Continue the countdown. \"","lastModifiedDate":"2023-04-09"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"            + \"Can only be used when a countdown is paused.\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: home\";","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"resume\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027resume\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027resume\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027resume\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be resume.\";","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private static final String RESUME_OUTPUT \u003d \"Timer resumed at: \";","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_NOT_PAUSED \u003d \"You don\u0027t seem to be paused. Ignoring the command!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"resume command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a ResumeCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    public ResumeCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     * Resumes the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"     * Prints the time left to be completed in the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"            focusUi.printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"        assert super.getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        if (!session.hasAnyCountdown() || !session.isSessionPaused()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_NOT_PAUSED);","lastModifiedDate":"2023-04-05"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        int minutes \u003d session.getCurrentCountdown().getMinutes();","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        int seconds \u003d session.getCurrentCountdown().getSeconds();","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(RESUME_OUTPUT + String.format(\"%d:%d\", minutes, seconds));","lastModifiedDate":"2023-04-05"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        session.getCurrentCountdown().setStart();","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no arguments are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"wenxin-c":9,"BernardLesley":1,"YongbinWang":103,"nichyjt":17}},{"path":"src/main/java/wellnus/focus/command/StartCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a command to start the current session.","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" * Also used to start different countdowns timers in the session.","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"public class StartCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"start - Start your focus session!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: start\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"start\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final int FIRST_COUNTDOWN_INDEX \u003d 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027start\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027start\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027start\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String START_MESSAGE \u003d \"Your session has started. All the best!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_NOT_READY \u003d \"Nothing to start - your session has started!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"start command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for StartCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    public StartCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     * Outputs unique description of the countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     * Starts the session by starting the first countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"     * If the session has already started, it will start the next countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"            focusUi.printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        if (!session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_NOT_READY);","lastModifiedDate":"2023-04-05"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        // Forcefully initialise the session again for repeated countdowns","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(START_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        session.startTimer();","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(session.getSession().get(FIRST_COUNTDOWN_INDEX).getDescription());","lastModifiedDate":"2023-04-05"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"wenxin-c":7,"BernardLesley":1,"YongbinWang":108,"nichyjt":17}},{"path":"src/main/java/wellnus/focus/command/StopCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a command to stop the current session.","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class StopCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"stop - Stop the session. You will have to `start` \"","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"            + \"your focus session again!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: stop\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"stop\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027stop\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027stop\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027stop\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private static final String STOP_MESSAGE \u003d \"Your focus session has ended.\"","lastModifiedDate":"2023-04-08"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-08"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"            + \"To start a new session, `start` it up!\"","lastModifiedDate":"2023-04-08"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-08"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"            + \"You can also configure the session to your liking with `config`!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_NOT_STARTED \u003d \"Nothing to stop - the timer has not started yet!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"stop command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a StopCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    public StopCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"     * Prints message to indicate session has ended.","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"     * Stops the session.","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"     * Resets the current countdown index.","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"            focusUi.printErrorFor(badCommandException, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        if (!session.hasAnyCountdown() || session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(ERROR_NOT_STARTED);","lastModifiedDate":"2023-04-05"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        focusUi.printOutputMessage(STOP_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        session.getCurrentCountdown().setStop();","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        session.initialiseSession();","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"        session.resetCurrentCountdownIndex();","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-09"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"wenxin-c":7,"BernardLesley":1,"YongbinWang":107,"nichyjt":22}},{"path":"src/main/java/wellnus/focus/feature/Countdown.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.feature;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import java.util.Timer;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import java.util.TimerTask;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import java.util.concurrent.atomic.AtomicBoolean;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":" * Class to represent a timer counting down given a specific minutes.","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":" * This class contains a Timer class which is used to simulate a clock counting down.","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Atomic data type is used to communicate with the timer background thread.","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class Countdown {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"    private static final int ONE_SECOND \u003d 1000;","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"    private static final int DELAY_TIME \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"    private static final int DEFAULT_STOP_TIME \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    private static final int DEFAULT_SECONDS \u003d 59;","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int INITIAL_SECONDS \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    private static final int COUNTDOWN_PRINT_START_TIME \u003d 10;","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String MINUTES_INPUT_ASSERTION \u003d \"Minutes should be greater than 0\";","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String STOP_BEFORE_START_ASSERTION \u003d \"Timer should be started before trying to stop it\";","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String TIMER_NOT_RUNNING_ASSERTION \u003d \"Timer should not be running\";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private static final String TIMER_COMPLETE_MESSAGE \u003d \"Type \u0027next\u0027 to begin the next countdown\";","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final String TIMER_COMPLETE_MESSAGE_LAST \u003d \"Congrats! That\u0027s a session done and dusted!\"","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"            + \"Type `start` to start a new session, or `config` to change the session settings.\";","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private static final String FEATURE_NAME \u003d \"ft\";","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private FocusUi focusUi;","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    private Timer timer;","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    private int minutes;","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    private int inputMinutes;","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"    private int seconds;","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    private final String description;","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private boolean isLast;","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    // Convenience attribute to signify that this countdown object is the rollover countdown","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    private boolean isReady \u003d false;","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    private AtomicBoolean isCompletedCountdown;","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    private AtomicBoolean isRunClock;","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     * Constructor of Countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * This will initialise the private attributes of Countdown object.","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * @param minutes     the number of minutes to countdown","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     * @param description description of the current task user is focusing on","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    public Countdown(int minutes, String description, boolean isLast) {","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"        assert minutes \u003e 0 : MINUTES_INPUT_ASSERTION;","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"        this.minutes \u003d minutes;","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"        this.inputMinutes \u003d minutes;","lastModifiedDate":"2023-03-23"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"        this.seconds \u003d INITIAL_SECONDS;","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"        this.isCompletedCountdown \u003d new AtomicBoolean(false);","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"        this.isRunClock \u003d new AtomicBoolean(false);","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-05"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        focusUi.setCursorName(FEATURE_NAME);","lastModifiedDate":"2023-04-05"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        this.isLast \u003d isLast;","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"     * This method will execute the actions necessary when a countdown completes.","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"     * The timer will be stopped and a beep sound will be played.","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * A message will be printed to the user to notify them that the countdown has completed.","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"    private void timerComplete() {","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"        setStop();","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"        java.awt.Toolkit.getDefaultToolkit().beep();","lastModifiedDate":"2023-03-23"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"        if (isLast) {","lastModifiedDate":"2023-03-27"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(TIMER_COMPLETE_MESSAGE_LAST);","lastModifiedDate":"2023-04-05"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-03-27"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"            focusUi.printOutputMessage(TIMER_COMPLETE_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"        this.minutes \u003d inputMinutes;","lastModifiedDate":"2023-03-23"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        this.isCompletedCountdown.set(true);","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        if (isLast) {","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"            setIsReady(true);","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        focusUi.printCursor();","lastModifiedDate":"2023-04-05"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"     * This method will decrement the minutes by 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"    private void decrementMinutes() {","lastModifiedDate":"2023-03-23"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"        minutes--;","lastModifiedDate":"2023-03-23"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"     * This method will decrement the seconds by 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"    private void decrementSeconds() {","lastModifiedDate":"2023-03-23"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"        seconds--;","lastModifiedDate":"2023-03-23"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"     * This method will start the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"     * Timer will notify user when the countdown timer has completed by playing a beep sound.","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"     * The timer will run in the background and will be stopped when the countdown minutes and seconds reaches 0.","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"    public void start() {","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        assert isRunClock.get() \u003d\u003d false : TIMER_NOT_RUNNING_ASSERTION;","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"        timer \u003d new Timer();","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"        TimerTask countdownTask \u003d new TimerTask() {","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"            @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"            public void run() {","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"                setIsReady(false);","lastModifiedDate":"2023-03-27"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"                if (!isRunClock.get()) {","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"                    return;","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"                if (minutes \u003d\u003d DEFAULT_STOP_TIME \u0026\u0026 seconds \u003d\u003d COUNTDOWN_PRINT_START_TIME) {","lastModifiedDate":"2023-04-04"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"                    focusUi.printNewline();","lastModifiedDate":"2023-04-05"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"                }","lastModifiedDate":"2023-04-04"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"                if (isCountdownPrinting()) {","lastModifiedDate":"2023-04-04"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"                    focusUi.printOutputMessage(seconds + \" seconds left\");","lastModifiedDate":"2023-04-05"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"                if (seconds \u003d\u003d DEFAULT_STOP_TIME \u0026\u0026 minutes \u003d\u003d DEFAULT_STOP_TIME) {","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"                    timerComplete();","lastModifiedDate":"2023-03-23"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"                } else if (seconds \u003d\u003d DEFAULT_STOP_TIME) {","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"                    seconds \u003d DEFAULT_SECONDS;","lastModifiedDate":"2023-03-21"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"                    decrementMinutes();","lastModifiedDate":"2023-03-23"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"                } else {","lastModifiedDate":"2023-03-21"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"                    decrementSeconds();","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"        };","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"        timer.scheduleAtFixedRate(countdownTask, DELAY_TIME, ONE_SECOND);","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"     * Utility method to check if the countdown is in its printing phase. \u003cbr\u003e","lastModifiedDate":"2023-04-04"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-04-04"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"     * Used to determine whether to print the seconds left and accept any user input.","lastModifiedDate":"2023-04-04"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"     * @return boolean Representing if the countdown timer is printing.","lastModifiedDate":"2023-04-04"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"    public boolean isCountdownPrinting() {","lastModifiedDate":"2023-04-04"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"        return (minutes \u003d\u003d DEFAULT_STOP_TIME","lastModifiedDate":"2023-04-04"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"                \u0026\u0026 seconds \u003c\u003d COUNTDOWN_PRINT_START_TIME","lastModifiedDate":"2023-04-04"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"                \u0026\u0026 seconds !\u003d DEFAULT_STOP_TIME);","lastModifiedDate":"2023-04-04"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":143,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":144,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the status of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"     * @return true if the countdown timer has completed, false otherwise","lastModifiedDate":"2023-03-21"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"    public boolean getIsCompletedCountdown() {","lastModifiedDate":"2023-03-21"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"        return isCompletedCountdown.get();","lastModifiedDate":"2023-03-21"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":152,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"     * This method will stop the countdown timer and stops the background thread.","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"    public void setStop() {","lastModifiedDate":"2023-03-21"},{"lineNumber":156,"author":{"gitId":"YongbinWang"},"content":"        // timer is only initialised in start() method, so calling setStop() leads","lastModifiedDate":"2023-03-25"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"        // to a crash. Catch this mistake with an assertion","lastModifiedDate":"2023-03-25"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"        assert timer !\u003d null : STOP_BEFORE_START_ASSERTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":159,"author":{"gitId":"YongbinWang"},"content":"        isCompletedCountdown.set(true);","lastModifiedDate":"2023-03-25"},{"lineNumber":160,"author":{"gitId":"YongbinWang"},"content":"        isRunClock.set(false);","lastModifiedDate":"2023-03-25"},{"lineNumber":161,"author":{"gitId":"YongbinWang"},"content":"        timer.cancel();","lastModifiedDate":"2023-03-21"},{"lineNumber":162,"author":{"gitId":"YongbinWang"},"content":"        timer.purge();","lastModifiedDate":"2023-03-25"},{"lineNumber":163,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":165,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"     * This method will allow the countdown timer to count down.","lastModifiedDate":"2023-03-21"},{"lineNumber":167,"author":{"gitId":"YongbinWang"},"content":"     * It does so by allowing the minutes and seconds to be decremented.","lastModifiedDate":"2023-03-21"},{"lineNumber":168,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"    public void setStart() {","lastModifiedDate":"2023-03-21"},{"lineNumber":170,"author":{"gitId":"YongbinWang"},"content":"        isRunClock.set(true);","lastModifiedDate":"2023-03-21"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":172,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":174,"author":{"gitId":"YongbinWang"},"content":"     * This method will pause the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":176,"author":{"gitId":"YongbinWang"},"content":"    public void setPause() {","lastModifiedDate":"2023-03-21"},{"lineNumber":177,"author":{"gitId":"YongbinWang"},"content":"        isRunClock.set(false);","lastModifiedDate":"2023-03-21"},{"lineNumber":178,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":180,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the status of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":183,"author":{"gitId":"YongbinWang"},"content":"     * @return true if the countdown timer is running, false otherwise","lastModifiedDate":"2023-03-21"},{"lineNumber":184,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":185,"author":{"gitId":"YongbinWang"},"content":"    public boolean getIsRunning() {","lastModifiedDate":"2023-03-21"},{"lineNumber":186,"author":{"gitId":"YongbinWang"},"content":"        return isRunClock.get();","lastModifiedDate":"2023-03-21"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the current minutes of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":192,"author":{"gitId":"YongbinWang"},"content":"     * @return the minutes of the countdown timer","lastModifiedDate":"2023-03-21"},{"lineNumber":193,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":194,"author":{"gitId":"YongbinWang"},"content":"    public int getMinutes() {","lastModifiedDate":"2023-03-21"},{"lineNumber":195,"author":{"gitId":"YongbinWang"},"content":"        return this.minutes;","lastModifiedDate":"2023-03-21"},{"lineNumber":196,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":197,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":198,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":199,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the current seconds of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":200,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"     * @return the seconds of the countdown timer","lastModifiedDate":"2023-03-21"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"    public int getSeconds() {","lastModifiedDate":"2023-03-21"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"        return this.seconds;","lastModifiedDate":"2023-03-21"},{"lineNumber":205,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":206,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":207,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":208,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the description of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":209,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":210,"author":{"gitId":"YongbinWang"},"content":"     * @return the description of the countdown timer","lastModifiedDate":"2023-03-21"},{"lineNumber":211,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":212,"author":{"gitId":"YongbinWang"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-21"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"        return this.description;","lastModifiedDate":"2023-03-21"},{"lineNumber":214,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"     * This method will return the ready status of the session","lastModifiedDate":"2023-03-27"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"     * Only the last countdown timer object in a session can have this as true.","lastModifiedDate":"2023-03-27"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"     * The last countdown timer object will be \u0027ready\u0027 only if it is not counting down.","lastModifiedDate":"2023-03-27"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"     * This is meant to help the Session manage starting new sessions.","lastModifiedDate":"2023-03-27"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"     * @return boolean representing the ready state of the session","lastModifiedDate":"2023-03-27"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"    public boolean getIsReady() {","lastModifiedDate":"2023-03-27"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"        return isReady;","lastModifiedDate":"2023-03-27"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"    public void setIsReady(boolean isReady) {","lastModifiedDate":"2023-03-27"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"        this.isReady \u003d isReady;","lastModifiedDate":"2023-03-27"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":233,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"YongbinWang":173,"nichyjt":60}},{"path":"src/main/java/wellnus/focus/feature/FocusManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.feature;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.CheckCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.command.ConfigCommand;","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.focus.command.HelpCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.HomeCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.NextCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.PauseCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.ResumeCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.StartCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.StopCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":" * Represents a class to run the event driver for the Focus Timer.","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":" * This class will be called by the main manager.","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":" * It will match the user input to the correct command and execute it.","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"//@@author YongbinWang","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"public class FocusManager extends Manager {","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    public static final String FEATURE_HELP_DESCRIPTION \u003d \"ft - Focus Timer - Set a configurable \u0027Pomodoro\u0027 timer \"","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"            + \"with work and rest cycles to keep yourself focused and productive!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"    public static final String FEATURE_NAME \u003d \"ft\";","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    private static final String START_COMMAND_KEYWORD \u003d \"start\";","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    private static final String PAUSE_COMMAND_KEYWORD \u003d \"pause\";","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    private static final String RESUME_COMMAND_KEYWORD \u003d \"resume\";","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"    private static final String NEXT_COMMAND_KEYWORD \u003d \"next\";","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    private static final String CONFIG_COMMAND_KEYWORD \u003d \"config\";","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"    private static final String STOP_COMMAND_KEYWORD \u003d \"stop\";","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    private static final String CHECK_COMMAND_KEYWORD \u003d \"check\";","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    private static final String HELP_COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    private static final String UNKNOWN_COMMAND_MESSAGE \u003d \"Invalid command issued!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    private static final String FOCUS_TIMER_GREET \u003d \"Welcome to Focus Timer.\" + System.lineSeparator()","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"            + \"Start a focus session with `start`, or `config` the session first!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"    private static final String FOCUS_GREETING_LOGO \u003d \" /$$$$$$$$                                     \"","lastModifiedDate":"2023-04-06"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-06"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"            \"| $$_____/                                     \" + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"            \"| $$     /$$$$$$   /$$$$$$$ /$$   /$$  /$$$$$$$\" + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-06"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"            \"| $$$$$ /$$__  $$ /$$_____/| $$  | $$ /$$_____/ \" + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-06"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"            \"| $$__/| $$  \\\\ $$| $$      | $$  | $$|  $$$$$$ \" + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-06"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"            \"| $$   | $$  | $$| $$      | $$  | $$ \\\\____  $$\" + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-06"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"            \"| $$   |  $$$$$$/|  $$$$$$$|  $$$$$$/ /$$$$$$$/\" + System.lineSeparator()","lastModifiedDate":"2023-04-06"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"            +","lastModifiedDate":"2023-04-06"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"            \"|__/    \\\\______/  \\\\_______/ \\\\______/ |_______/\" + System.lineSeparator();","lastModifiedDate":"2023-04-06"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key cannot be null\"","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"            + \", check user-guide for valid commands\";","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"    private static final String ERROR_SESSION_RUNNING \u003d \"Sorry, you cant `start` or `config` a \";","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-04-05"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"Supported commands in Focus Timer: \" + LINE_SEPARATOR","lastModifiedDate":"2023-04-08"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"            + \"check command \" + CheckCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"            + \"config command \" + ConfigCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"            + \"next command \" + NextCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"            + \"pause command \" + PauseCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"            + \"resume command \" + ResumeCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"            + \"start command \" + StartCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"            + \"stop command \" + StopCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"            + \"help command \" + HelpCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"            + \"home command \" + HomeCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_USAGE \u003d \"home command \" + HomeCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-09"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"    private static final String CONFIG_USAGE \u003d \"config command \" + ConfigCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-09"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"    private final FocusUi focusUi;","lastModifiedDate":"2023-04-04"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a FocusManager object.","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"     * Initialise a session and textUi.","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"     * Session will be passed into different commands to be utilised.","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"    public FocusManager() {","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"        this.focusUi \u003d new FocusUi();","lastModifiedDate":"2023-04-04"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"        this.focusUi.setCursorName(FEATURE_NAME);","lastModifiedDate":"2023-04-04"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d new Session();","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"     * Parses the given command from the user.","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"     * Determines the correct Command subclass that can handle its execution.","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * @param commandString Full command issued by the user","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If an unknown command was issued by the user","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"    private Command getCommandFor(String commandString) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d getCommandParser().parseUserInput(commandString);","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"        String commandKeyword \u003d getCommandParser().getMainArgument(commandString);","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        assert commandKeyword !\u003d null : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        switch (commandKeyword) {","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"        case START_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"            return new StartCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"        case PAUSE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"            return new PauseCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"        case RESUME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"            return new ResumeCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"        case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"            return new HomeCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"        case STOP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"            return new StopCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"        case CHECK_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"            return new CheckCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"        case NEXT_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"            return new NextCommand(arguments, session);","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"        case CONFIG_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-26"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"            return new ConfigCommand(arguments, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"        case HELP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"            return new HelpCommand(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"        default:","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(UNKNOWN_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"    private void greet() {","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"        focusUi.printLogoWithSeparator(FOCUS_GREETING_LOGO);","lastModifiedDate":"2023-04-06"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"        focusUi.printOutputMessage(FOCUS_TIMER_GREET);","lastModifiedDate":"2023-04-04"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"    private void runCommands() {","lastModifiedDate":"2023-03-21"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-21"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-21"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"            // Ignore ALL user input if the command is in its printing phase","lastModifiedDate":"2023-04-04"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"            try {","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"                String commandString \u003d focusUi.getCommand(session);","lastModifiedDate":"2023-04-04"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"                // Edge case guard clause to ensure that","lastModifiedDate":"2023-04-04"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"                Command command \u003d getCommandFor(commandString);","lastModifiedDate":"2023-03-21"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"                command.execute();","lastModifiedDate":"2023-03-21"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"                isExit \u003d HomeCommand.isExit(command);","lastModifiedDate":"2023-03-21"},{"lineNumber":139,"author":{"gitId":"YongbinWang"},"content":"            } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-23"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"                String errorMessage \u003d exception.getMessage();","lastModifiedDate":"2023-04-09"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"                if (errorMessage.contains(CONFIG_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":142,"author":{"gitId":"YongbinWang"},"content":"                    focusUi.printErrorFor(exception, CONFIG_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":143,"author":{"gitId":"YongbinWang"},"content":"                } else if (errorMessage.contains(HOME_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":144,"author":{"gitId":"YongbinWang"},"content":"                    focusUi.printErrorFor(exception, HOME_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"                } else {","lastModifiedDate":"2023-04-09"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"                    focusUi.printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-04-09"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"            } catch (WellNusException exception) {","lastModifiedDate":"2023-03-21"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"                String errorMessage \u003d exception.getMessage();","lastModifiedDate":"2023-04-09"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"                if (errorMessage.contains(CONFIG_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"                    focusUi.printErrorFor(exception, CONFIG_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":152,"author":{"gitId":"YongbinWang"},"content":"                } else if (errorMessage.contains(HOME_COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"                    focusUi.printErrorFor(exception, HOME_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":154,"author":{"gitId":"YongbinWang"},"content":"                } else {","lastModifiedDate":"2023-04-09"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"                    focusUi.printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-05"},{"lineNumber":156,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-03-21"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":159,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":160,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":161,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":162,"author":{"gitId":"YongbinWang"},"content":"     * Utility function to get the featureName this Manager is administering.","lastModifiedDate":"2023-03-25"},{"lineNumber":163,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"     * @return name of the feature that this Manager handles","lastModifiedDate":"2023-03-21"},{"lineNumber":165,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":167,"author":{"gitId":"YongbinWang"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-21"},{"lineNumber":168,"author":{"gitId":"YongbinWang"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":170,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":172,"author":{"gitId":"YongbinWang"},"content":"     * Abstract function to ensure developers add in a getter for the feature\u0027s help description.","lastModifiedDate":"2023-03-25"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":174,"author":{"gitId":"YongbinWang"},"content":"     * This description will be shown when the user types in the help command. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"     * The description should be a brief overview of what the feature does. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":176,"author":{"gitId":"YongbinWang"},"content":"     * For example: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":177,"author":{"gitId":"YongbinWang"},"content":"     * \"reflect: Reflect is your go-to tool to get, save and reflect on our specially","lastModifiedDate":"2023-03-25"},{"lineNumber":178,"author":{"gitId":"YongbinWang"},"content":"     * curated list of questions to reflect on\"","lastModifiedDate":"2023-03-25"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":180,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the feature\u0027s help description","lastModifiedDate":"2023-03-25"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":183,"author":{"gitId":"YongbinWang"},"content":"    public String getFeatureHelpDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":184,"author":{"gitId":"YongbinWang"},"content":"        return null;","lastModifiedDate":"2023-03-25"},{"lineNumber":185,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":186,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"     * runEventDriver is the entry point into a feature\u0027s driver loop.","lastModifiedDate":"2023-03-21"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"    public void runEventDriver() throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":192,"author":{"gitId":"YongbinWang"},"content":"        greet();","lastModifiedDate":"2023-03-21"},{"lineNumber":193,"author":{"gitId":"YongbinWang"},"content":"        runCommands();","lastModifiedDate":"2023-03-21"},{"lineNumber":194,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":195,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":196,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":197,"author":{"gitId":"YongbinWang"},"content":"     * Public method used for testing FocusManager\u0027s handling of invalidCommands.","lastModifiedDate":"2023-03-22"},{"lineNumber":198,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-22"},{"lineNumber":199,"author":{"gitId":"YongbinWang"},"content":"     * @param userCommand simulated user input","lastModifiedDate":"2023-03-22"},{"lineNumber":200,"author":{"gitId":"YongbinWang"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-22"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException","lastModifiedDate":"2023-03-22"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"    public Command testInvalidCommand(String userCommand) throws BadCommandException {","lastModifiedDate":"2023-03-22"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"        String startCommand \u003d \"focusStart\";","lastModifiedDate":"2023-03-22"},{"lineNumber":205,"author":{"gitId":"YongbinWang"},"content":"        String pauseCommand \u003d \"focusPause\";","lastModifiedDate":"2023-03-22"},{"lineNumber":206,"author":{"gitId":"YongbinWang"},"content":"        String resumeCommand \u003d \"focusResume\";","lastModifiedDate":"2023-03-22"},{"lineNumber":207,"author":{"gitId":"YongbinWang"},"content":"        String homeCommand \u003d \"focusHome\";","lastModifiedDate":"2023-03-22"},{"lineNumber":208,"author":{"gitId":"YongbinWang"},"content":"        String stopCommand \u003d \"focusStop\";","lastModifiedDate":"2023-03-22"},{"lineNumber":209,"author":{"gitId":"YongbinWang"},"content":"        String checkCommand \u003d \"focusCheck\";","lastModifiedDate":"2023-03-22"},{"lineNumber":210,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2023-03-22"},{"lineNumber":211,"author":{"gitId":"YongbinWang"},"content":"        switch (userCommand) {","lastModifiedDate":"2023-03-22"},{"lineNumber":212,"author":{"gitId":"YongbinWang"},"content":"        case START_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(startCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":214,"author":{"gitId":"YongbinWang"},"content":"            return new StartCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":215,"author":{"gitId":"YongbinWang"},"content":"        case PAUSE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":216,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(pauseCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":217,"author":{"gitId":"YongbinWang"},"content":"            return new PauseCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":218,"author":{"gitId":"YongbinWang"},"content":"        case RESUME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":219,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(resumeCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":220,"author":{"gitId":"YongbinWang"},"content":"            return new ResumeCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":221,"author":{"gitId":"YongbinWang"},"content":"        case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":222,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(homeCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":223,"author":{"gitId":"YongbinWang"},"content":"            return new HomeCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":224,"author":{"gitId":"YongbinWang"},"content":"        case STOP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":225,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(stopCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":226,"author":{"gitId":"YongbinWang"},"content":"            return new StopCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":227,"author":{"gitId":"YongbinWang"},"content":"        case CHECK_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":228,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(checkCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":229,"author":{"gitId":"YongbinWang"},"content":"            return new CheckCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":230,"author":{"gitId":"YongbinWang"},"content":"        case CONFIG_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-26"},{"lineNumber":231,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(checkCommand);","lastModifiedDate":"2023-03-26"},{"lineNumber":232,"author":{"gitId":"YongbinWang"},"content":"            return new ConfigCommand(arguments, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":233,"author":{"gitId":"YongbinWang"},"content":"        default:","lastModifiedDate":"2023-03-22"},{"lineNumber":234,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(UNKNOWN_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":235,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":236,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":237,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":1,"YongbinWang":235,"nichyjt":1}},{"path":"src/main/java/wellnus/focus/feature/FocusUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.focus.feature;","lastModifiedDate":"2023-04-04"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.nio.BufferOverflowException;","lastModifiedDate":"2023-04-04"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-04-04"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-04-04"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-04-04"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-04-04"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-04-04"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" * FocusUi contains extra logic to handle special cursor-printing logic and reading of stdin","lastModifiedDate":"2023-04-04"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" * due to the need to block all user input when the countdown timer starts counting down from","lastModifiedDate":"2023-04-04"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * (10,9,...,1).","lastModifiedDate":"2023-04-04"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"public class FocusUi extends TextUi {","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"FocusUiLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    private static final String NO_INPUT_ELEMENT_MSG \u003d \"There is no new line of element,\"","lastModifiedDate":"2023-04-04"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"            + \"please key in your input!!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    private static final String BUFFER_OVERFLOW_MSG \u003d \"Your input is too long,\"","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"            + \"please shorten it!!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private static final String SEPARATOR \u003d \"*\";","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final int FLUSH_DELAY_TIMING \u003d 1000;","lastModifiedDate":"2023-04-05"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final boolean NO_PRINT_CURSOR \u003d false;","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    private static final boolean PRINT_CURSOR \u003d true;","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"     * Constructs a FocusUi variant of TextUi","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    public FocusUi() {","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"        super();","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"        setSeparator(SEPARATOR);","lastModifiedDate":"2023-04-05"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"     * FocusUi specific getCommand that accounts for proper printing of","lastModifiedDate":"2023-04-04"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"     * the cursor and accepting user input when the countdown printing phase (10,9,...,1)","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"     * is not ongoing.","lastModifiedDate":"2023-04-04"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-04-04"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"     * In this scenario, we define invalid phase to be the point where","lastModifiedDate":"2023-04-04"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"     * the countdown prints (10,9,...,1) on screen.","lastModifiedDate":"2023-04-04"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"     * Otherwise, it is valid.","lastModifiedDate":"2023-04-04"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"     * @return User input command with leading/dangling whitespace being removed","lastModifiedDate":"2023-04-04"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    public String getCommand(Session session) {","lastModifiedDate":"2023-04-04"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"        Scanner scanner \u003d getScanner();","lastModifiedDate":"2023-04-04"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"        // User tries to input a command in the invalid phase","lastModifiedDate":"2023-04-04"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"        if (isBlocking(session)) {","lastModifiedDate":"2023-04-04"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"            return waitAndGetCommand(session, scanner);","lastModifiedDate":"2023-04-04"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"        // User entered command during valid phase","lastModifiedDate":"2023-04-04"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"        String userCommand \u003d getCommandWithCursor(PRINT_CURSOR, scanner);","lastModifiedDate":"2023-04-04"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        // Edge case: User maliciously waits until the countdown print starts before pressing enter.","lastModifiedDate":"2023-04-04"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        // In this case, the command should NOT be processed until the countdown phase is over.","lastModifiedDate":"2023-04-04"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        if (isBlocking(session)) {","lastModifiedDate":"2023-04-04"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"            return waitAndGetCommand(session, scanner);","lastModifiedDate":"2023-04-04"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        return userCommand;","lastModifiedDate":"2023-04-04"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"    private void printLogo(String logo) {","lastModifiedDate":"2023-04-06"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"        System.out.print(logo);","lastModifiedDate":"2023-04-06"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-06"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    protected void printLogoWithSeparator(String logo) {","lastModifiedDate":"2023-04-06"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        printSeparator();","lastModifiedDate":"2023-04-06"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"        printLogo(logo);","lastModifiedDate":"2023-04-06"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-06"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * User has entered a command whilst the countdown printing phase is ongoing.","lastModifiedDate":"2023-04-04"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-04-04"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"     * Waits for the printing phase to end, flush stdin and then gets the command without printing a cursor","lastModifiedDate":"2023-04-04"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"     * as the Countdown will automatically print a cursor on completion.","lastModifiedDate":"2023-04-04"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"     * @param session the session containing all the countdowns","lastModifiedDate":"2023-04-04"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"     * @param scanner the scanner reading user input","lastModifiedDate":"2023-04-04"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"     * @return String User input command with leading/dangling whitespace being removed","lastModifiedDate":"2023-04-04"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"    private String waitAndGetCommand(Session session, Scanner scanner) {","lastModifiedDate":"2023-04-04"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        waitForCountdownPrint(session);","lastModifiedDate":"2023-04-04"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        flushInput(scanner);","lastModifiedDate":"2023-04-04"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        // Get command without printing a cursor","lastModifiedDate":"2023-04-04"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        return getCommandWithCursor(NO_PRINT_CURSOR, scanner);","lastModifiedDate":"2023-04-04"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"     * This method is the lowest abstraction layer, talking to","lastModifiedDate":"2023-04-04"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"     * @param isPrintCursor the session containing all the countdowns","lastModifiedDate":"2023-04-04"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"     * @param scanner       the scanner reading user input","lastModifiedDate":"2023-04-04"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"     * @return User input command with leading/dangling whitespace being removed","lastModifiedDate":"2023-04-04"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"    private String getCommandWithCursor(boolean isPrintCursor, Scanner scanner) {","lastModifiedDate":"2023-04-04"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        String userCommand \u003d \"\";","lastModifiedDate":"2023-04-04"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        if (isPrintCursor) {","lastModifiedDate":"2023-04-04"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"            printCursor();","lastModifiedDate":"2023-04-04"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-04-04"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"            String inputLine \u003d scanner.nextLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"            userCommand \u003d inputLine.trim();","lastModifiedDate":"2023-04-04"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"        } catch (BufferOverflowException bufferOverFlowException) {","lastModifiedDate":"2023-04-04"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.INFO, BUFFER_OVERFLOW_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"            printErrorFor(bufferOverFlowException, BUFFER_OVERFLOW_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        } catch (NoSuchElementException noElementException) {","lastModifiedDate":"2023-04-04"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.INFO, NO_INPUT_ELEMENT_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"            printErrorFor(noElementException, NO_INPUT_ELEMENT_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        return userCommand;","lastModifiedDate":"2023-04-04"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     * Checks if the countTimer is in an invalid phase which","lastModifiedDate":"2023-04-04"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * means that all stdin should be blocked.","lastModifiedDate":"2023-04-04"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"     * @param session the session containing all the countdowns","lastModifiedDate":"2023-04-04"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"     * @return boolean Representing the countdown state","lastModifiedDate":"2023-04-04"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"    public boolean isBlocking(Session session) {","lastModifiedDate":"2023-04-04"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"        return session.getCurrentCountdown().isCountdownPrinting() \u0026\u0026 session.isSessionCounting();","lastModifiedDate":"2023-04-04"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     * If the countdown is in its printing phase, wait for it to finish first","lastModifiedDate":"2023-04-04"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     * The while loop is designed as such for checkstyle correctness (no empty body)","lastModifiedDate":"2023-04-04"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"    private void waitForCountdownPrint(Session session) {","lastModifiedDate":"2023-04-04"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        while (true) {","lastModifiedDate":"2023-04-04"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"            if (!(isBlocking(session))) {","lastModifiedDate":"2023-04-04"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"                break;","lastModifiedDate":"2023-04-04"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-04-04"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"     * Flush all input from Stdin.","lastModifiedDate":"2023-04-04"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-04-04"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"     * Gracefully rejects all overzealous input from users, cleaning the input buffer.","lastModifiedDate":"2023-04-04"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"     * @param scanner Reference to the scanner being used by the UI","lastModifiedDate":"2023-04-04"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"    private void flushInput(Scanner scanner) {","lastModifiedDate":"2023-04-04"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        // Implement a timeout to avoid hanging","lastModifiedDate":"2023-04-04"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"        long flushStartTime \u003d System.currentTimeMillis();","lastModifiedDate":"2023-04-04"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"        while (scanner.hasNextLine()","lastModifiedDate":"2023-04-04"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"                \u0026\u0026 System.currentTimeMillis() - flushStartTime \u003c FLUSH_DELAY_TIMING) {","lastModifiedDate":"2023-04-05"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"            // Discard extraneous input","lastModifiedDate":"2023-04-04"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"            scanner.nextLine();","lastModifiedDate":"2023-04-04"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-04-04"}],"authorContributionMap":{"haoyangw":2,"nichyjt":144,"YongbinWang":9}},{"path":"src/main/java/wellnus/focus/feature/Session.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.feature;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":" * Represents a session of Countdown objects.","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":" * A session is a sequence of Countdown objects represented by an ArrayList.","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" * We define a Session to have 4 states.","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * \u003col\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" *     \u003cli\u003e Ready","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" *          `config` and `start` are only legal here.","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" *     \u003cli\u003e Counting","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" *          `pause` and `stop` are only legal here.","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" *     \u003cli\u003e Waiting","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" *          `next` and `stop` are only legal here.","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" *     \u003cli\u003e Paused","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" *          `resume` and `stop` are only legal here.","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * \u003c/ol\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * The last timer holds a special `isReady` attribute to help Session determine if `start` and `config` is usable.","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"//@@author YongbinWang","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"public class Session {","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private static final int INCREMENT \u003d 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private static final boolean IS_LAST_COUNTDOWN \u003d true;","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private String workDescription \u003d \"Task Cycle: Do your task now!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    private final ArrayList\u003cCountdown\u003e session;","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    private String breakDescription \u003d \"Break Cycle: Take a breather!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"    private String longBreakDescription \u003d \"Long Break\";","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    private int work \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    private int brk \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    private int longBrk \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"    private int cycle \u003d 2;","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    private int currentCountdownIndex;","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a Session object.","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"     * Creates an ArrayList of Countdown objects.","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"     * Calls fillSession() to fill the session with Countdown objects.","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    public Session() {","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"        initialiseSession();","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"        this.currentCountdownIndex \u003d session.size() - INCREMENT;","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"     * Method to fill the session with Countdown objects in a specific sequence.","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    private void fillSession() {","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"        for (int i \u003d 0; i \u003c cycle; i++) {","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"            Countdown workCountDown \u003d new Countdown(work, workDescription, !IS_LAST_COUNTDOWN);","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"            Countdown breakCountDown \u003d new Countdown(brk, breakDescription, !IS_LAST_COUNTDOWN);","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"            session.add(workCountDown);","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"            session.add(breakCountDown);","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"        Countdown longBreak \u003d new Countdown(longBrk, longBreakDescription, IS_LAST_COUNTDOWN);","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"        int lastIndex \u003d session.size() - 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"        session.remove(lastIndex);","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"        session.add(longBreak);","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * Method to get the session.","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     * @return arraylist of countdown objects","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    public ArrayList\u003cCountdown\u003e getSession() {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        return this.session;","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"     * Method to get the current countdown index.","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"     * @return the current countdown index","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"    public int getCurrentCountdownIndex() {","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"        return this.currentCountdownIndex;","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"     * Method to increment the current countdown index if the current countdown is completed.","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"    public void checkPrevCountdown() {","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"        if (getCurrentCountdown().getIsReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"            initialiseSession();","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"            currentCountdownIndex \u003d 0;","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"        currentCountdownIndex +\u003d INCREMENT;","lastModifiedDate":"2023-03-23"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * Get the current countdown object actively ticking in the Session","lastModifiedDate":"2023-03-27"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"     * @return Countdown the current countdown being ticked","lastModifiedDate":"2023-03-27"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"    public Countdown getCurrentCountdown() {","lastModifiedDate":"2023-03-27"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        return session.get(currentCountdownIndex);","lastModifiedDate":"2023-03-27"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"     * Check if the session is in its Ready state.","lastModifiedDate":"2023-03-27"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"     * A session can only be ready if the current index is the last timer","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"     * and the last timer\u0027s isReady is true, which can only occur if it is not counting down.","lastModifiedDate":"2023-03-27"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     * @return boolean Representing the ready state of the session.","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"    public boolean isSessionReady() {","lastModifiedDate":"2023-03-27"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"        return getCurrentCountdownIndex() \u003d\u003d session.size() - INCREMENT \u0026\u0026 getCurrentCountdown().getIsReady();","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     * Check if the session is in its Counting state.","lastModifiedDate":"2023-03-27"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"     * @return boolean Representing if the session\u0027s countdown is underway.","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    public boolean isSessionCounting() {","lastModifiedDate":"2023-03-27"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"        Countdown countdown \u003d getCurrentCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"        return countdown.getIsRunning() \u0026\u0026 !countdown.getIsCompletedCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * Check if the session is in its Waiting state.","lastModifiedDate":"2023-03-27"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     * @return boolean Representing if the session\u0027s countdown is done and is waiting for a next command.","lastModifiedDate":"2023-03-27"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"    public boolean isSessionWaiting() {","lastModifiedDate":"2023-03-27"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"        Countdown countdown \u003d getCurrentCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"        return !countdown.getIsRunning() \u0026\u0026 countdown.getIsCompletedCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"     * Check if the session is in its Paused state.","lastModifiedDate":"2023-03-27"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"     * @return boolean Representing if the session\u0027s countdown is paused.","lastModifiedDate":"2023-03-27"},{"lineNumber":139,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"    public boolean isSessionPaused() {","lastModifiedDate":"2023-03-27"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"        Countdown countdown \u003d getCurrentCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":142,"author":{"gitId":"YongbinWang"},"content":"        return !countdown.getIsRunning() \u0026\u0026 !countdown.getIsCompletedCountdown() \u0026\u0026 !countdown.getIsReady();","lastModifiedDate":"2023-03-27"},{"lineNumber":143,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"     * Starts the timer for the current countdown and increment the index if needed.","lastModifiedDate":"2023-03-27"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"    public void startTimer() {","lastModifiedDate":"2023-03-27"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"        checkPrevCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"        getCurrentCountdown().start();","lastModifiedDate":"2023-03-27"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"        getCurrentCountdown().setStart();","lastModifiedDate":"2023-03-27"},{"lineNumber":152,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"     * Method to (re) initialise a session when start or stop command is executed.","lastModifiedDate":"2023-03-27"},{"lineNumber":156,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"    public void initialiseSession() {","lastModifiedDate":"2023-03-27"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"        session.clear();","lastModifiedDate":"2023-03-25"},{"lineNumber":159,"author":{"gitId":"YongbinWang"},"content":"        fillSession();","lastModifiedDate":"2023-03-25"},{"lineNumber":160,"author":{"gitId":"YongbinWang"},"content":"        primeSessionIsReady();","lastModifiedDate":"2023-03-27"},{"lineNumber":161,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":162,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":163,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"     * Sets the isReady flag in the session for the last countdown object to be true","lastModifiedDate":"2023-03-27"},{"lineNumber":165,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"    private void primeSessionIsReady() {","lastModifiedDate":"2023-03-27"},{"lineNumber":167,"author":{"gitId":"YongbinWang"},"content":"        int lastIndex \u003d session.size() - INCREMENT;","lastModifiedDate":"2023-03-27"},{"lineNumber":168,"author":{"gitId":"YongbinWang"},"content":"        session.get(lastIndex).setIsReady(true);","lastModifiedDate":"2023-03-27"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":170,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"    public boolean hasAnyCountdown() {","lastModifiedDate":"2023-03-25"},{"lineNumber":172,"author":{"gitId":"YongbinWang"},"content":"        return session.size() \u003e 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":174,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":176,"author":{"gitId":"YongbinWang"},"content":"     * Method to reset the current countdown index back to 0.","lastModifiedDate":"2023-03-21"},{"lineNumber":177,"author":{"gitId":"YongbinWang"},"content":"     * This method is called when the user wants to stop an ongoing session.","lastModifiedDate":"2023-03-21"},{"lineNumber":178,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"    public void resetCurrentCountdownIndex() {","lastModifiedDate":"2023-03-21"},{"lineNumber":180,"author":{"gitId":"YongbinWang"},"content":"        currentCountdownIndex \u003d session.size() - INCREMENT;","lastModifiedDate":"2023-03-27"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"        primeSessionIsReady();","lastModifiedDate":"2023-03-27"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":183,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":184,"author":{"gitId":"YongbinWang"},"content":"    public int getWork() {","lastModifiedDate":"2023-03-26"},{"lineNumber":185,"author":{"gitId":"YongbinWang"},"content":"        return work;","lastModifiedDate":"2023-03-26"},{"lineNumber":186,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"    public void setWork(int newWork) {","lastModifiedDate":"2023-03-26"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"        this.work \u003d newWork;","lastModifiedDate":"2023-03-26"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":192,"author":{"gitId":"YongbinWang"},"content":"    public int getCycle() {","lastModifiedDate":"2023-03-26"},{"lineNumber":193,"author":{"gitId":"YongbinWang"},"content":"        return cycle;","lastModifiedDate":"2023-03-26"},{"lineNumber":194,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":195,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":196,"author":{"gitId":"YongbinWang"},"content":"    public void setCycle(int newCycles) {","lastModifiedDate":"2023-03-26"},{"lineNumber":197,"author":{"gitId":"YongbinWang"},"content":"        this.cycle \u003d newCycles;","lastModifiedDate":"2023-03-26"},{"lineNumber":198,"author":{"gitId":"YongbinWang"},"content":"        fillSession();","lastModifiedDate":"2023-03-27"},{"lineNumber":199,"author":{"gitId":"YongbinWang"},"content":"        resetCurrentCountdownIndex();","lastModifiedDate":"2023-03-27"},{"lineNumber":200,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"    public int getBrk() {","lastModifiedDate":"2023-03-26"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"        return brk;","lastModifiedDate":"2023-03-26"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":205,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":206,"author":{"gitId":"YongbinWang"},"content":"    public void setBrk(int newBrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":207,"author":{"gitId":"YongbinWang"},"content":"        this.brk \u003d newBrk;","lastModifiedDate":"2023-03-26"},{"lineNumber":208,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":209,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":210,"author":{"gitId":"YongbinWang"},"content":"    public int getLongBrk() {","lastModifiedDate":"2023-03-26"},{"lineNumber":211,"author":{"gitId":"YongbinWang"},"content":"        return longBrk;","lastModifiedDate":"2023-03-26"},{"lineNumber":212,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":214,"author":{"gitId":"YongbinWang"},"content":"    public void setLongBrk(int newLongBrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":215,"author":{"gitId":"YongbinWang"},"content":"        this.longBrk \u003d newLongBrk;","lastModifiedDate":"2023-03-26"},{"lineNumber":216,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":217,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":218,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"YongbinWang":206,"nichyjt":12}},{"path":"src/main/java/wellnus/gamification/GamificationManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.gamification;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-04-05"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-04-05"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.gamification.command.HelpCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.command.HomeCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.command.StatsCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationStorage;","lastModifiedDate":"2023-04-05"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":" * Manager for the gamification feature. Entry point for this class is the runEventDriver() method.","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"public class GamificationManager extends Manager {","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    public static final String FEATURE_NAME \u003d \"gamif\";","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    public static final String FEATURE_HELP_DESCRIPTION \u003d \"gamif - Gamification - Gamification gives you the \"","lastModifiedDate":"2023-04-09"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"            + \"motivation to continue improving your wellness by rewarding you for your efforts!\";","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private static final String CLEAN_DATA_FILE_ERROR_MESSAGE \u003d \"Gamification data file may remain corrupted.\";","lastModifiedDate":"2023-04-10"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_HELP \u003d \"help\";","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_HOME \u003d \"home\";","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_STATS \u003d \"stats\";","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String UNRECOGNISED_COMMAND_ERROR \u003d \"Invalid command issued!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d","lastModifiedDate":"2023-04-05"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"            \"Supported commands in Gamification: \" + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"            + \"stats command \" + StatsCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"            + \"help command \" + HelpCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"            + \"home command \" + HomeCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private static final String STATS_USAGE \u003d \"stats command \" + StatsCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-09"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_USAGE \u003d \"home command \" + HomeCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-09"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    private static final String LOAD_GAMIF_DATA_ERROR_MESSAGE \u003d \"Previous gamification data will not be restored.\";","lastModifiedDate":"2023-04-09"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    private GamificationData gamificationData;","lastModifiedDate":"2023-04-05"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    private final GamificationUi gamificationUi;","lastModifiedDate":"2023-04-08"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * Returns an instance of the GamificationManager.","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    public GamificationManager() {","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"        this.gamificationUi \u003d new GamificationUi();","lastModifiedDate":"2023-04-08"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-04-05"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"            GamificationStorage gamificationStorage \u003d new GamificationStorage();","lastModifiedDate":"2023-04-05"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"            this.gamificationData \u003d gamificationStorage.loadData();","lastModifiedDate":"2023-04-05"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"        } catch (StorageException loadDataException) {","lastModifiedDate":"2023-04-10"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"            gamificationUi.printErrorFor(loadDataException, LOAD_GAMIF_DATA_ERROR_MESSAGE);","lastModifiedDate":"2023-04-08"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"            this.gamificationData \u003d new GamificationData();","lastModifiedDate":"2023-04-05"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        } catch (TokenizerException loadDataException) {","lastModifiedDate":"2023-04-10"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"            gamificationUi.printErrorFor(loadDataException, LOAD_GAMIF_DATA_ERROR_MESSAGE);","lastModifiedDate":"2023-04-10"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"            try {","lastModifiedDate":"2023-04-10"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"                GamificationStorage gamificationStorage \u003d new GamificationStorage();","lastModifiedDate":"2023-04-10"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"                gamificationStorage.cleanDataFile();","lastModifiedDate":"2023-04-10"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"            } catch (StorageException storageException) {","lastModifiedDate":"2023-04-10"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"                gamificationUi.printErrorFor(storageException, CLEAN_DATA_FILE_ERROR_MESSAGE);","lastModifiedDate":"2023-04-10"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-04-10"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"            this.gamificationData \u003d new GamificationData();","lastModifiedDate":"2023-04-10"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"    private Command getCommandFor(String command) throws BadCommandException {","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d commandParser.parseUserInput(command);","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"        String cmdKeyword \u003d commandParser.getMainArgument(command);","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        switch (cmdKeyword) {","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"        case COMMAND_HELP:","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"            return new HelpCommand(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"        case COMMAND_HOME:","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"            return new HomeCommand(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"        case COMMAND_STATS:","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"            return new StatsCommand(arguments, gamificationData);","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"        default:","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(UNRECOGNISED_COMMAND_ERROR);","lastModifiedDate":"2023-04-06"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     * Returns the name of this feature.","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"     * @return Name of the feature that this Manager handles","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"     * Returns a description of the gamification feature for the \u0027help\u0027 command.","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"     * @return String of the feature\u0027s help description","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"    public String getFeatureHelpDescription() {","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"        return FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"    public GamificationData getGamificationData() {","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"        return gamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"     * runEventDriver is the entry point into GamificationManager. \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"     * It is calls the relevant methods to present the user with the gamification feature\u0027s interface","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"     * and manage the user\u0027s commands.","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-30"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"        GamificationUi.printLogo();","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"                String commandString \u003d gamificationUi.getCommand();","lastModifiedDate":"2023-04-08"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"                Command command \u003d getCommandFor(commandString);","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"                command.execute();","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"                isExit \u003d HomeCommand.isHome(command);","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"            } catch (WellNusException exception) {","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"                String errorMessage \u003d exception.getMessage();","lastModifiedDate":"2023-04-09"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"                if (errorMessage.contains(COMMAND_STATS)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"                    gamificationUi.printErrorFor(exception, STATS_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"                } else if (errorMessage.contains(COMMAND_HOME)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"                    gamificationUi.printErrorFor(exception, HOME_USAGE);","lastModifiedDate":"2023-04-09"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"                } else {","lastModifiedDate":"2023-04-09"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"                    gamificationUi.printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-08"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"                }","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-09"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"wenxin-c":19,"BernardLesley":5,"haoyangw":107,"nichyjt":2}},{"path":"src/main/java/wellnus/gamification/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.gamification.command;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import wellnus.gamification.GamificationManager;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationUi;","lastModifiedDate":"2023-04-08"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":" * Implementation of Gamification WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" * by Gamification Feature and how to use each command.","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"help - Get help on what commands can be used \"","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"            + \"in WellNUS++ Gamification Feature\";","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: help [command-to-check]\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final String BAD_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"help command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String HELP_PREAMBLE \u003d \"Input `help` to see all available commands.\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-09"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            + \"Input `help [command-to-check]` to get usage help for a specific command.\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-09"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"            + \"Here are all the commands available for you!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    private final GamificationUi gamificationUi;","lastModifiedDate":"2023-04-08"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"     * Initialises a HelpCommand Object using the command arguments issued by the user.","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"        this.gamificationUi \u003d new GamificationUi();","lastModifiedDate":"2023-04-08"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HelpCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HomeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(StatsCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        return commandDescriptions;","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"     * Prints either the general help message or the command-specific help message","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"     * based on the presence of a payload.","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        String commandToSearch \u003d argumentPayload.get(COMMAND_KEYWORD).trim().toLowerCase();","lastModifiedDate":"2023-04-01"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"        if (commandToSearch.equals(NO_FEATURE_KEYWORD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"            printGeneralHelpMessage();","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"        printSpecificHelpMessage(commandToSearch);","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"     * Lists all features available in Atomic Habit WellNUS++ and a short description.","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"    public void printGeneralHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d getCommandDescriptions();","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"        String outputMessage \u003d GamificationManager.FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator());","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(HELP_PREAMBLE);","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator() + System.lineSeparator());","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c commandDescriptions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions.get(i) + System.lineSeparator());","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        gamificationUi.printOutputMessage(outputMessage);","lastModifiedDate":"2023-04-08"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"     * Prints the help message for a given commandToSearch. \u003cbr/\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"     * If the commandToSearch does not exist, help will print an unknown command","lastModifiedDate":"2023-04-06"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"     * error message.","lastModifiedDate":"2023-04-06"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"    public void printSpecificHelpMessage(String commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"        switch (commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"        case HelpCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HelpCommand.COMMAND_DESCRIPTION, HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"        case HomeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HomeCommand.COMMAND_DESCRIPTION, HomeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"        case StatsCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(StatsCommand.COMMAND_DESCRIPTION, StatsCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"        default:","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"            BadCommandException unknownCommand \u003d new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"            gamificationUi.printErrorFor(unknownCommand, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-08"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"    private void printUsageMessage(String commandDescription, String usageString) {","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"        String message \u003d commandDescription + System.lineSeparator() + usageString;","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"        gamificationUi.printOutputMessage(message);","lastModifiedDate":"2023-04-08"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"     * Prints a brief description of all Gamification WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-29"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"    public void execute() {","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-29"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-29"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"            gamificationUi.printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-08"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-29"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-29"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-29"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-29"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-29"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-29"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-29"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(BAD_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"     * Abstract method to ensure developers add in a command usage.","lastModifiedDate":"2023-03-29"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-29"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-29"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":165,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-29"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-29"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-29"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":174,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-29"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-29"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-29"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"wenxin-c":8,"BernardLesley":164,"haoyangw":7,"nichyjt":1}},{"path":"src/main/java/wellnus/gamification/command/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.gamification.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":" * Provides the \u0027home\u0027 command for the gamification feature.","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"public class HomeCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"home - Returns the user to the main WellNus++ session\";","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: home\";","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    public static final String FEATURE_NAME \u003d \"gamif\";","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private static final int NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final String WRONG_COMMAND_KEYWORD_MESSAGE \u003d \"Invalid command issued, expected \u0027home\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String WRONG_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027home\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027home\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"     * Initialises a Command Object to handle the \u0027home\u0027 command from the user","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Arguments issued by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    public HomeCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    public static boolean isHome(Command command) {","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        return command instanceof HomeCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"     * Returns the home command\u0027s activation keyword.","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of the home command","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     * Returns the keyword for the gamification feature.","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the gamification feature","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"     * Executes the \u0027home\u0027 command from the user to return to the main WellNus feature.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"     * May throw Exceptions if command fails.","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"     * @throws WellNusException If the home command fails","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    public void execute() throws WellNusException {","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"        validateCommand(getArguments());","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"        GamificationUi.printGoodbye();","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments given by the user. \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Arguments given by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"        assert arguments.containsKey(getCommandKeyword()) : WRONG_COMMAND_KEYWORD_MESSAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() \u003e NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(WRONG_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"        String payload \u003d arguments.get(getCommandKeyword());","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"        if (!payload.isBlank()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"     * Returns a description of the home command\u0027s syntax.","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"     * @return String of the home command\u0027s syntax","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"     * Returns a description of the home command\u0027s description.","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"     * @return String of the description of this home command","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"wenxin-c":5,"BernardLesley":2,"haoyangw":99}},{"path":"src/main/java/wellnus/gamification/command/StatsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.gamification.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" * Provides the \u0027stats\u0027 command for the gamification feature that displays the user\u0027s XP statistics, such","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":" * as current XP level.","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"public class StatsCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"stats - Displays the user\u0027s XP level and points\";","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"stats\";","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: stats\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    public static final String FEATURE_NAME \u003d \"gamif\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027stats\u0027!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final int NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String WRONG_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027stats\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String WRONG_COMMAND_MESSAGE \u003d \"Invalid command issued, expected \u0027stats\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private final GamificationData gamData;","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"     * Returns an instance of the StatsCommand Object to handle the \u0027stats\u0027 command from the user","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Arguments given by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    public StatsCommand(HashMap\u003cString, String\u003e arguments, GamificationData gamData) {","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        this.gamData \u003d gamData;","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"     * Returns the keyword for the stats command.","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of the stats command","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     * Returns the keyword for the gamification feature.","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the gamification feature","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"     * Prints the user\u0027s XP statistics on the user\u0027s screen.","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     * @throws WellNusException If XP statistics cannot be successfully printed","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"     * @see GamificationUi#printXpBar(GamificationData, boolean)","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"    public void execute() throws WellNusException {","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"        validateCommand(getArguments());","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"        GamificationUi.printXpBar(gamData, true);","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     * Validates the arguments given for the stats command.","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Arguments given by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments are invalid for this stats command","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"        assert arguments.containsKey(getCommandKeyword()) : WRONG_COMMAND_MESSAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() \u003e NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(WRONG_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"        String payload \u003d arguments.get(getCommandKeyword());","lastModifiedDate":"2023-04-07"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        if (!payload.isBlank()) {","lastModifiedDate":"2023-04-07"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_PAYLOAD);","lastModifiedDate":"2023-04-09"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"     * Returns the syntax for this stats command.","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"     * @return String of the stats command\u0027s syntax","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"     * Returns a description of this stats command.","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"     * @return String of the description of this stats command","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"wenxin-c":5,"BernardLesley":2,"haoyangw":97}},{"path":"src/main/java/wellnus/gamification/util/GamificationData.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.gamification.util;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-04-05"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":" * Data structure for encapsulating WellNus++ gamification data such as experience","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":" * points and experience levels. See public methods to understand how to update the","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":" * gamification data.","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"public class GamificationData {","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"    private static final int INITIAL_XP_POINTS \u003d 0;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_EXP_POINTS_TO_ADD_ERROR \u003d \"Cannot add non-positive amount of \"","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"            + \"experience points: \u0027%d\u0027\";","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_EXP_POINTS_TO_MINUS_ERROR \u003d \"Cannot minus non-positive amount of \"","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"            + \"experience points: \u0027%d\u0027\";","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    private static final int POINTS_PER_LEVEL \u003d 10;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    // Experience points accumulated so far","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private int xp;","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    // Experience level based on the experience points","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    private int level;","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"     * Returns an instance of the GamificationData class.","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    public GamificationData() {","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"        this(INITIAL_XP_POINTS);","lastModifiedDate":"2023-04-05"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-05"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"     * Returns an instance of the GamificationData class with the given amount of XP.","lastModifiedDate":"2023-04-05"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"     * @param xp Amount of XP to start with","lastModifiedDate":"2023-04-05"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-05"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    public GamificationData(int xp) {","lastModifiedDate":"2023-04-09"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"        this.xp \u003d xp;","lastModifiedDate":"2023-04-05"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        this.level \u003d getLevelFor(xp);","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    private static int getLevelFor(int xp) {","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"        return xp / POINTS_PER_LEVEL;","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * Increases the user\u0027s XP points by the given amount.","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     * @param pointsToAdd Number of XP points to increase","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     * @return Whether the user just levelled up","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     * @throws StorageException If latest XP statistics cannot be saved to storage successfully","lastModifiedDate":"2023-04-05"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    public boolean addXp(int pointsToAdd) throws StorageException {","lastModifiedDate":"2023-04-05"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"        assert pointsToAdd \u003e 0 : String.format(INVALID_EXP_POINTS_TO_ADD_ERROR, pointsToAdd);","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"        xp +\u003d pointsToAdd;","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"        int newLevel \u003d getLevelFor(xp);","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        boolean hasLevelledUp \u003d newLevel \u003e level;","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        level \u003d newLevel;","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"        GamificationStorage gamificationStorage \u003d new GamificationStorage();","lastModifiedDate":"2023-04-05"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"        gamificationStorage.store(this);","lastModifiedDate":"2023-04-05"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"        return hasLevelledUp;","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     * Returns the XP collected in the user\u0027s current level.","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"     * @return Amount of XP points collected in the current level","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"    public int getXpForCurrentLevelOnly() {","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"        return getTotalXp() - (getXpLevel() * POINTS_PER_LEVEL);","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     * Returns the total number of XP points user has collected in WellNUS++.","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"     * @return Total number of XP points for the current user","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"    public int getTotalXp() {","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"        return xp;","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"     * Returns the user\u0027s current XP level","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"     * @return User\u0027s current XP level","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"    public int getXpLevel() {","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        return level;","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"     * Returns the number of XP points required to reach the next level.","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"     * @return Number of XP points required to level up","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"    public int getXpToReachNextLevel() {","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        return POINTS_PER_LEVEL - getXpForCurrentLevelOnly();","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"     * Decreases the user\u0027s total XP points by the given amount.","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"     * @param pointsToMinus Number of XP points to deduct from the user","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"     * @return Whether the user dropped by one level due to the XP deduction","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"     * @throws StorageException If latest XP statistics cannot be saved to storage successfully","lastModifiedDate":"2023-04-05"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"    public boolean minusXp(int pointsToMinus) throws StorageException {","lastModifiedDate":"2023-04-05"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"        assert pointsToMinus \u003e 0 : String.format(INVALID_EXP_POINTS_TO_MINUS_ERROR, pointsToMinus);","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"        xp -\u003d pointsToMinus;","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"        int newLevel \u003d getLevelFor(xp);","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"        boolean hasLevelDropped \u003d newLevel \u003c level;","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"        level \u003d newLevel;","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"        GamificationStorage gamificationStorage \u003d new GamificationStorage();","lastModifiedDate":"2023-04-05"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        gamificationStorage.store(this);","lastModifiedDate":"2023-04-05"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"        return hasLevelDropped;","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"haoyangw":107}},{"path":"src/main/java/wellnus/gamification/util/GamificationStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.gamification.util;","lastModifiedDate":"2023-04-05"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-05"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-04-05"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-04-05"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.storage.GamificationTokenizer;","lastModifiedDate":"2023-04-09"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.storage.Storage;","lastModifiedDate":"2023-04-05"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-04-05"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":" * Manages the storage and retrieval of gamification data to and from storage.","lastModifiedDate":"2023-04-05"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-04-05"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"public class GamificationStorage {","lastModifiedDate":"2023-04-05"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    private static final int EMPTY \u003d 0;","lastModifiedDate":"2023-04-09"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"    private static final int FIRST_INDEX \u003d 0;","lastModifiedDate":"2023-04-09"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    private final Storage storage;","lastModifiedDate":"2023-04-05"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    private final GamificationTokenizer tokenizer;","lastModifiedDate":"2023-04-05"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-05"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"     * Returns an instance of GamificationStorage.","lastModifiedDate":"2023-04-05"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"     * @throws StorageException If Storage class cannot be initialised successfully","lastModifiedDate":"2023-04-05"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-05"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    public GamificationStorage() throws StorageException {","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2023-04-05"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"        this.tokenizer \u003d new GamificationTokenizer();","lastModifiedDate":"2023-04-05"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-05"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-10"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"     * Cleans the gamification data file, in cases such as when the data file is corrupted.","lastModifiedDate":"2023-04-10"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"     * @throws StorageException If data file cannot be overwritten successfully","lastModifiedDate":"2023-04-10"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-10"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    public void cleanDataFile() throws StorageException {","lastModifiedDate":"2023-04-10"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        String emptyData \u003d \"\";","lastModifiedDate":"2023-04-10"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"        ArrayList\u003cString\u003e emptyDatas \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-10"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        emptyDatas.add(emptyData);","lastModifiedDate":"2023-04-10"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"        storage.saveData(emptyDatas, Storage.FILE_GAMIFICATION);","lastModifiedDate":"2023-04-10"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-10"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-10"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-05"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"     * Loads tokenized gamification data from storage and detokenizes them back into","lastModifiedDate":"2023-04-05"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"     * a GamificationData object.","lastModifiedDate":"2023-04-05"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"     * @return GamificationData object representing the previously saved gamification statistics","lastModifiedDate":"2023-04-05"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * @throws StorageException If data cannot be fetched from storage successfully","lastModifiedDate":"2023-04-05"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     * @throws TokenizerException If tokenized data cannot be detokenized into a GamificationData object","lastModifiedDate":"2023-04-05"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-05"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    public GamificationData loadData() throws StorageException, TokenizerException {","lastModifiedDate":"2023-04-05"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        if (storage.checkFileExists(Storage.FILE_GAMIFICATION)) {","lastModifiedDate":"2023-04-05"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"            ArrayList\u003cString\u003e tokenizedObjects \u003d storage.loadData(Storage.FILE_GAMIFICATION);","lastModifiedDate":"2023-04-05"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"            ArrayList\u003cGamificationData\u003e dataObjects \u003d tokenizer.detokenize(tokenizedObjects);","lastModifiedDate":"2023-04-05"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"            if (dataObjects.size() \u003d\u003d EMPTY) {","lastModifiedDate":"2023-04-09"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"                return new GamificationData();","lastModifiedDate":"2023-04-09"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"            return dataObjects.get(FIRST_INDEX);","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"        return new GamificationData();","lastModifiedDate":"2023-04-05"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-05"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-05"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"     * Stores the given GamificationData object in local storage.","lastModifiedDate":"2023-04-05"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     * GamificationData is first converted into a String before being written to storage.","lastModifiedDate":"2023-04-05"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"     * @param data GamificationData object representing the current gamification statistics we\u0027re saving","lastModifiedDate":"2023-04-05"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     * @throws StorageException If gamification statistics cannot be saved in storage successfully","lastModifiedDate":"2023-04-05"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-05"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    public void store(GamificationData data) throws StorageException {","lastModifiedDate":"2023-04-05"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"        ArrayList\u003cGamificationData\u003e objectsToStore \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-05"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"        objectsToStore.add(data);","lastModifiedDate":"2023-04-05"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"        ArrayList\u003cString\u003e tokenizedObjects \u003d tokenizer.tokenize(objectsToStore);","lastModifiedDate":"2023-04-05"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        storage.saveData(tokenizedObjects, Storage.FILE_GAMIFICATION);","lastModifiedDate":"2023-04-05"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-05"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-05"}],"authorContributionMap":{"haoyangw":70}},{"path":"src/main/java/wellnus/gamification/util/GamificationUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.gamification.util;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.GamificationManager;","lastModifiedDate":"2023-04-08"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-04-08"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":" * Provides helper methods for printing to the user\u0027s screen with the gamification feature\u0027s unique style.","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"public class GamificationUi extends TextUi {","lastModifiedDate":"2023-04-08"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"    public static final String SEPARATOR \u003d \"#\";","lastModifiedDate":"2023-04-08"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"    private static final int NUM_CHAR_IN_SEPARATOR \u003d 70;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"    private static final String CELEBRATE_LEVEL_UP_MESSAGE \u003d \"Congratulations! Level up\";","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"    private static final String GOODBYE_MESSAGE \u003d \"Thank you for using the gamification feature! Return anytime\";","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    private static final String LOGO \u003d","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"            \"    ______                _ _____            __  _           \" + System.lineSeparator()","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"            + \"   / ____/___ _____ ___  (_) __(_)________ _/ /_(_)___  ____ \" + System.lineSeparator()","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"            + \"  / / __/ __ `/ __ `__ \\\\/ / /_/ / ___/ __ `/ __/ / __ \\\\/ __ \\\\\" + System.lineSeparator()","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"            + \" / /_/ / /_/ / / / / / / / __/ / /__/ /_/ / /_/ / /_/ / / / /\" + System.lineSeparator()","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"            + \" \\\\____/\\\\__,_/_/ /_/ /_/_/_/ /_/\\\\___/\\\\__,_/\\\\__/_/\\\\____/_/ /_/ \";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    private static final int SHIFT_ONE_DECIMAL_DIVISOR \u003d 10;","lastModifiedDate":"2023-04-10"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final String WRONG_NUM_CHAR_IN_SEPARATOR_MESSAGE \u003d \"Wrong NUM_CHAR_IN_SEPARATOR value in \"","lastModifiedDate":"2023-04-08"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"            + \"GamificationUi\";","lastModifiedDate":"2023-04-08"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    private static final String XP_BAR_CHAR \u003d \"\u003d\";","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private static final String XP_BAR_HEAD \u003d \"\u003e\";","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private static final String XP_BOX_LEFT \u003d \"[\";","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private static final String XP_BOX_RIGHT \u003d \"]\";","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    private static final String XP_TILL_NEXT_LVL_MESSAGE \u003d \"%d more XP to Level %d\";","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"     * Returns a new instance of GamificationUi with custom cursorName and separator","lastModifiedDate":"2023-04-08"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"     * for our unique gamification style.","lastModifiedDate":"2023-04-08"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    public GamificationUi() {","lastModifiedDate":"2023-04-08"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"        super();","lastModifiedDate":"2023-04-08"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        super.setCursorName(GamificationManager.FEATURE_NAME);","lastModifiedDate":"2023-04-08"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"        super.setSeparator(SEPARATOR);","lastModifiedDate":"2023-04-08"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"        super.setSeparatorLength(NUM_CHAR_IN_SEPARATOR);","lastModifiedDate":"2023-04-08"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    private static void printGamificationSeparator() {","lastModifiedDate":"2023-04-08"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"        for (int i \u003d 0; i \u003c NUM_CHAR_IN_SEPARATOR; i +\u003d 1) {","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"            System.out.print(SEPARATOR);","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"     * Prints a congratulations message in the case where the user just levelled up.","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    public static void printCelebrateLevelUp() {","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"        printGamificationSeparator();","lastModifiedDate":"2023-04-08"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        printGamificationMessage(CELEBRATE_LEVEL_UP_MESSAGE);","lastModifiedDate":"2023-04-08"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        printGamificationSeparator();","lastModifiedDate":"2023-04-08"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"     * Prints a goodbye message when the user exits from the gamification feature.","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    public static void printGoodbye() {","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"        printGamificationSeparator();","lastModifiedDate":"2023-04-08"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"        printGamificationMessage(GOODBYE_MESSAGE);","lastModifiedDate":"2023-04-08"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"        printGamificationSeparator();","lastModifiedDate":"2023-04-08"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"     * Prints the gamification feature\u0027s unique logo.","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"    public static void printLogo() {","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"        printGamificationSeparator();","lastModifiedDate":"2023-04-08"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"        System.out.println(\"    Welcome to\");","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"        System.out.println(LOGO);","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"        printGamificationSeparator();","lastModifiedDate":"2023-04-08"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"     * Prints the given message with the gamification feature\u0027s unique style.","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"     * @param msg Message to display on the user\u0027s screen","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"    public static void printGamificationMessage(String msg) {","lastModifiedDate":"2023-04-08"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        assert NUM_CHAR_IN_SEPARATOR \u003e\u003d (msg.length() + 2) : WRONG_NUM_CHAR_IN_SEPARATOR_MESSAGE;","lastModifiedDate":"2023-04-08"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"        System.out.print(SEPARATOR);","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"        int howManySeparator \u003d 2;","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"        int minimalPadding \u003d 1;","lastModifiedDate":"2023-04-08"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"        // If assertion is not enabled in JVM, we still want to prevent crashing WellNUS++","lastModifiedDate":"2023-04-08"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"        int leftPadding \u003d NUM_CHAR_IN_SEPARATOR \u003c (msg.length() + 2) ? minimalPadding","lastModifiedDate":"2023-04-08"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"                : ((NUM_CHAR_IN_SEPARATOR - msg.length() - howManySeparator) / 2);","lastModifiedDate":"2023-04-08"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        System.out.print(\" \".repeat(leftPadding));","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        System.out.print(msg);","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"        // Likewise, if assertion is not enabled in JVM, we still want to prevent crashing WellNUS++","lastModifiedDate":"2023-04-08"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        int rightPadding \u003d NUM_CHAR_IN_SEPARATOR \u003c (msg.length() + 2) ? minimalPadding","lastModifiedDate":"2023-04-08"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"                : (NUM_CHAR_IN_SEPARATOR - msg.length() - howManySeparator - leftPadding);","lastModifiedDate":"2023-04-08"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"        System.out.print(\" \".repeat(rightPadding));","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"        System.out.println(SEPARATOR);","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"     * Prints the statistics for the user\u0027s XP points.","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"     * @param gamData GamificationData object containing the user\u0027s current XP data","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     * @param shouldPrintXpRemaining Whether to print the amount of XP remaining before the user levels up","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"    public static void printXpBar(GamificationData gamData, boolean shouldPrintXpRemaining) {","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"        int currentLevelXp \u003d gamData.getXpForCurrentLevelOnly();","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"        int currentLevelTotalXp \u003d currentLevelXp + gamData.getXpToReachNextLevel();","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        int xpLevel \u003d gamData.getXpLevel();","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"        int howManyXpBarSegments \u003d currentLevelXp * SHIFT_ONE_DECIMAL_DIVISOR / currentLevelTotalXp;","lastModifiedDate":"2023-04-10"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        int numSpacesInXpBar \u003d gamData.getXpToReachNextLevel() + 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"        String padding \u003d \" \".repeat(numSpacesInXpBar);","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"        String xpBoxBuilder \u003d XP_BOX_LEFT","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"                + XP_BAR_CHAR.repeat(howManyXpBarSegments) + XP_BAR_HEAD","lastModifiedDate":"2023-03-28"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"                + padding + XP_BOX_RIGHT;","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"        printGamificationSeparator();","lastModifiedDate":"2023-04-08"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"        printGamificationMessage(String.format(\"Current XP: Level %d %s\", xpLevel, xpBoxBuilder));","lastModifiedDate":"2023-04-08"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"        if (shouldPrintXpRemaining) {","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"            int nextLevel \u003d xpLevel + 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"            printGamificationMessage(String.format(XP_TILL_NEXT_LVL_MESSAGE,","lastModifiedDate":"2023-04-08"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"                    gamData.getXpToReachNextLevel(), nextLevel));","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"        printGamificationSeparator();","lastModifiedDate":"2023-04-08"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"haoyangw":120}},{"path":"src/main/java/wellnus/manager/Manager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.manager;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":" * Manager is the superclass for all WellNUS++ event drivers. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" * Each manager is in charge of \u0027managing\u0027 exactly one feature. \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * For example, \u003ci\u003ehb\u003c/i\u003e and \u003ci\u003ereflect\u003c/i\u003e. \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" * Each feature consists of multiple \u003ccode\u003eMainCommands\u003c/code\u003e,","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" * stored in \u003ccode\u003esupportedCommands\u003c/code\u003e \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" * Each manager may also support entering other features","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * via \u003ccode\u003eManager\u003c/code\u003e (event drivers),","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * stored in \u003ccode\u003esupportedManagers\u003c/code\u003e \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * The manager should run an event driver (infinite loop) and is in charge","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * of a Feature\u0027s input, output, \u0027business\u0027 logic and graceful termination.","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"public abstract class Manager {","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    protected CommandParser commandParser;","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"     * Construct a feature Manager to handle control flow for the given feature. \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"     * Internally, it sets up the following for convenience:","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eCommandParser\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eSupported Commands\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    public Manager() {","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        this.commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get the CommandParser tied to the Manager class.","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * @return CommandParser reference to this manager\u0027s instance of CommandParser","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    public CommandParser getCommandParser() {","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"        assert commandParser !\u003d null : \"commandParser should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"        return this.commandParser;","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     * Utility function to get the featureName this Manager is administering.","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * @return Name of the feature that this Manager handles","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    public abstract String getFeatureName();","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"     * Abstract function to ensure developers add in a getter for the feature\u0027s help description.","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     * This description will be shown when the user types in the help command. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"     * The description should be a brief overview of what the feature does. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"     * For example: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"     * \"reflect: Reflect is your go-to tool to get, save and reflect on our specially","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"     * curated list of questions to reflect on\"","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"     * @return String of the feature\u0027s help description","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    public abstract String getFeatureHelpDescription();","lastModifiedDate":"2023-03-23"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"     * runEventDriver is the entry point into a feature\u0027s driver loop. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"     * This should be the part that contains the infinite loop and switch cases,","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * but it is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     * Its implementation should include the following:","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eA way to terminate runEventDriver\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eA way to read input from console\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"    public abstract void runEventDriver() throws BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"haoyangw":10,"nichyjt":71}},{"path":"src/main/java/wellnus/reflection/command/FavoriteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":" * Get all the questions that are in the favorite list.","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"public class FavoriteCommand extends Command {","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"fav - Get the list of questions that have been added to \"","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"            + \"the favorite list.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: fav\";","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_KEYWORD \u003d \"fav\";","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Invalid command issued, expected \u0027fav\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_ARGUMENTS_MSG \u003d \"Invalid arguments given to \u0027fav\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027fav\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"fav command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be fav.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should be empty.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDEX_OUT_OF_BOUND_MSG \u003d \"Invalid index given, index is out of bound!\";","lastModifiedDate":"2023-04-06"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_FAV_LIST \u003d \"There is nothing in favorite list, \"","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"            + \"please get reflection questions first!\";","lastModifiedDate":"2023-04-06"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"ReflectFavCommandLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"     * Pass in a questionList object from ReflectionManager to access the list of favorite questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    public FavoriteCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: get","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this fav command is generated.","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     * Entry point to this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException invalidCommand) {","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"        if (!questionList.hasFavQuestions()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(EMPTY_FAV_LIST);","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"            String outputString \u003d questionList.getFavQuestions();","lastModifiedDate":"2023-03-27"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(outputString);","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, INDEX_OUT_OF_BOUND_MSG);","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(indexOutOfBoundsException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-09"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: fav","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload is empty","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_ARGUMENTS_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":145,"haoyangw":1}},{"path":"src/main/java/wellnus/reflection/command/GetCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionQuestion;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":" * Command to get a set of 5 random questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"public class GetCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"get - Get a list of questions to reflect on.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: get\";","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_KEYWORD \u003d \"get\";","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"ReflectGetCommandLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Invalid command issued, expected \u0027get\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_ARGUMENT_MSG \u003d \"Invalid arguments given to \u0027get\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027get\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"get command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be get.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should be empty.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final String NUM_SELECTED_QUESTIONS_ASSERTION \u003d \"The number of selected questions should be 5.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final String STORAGE_ERROR \u003d \"Error saving to storage!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    private static final int NUM_OF_RANDOM_QUESTIONS \u003d 5;","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    private Set\u003cInteger\u003e randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"     * Pass in a questionList object from ReflectionManager to access the list of questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    public GetCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: get","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-12"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-12"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this get command is generated.","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-12"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-12"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"     * Entry point to this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"     * Trigger the generation of five random questions and print to users.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-27"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException invalidCommand) {","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"            String outputString \u003d convertQuestionsToString();","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(outputString);","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-12"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: get","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload is empty","lastModifiedDate":"2023-03-12"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-12"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_ARGUMENT_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"     * Use questionList object to generate a set of 5 random integers(0-9) which will then be used as indexes to get","lastModifiedDate":"2023-03-25"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"     * a set of 5 random questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"     * Each number num: num \u003e\u003d 0 and num \u003c\u003d (maxSize - 1)","lastModifiedDate":"2023-03-11"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"     * @return The selected sets of random questions","lastModifiedDate":"2023-03-25"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"    public ArrayList\u003cReflectionQuestion\u003e getRandomQuestions() throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"        questionList.setRandomQuestionIndexes();","lastModifiedDate":"2023-03-27"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d questionList.getRandomQuestionIndexes();","lastModifiedDate":"2023-03-25"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e selectedQuestions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e questions \u003d questionList.getAllQuestions();","lastModifiedDate":"2023-03-25"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"        for (int index : this.randomQuestionIndexes) {","lastModifiedDate":"2023-03-25"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"            selectedQuestions.add(questions.get(index));","lastModifiedDate":"2023-03-25"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"        assert selectedQuestions.size() \u003d\u003d NUM_OF_RANDOM_QUESTIONS : NUM_SELECTED_QUESTIONS_ASSERTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"        return selectedQuestions;","lastModifiedDate":"2023-03-25"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"     * Convert all five questions to a single string to be printed.","lastModifiedDate":"2023-03-15"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"     * @return Single string that consists of all questions","lastModifiedDate":"2023-03-11"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"    private String convertQuestionsToString() throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e selectedQuestions \u003d getRandomQuestions();","lastModifiedDate":"2023-03-16"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"        String questionString \u003d EMPTY_STRING;","lastModifiedDate":"2023-03-25"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c selectedQuestions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-10"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"            questionString +\u003d ((i + ONE_OFFSET) + DOT + selectedQuestions.get(i).toString()","lastModifiedDate":"2023-03-18"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"                    + System.lineSeparator());","lastModifiedDate":"2023-03-14"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"        return questionString;","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":184,"haoyangw":1}},{"path":"src/main/java/wellnus/reflection/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" * Implementation of Reflection WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" * by Reflection and how to use each command.","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"help - Get help on what commands can be used \"","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"            + \"in Reflection WellNUS++\";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: help [command-to-check]\";","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String BAD_ARGUMENTS_MESSAGE \u003d \"Invalid arguments given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027help\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_INVALID_COMMAND_NOTE \u003d \"help command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String HELP_PREAMBLE \u003d \"Input `help` to see all available commands.\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"            + \"Input `help [command-to-check] to get usage help for a specific command.\" + LINE_SEPARATOR","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"            + \"Here are all the commands available for you!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private final ReflectUi reflectUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"     * Initialises a HelpCommand Object using the command arguments issued by the user.","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        this.reflectUi \u003d new ReflectUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        return this.reflectUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(FavoriteCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(GetCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HelpCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HomeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(LikeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        commandDescriptions.add(UnlikeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-04-04"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(PrevCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"        return commandDescriptions;","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"     * Prints either the general help message or the command-specific help message","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"     * based on the presence of a payload.","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        String commandToSearch \u003d argumentPayload.get(COMMAND_KEYWORD).trim().toLowerCase();","lastModifiedDate":"2023-04-01"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"        if (commandToSearch.equals(NO_FEATURE_KEYWORD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"            printGeneralHelpMessage();","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"        printSpecificHelpMessage(commandToSearch);","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"     * Lists all features available in Atomic Habit WellNUS++ and a short description.","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"    public void printGeneralHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d getCommandDescriptions();","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"        String outputMessage \u003d ReflectionManager.FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(HELP_PREAMBLE);","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator() + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c commandDescriptions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions.get(i) + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"        this.getTextUi().printOutputMessage(outputMessage);","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"     * Prints the help message for a given commandToSearch. \u003cbr/\u003e","lastModifiedDate":"2023-04-06"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"     * If the commandToSearch does not exist, help will print an unknown command","lastModifiedDate":"2023-04-06"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"     * error message.","lastModifiedDate":"2023-04-06"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"    public void printSpecificHelpMessage(String commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"        switch (commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"        case FavoriteCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(FavoriteCommand.COMMAND_DESCRIPTION, FavoriteCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"        case GetCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(GetCommand.COMMAND_DESCRIPTION, GetCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"        case HelpCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HelpCommand.COMMAND_DESCRIPTION, HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"        case HomeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HomeCommand.COMMAND_DESCRIPTION, HomeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"        case LikeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(LikeCommand.COMMAND_DESCRIPTION, LikeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"        case UnlikeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-04-04"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"            printUsageMessage(UnlikeCommand.COMMAND_DESCRIPTION, UnlikeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-04-04"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-04-04"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"        case PrevCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(PrevCommand.COMMAND_DESCRIPTION, PrevCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"        default:","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"            BadCommandException unknownCommand \u003d new BadCommandException(COMMAND_INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"            reflectUi.printErrorFor(unknownCommand, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-06"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"    private void printUsageMessage(String commandDescription, String usageString) {","lastModifiedDate":"2023-03-29"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"        String message \u003d commandDescription + System.lineSeparator() + usageString;","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"        reflectUi.printOutputMessage(message);","lastModifiedDate":"2023-04-06"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"     * Prints a brief description of all Reflection WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"    public void execute() {","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"            getTextUi().printErrorFor(exception, COMMAND_INVALID_COMMAND_NOTE);","lastModifiedDate":"2023-04-04"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-29"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(BAD_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-04-05"},{"lineNumber":174,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"     * Abstract method to ensure developers add in a command usage.","lastModifiedDate":"2023-03-28"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":181,"author":{"gitId":"BernardLesley"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-28"},{"lineNumber":182,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":183,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-28"},{"lineNumber":184,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":185,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":186,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":187,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":190,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":191,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-28"},{"lineNumber":192,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":193,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":194,"author":{"gitId":"BernardLesley"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-28"},{"lineNumber":195,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":196,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-28"},{"lineNumber":197,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":198,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":199,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-28"},{"lineNumber":200,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":201,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":202,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"wenxin-c":19,"BernardLesley":183}},{"path":"src/main/java/wellnus/reflection/command/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":" * Home command to return back to WellNUS++ main interface.","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"public class HomeCommand extends Command {","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"home - Return back to the main menu of WellNUS++.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: home\";","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"ReflectHomeCommandLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Invalid command issued, expected \u0027home\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_ARGUMENT_MSG \u003d \"Invalid arguments given to \u0027home\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027home\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"home command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should be empty.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_MESSAGE \u003d \"How do you feel after reflecting on yourself?\"","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"Hope you have gotten some takeaways from self reflection, see you again!!\";","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"     * Pass in a questionList object from ReflectionManager to manipulate history data.","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    public HomeCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: home","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this home command is generated.","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * Main entry point of this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     * Return back to WellNUS++ main interface and clear the questionList history data.","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-27"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException invalidCommand) {","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-16"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(HOME_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"        if (!questionList.getRandomQuestionIndexes().isEmpty()) {","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"            questionList.clearRandomQuestionIndexes();","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager.setIsExit(true);","lastModifiedDate":"2023-03-12"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-12"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: home","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload is empty","lastModifiedDate":"2023-03-12"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-12"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_ARGUMENT_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"        String payload \u003d commandMap.get(getCommandKeyword());","lastModifiedDate":"2023-03-30"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"        if (!payload.isBlank()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"wenxin-c":139,"haoyangw":1}},{"path":"src/main/java/wellnus/reflection/command/LikeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.ReflectionException;","lastModifiedDate":"2023-04-05"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.IndexMapper;","lastModifiedDate":"2023-04-02"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":" * Like command to add reflection questions into favorite list.","lastModifiedDate":"2023-04-02"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"public class LikeCommand extends Command {","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"like - Add a particular question to favorite list.\";","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: like (index)\";","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_KEYWORD \u003d \"like\";","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Invalid command issued, expected \u0027like\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_ARGUMENT_MSG \u003d \"Invalid arguments given to \u0027like\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"like command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String WRONG_INDEX_MSG \u003d \"Invalid index payload given to \u0027like\u0027, expected a valid integer!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String WRONG_INDEX_OUT_BOUND \u003d \"Invalid index payload given to \u0027like\u0027, index is out of range!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final String MISSING_SET_QUESTIONS \u003d \"A set of questions has not been gotten!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"Please try \u0027get\u0027 command to generate a set of questions \"","lastModifiedDate":"2023-04-09"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"            + \"before adding to favorite list!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final String TOKENIZER_ERROR \u003d \"Error tokenizing data!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private static final String STORAGE_ERROR \u003d \"Error saving to storage!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    private static final int UPPER_BOUND \u003d 5;","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    private static final int LOWER_BOUND \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"ReflectLikeCommandLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    private Set\u003cInteger\u003e randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"     * Pass in a questionList object from ReflectionManager to access the indexes of the previous set of questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    public LikeCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d questionList.getRandomQuestionIndexes();","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: like","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this like command is generated.","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: like","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload must be string which parse into integer ranges from 1 to 5","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-04-05"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_ARGUMENT_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * Entry point to this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * Check the validity of commands and add into favorite list.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-27"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(badCommandException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"            addFavQuestion(getArguments().get(COMMAND_KEYWORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-25"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, MISSING_SET_QUESTIONS);","lastModifiedDate":"2023-03-25"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(badCommandException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-09"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"        } catch (TokenizerException tokenizerException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, TOKENIZER_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(tokenizerException, TOKENIZER_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-04-05"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, WRONG_INDEX_MSG);","lastModifiedDate":"2023-04-05"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"            BadCommandException exception \u003d new BadCommandException(WRONG_INDEX_MSG);","lastModifiedDate":"2023-04-09"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(exception, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-09"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"        } catch (ReflectionException reflectionException) {","lastModifiedDate":"2023-04-05"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(reflectionException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-09"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"     * Add this index to favorite list and print the question to be added.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"     * A valid index will only be added(i.e. passed validateCommand()) if there is a set of questions gotten previously","lastModifiedDate":"2023-03-27"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"     * @param questionIndex User input of the index of question to be added to favorite list.","lastModifiedDate":"2023-03-25"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If there is not a set of question generated yet.","lastModifiedDate":"2023-03-25"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"     * @throws TokenizerException If there is error in tokenization of index","lastModifiedDate":"2023-04-02"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"     * @throws StorageException If there is error in storing the data","lastModifiedDate":"2023-04-02"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"    public void addFavQuestion(String questionIndex) throws BadCommandException, TokenizerException, StorageException,","lastModifiedDate":"2023-04-05"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"            NumberFormatException, ReflectionException {","lastModifiedDate":"2023-04-05"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"        int questionIndexInt \u003d Integer.parseInt(questionIndex);","lastModifiedDate":"2023-03-25"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"        if (questionIndexInt \u003e UPPER_BOUND || questionIndexInt \u003c LOWER_BOUND) {","lastModifiedDate":"2023-04-05"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"            throw new ReflectionException(WRONG_INDEX_OUT_BOUND);","lastModifiedDate":"2023-04-09"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"        if (!questionList.hasRandomQuestionIndexes()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(MISSING_SET_QUESTIONS);","lastModifiedDate":"2023-04-02"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-04-02"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"        IndexMapper indexMapper \u003d new IndexMapper(this.randomQuestionIndexes);","lastModifiedDate":"2023-04-02"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cInteger, Integer\u003e indexQuestionMap \u003d indexMapper.mapIndex();","lastModifiedDate":"2023-04-02"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"        int indexToAdd \u003d indexQuestionMap.get(questionIndexInt);","lastModifiedDate":"2023-03-25"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"        questionList.addFavListIndex(indexToAdd);","lastModifiedDate":"2023-03-27"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":183,"haoyangw":1}},{"path":"src/main/java/wellnus/reflection/command/PrevCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" * Get the previous set of question generated for review.","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"public class PrevCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"prev - Get the previously generated set of questions.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: prev\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"prev\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Invalid command issued, expected \u0027prev\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_ARGUMENT_MSG \u003d \"Invalid arguments given to \u0027prev\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_PAYLOAD \u003d \"Invalid payload given to \u0027prev\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"prev command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be prev.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should be empty.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String MISSING_SET_QUESTIONS \u003d \"A set of questions has not been gotten!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"Please try \u0027get\u0027 command to generate a set of questions \"","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"            + \"before reviewing them!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDEX_OUT_OF_BOUND_MSG \u003d \"Invalid index payload given to \u0027prev\u0027, \"","lastModifiedDate":"2023-04-09"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"            + \"index is out of bound!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"    private static final String PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"ReflectPrevCommandLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"     * Pass in a questionList object from ReflectionManager to access the indexes of the previous set of questions.","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"    public PrevCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"     * @return Command: prev","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"     * Get the name of the feature in which this prev command is generated.","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"     * \u003cli\u003eThe pair contains key: prev","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"     * \u003cli\u003ePayload must be empty","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_ARGUMENT_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_PAYLOAD);","lastModifiedDate":"2023-04-05"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        assert getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"        assert getArguments().get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"     * Entry point to this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"     * Check the validity of commands and add into favorite list.\u003cbr/\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"    public void execute() {","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-29"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"            UI.printErrorFor(badCommandException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-29"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"            getPrevSetQuestions();","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {","lastModifiedDate":"2023-03-29"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"            LOGGER.log(Level.WARNING, INDEX_OUT_OF_BOUND_MSG);","lastModifiedDate":"2023-03-29"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(indexOutOfBoundsException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-09"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"            LOGGER.log(Level.WARNING, MISSING_SET_QUESTIONS);","lastModifiedDate":"2023-03-29"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(badCommandException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-06"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"     * Get and print the previous set of question generated.","lastModifiedDate":"2023-03-29"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"    public void getPrevSetQuestions() throws BadCommandException {","lastModifiedDate":"2023-03-29"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"        if (!questionList.hasRandomQuestionIndexes()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(MISSING_SET_QUESTIONS);","lastModifiedDate":"2023-04-02"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-04-02"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"        String prevSetQuestions \u003d this.questionList.getPrevSetQuestions();","lastModifiedDate":"2023-03-29"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"        UI.printOutputMessage(prevSetQuestions);","lastModifiedDate":"2023-03-29"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"wenxin-c":15,"BernardLesley":139,"haoyangw":2}},{"path":"src/main/java/wellnus/reflection/command/UnlikeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-04-02"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-04-02"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-04-02"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-04-02"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-04-02"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-04-02"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.ReflectionException;","lastModifiedDate":"2023-04-04"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-04-02"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-04-02"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.IndexMapper;","lastModifiedDate":"2023-04-02"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-04-02"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-04-02"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-04-02"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-04-02"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":" * Unlike command to remove reflection questions from favorite questions.","lastModifiedDate":"2023-04-02"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-04-02"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"public class UnlikeCommand extends Command {","lastModifiedDate":"2023-04-02"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"unlike - Remove a particular question \"","lastModifiedDate":"2023-04-04"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"            + \"from favorite list.\";","lastModifiedDate":"2023-04-02"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: unlike (index)\";","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_KEYWORD \u003d \"unlike\";","lastModifiedDate":"2023-04-04"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-04-02"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Invalid command issued, expected \u0027unlike\u0027!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_ARGUMENT_MSG \u003d \"Invalid arguments given to \u0027unlike\u0027!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"unlike command \" + COMMAND_USAGE;","lastModifiedDate":"2023-04-05"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String WRONG_INDEX_MSG \u003d \"Invalid index payload given to \u0027unlike\u0027, expected a valid integer!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final String WRONG_INDEX_OUT_BOUND \u003d \"Invalid index payload given to \u0027unlike\u0027, \"","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"            + \"index is out of range!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_FAV_LIST_MSG \u003d \"The favorite list is empty, there is nothing to be removed.\";","lastModifiedDate":"2023-04-02"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final String TOKENIZER_ERROR \u003d \"Error tokenizing data!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private static final String STORAGE_ERROR \u003d \"Error saving to storage!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-04-02"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-04-02"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    private static final int LOWER_BOUND \u003d 1;","lastModifiedDate":"2023-04-02"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_LIST \u003d 0;","lastModifiedDate":"2023-04-02"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"ReflectUnlikeCommandLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-04-02"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    private Set\u003cInteger\u003e favQuestionIndexes;","lastModifiedDate":"2023-04-02"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-04-02"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"     * Pass in a questionList object from ReflectionManager to access the indexes of the liked questions.","lastModifiedDate":"2023-04-02"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-02"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-04-02"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-04-02"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    public UnlikeCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-04-02"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-04-02"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-04-02"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"        this.favQuestionIndexes \u003d questionList.getDataIndex().get(INDEX_ZERO);","lastModifiedDate":"2023-04-02"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-04-02"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-02"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: unlike","lastModifiedDate":"2023-04-02"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-04-02"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-04-02"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-04-02"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this unlike command is generated.","lastModifiedDate":"2023-04-02"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-02"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-04-02"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-04-02"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-04-02"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-04-02"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-04-02"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-04-02"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-02"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-04-02"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-04-02"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-04-02"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-04-02"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-04-02"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-04-02"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-02"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-04-02"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-04-02"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-04-02"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-04-02"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-04-02"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: like","lastModifiedDate":"2023-04-02"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload must be string which parse into integer ranges from 1 to 5","lastModifiedDate":"2023-04-02"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-04-02"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-02"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-04-02"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-04-02"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-04-02"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-04-04"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-04-02"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_ARGUMENT_MSG);","lastModifiedDate":"2023-04-05"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-04-02"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-04-02"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-04-02"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * Entry point to this command.\u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     * Check the validity of commands and add into favorite list.\u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-04-02"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-04-02"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-04-02"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-04-02"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-04-02"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-04-02"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(badCommandException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-02"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-04-02"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-04-02"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-04-02"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"            removeFavQuestion(getArguments().get(COMMAND_KEYWORD));","lastModifiedDate":"2023-04-02"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        } catch (TokenizerException tokenizerException) {","lastModifiedDate":"2023-04-02"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, TOKENIZER_ERROR);","lastModifiedDate":"2023-04-02"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(tokenizerException, TOKENIZER_ERROR);","lastModifiedDate":"2023-04-02"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-04-02"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-04-02"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-04-02"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-04-04"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, WRONG_INDEX_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"            BadCommandException exception \u003d new BadCommandException(WRONG_INDEX_MSG);","lastModifiedDate":"2023-04-09"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(exception, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-09"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"        } catch (ReflectionException reflectionException) {","lastModifiedDate":"2023-04-04"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(reflectionException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-09"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-04-04"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-04-04"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(badCommandException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-04-04"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-04-02"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"     * Remove the user input index from favorite list and print the question to be removed.\u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"     * A valid index will only be removed(i.e. passed validateCommand()) if the favorite list in not empty.","lastModifiedDate":"2023-04-02"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-02"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"     * @param questionIndex User input of the index of question to be removed from favorite list.","lastModifiedDate":"2023-04-02"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"     * @throws TokenizerException If there is error in tokenization of index","lastModifiedDate":"2023-04-02"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"     * @throws StorageException If there is error in storing the data","lastModifiedDate":"2023-04-02"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"     * @throws NumberFormatException If invalid input is given, expected a valid integer","lastModifiedDate":"2023-04-04"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"     * @throws ReflectionException If fav list is empty","lastModifiedDate":"2023-04-04"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-04-04"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"    public void removeFavQuestion(String questionIndex) throws TokenizerException, StorageException,","lastModifiedDate":"2023-04-04"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"            NumberFormatException, ReflectionException, BadCommandException {","lastModifiedDate":"2023-04-04"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"        int questionIndexInt \u003d Integer.parseInt(questionIndex);","lastModifiedDate":"2023-04-02"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"        if (this.favQuestionIndexes.size() \u003d\u003d EMPTY_LIST) {","lastModifiedDate":"2023-04-04"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(EMPTY_FAV_LIST_MSG);","lastModifiedDate":"2023-04-05"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-04-05"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"        if (questionIndexInt \u003e this.favQuestionIndexes.size() || questionIndexInt \u003c LOWER_BOUND) {","lastModifiedDate":"2023-04-04"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"            throw new ReflectionException(WRONG_INDEX_OUT_BOUND);","lastModifiedDate":"2023-04-09"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"        IndexMapper indexMapper \u003d new IndexMapper(this.favQuestionIndexes);","lastModifiedDate":"2023-04-02"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cInteger, Integer\u003e indexQuestionMap \u003d indexMapper.mapIndex();","lastModifiedDate":"2023-04-02"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"        int indexToRemove \u003d indexQuestionMap.get(questionIndexInt);","lastModifiedDate":"2023-04-02"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"        questionList.removeFavListIndex(indexToRemove);","lastModifiedDate":"2023-04-02"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-02"}],"authorContributionMap":{"wenxin-c":185,"haoyangw":1}},{"path":"src/main/java/wellnus/reflection/feature/IndexMapper.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-04-02"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-04-02"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-04-02"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":" * Map display index(1...n) onto a set of integers.","lastModifiedDate":"2023-04-04"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-04-02"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"public class IndexMapper {","lastModifiedDate":"2023-04-02"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-04-02"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"    private Set\u003cInteger\u003e targetedSet;","lastModifiedDate":"2023-04-02"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    public IndexMapper(Set\u003cInteger\u003e targetedSet) {","lastModifiedDate":"2023-04-02"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"        this.targetedSet \u003d targetedSet;","lastModifiedDate":"2023-04-02"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"     * The display index(integer) ranges from 1 to n.\u003cbr/\u003e","lastModifiedDate":"2023-04-04"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"     * This function maps display index to each integer in the set.","lastModifiedDate":"2023-04-04"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-02"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"     * @return indexMap The hashmap with display index as key and real integer as value.","lastModifiedDate":"2023-04-02"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    public HashMap\u003cInteger, Integer\u003e mapIndex() {","lastModifiedDate":"2023-04-02"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cInteger, Integer\u003e indexMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-04-02"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        int displayIndex \u003d INDEX_ONE;","lastModifiedDate":"2023-04-02"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"        for (int index : this.targetedSet) {","lastModifiedDate":"2023-04-02"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            indexMap.put(displayIndex, index);","lastModifiedDate":"2023-04-02"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"            displayIndex +\u003d INDEX_ONE;","lastModifiedDate":"2023-04-02"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-04-02"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"        return indexMap;","lastModifiedDate":"2023-04-02"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-02"}],"authorContributionMap":{"wenxin-c":31}},{"path":"src/main/java/wellnus/reflection/feature/QuestionList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.storage.ReflectionTokenizer;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.storage.Storage;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":" * This class contains the list of questions available in reflect feature,","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":" * and the list of indexes of favorite questions liked by the user.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":" * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":" * This class calls methods to load the list of indexes of favorite questions from data file,","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":" * and save the updated data into data file.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":" * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":" * It also stores the indexes of the previous set of questions(i.e. set of 5 random indexes)","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":" * which will then be used for other commands.","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"public class QuestionList {","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    // Questions are adopted from website: https://www.usa.edu/blog/self-discovery-questions/","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String[] QUESTIONS \u003d {","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"        \"What are three of my most cherished personal values?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"        \"What is my purpose in life?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        \"What is my personality type?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        \"Did I make time for myself this week?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        \"Am I making time for my social life?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"        \"What scares me the most right now?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"        \"What is something I find inspiring?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"        \"What is something that brings me joy?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        \"When is the last time I gave back to others?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        \"What matters to me most right now?\"","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    };","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    // TODO: To be changed/updated at later stages if question size increases","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    private static final int TOTAL_NUM_QUESTIONS \u003d 10;","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    private static final int RANDOM_NUMBER_UPPERBOUND \u003d 10;","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    private static final int INCREMENT_ONE \u003d 1;","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    private static final String TOTAL_NUM_QUESTION_ASSERTIONS \u003d \"The total number of questions is 10.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    private static final String ADD_FAV_SUCCESS_ONE \u003d \"You have added question: \";","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"    private static final String ADD_FAV_SUCCESS_TWO \u003d \" Into favorite list!!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    private static final String REMOVE_FAV_SUCCESS_ONE \u003d \"You have removed question: \";","lastModifiedDate":"2023-04-02"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    private static final String REMOVE_FAV_SUCCESS_TWO \u003d \" From favorite list!!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    private static final String DUPLICATE_LIKE \u003d \" Is already in the favorite list!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"    private static final String STORAGE_ERROR \u003d \"Error storing data!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"    private static final String TOKENIZER_ERROR \u003d \"Previous reflect data will not be restored.\";","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    private static final String FILE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    private static final String QUOTE \u003d \"\\\"\";","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"    private static final RandomNumberGenerator RANDOM_NUMBER_GENERATOR \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"            new RandomNumberGenerator(RANDOM_NUMBER_UPPERBOUND);","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"ReflectQuestionListLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean HAS_RANDOM_QUESTIONS \u003d true;","lastModifiedDate":"2023-03-27"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean NOT_HAS_RANDOM_QUESTIONS \u003d false;","lastModifiedDate":"2023-03-27"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean HAS_FAV_QUESTIONS \u003d true;","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean NOT_HAS_FAV_QUESTIONS \u003d false;","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"    private ArrayList\u003cReflectionQuestion\u003e questions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"    private Set\u003cInteger\u003e randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    private ArrayList\u003cSet\u003cInteger\u003e\u003e dataIndex;","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    private Storage storage;","lastModifiedDate":"2023-03-27"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    //@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"     * Constructor to create a SelfReflection object and set up the questions available.","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    public QuestionList() {","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"            storage \u003d new Storage();","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-31"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"        HashSet\u003cInteger\u003e setLike \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-31"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"        HashSet\u003cInteger\u003e setPrev \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-31"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex.add(setLike);","lastModifiedDate":"2023-03-31"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex.add(setPrev);","lastModifiedDate":"2023-03-31"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-27"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"            this.loadQuestionData();","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"        } catch (TokenizerException tokenizerException) {","lastModifiedDate":"2023-04-09"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"            overrideErrorReflectData();","lastModifiedDate":"2023-04-09"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, TOKENIZER_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(tokenizerException, TOKENIZER_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"        setUpQuestions();","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        assert questions.size() \u003d\u003d TOTAL_NUM_QUESTIONS : TOTAL_NUM_QUESTION_ASSERTIONS;","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"    private void overrideErrorReflectData() {","lastModifiedDate":"2023-04-09"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cString\u003e emptyTokenizedReflectIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-09"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"            storage.saveData(emptyTokenizedReflectIndexes , Storage.FILE_REFLECT);","lastModifiedDate":"2023-04-09"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-04-09"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-04-09"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"     * Load the pool of introspective questions available for users.","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"    public void setUpQuestions() {","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"        for (String question : QUESTIONS) {","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"            addReflectQuestion(question);","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"     * Create a ReflectionQuestion object for each question and add to questions list.","lastModifiedDate":"2023-03-27"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     * @param question String of question description.","lastModifiedDate":"2023-03-27"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"    public void addReflectQuestion(String question) {","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"        ReflectionQuestion newQuestion \u003d new ReflectionQuestion(question);","lastModifiedDate":"2023-03-27"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"        questions.add(newQuestion);","lastModifiedDate":"2023-03-27"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"    public void setDataIndex(ArrayList\u003cSet\u003cInteger\u003e\u003e dataIndex) {","lastModifiedDate":"2023-03-27"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex \u003d dataIndex;","lastModifiedDate":"2023-03-27"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"    public ArrayList\u003cSet\u003cInteger\u003e\u003e getDataIndex() {","lastModifiedDate":"2023-03-27"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        return dataIndex;","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"     * Tokenize the indexes of liked questions and store them in a data file.","lastModifiedDate":"2023-03-27"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"     * @throws TokenizerException If there is error during tokenization","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"     * @throws StorageException If data cannot be stored properly","lastModifiedDate":"2023-03-27"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"    public void storeQuestionData() throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cString\u003e tokenizedQuestionList \u003d reflectionTokenizer.tokenize(this.dataIndex);","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"        storage.saveData(tokenizedQuestionList, FILE_NAME);","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"     * Load a string of integers from data file and detokenize it into the set of indexes of favorite questions.","lastModifiedDate":"2023-03-27"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"     * @throws StorageException If there is error during tokenization","lastModifiedDate":"2023-03-27"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"     * @throws TokenizerException If there is error during detokenization","lastModifiedDate":"2023-03-27"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"    public void loadQuestionData() throws StorageException, TokenizerException {","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cString\u003e loadedQuestionList \u003d storage.loadData(FILE_NAME);","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e detokenizedQuestionList \u003d reflectionTokenizer.detokenize(loadedQuestionList);","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"        this.setDataIndex(detokenizedQuestionList);","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d this.dataIndex.get(INDEX_ONE);","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"     * Generate a set of 5 distinct random numbers from 0-9 which will then be used as indexes to","lastModifiedDate":"2023-03-27"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"     * select 5 random questions.","lastModifiedDate":"2023-03-27"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"    public void setRandomQuestionIndexes() throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d RANDOM_NUMBER_GENERATOR.generateRandomNumbers();","lastModifiedDate":"2023-03-25"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e updatedQuestionData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"        Set\u003cInteger\u003e favIndexList \u003d this.dataIndex.get(INDEX_ZERO);","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"        updatedQuestionData.add(favIndexList);","lastModifiedDate":"2023-03-28"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"        updatedQuestionData.add(this.randomQuestionIndexes);","lastModifiedDate":"2023-03-28"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"        this.setDataIndex(updatedQuestionData);","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"        this.storeQuestionData();","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"    public void setRandomQuestionIndexes(HashSet\u003cInteger\u003e randomQuestionIndexes) {","lastModifiedDate":"2023-03-25"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"    public void clearRandomQuestionIndexes() {","lastModifiedDate":"2023-03-25"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes.clear();","lastModifiedDate":"2023-03-25"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"    public Set\u003cInteger\u003e getRandomQuestionIndexes() {","lastModifiedDate":"2023-03-25"},{"lineNumber":187,"author":{"gitId":"wenxin-c"},"content":"        return this.randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":188,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":189,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":190,"author":{"gitId":"wenxin-c"},"content":"    public ArrayList\u003cReflectionQuestion\u003e getAllQuestions() {","lastModifiedDate":"2023-03-25"},{"lineNumber":191,"author":{"gitId":"wenxin-c"},"content":"        return questions;","lastModifiedDate":"2023-03-25"},{"lineNumber":192,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":193,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":194,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":195,"author":{"gitId":"wenxin-c"},"content":"     * Add the index of a liked question into fav list.\u003cbr/\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":196,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":197,"author":{"gitId":"wenxin-c"},"content":"     * A valid index will only be added(i.e. passed validateCommand())","lastModifiedDate":"2023-03-27"},{"lineNumber":198,"author":{"gitId":"wenxin-c"},"content":"     * if the question is not yet in the favorite list.\u003cbr/\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":199,"author":{"gitId":"wenxin-c"},"content":"     * Indexes of all favorite questions will be stored in data file every time a question is liked.","lastModifiedDate":"2023-03-27"},{"lineNumber":200,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":201,"author":{"gitId":"wenxin-c"},"content":"     * @param indexToAdd The index of the question liked by user","lastModifiedDate":"2023-03-27"},{"lineNumber":202,"author":{"gitId":"wenxin-c"},"content":"     * @throws StorageException If data fails to be stored properly.","lastModifiedDate":"2023-04-02"},{"lineNumber":203,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":204,"author":{"gitId":"wenxin-c"},"content":"    public void addFavListIndex(int indexToAdd) throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":205,"author":{"gitId":"wenxin-c"},"content":"        if (this.dataIndex.get(INDEX_ZERO).contains(indexToAdd)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":206,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(QUOTE + questions.get(indexToAdd).toString() + QUOTE + DUPLICATE_LIKE);","lastModifiedDate":"2023-04-09"},{"lineNumber":207,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":208,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":209,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex.get(INDEX_ZERO).add(indexToAdd);","lastModifiedDate":"2023-03-27"},{"lineNumber":210,"author":{"gitId":"wenxin-c"},"content":"        this.storeQuestionData();","lastModifiedDate":"2023-03-28"},{"lineNumber":211,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(ADD_FAV_SUCCESS_ONE + QUOTE + this.questions.get(indexToAdd).toString() + QUOTE","lastModifiedDate":"2023-04-09"},{"lineNumber":212,"author":{"gitId":"wenxin-c"},"content":"                + ADD_FAV_SUCCESS_TWO);","lastModifiedDate":"2023-04-09"},{"lineNumber":213,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":214,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":215,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-02"},{"lineNumber":216,"author":{"gitId":"wenxin-c"},"content":"     * Remove the index of a liked question from the fav list.\u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":217,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":218,"author":{"gitId":"wenxin-c"},"content":"     * Indexes of all favorite questions will be stored in data file every time a question is removed.","lastModifiedDate":"2023-04-02"},{"lineNumber":219,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-02"},{"lineNumber":220,"author":{"gitId":"wenxin-c"},"content":"     * @param indexToRemove The index of question to be removed from fav list.","lastModifiedDate":"2023-04-02"},{"lineNumber":221,"author":{"gitId":"wenxin-c"},"content":"     * @throws StorageException If data fails to be stored properly.","lastModifiedDate":"2023-04-02"},{"lineNumber":222,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-02"},{"lineNumber":223,"author":{"gitId":"wenxin-c"},"content":"    public void removeFavListIndex(int indexToRemove) throws StorageException {","lastModifiedDate":"2023-04-02"},{"lineNumber":224,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex.get(INDEX_ZERO).remove(indexToRemove);","lastModifiedDate":"2023-04-02"},{"lineNumber":225,"author":{"gitId":"wenxin-c"},"content":"        this.storeQuestionData();","lastModifiedDate":"2023-04-02"},{"lineNumber":226,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(REMOVE_FAV_SUCCESS_ONE + QUOTE + this.questions.get(indexToRemove).toString() + QUOTE","lastModifiedDate":"2023-04-09"},{"lineNumber":227,"author":{"gitId":"wenxin-c"},"content":"                + REMOVE_FAV_SUCCESS_TWO);","lastModifiedDate":"2023-04-02"},{"lineNumber":228,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":229,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":230,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":231,"author":{"gitId":"wenxin-c"},"content":"     * Check whether a set of random question has been generated by checking the size of the set of question indexes.","lastModifiedDate":"2023-03-27"},{"lineNumber":232,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":233,"author":{"gitId":"wenxin-c"},"content":"     * @return True for non-empty set and false for empty set","lastModifiedDate":"2023-03-27"},{"lineNumber":234,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":235,"author":{"gitId":"wenxin-c"},"content":"    public boolean hasRandomQuestionIndexes() {","lastModifiedDate":"2023-03-27"},{"lineNumber":236,"author":{"gitId":"wenxin-c"},"content":"        if (this.randomQuestionIndexes.isEmpty()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":237,"author":{"gitId":"wenxin-c"},"content":"            return NOT_HAS_RANDOM_QUESTIONS;","lastModifiedDate":"2023-03-27"},{"lineNumber":238,"author":{"gitId":"wenxin-c"},"content":"        } else {","lastModifiedDate":"2023-03-27"},{"lineNumber":239,"author":{"gitId":"wenxin-c"},"content":"            return HAS_RANDOM_QUESTIONS;","lastModifiedDate":"2023-03-27"},{"lineNumber":240,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":241,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":242,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":243,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":244,"author":{"gitId":"wenxin-c"},"content":"     * Check whether there is a set of favorite questions by checking the size of the set of favorite question indexes.","lastModifiedDate":"2023-03-27"},{"lineNumber":245,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":246,"author":{"gitId":"wenxin-c"},"content":"     * @return True for non-empty set and false for empty set","lastModifiedDate":"2023-03-27"},{"lineNumber":247,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":248,"author":{"gitId":"wenxin-c"},"content":"    public boolean hasFavQuestions() {","lastModifiedDate":"2023-03-27"},{"lineNumber":249,"author":{"gitId":"wenxin-c"},"content":"        if (this.dataIndex.get(INDEX_ZERO).isEmpty()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":250,"author":{"gitId":"wenxin-c"},"content":"            return NOT_HAS_FAV_QUESTIONS;","lastModifiedDate":"2023-03-27"},{"lineNumber":251,"author":{"gitId":"wenxin-c"},"content":"        } else {","lastModifiedDate":"2023-03-27"},{"lineNumber":252,"author":{"gitId":"wenxin-c"},"content":"            return HAS_FAV_QUESTIONS;","lastModifiedDate":"2023-03-27"},{"lineNumber":253,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":254,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":255,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":256,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":257,"author":{"gitId":"wenxin-c"},"content":"     * Get a string of all favorite questions based on the favorite question indexes.","lastModifiedDate":"2023-03-27"},{"lineNumber":258,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":259,"author":{"gitId":"wenxin-c"},"content":"     * @return String of favorite questions","lastModifiedDate":"2023-03-27"},{"lineNumber":260,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":261,"author":{"gitId":"wenxin-c"},"content":"    public String getFavQuestions() throws IndexOutOfBoundsException {","lastModifiedDate":"2023-03-28"},{"lineNumber":262,"author":{"gitId":"wenxin-c"},"content":"        String questionString \u003d EMPTY_STRING;","lastModifiedDate":"2023-03-27"},{"lineNumber":263,"author":{"gitId":"wenxin-c"},"content":"        int displayIndex \u003d INDEX_ONE;","lastModifiedDate":"2023-03-27"},{"lineNumber":264,"author":{"gitId":"wenxin-c"},"content":"        for (int questionIndex : this.dataIndex.get(INDEX_ZERO)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":265,"author":{"gitId":"wenxin-c"},"content":"            questionString +\u003d (displayIndex + DOT + this.questions.get(questionIndex).toString()","lastModifiedDate":"2023-03-27"},{"lineNumber":266,"author":{"gitId":"wenxin-c"},"content":"                    + System.lineSeparator());","lastModifiedDate":"2023-03-27"},{"lineNumber":267,"author":{"gitId":"wenxin-c"},"content":"            displayIndex +\u003d INCREMENT_ONE;","lastModifiedDate":"2023-03-27"},{"lineNumber":268,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":269,"author":{"gitId":"wenxin-c"},"content":"        return questionString;","lastModifiedDate":"2023-03-27"},{"lineNumber":270,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":271,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":272,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":273,"author":{"gitId":"wenxin-c"},"content":"     * Get the previously generated set of questions. *","lastModifiedDate":"2023-03-29"},{"lineNumber":274,"author":{"gitId":"wenxin-c"},"content":"     * @return String of previously generated questions */","lastModifiedDate":"2023-03-29"},{"lineNumber":275,"author":{"gitId":"wenxin-c"},"content":"    public String getPrevSetQuestions() throws IndexOutOfBoundsException {","lastModifiedDate":"2023-03-29"},{"lineNumber":276,"author":{"gitId":"wenxin-c"},"content":"        String questionString \u003d EMPTY_STRING;","lastModifiedDate":"2023-03-29"},{"lineNumber":277,"author":{"gitId":"wenxin-c"},"content":"        int displayIndex \u003d INDEX_ONE;","lastModifiedDate":"2023-03-29"},{"lineNumber":278,"author":{"gitId":"wenxin-c"},"content":"        for (int questionIndex : this.dataIndex.get(INDEX_ONE)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":279,"author":{"gitId":"wenxin-c"},"content":"            questionString +\u003d (displayIndex + DOT + this.questions.get(questionIndex).toString()","lastModifiedDate":"2023-03-29"},{"lineNumber":280,"author":{"gitId":"wenxin-c"},"content":"                    + System.lineSeparator());","lastModifiedDate":"2023-03-29"},{"lineNumber":281,"author":{"gitId":"wenxin-c"},"content":"            displayIndex +\u003d INCREMENT_ONE;","lastModifiedDate":"2023-03-29"},{"lineNumber":282,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":283,"author":{"gitId":"wenxin-c"},"content":"        return questionString;","lastModifiedDate":"2023-03-29"},{"lineNumber":284,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":285,"author":{"gitId":"wenxin-c"},"content":"    //@@author","lastModifiedDate":"2023-03-27"},{"lineNumber":286,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":287,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":283,"BernardLesley":2,"haoyangw":2}},{"path":"src/main/java/wellnus/reflection/feature/RandomNumberGenerator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.Random;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":" * Generate a set of 5 distinct random integers ranging from 0 to 9\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":" * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":" * This set of random numbers will be used as indexes to get a set of random questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"public class RandomNumberGenerator {","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final String NUM_SELECTED_QUESTIONS_ASSERTION \u003d \"The number of selected questions should be 5.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final int LOWER_BOUND \u003d 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final int NUM_OF_RANDOM_NUMBERS \u003d 5;","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private int upperBound;","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"     * Constructor with the upper limit of the random number as an argument.","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"     * @param upperBound The max value of the random number is (upperBound - 1)","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    public RandomNumberGenerator(int upperBound) {","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        this.upperBound \u003d upperBound;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"     * Generate a set of 5 random numbers.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"     * Each number num: num \u003e\u003d 0 and num \u003c\u003d (maxSize - 1)","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"     * @return Set of 5 random numbers","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    public Set\u003cInteger\u003e generateRandomNumbers() {","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        Set\u003cInteger\u003e randomNumbers \u003d new Random().ints(LOWER_BOUND, this.upperBound - ONE_OFFSET)","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"                .distinct()","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"                .limit(NUM_OF_RANDOM_NUMBERS)","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"                .boxed()","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        assert randomNumbers.size() \u003d\u003d NUM_OF_RANDOM_NUMBERS : NUM_SELECTED_QUESTIONS_ASSERTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        return randomNumbers;","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":46}},{"path":"src/main/java/wellnus/reflection/feature/ReflectUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":" * This section is to be updated with main UI class","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"public class ReflectUi extends TextUi {","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"    private static final String SEPARATOR \u003d \"\u003d\";","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"     * Call setSeparator() method inherited from TextUi superclass to re-define separator.","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    public ReflectUi() {","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"        setSeparator(SEPARATOR);","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private void printLogo(String logo) {","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(logo);","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    protected void printLogoWithSeparator(String logo) {","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        printSeparator();","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"        printLogo(logo);","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":28}},{"path":"src/main/java/wellnus/reflection/feature/ReflectionManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.command.FavoriteCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.command.GetCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.command.HelpCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.command.HomeCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.command.LikeCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.command.PrevCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.command.UnlikeCommand;","lastModifiedDate":"2023-04-02"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":" * The manager for self reflection section.\u003cbr/\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":" * This class oversees the command execution for self reflection section.","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"public class ReflectionManager extends Manager {","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    public static final String FEATURE_HELP_DESCRIPTION \u003d \"reflect - Self Reflection - Take some time to pause \"","lastModifiedDate":"2023-04-09"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"            + \"and reflect with our specially curated list of questions and reflection management tools.\";","lastModifiedDate":"2023-04-04"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    public static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"ReflectionManagerLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND \u003d \"get\";","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final String HELP_COMMAND \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND \u003d \"like\";","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final String UNLIKE_COMMAND \u003d \"unlike\";","lastModifiedDate":"2023-04-02"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final String FAV_COMMAND \u003d \"fav\";","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    private static final String PREV_COMMAND \u003d \"prev\";","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final String NO_ELEMENT_MESSAGE \u003d \"There is no new line of input, please key in inputs!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d \"Invalid command issued!\";","lastModifiedDate":"2023-04-05"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-04-05"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d","lastModifiedDate":"2023-04-05"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"            \"Supported commands in Self Reflection: \" + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"            + \"get command \" + GetCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"            + \"like command \" + LikeCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"            + \"unlike command \" + UnlikeCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"            + \"fav command \" + FavoriteCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"            + \"prev command \" + PrevCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-05"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"            + \"help command \" + HelpCommand.COMMAND_USAGE + LINE_SEPARATOR","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"            + \"home command \" + HomeCommand.COMMAND_USAGE;","lastModifiedDate":"2023-04-06"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_TYPE_ASSERTION \u003d \"Command type should have length greater than 0\";","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARGUMENT_PAYLOAD_ASSERTION \u003d \"Argument-payload pairs cannot be empty\";","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"    private static final String LOGO \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"            \"  #####                       ######                                           \\n\"","lastModifiedDate":"2023-03-31"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"                    + \" #     # ###### #      ###### #     # ###### ###### #      ######  ####  ##### \\n\"","lastModifiedDate":"2023-03-31"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"                    + \" #       #      #      #      #     # #      #      #      #      #    #   #   \\n\"","lastModifiedDate":"2023-03-31"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"                    + \"  #####  #####  #      #####  ######  #####  #####  #      #####  #        #   \\n\"","lastModifiedDate":"2023-03-31"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"                    + \"       # #      #      #      #   #   #      #      #      #      #        #   \\n\"","lastModifiedDate":"2023-03-31"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"                    + \" #     # #      #      #      #    #  #      #      #      #      #    #   #   \\n\"","lastModifiedDate":"2023-03-31"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"                    + \"  #####  ###### ###### #      #     # ###### #      ###### ######  ####    #   \\n\";","lastModifiedDate":"2023-03-31"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    private static final String GREETING_MESSAGE \u003d \"Welcome to WellNUS++ Self Reflection section :D\"","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"Feel very occupied and cannot find time to self reflect?\"","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"No worries, this section will give you the opportunity to reflect \"","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"            + \"and improve on yourself!!\";","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_COMMAND \u003d 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_EXIT_INITIAL \u003d false;","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    // This attribute should be set as static to avoid confusion if a new object is created.","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    // It means exit from self reflection back to main interface","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    private static boolean isExit;","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    private String commandType;","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"    private HashMap\u003cString, String\u003e argumentPayload;","lastModifiedDate":"2023-03-12"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     * Constructor to set initial isExit status to false and load the reflection questions.","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    public ReflectionManager() {","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"        setIsExit(IS_EXIT_INITIAL);","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        this.UI.setCursorName(FEATURE_NAME);","lastModifiedDate":"2023-04-03"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    public static void setIsExit(boolean status) {","lastModifiedDate":"2023-03-12"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        isExit \u003d status;","lastModifiedDate":"2023-03-12"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"    public static boolean getIsExit() {","lastModifiedDate":"2023-03-12"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"        return isExit;","lastModifiedDate":"2023-03-12"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    public HashMap\u003cString, String\u003e getArgumentPayload() {","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"        return argumentPayload;","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"        return commandType;","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     * Get Self Reflection feature name.","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-11"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"     * Abstract function to ensure developers add in a getter for the feature\u0027s help description.","lastModifiedDate":"2023-03-23"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     * This description will be shown when the user types in the help command. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"     * The description should be a brief overview of what the feature does. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"     * For example: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"     * \"reflect: Reflect is your go-to tool to get, save and reflect on our specially","lastModifiedDate":"2023-03-23"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     * curated list of questions to reflect on\"","lastModifiedDate":"2023-03-23"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     * @return String of the feature\u0027s help description","lastModifiedDate":"2023-03-23"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"    public String getFeatureHelpDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"        return FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"     * Set command argument and payload pairs from user inputs.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"     * This is to be used to generate command.","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     * @param inputCommand Read from user input","lastModifiedDate":"2023-03-11"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command was given","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"    public void setArgumentPayload(String inputCommand) throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"        argumentPayload \u003d commandParser.parseUserInput(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"        assert argumentPayload.size() \u003e EMPTY_COMMAND : ARGUMENT_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"     * Set the main command type to determine which command to create.","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"     * @param inputCommand Read from user input","lastModifiedDate":"2023-03-11"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command was given","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"    public void setCommandType(String inputCommand) throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"        commandType \u003d commandParser.getMainArgument(inputCommand);","lastModifiedDate":"2023-03-18"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        assert commandType.length() \u003e EMPTY_COMMAND : COMMAND_TYPE_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"    //@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"     * Print greeting logo and message.","lastModifiedDate":"2023-03-25"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"    public void greet() {","lastModifiedDate":"2023-03-25"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"        UI.printLogoWithSeparator(LOGO);","lastModifiedDate":"2023-03-25"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(GREETING_MESSAGE);","lastModifiedDate":"2023-03-25"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"    //@@author","lastModifiedDate":"2023-03-27"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"    //@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"     * Main entry point of self reflection section.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"     * It prints out greeting messages, listen to and execute user commands.","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-12"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"        setIsExit(false);","lastModifiedDate":"2023-03-12"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"        this.greet();","lastModifiedDate":"2023-03-25"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-12"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"            try {","lastModifiedDate":"2023-03-12"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"                String inputCommand \u003d UI.getCommand();","lastModifiedDate":"2023-03-12"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"                setCommandType(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"                setArgumentPayload(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"                executeCommands();","lastModifiedDate":"2023-03-14"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"            } catch (NoSuchElementException noSuchElement) {","lastModifiedDate":"2023-03-12"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"                LOGGER.log(Level.INFO, NO_ELEMENT_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"                UI.printErrorFor(noSuchElement, NO_ELEMENT_MESSAGE);","lastModifiedDate":"2023-03-12"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"            } catch (BadCommandException badCommand) {","lastModifiedDate":"2023-03-12"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"                LOGGER.log(Level.INFO, badCommand.getMessage());","lastModifiedDate":"2023-04-06"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"                UI.printErrorFor(badCommand, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-29"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"            }","lastModifiedDate":"2023-03-12"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"    //@@author","lastModifiedDate":"2023-03-25"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"     * Decide which command to create based on command type.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"     * Commands available at this moment are:","lastModifiedDate":"2023-03-10"},{"lineNumber":187,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eGet a random set of reflection questions\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":188,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eReturn back main interface\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":189,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":190,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command was given","lastModifiedDate":"2023-03-14"},{"lineNumber":191,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":192,"author":{"gitId":"wenxin-c"},"content":"    public void executeCommands() throws BadCommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":193,"author":{"gitId":"wenxin-c"},"content":"        assert commandType.length() \u003e EMPTY_COMMAND : COMMAND_TYPE_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":194,"author":{"gitId":"wenxin-c"},"content":"        switch (commandType) {","lastModifiedDate":"2023-03-10"},{"lineNumber":195,"author":{"gitId":"wenxin-c"},"content":"        case GET_COMMAND:","lastModifiedDate":"2023-03-10"},{"lineNumber":196,"author":{"gitId":"wenxin-c"},"content":"            GetCommand getQuestionsCmd \u003d new GetCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":197,"author":{"gitId":"wenxin-c"},"content":"            getQuestionsCmd.execute();","lastModifiedDate":"2023-03-10"},{"lineNumber":198,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-10"},{"lineNumber":199,"author":{"gitId":"BernardLesley"},"content":"        case HELP_COMMAND:","lastModifiedDate":"2023-03-29"},{"lineNumber":200,"author":{"gitId":"BernardLesley"},"content":"            HelpCommand helpCmd \u003d new HelpCommand(argumentPayload);","lastModifiedDate":"2023-03-29"},{"lineNumber":201,"author":{"gitId":"BernardLesley"},"content":"            helpCmd.execute();","lastModifiedDate":"2023-03-29"},{"lineNumber":202,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":203,"author":{"gitId":"wenxin-c"},"content":"        case HOME_COMMAND:","lastModifiedDate":"2023-03-16"},{"lineNumber":204,"author":{"gitId":"wenxin-c"},"content":"            HomeCommand returnCmd \u003d new HomeCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":205,"author":{"gitId":"wenxin-c"},"content":"            returnCmd.execute();","lastModifiedDate":"2023-03-10"},{"lineNumber":206,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-10"},{"lineNumber":207,"author":{"gitId":"wenxin-c"},"content":"        case LIKE_COMMAND:","lastModifiedDate":"2023-03-25"},{"lineNumber":208,"author":{"gitId":"wenxin-c"},"content":"            LikeCommand likeCmd \u003d new LikeCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":209,"author":{"gitId":"wenxin-c"},"content":"            likeCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":210,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-25"},{"lineNumber":211,"author":{"gitId":"wenxin-c"},"content":"        case UNLIKE_COMMAND:","lastModifiedDate":"2023-04-02"},{"lineNumber":212,"author":{"gitId":"wenxin-c"},"content":"            UnlikeCommand unlikeCmd \u003d new UnlikeCommand(argumentPayload, questionList);","lastModifiedDate":"2023-04-02"},{"lineNumber":213,"author":{"gitId":"wenxin-c"},"content":"            unlikeCmd.execute();","lastModifiedDate":"2023-04-02"},{"lineNumber":214,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-04-02"},{"lineNumber":215,"author":{"gitId":"wenxin-c"},"content":"        case FAV_COMMAND:","lastModifiedDate":"2023-03-25"},{"lineNumber":216,"author":{"gitId":"wenxin-c"},"content":"            FavoriteCommand favCmd \u003d new FavoriteCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":217,"author":{"gitId":"wenxin-c"},"content":"            favCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":218,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-25"},{"lineNumber":219,"author":{"gitId":"BernardLesley"},"content":"        case PREV_COMMAND:","lastModifiedDate":"2023-03-29"},{"lineNumber":220,"author":{"gitId":"BernardLesley"},"content":"            PrevCommand prevCmd \u003d new PrevCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-29"},{"lineNumber":221,"author":{"gitId":"BernardLesley"},"content":"            prevCmd.execute();","lastModifiedDate":"2023-03-29"},{"lineNumber":222,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":223,"author":{"gitId":"wenxin-c"},"content":"        default:","lastModifiedDate":"2023-03-10"},{"lineNumber":224,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":225,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":226,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":227,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":228,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":198,"BernardLesley":16,"haoyangw":2,"nichyjt":12}},{"path":"src/main/java/wellnus/reflection/feature/ReflectionQuestion.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":" * ReflectQuestion class is used to create reflect question objects.","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"public class ReflectionQuestion {","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_QUESTION \u003d 0;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_QUESTION_MSG \u003d \"Question description cannot be empty.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"    private String questionDescription;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"     * Constructor to create a ReflectionQuestion object and initialise question description.","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"     * @param questionDescription The reflection question description","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    public ReflectionQuestion(String questionDescription) {","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"        assert questionDescription.length() \u003e EMPTY_QUESTION : EMPTY_QUESTION_MSG;","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"        this.questionDescription \u003d questionDescription;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"     * Convert each reflect question to a string to be printed.","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"     * @return Question description with its status","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    public String toString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"        return questionDescription;","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":32}},{"path":"src/main/java/wellnus/storage/AtomicHabitTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import java.util.LinkedHashMap;","lastModifiedDate":"2023-04-09"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":" * Class to tokenize and detokenize the AtomicHabit list. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"public class AtomicHabitTokenizer implements Tokenizer\u003cAtomicHabit\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    private static final String DESCRIPTION_KEY \u003d \"description\";","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"    private static final String COUNT_KEY \u003d \"count\";","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    private static final String PARAMETER_DELIMITER \u003d \"--\";","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    private static final String DETOKENIZE_ERROR_MESSAGE \u003d \"Invalid habit data \u0027%s\u0027 found in storage!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_FIRST \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    private static final int NUM_ATOMIC_HABIT_PARAMETER \u003d 2;","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String REGEX_NUMBER_AND_SYMBOL_ONLY_PATTERN \u003d \"^[\\\\d\\\\p{Punct}\\\\p{S}]*$\";","lastModifiedDate":"2023-04-09"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"    private String[] splitTokenizedHabitIntoParameter(String tokenizedHabit) {","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"        tokenizedHabit \u003d tokenizedHabit.strip();","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"        int noLimit \u003d -1;","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"        String[] rawStrings \u003d tokenizedHabit.split(PARAMETER_DELIMITER, noLimit);","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"        rawStrings \u003d Arrays.copyOfRange(rawStrings, INDEX_FIRST, rawStrings.length);","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"        String[] cleanString \u003d new String[rawStrings.length];","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c rawStrings.length; ++i) {","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"            String currentCommand \u003d rawStrings[i];","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"            currentCommand \u003d currentCommand.strip();","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"            cleanString[i] \u003d currentCommand;","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"        return cleanString;","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"    private String convertToBase(String habitName) {","lastModifiedDate":"2023-04-07"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"        return habitName.toLowerCase().replaceAll(\"\\\\s\", \"\");","lastModifiedDate":"2023-04-07"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cAtomicHabit\u003e removeDuplicatedHabits(ArrayList\u003cAtomicHabit\u003e uncheckedAtomicHabits) {","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, AtomicHabit\u003e uniqueHabits \u003d new LinkedHashMap\u003c\u003e();","lastModifiedDate":"2023-04-09"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"        for (AtomicHabit habit : uncheckedAtomicHabits) {","lastModifiedDate":"2023-04-07"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"            String description \u003d convertToBase(habit.getDescription());","lastModifiedDate":"2023-04-07"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"            if (!uniqueHabits.containsKey(description)) {","lastModifiedDate":"2023-04-07"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"                uniqueHabits.put(description, habit);","lastModifiedDate":"2023-04-07"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"            }","lastModifiedDate":"2023-04-07"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-04-07"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        return new ArrayList\u003c\u003e(uniqueHabits.values());","lastModifiedDate":"2023-04-09"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-04-07"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-07"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"    private AtomicHabit parseTokenizedHabit(String tokenizedHabit) throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e parameterHashMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        String[] parameterStrings \u003d splitTokenizedHabitIntoParameter(tokenizedHabit);","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"            for (String parameterString : parameterStrings) {","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"                int i \u003d parameterString.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"                String parameterKey \u003d parameterString.substring(INDEX_ZERO, i);","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"                String parameterValue \u003d parameterString.substring(i).trim();","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"                parameterHashMap.put(parameterKey, parameterValue);","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"        } catch (StringIndexOutOfBoundsException stringIndexOutOfBoundsException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, tokenizedHabit));","lastModifiedDate":"2023-04-09"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"        if ((!parameterHashMap.containsKey(DESCRIPTION_KEY) || !parameterHashMap.containsKey(COUNT_KEY))","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"                \u0026\u0026 !parameterHashMap.isEmpty()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, tokenizedHabit));","lastModifiedDate":"2023-04-09"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"        if (parameterHashMap.size() !\u003d NUM_ATOMIC_HABIT_PARAMETER) {","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, tokenizedHabit));","lastModifiedDate":"2023-04-09"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"        String description \u003d parameterHashMap.get(DESCRIPTION_KEY);","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"        String countString \u003d parameterHashMap.get(COUNT_KEY);","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"        if (description.matches(REGEX_NUMBER_AND_SYMBOL_ONLY_PATTERN)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, tokenizedHabit));","lastModifiedDate":"2023-04-09"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"            int count \u003d Integer.parseInt(countString);","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"            return new AtomicHabit(description, count);","lastModifiedDate":"2023-04-09"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, tokenizedHabit));","lastModifiedDate":"2023-04-09"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"     * Tokenize List of Atomic Habits to be saved as ArrayList of Strings. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"     * Each habit will be tokenized with the following format:","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"     * --description [description of habit] --count [count of habit]. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"     * @param habitsToTokenize List of atomic habits to be tokenized as ArrayList of strings.","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"     * @return ArrayList of Strings representing the tokenized habits that we can write to storage.","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"    public ArrayList\u003cString\u003e tokenize(ArrayList\u003cAtomicHabit\u003e habitsToTokenize) {","lastModifiedDate":"2023-03-27"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e tokenizedHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"        for (AtomicHabit habit : habitsToTokenize) {","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"            String tokenizedHabit \u003d PARAMETER_DELIMITER + DESCRIPTION_KEY","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"                    + \" \" + habit.getDescription()","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"                    + \" \" + PARAMETER_DELIMITER + COUNT_KEY","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"                    + \" \" + habit.getCount();","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"            tokenizedHabits.add(tokenizedHabit);","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"        return tokenizedHabits;","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"     * Convert strings of tokenized AtomicHabit into ArrayList of AtomicHabit. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"     * This method can be called in the constructor of AtomicHabitManager to detokenize.","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"     * ArrayList of atomic habits from storage. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"     * @param tokenizedAtomicHabits List of tokenized atomic habit strings from the storage.","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"     * @return ArrayList containing all the atomic habit saved in the storage.","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"     * @throws TokenizerException When the data can\u0027t be detokenized.","lastModifiedDate":"2023-03-22"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"    public ArrayList\u003cAtomicHabit\u003e detokenize(ArrayList\u003cString\u003e tokenizedAtomicHabits) throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e detokenizedAtomicHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        for (String tokenizedString : tokenizedAtomicHabits) {","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"            if (!tokenizedString.isBlank()) {","lastModifiedDate":"2023-03-31"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"                AtomicHabit parsedHabit \u003d parseTokenizedHabit(tokenizedString);","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"                detokenizedAtomicHabits.add(parsedHabit);","lastModifiedDate":"2023-03-21"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"        detokenizedAtomicHabits \u003d removeDuplicatedHabits(detokenizedAtomicHabits);","lastModifiedDate":"2023-04-09"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"        return detokenizedAtomicHabits;","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":122,"haoyangw":2,"YongbinWang":2}},{"path":"src/main/java/wellnus/storage/GamificationTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.storage;","lastModifiedDate":"2023-04-09"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-04-05"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-04-05"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationData;","lastModifiedDate":"2023-04-09"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-04-05"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":" * Handles the conversion of GamificationData objects -\u003e String and vice versa to allow","lastModifiedDate":"2023-04-05"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" * storage and retrieval of gamification statistics.","lastModifiedDate":"2023-04-05"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-04-05"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"public class GamificationTokenizer implements Tokenizer\u003cGamificationData\u003e {","lastModifiedDate":"2023-04-05"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_STORED_DATA_MESSAGE \u003d \"Invalid gamification data \u0027%s\u0027 found in storage!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-05"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"     * Converts the attributes of the \u003ccode\u003eGamificationManager\u003c/code\u003e into a String representation to be","lastModifiedDate":"2023-04-05"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"     * saved to storage.","lastModifiedDate":"2023-04-05"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-04-05"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"     * @param dataObjects List of GamificationData Objects we want to convert into a String representation","lastModifiedDate":"2023-04-05"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"     * @return ArrayList of Strings representing the GamificationData objects that we can write to storage","lastModifiedDate":"2023-04-05"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-05"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-04-05"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    public ArrayList\u003cString\u003e tokenize(ArrayList\u003cGamificationData\u003e dataObjects) {","lastModifiedDate":"2023-04-05"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"        ArrayList\u003cString\u003e tokenizedObjects \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-05"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"        for (GamificationData data : dataObjects) {","lastModifiedDate":"2023-04-05"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"            int xp \u003d data.getTotalXp();","lastModifiedDate":"2023-04-05"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"            String tokenizedObject \u003d \"\" + xp;","lastModifiedDate":"2023-04-05"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"            tokenizedObjects.add(tokenizedObject);","lastModifiedDate":"2023-04-05"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"        return tokenizedObjects;","lastModifiedDate":"2023-04-05"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-05"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-05"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-05"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"     * Converts the String representation of the \u003ccode\u003eGamificationManager\u003c/code\u003e\u0027s state back into an","lastModifiedDate":"2023-04-05"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"     * \u003ccode\u003eArrayList\u003c/code\u003e of GamificationData that can be used to restore the gamification feature\u0027s","lastModifiedDate":"2023-04-05"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"     * previous state.","lastModifiedDate":"2023-04-05"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-04-05"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"     * @param tokenizedDataObjects String representation of the GamificationData Objects whose state we want to restore","lastModifiedDate":"2023-04-05"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"     * @return ArrayList containing all the gamification data from the gamification feature\u0027s previously saved state","lastModifiedDate":"2023-04-05"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"     * @throws TokenizerException If detokenizing fails and stored gamification statistics cannot be restored","lastModifiedDate":"2023-04-05"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-05"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-04-05"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    public ArrayList\u003cGamificationData\u003e detokenize(ArrayList\u003cString\u003e tokenizedDataObjects)","lastModifiedDate":"2023-04-05"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"            throws TokenizerException {","lastModifiedDate":"2023-04-05"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"        ArrayList\u003cGamificationData\u003e dataObjects \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-04-05"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"        for (String tokenizedDataObject : tokenizedDataObjects) {","lastModifiedDate":"2023-04-05"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"            // Data file contains blank lines","lastModifiedDate":"2023-04-09"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"            if (tokenizedDataObject.isBlank()) {","lastModifiedDate":"2023-04-09"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"                // Ignore the blank line and check other lines in the data file","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"                continue;","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-04-09"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"            int totalXp;","lastModifiedDate":"2023-04-05"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"            try {","lastModifiedDate":"2023-04-05"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"                totalXp \u003d Integer.parseInt(tokenizedDataObject.trim());","lastModifiedDate":"2023-04-05"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"            } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-04-05"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"                throw new TokenizerException(String.format(INVALID_STORED_DATA_MESSAGE, tokenizedDataObject));","lastModifiedDate":"2023-04-05"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-04-05"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"            GamificationData data \u003d new GamificationData(totalXp);","lastModifiedDate":"2023-04-05"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"            dataObjects.add(data);","lastModifiedDate":"2023-04-05"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-04-05"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"        return dataObjects;","lastModifiedDate":"2023-04-05"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-04-05"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-04-05"}],"authorContributionMap":{"haoyangw":62}},{"path":"src/main/java/wellnus/storage/ReflectionTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":" * Class to tokenize and detokenize the Index for \u0027like\u0027 and \u0027prev\u0027 command in Reflection Feature. \u003cbr\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"public class ReflectionTokenizer implements Tokenizer\u003cSet\u003cInteger\u003e\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"    private static final String INDEX_DELIMITER \u003d \",\";","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"    private static final int LIKE_INDEX \u003d 0;","lastModifiedDate":"2023-04-02"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    private static final int PREV_INDEX \u003d 1;","lastModifiedDate":"2023-04-02"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_NINE \u003d 9;","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    private static final int NUM_PREV_INDEX \u003d 5;","lastModifiedDate":"2023-04-02"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final int TOKENIZER_INDEX_ARRAYLIST_SIZE \u003d 2;","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    private static final String LIKE_KEY \u003d \"like\";","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String PREV_KEY \u003d \"prev\";","lastModifiedDate":"2023-04-02"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    private static final String COLON_CHARACTER \u003d \":\";","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"    private static final int NO_LIMIT \u003d -1;","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"    private static final String DETOKENIZE_ERROR_MESSAGE \u003d \"Invalid reflect %s data \u0027%s\u0027 found in storage!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"    private String getTokenizedIndexes(String key, Set\u003cInteger\u003e indexesToTokenize) {","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedIndexes \u003d key + COLON_CHARACTER;","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"        for (int index : indexesToTokenize) {","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"            tokenizedIndexes \u003d tokenizedIndexes + index + INDEX_DELIMITER;","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"        if (indexesToTokenize.size() !\u003d INDEX_ZERO) {","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"            tokenizedIndexes \u003d tokenizedIndexes.substring(INDEX_ZERO, tokenizedIndexes.length() - INDEX_ONE);","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"        return tokenizedIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"    private String splitParameter(String tokenizedRawString, String categoryKey) throws TokenizerException {","lastModifiedDate":"2023-04-09"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"        int indexSplit \u003d tokenizedRawString.indexOf(COLON_CHARACTER);","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"        String parameter;","lastModifiedDate":"2023-04-02"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedIndexes;","lastModifiedDate":"2023-04-02"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"            parameter \u003d tokenizedRawString.substring(INDEX_ZERO, indexSplit);","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"            if (!parameter.equals(categoryKey)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"                throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, categoryKey, tokenizedRawString));","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"            tokenizedIndexes \u003d tokenizedRawString.substring(indexSplit + INDEX_ONE).trim();","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"        } catch (StringIndexOutOfBoundsException stringIndexOutOfBoundsException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, categoryKey, tokenizedRawString));","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        return tokenizedIndexes;","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"    private String[] splitTokenizedIndex(String tokenizedIndexes) {","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        tokenizedIndexes \u003d tokenizedIndexes.strip();","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        String[] inputStrings \u003d tokenizedIndexes.split(INDEX_DELIMITER, NO_LIMIT);","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"        String[] outputStrings \u003d new String[inputStrings.length];","lastModifiedDate":"2023-03-22"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c inputStrings.length; ++i) {","lastModifiedDate":"2023-03-22"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"            String currentCommand \u003d inputStrings[i];","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"            currentCommand \u003d currentCommand.strip();","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"            outputStrings[i] \u003d currentCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"        return outputStrings;","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"    private Set\u003cInteger\u003e validateTokenizedIndexFormat(ArrayList\u003cString\u003e tokenizedIndex,","lastModifiedDate":"2023-04-02"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"                                                      int categoryIndex, String categoryKey) throws TokenizerException {","lastModifiedDate":"2023-04-09"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e validatedSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-04-02"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedIndexesByCategory \u003d tokenizedIndex.get(categoryIndex);","lastModifiedDate":"2023-04-02"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"        if (!tokenizedIndexesByCategory.isBlank()) {","lastModifiedDate":"2023-04-02"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"            String rawIndex \u003d splitParameter(tokenizedIndexesByCategory, categoryKey);","lastModifiedDate":"2023-04-02"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"            validatedSet \u003d getSet(rawIndex, categoryKey);","lastModifiedDate":"2023-04-02"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-04-02"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"        return validatedSet;","lastModifiedDate":"2023-04-02"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"    private Set\u003cInteger\u003e getSet(String indexToSplit, String categoryKey) throws TokenizerException {","lastModifiedDate":"2023-04-02"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e outputIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        if (indexToSplit.isBlank()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"            return outputIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"        String[] splittedString \u003d splitTokenizedIndex(indexToSplit);","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"            for (String indexString : splittedString) {","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"                int index \u003d Integer.parseInt(indexString);","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"                if (index \u003c INDEX_ZERO || index \u003e INDEX_NINE) {","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"                    throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, categoryKey, indexToSplit));","lastModifiedDate":"2023-04-09"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"                }","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"                outputIndexes.add(index);","lastModifiedDate":"2023-03-22"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, categoryKey, indexToSplit));","lastModifiedDate":"2023-04-09"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"        if (categoryKey.equals(PREV_KEY) \u0026\u0026 outputIndexes.size() !\u003d NUM_PREV_INDEX) {","lastModifiedDate":"2023-04-02"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(String.format(DETOKENIZE_ERROR_MESSAGE, categoryKey, indexToSplit));","lastModifiedDate":"2023-04-09"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-04-02"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"        return outputIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"     * Tokenize ArrayList of Set of Integers into strings that can be stored. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"     * ArrayList contains 2 Set of Integers, which corresponds for set of like indexes for the first entry","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"     *      and set of prev indexes for second entry.\u003cbr\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"     * Each index will be tokenized with the following format:","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"     * like:[list of comma separated index] \u003cbr\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"     * prev:[list of comma separated index] \u003cbr\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"     * @param arrayIndexToTokenize ArrayList that contains set of like indexes for the first entry","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"     *      and set of prev indexes for the second entry. \u003cbr\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"     * @return ArrayList of Strings representing the tokenized like indexes and prev indexes that we can","lastModifiedDate":"2023-04-02"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"     *      write to storage.","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"    public ArrayList\u003cString\u003e tokenize(ArrayList\u003cSet\u003cInteger\u003e\u003e arrayIndexToTokenize) {","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e tokenizedIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e likeIndexToTokenize \u003d arrayIndexToTokenize.get(INDEX_ZERO);","lastModifiedDate":"2023-03-21"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e prevIndexToTokenize \u003d arrayIndexToTokenize.get(INDEX_ONE);","lastModifiedDate":"2023-04-02"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedLike \u003d getTokenizedIndexes(LIKE_KEY, likeIndexToTokenize);","lastModifiedDate":"2023-03-22"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedPrev \u003d getTokenizedIndexes(PREV_KEY, prevIndexToTokenize);","lastModifiedDate":"2023-04-02"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"        tokenizedIndexes.add(tokenizedLike);","lastModifiedDate":"2023-03-22"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"        tokenizedIndexes.add(tokenizedPrev);","lastModifiedDate":"2023-04-02"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"        return tokenizedIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"     * Convert strings of tokenized Indexes into ArrayList that contains set of like indexes for the first entry","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"     *      and set of prev indexes for the second entry. \u003cbr\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"     * This method can be called in the constructor of ReflectionManager to detokenize.","lastModifiedDate":"2023-03-21"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"     * ArrayList of indexes from storage. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"     * @param tokenizedIndex List of tokenized like and prev indexes from the storage.","lastModifiedDate":"2023-04-02"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"     * @return ArrayList that contains set of like indexes for the first entry","lastModifiedDate":"2023-03-21"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"     *      and set of prev indexes for the second entry \u003cbr\u003e","lastModifiedDate":"2023-04-02"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"     * @throws TokenizerException when the data can\u0027t be detokenized.","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"    public ArrayList\u003cSet\u003cInteger\u003e\u003e detokenize(ArrayList\u003cString\u003e tokenizedIndex) throws TokenizerException {","lastModifiedDate":"2023-04-08"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e detokenizedIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e detokenizedLike \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e detokenizedPrev \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-04-02"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"        if (tokenizedIndex.size() \u003d\u003d TOKENIZER_INDEX_ARRAYLIST_SIZE) {","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"            detokenizedLike \u003d validateTokenizedIndexFormat(tokenizedIndex, LIKE_INDEX, LIKE_KEY);","lastModifiedDate":"2023-04-02"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"            detokenizedPrev \u003d validateTokenizedIndexFormat(tokenizedIndex, PREV_INDEX, PREV_KEY);","lastModifiedDate":"2023-04-02"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"        detokenizedIndexes.add(detokenizedLike);","lastModifiedDate":"2023-03-22"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"        detokenizedIndexes.add(detokenizedPrev);","lastModifiedDate":"2023-04-02"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"        return detokenizedIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":146,"haoyangw":1}},{"path":"src/main/java/wellnus/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.io.File;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * Storage is the common interface for all Features to save and load data from. \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * To save data, the manager should call \u003ccode\u003esaveData()\u003c/code\u003e and input a list of Strings.","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" * Each string represents one instance of the tokenized form of the data structure the manager is handling,","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":" * such as ReflectionQuestion or AtomicHabit. \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" * To load data, the manager should call \u003ccode\u003eloadData()\u003c/code\u003e and input the correct filename of","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" * the data to be loaded. The filename should be obtained from the public constant Storage.FILE_[name].","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"//@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"public class Storage {","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    // These constant strings are intentionally made public","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    // to allow any FeatureManager to call the (de)tokenize functions with the correct filename","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    public static final String FILE_HABIT \u003d \"habit\";","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    public static final String FILE_REFLECT \u003d \"reflect\";","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    public static final String FILE_GAMIFICATION \u003d \"gamif\";","lastModifiedDate":"2023-04-05"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    protected static final String FILE_DEBUG \u003d \"debug\";","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    protected static final String DIRECTORY_DEBUG \u003d \"debug\";","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    // Delimiter constants","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    protected static final String DELIMITER \u003d \" --\" + System.lineSeparator();","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    protected static final String NEWLINE \u003d System.lineSeparator();","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    private static final String FILE_EXTENTION \u003d \".txt\";","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    private static final String WORKING_DIRECTORY \u003d \".\";","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    private static final String DATA_DIRECTORY_NAME \u003d \"data\";","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    // Message constants","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_GENERAL \u003d \"WellNUS++ faced an internal error in storage!\";","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_MAKE_FILE \u003d \"WellNUS++ couldn\u0027t make the data file!\";","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_MAKE_DIR \u003d \"WellNUS++ couldn\u0027t make the data directory!\";","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_DELETE_FILE \u003d \"WellNUS++ couldn\u0027t delete the data file!\";","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_RESOLVE_PATH \u003d \"WellNUS++ couldn\u0027t resolve a path internally!\";","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_WRITE_FILE \u003d \"WellNUS++ couldn\u0027t write to a file!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_LOAD_FILE \u003d \"WellNUS++ couldn\u0027t load a file!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_INVALID_FILENAME \u003d \"WellNUS++ cannot create a file that is not registered!\";","lastModifiedDate":"2023-03-24"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_FILENAME_NOT_NULL \u003d \"fileName should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_FILENAME_NOT_EMPTY \u003d \"fileName should have a length \u003e 0!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_PATH_NOT_NULL \u003d \"path should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_LIST_NOT_NULL \u003d \"list input should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_STRING_NOT_NULL \u003d \"string input should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_FILE_NOT_NULL \u003d \"file input should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"StorageLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_ACCESS_ERROR \u003d \"WellNUS++ has encountered a severe input/output error! \\n\"","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"            + \"Check if file permissions and data directory are properly instantiated?\";","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_MISSING_FILE \u003d \"WellNUS++ could not find a file.\\n\"","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"            + \"Check if this method was called before any data file instantiation?\";","lastModifiedDate":"2023-03-23"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_INVALID_FILENAME \u003d \"WellNUS++ cannot create the file as its name is invalid.\\n\"","lastModifiedDate":"2023-03-24"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"            + \"Check if its filename is registered in the Storage class.\";","lastModifiedDate":"2023-03-24"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"    private static final int FILENAME_EMPTY \u003d 0;","lastModifiedDate":"2023-03-26"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"    private Path wellNusDataDirectory;","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * Construct an instance of Storage to call saveData and loadData from.","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException when creating the data directory fails","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    public Storage() throws StorageException {","lastModifiedDate":"2023-03-20"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        wellNusDataDirectory \u003d Paths.get(WORKING_DIRECTORY, DATA_DIRECTORY_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        // For safety, check that the data folder actually exists","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        // If it doesn\u0027t, create it.","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        verifyDataDirectory();","lastModifiedDate":"2023-03-20"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"     * Method to check if the specific file exists.","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"     * Used to check if the file exists before attempting to load it for atomic habit manager.","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"     * @param fileName name of the file storing the feature data","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"     * @return boolean representing if the file exists","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"    public boolean checkFileExists(String fileName) throws StorageException {","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        Path pathToFile;","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        File dataFile;","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"            pathToFile \u003d wellNusDataDirectory.resolve(fileName + FILE_EXTENTION);","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"            dataFile \u003d pathToFile.toFile();","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        } catch (InvalidPathException exception) {","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_RESOLVE_PATH;","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"        } catch (UnsupportedOperationException exception) {","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_GENERAL;","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"        boolean fileExists \u003d dataFile.exists();","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        return fileExists;","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     * Check if the supplied fileName is a valid WellNUS++ file.","lastModifiedDate":"2023-03-24"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     * @param fileName name of file to be used in WellNUS++","lastModifiedDate":"2023-03-24"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * @return boolean representing if the fileName exists","lastModifiedDate":"2023-03-24"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-24"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"    private boolean isValidFileName(String fileName) {","lastModifiedDate":"2023-03-24"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_STRING_NOT_NULL;","lastModifiedDate":"2023-03-24"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        switch (fileName) {","lastModifiedDate":"2023-03-24"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"        case FILE_GAMIFICATION:","lastModifiedDate":"2023-04-05"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"        case FILE_HABIT:","lastModifiedDate":"2023-03-24"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"        case FILE_REFLECT:","lastModifiedDate":"2023-03-24"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        case FILE_DEBUG:","lastModifiedDate":"2023-03-24"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"            // fallthrough","lastModifiedDate":"2023-03-24"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"            return true;","lastModifiedDate":"2023-03-24"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"        default:","lastModifiedDate":"2023-03-24"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"            return false;","lastModifiedDate":"2023-03-24"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"     * Check that the data folder exists. If it does not, try creating it.","lastModifiedDate":"2023-03-20"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException if directory cannot be made","lastModifiedDate":"2023-03-19"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"    private void verifyDataDirectory() throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"        assert wellNusDataDirectory !\u003d null : \"wellNusDataDirectory path should be set up!\";","lastModifiedDate":"2023-03-19"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        boolean directoryExists \u003d Files.exists(wellNusDataDirectory);","lastModifiedDate":"2023-03-19"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        if (directoryExists) {","lastModifiedDate":"2023-03-19"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-19"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        createDataFolder(wellNusDataDirectory);","lastModifiedDate":"2023-03-19"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"     * Creates a \u003ccode\u003eFile\u003c/code\u003e relative to the data folder.","lastModifiedDate":"2023-03-20"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"     * @param fileName data file to retrieve","lastModifiedDate":"2023-03-19"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"    protected File getFile(String fileName) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_FILENAME_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"        assert fileName.length() \u003e FILENAME_EMPTY : ASSERT_FILENAME_NOT_EMPTY;","lastModifiedDate":"2023-03-26"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"        if (!isValidFileName(fileName)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.WARNING, LOG_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        Path pathToFile;","lastModifiedDate":"2023-03-20"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"        File dataFile;","lastModifiedDate":"2023-03-20"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-20"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"            pathToFile \u003d wellNusDataDirectory.resolve(fileName + FILE_EXTENTION);","lastModifiedDate":"2023-03-20"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"            dataFile \u003d pathToFile.toFile();","lastModifiedDate":"2023-03-20"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"        } catch (InvalidPathException exception) {","lastModifiedDate":"2023-03-20"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_RESOLVE_PATH;","lastModifiedDate":"2023-03-20"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-20"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-20"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        } catch (UnsupportedOperationException exception) {","lastModifiedDate":"2023-03-20"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_GENERAL;","lastModifiedDate":"2023-03-20"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-20"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-20"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"        boolean fileExists \u003d dataFile.exists();","lastModifiedDate":"2023-03-19"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"        if (!fileExists) {","lastModifiedDate":"2023-03-19"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"            createFile(dataFile);","lastModifiedDate":"2023-03-19"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"        return dataFile;","lastModifiedDate":"2023-03-19"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"     * Create the data folder for WellNUS++.","lastModifiedDate":"2023-03-20"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"     * @param directoryPath path of the directory","lastModifiedDate":"2023-03-19"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException if directory cannot be made","lastModifiedDate":"2023-03-19"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"    private void createDataFolder(Path directoryPath) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"        assert directoryPath !\u003d null : ASSERT_PATH_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"            Files.createDirectory(directoryPath);","lastModifiedDate":"2023-03-19"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_ACCESS_ERROR);","lastModifiedDate":"2023-03-23"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_MAKE_DIR + System.lineSeparator();","lastModifiedDate":"2023-03-19"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-19"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-19"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"     * Create a file in the path specified by its URI.","lastModifiedDate":"2023-03-20"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"     * @param file to be created","lastModifiedDate":"2023-03-19"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException if the file cannot be made","lastModifiedDate":"2023-03-19"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"    private void createFile(File file) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"        assert file !\u003d null : ASSERT_FILE_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"            file.createNewFile();","lastModifiedDate":"2023-03-19"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_ACCESS_ERROR);","lastModifiedDate":"2023-03-23"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_MAKE_FILE;","lastModifiedDate":"2023-03-19"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-19"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-19"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"     * Tokenize every String entry with the delimiter suffix and append them together.","lastModifiedDate":"2023-03-20"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"     * @param tokenizedStrings strings to be tokenized","lastModifiedDate":"2023-03-19"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"     * @return String of all tokenized string entries","lastModifiedDate":"2023-03-19"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"    protected String tokenizeStringList(ArrayList\u003cString\u003e tokenizedStrings) {","lastModifiedDate":"2023-03-19"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"        assert tokenizedStrings !\u003d null : ASSERT_LIST_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-03-19"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"        for (String entry : tokenizedStrings) {","lastModifiedDate":"2023-03-19"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"            String entryDelimited \u003d entry + DELIMITER;","lastModifiedDate":"2023-03-19"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"            stringBuilder.append(entryDelimited);","lastModifiedDate":"2023-03-19"},{"lineNumber":233,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2023-03-19"},{"lineNumber":235,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":236,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":237,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":238,"author":{"gitId":"nichyjt"},"content":"     * Splits a dataString by the \" --\\n\" delimiter.","lastModifiedDate":"2023-03-20"},{"lineNumber":239,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":240,"author":{"gitId":"nichyjt"},"content":"     * @param dataString string to be split","lastModifiedDate":"2023-03-19"},{"lineNumber":241,"author":{"gitId":"nichyjt"},"content":"     * @return String[] of words belonging to the dataString","lastModifiedDate":"2023-03-19"},{"lineNumber":242,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":243,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":244,"author":{"gitId":"nichyjt"},"content":"    private String[] splitIntoEntries(String dataString) {","lastModifiedDate":"2023-03-19"},{"lineNumber":245,"author":{"gitId":"nichyjt"},"content":"        assert dataString !\u003d null : ASSERT_STRING_NOT_NULL;","lastModifiedDate":"2023-03-24"},{"lineNumber":246,"author":{"gitId":"nichyjt"},"content":"        return dataString.split(DELIMITER);","lastModifiedDate":"2023-03-19"},{"lineNumber":247,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":248,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":249,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":250,"author":{"gitId":"nichyjt"},"content":"     * Detokenizing raw dataString into ArrayList of strings, where each string","lastModifiedDate":"2023-03-19"},{"lineNumber":251,"author":{"gitId":"nichyjt"},"content":"     * is an entry in the associated Manager\u0027s data structure.","lastModifiedDate":"2023-03-20"},{"lineNumber":252,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":253,"author":{"gitId":"nichyjt"},"content":"     * @param dataString raw string loaded from the text file","lastModifiedDate":"2023-03-19"},{"lineNumber":254,"author":{"gitId":"nichyjt"},"content":"     * @return ArrayList of strings to be parsed by tokenizer","lastModifiedDate":"2023-03-19"},{"lineNumber":255,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":256,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":257,"author":{"gitId":"nichyjt"},"content":"    protected ArrayList\u003cString\u003e detokenizeDataString(String dataString) {","lastModifiedDate":"2023-03-19"},{"lineNumber":258,"author":{"gitId":"nichyjt"},"content":"        assert dataString !\u003d null : ASSERT_STRING_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":259,"author":{"gitId":"nichyjt"},"content":"        String[] entries \u003d splitIntoEntries(dataString);","lastModifiedDate":"2023-03-19"},{"lineNumber":260,"author":{"gitId":"nichyjt"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(entries));","lastModifiedDate":"2023-03-19"},{"lineNumber":261,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":262,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":263,"author":{"gitId":"nichyjt"},"content":"    private void writeDataToDisk(String data, File file) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":264,"author":{"gitId":"nichyjt"},"content":"        assert data !\u003d null : ASSERT_STRING_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":265,"author":{"gitId":"nichyjt"},"content":"        assert file !\u003d null : ASSERT_FILE_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":266,"author":{"gitId":"nichyjt"},"content":"        // assume file exists","lastModifiedDate":"2023-03-19"},{"lineNumber":267,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":268,"author":{"gitId":"nichyjt"},"content":"            FileWriter writer \u003d new FileWriter(file.getAbsolutePath());","lastModifiedDate":"2023-03-19"},{"lineNumber":269,"author":{"gitId":"nichyjt"},"content":"            writer.write(data);","lastModifiedDate":"2023-03-19"},{"lineNumber":270,"author":{"gitId":"nichyjt"},"content":"            writer.close();","lastModifiedDate":"2023-03-19"},{"lineNumber":271,"author":{"gitId":"nichyjt"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_MISSING_FILE);","lastModifiedDate":"2023-03-23"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_WRITE_FILE;","lastModifiedDate":"2023-03-23"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-23"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-23"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"    private String loadDataFromDisk(File file) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"        assert file !\u003d null : ASSERT_FILE_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"        // assume file exists","lastModifiedDate":"2023-03-19"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"        StringBuilder data \u003d new StringBuilder();","lastModifiedDate":"2023-03-19"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"            Scanner reader \u003d new Scanner(file);","lastModifiedDate":"2023-03-19"},{"lineNumber":285,"author":{"gitId":"nichyjt"},"content":"            while (reader.hasNextLine()) {","lastModifiedDate":"2023-03-19"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"                data.append(reader.nextLine()).append(NEWLINE);","lastModifiedDate":"2023-03-19"},{"lineNumber":287,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":288,"author":{"gitId":"nichyjt"},"content":"            reader.close();","lastModifiedDate":"2023-03-19"},{"lineNumber":289,"author":{"gitId":"nichyjt"},"content":"        } catch (FileNotFoundException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":290,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_ACCESS_ERROR);","lastModifiedDate":"2023-03-23"},{"lineNumber":291,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_LOAD_FILE;","lastModifiedDate":"2023-03-24"},{"lineNumber":292,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-20"},{"lineNumber":293,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-20"},{"lineNumber":294,"author":{"gitId":"nichyjt"},"content":"        } catch (IllegalStateException exception) {","lastModifiedDate":"2023-03-20"},{"lineNumber":295,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_ACCESS_ERROR);","lastModifiedDate":"2023-03-23"},{"lineNumber":296,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_GENERAL;","lastModifiedDate":"2023-03-20"},{"lineNumber":297,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-20"},{"lineNumber":298,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-20"},{"lineNumber":299,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":300,"author":{"gitId":"nichyjt"},"content":"        return data.toString();","lastModifiedDate":"2023-03-19"},{"lineNumber":301,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":302,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":303,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":304,"author":{"gitId":"nichyjt"},"content":"     * Save the pre-tokenized data onto Disk. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":305,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":306,"author":{"gitId":"nichyjt"},"content":"     * The data will be saved into the /data folder. \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":307,"author":{"gitId":"nichyjt"},"content":"     * Each entry in the ArrayList should be an instance of the underlying data structure being `Managed`,","lastModifiedDate":"2023-03-19"},{"lineNumber":308,"author":{"gitId":"nichyjt"},"content":"     * with each instance being tokenized into a String beforehand. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":309,"author":{"gitId":"nichyjt"},"content":"     * The fileName should be accessed via the public constant Storage.FILE_[feature].","lastModifiedDate":"2023-03-19"},{"lineNumber":310,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":311,"author":{"gitId":"nichyjt"},"content":"     * @param tokenizedManager ArrayList of tokenized Manager data string","lastModifiedDate":"2023-03-19"},{"lineNumber":312,"author":{"gitId":"nichyjt"},"content":"     * @param fileName         name of the file to be saved","lastModifiedDate":"2023-03-19"},{"lineNumber":313,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException when there are unexpected IO errors","lastModifiedDate":"2023-03-19"},{"lineNumber":314,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":315,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":316,"author":{"gitId":"nichyjt"},"content":"    public void saveData(ArrayList\u003cString\u003e tokenizedManager, String fileName) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":317,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_FILENAME_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":318,"author":{"gitId":"nichyjt"},"content":"        assert fileName.length() \u003e FILENAME_EMPTY : ASSERT_FILENAME_NOT_EMPTY;","lastModifiedDate":"2023-03-26"},{"lineNumber":319,"author":{"gitId":"nichyjt"},"content":"        assert tokenizedManager !\u003d null : ASSERT_LIST_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":320,"author":{"gitId":"nichyjt"},"content":"        if (!isValidFileName(fileName)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":321,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.WARNING, LOG_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":322,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":323,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":324,"author":{"gitId":"nichyjt"},"content":"        File file \u003d getFile(fileName);","lastModifiedDate":"2023-03-19"},{"lineNumber":325,"author":{"gitId":"nichyjt"},"content":"        String tokenizedString \u003d tokenizeStringList(tokenizedManager);","lastModifiedDate":"2023-03-19"},{"lineNumber":326,"author":{"gitId":"nichyjt"},"content":"        writeDataToDisk(tokenizedString, file);","lastModifiedDate":"2023-03-19"},{"lineNumber":327,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":328,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":329,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":330,"author":{"gitId":"nichyjt"},"content":"     * Load a feature\u0027s data from the Disk. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":331,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":332,"author":{"gitId":"nichyjt"},"content":"     * The data will be laoded from the /data folder. \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":333,"author":{"gitId":"nichyjt"},"content":"     * Each entry in the ArrayList will be an instance of the underlying data structure being `Managed`,","lastModifiedDate":"2023-03-19"},{"lineNumber":334,"author":{"gitId":"nichyjt"},"content":"     * with each instance being tokenized into a String beforehand \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":335,"author":{"gitId":"nichyjt"},"content":"     * The fileName should be accessed via the public constant Storage.FILE_[feature].","lastModifiedDate":"2023-03-19"},{"lineNumber":336,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":337,"author":{"gitId":"nichyjt"},"content":"     * @param fileName name of the file to be loaded","lastModifiedDate":"2023-03-19"},{"lineNumber":338,"author":{"gitId":"nichyjt"},"content":"     * @return ArrayList of tokenized Manager data string","lastModifiedDate":"2023-03-19"},{"lineNumber":339,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException when there are unexpected IO errors","lastModifiedDate":"2023-03-19"},{"lineNumber":340,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":341,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":342,"author":{"gitId":"nichyjt"},"content":"    public ArrayList\u003cString\u003e loadData(String fileName) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":343,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_FILENAME_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":344,"author":{"gitId":"nichyjt"},"content":"        assert fileName.length() \u003e FILENAME_EMPTY : ASSERT_FILENAME_NOT_EMPTY;","lastModifiedDate":"2023-03-26"},{"lineNumber":345,"author":{"gitId":"nichyjt"},"content":"        if (!isValidFileName(fileName)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":346,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.WARNING, LOG_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":347,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":348,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":349,"author":{"gitId":"nichyjt"},"content":"        File file \u003d getFile(fileName);","lastModifiedDate":"2023-03-19"},{"lineNumber":350,"author":{"gitId":"nichyjt"},"content":"        String data \u003d loadDataFromDisk(file);","lastModifiedDate":"2023-03-19"},{"lineNumber":351,"author":{"gitId":"nichyjt"},"content":"        return detokenizeDataString(data);","lastModifiedDate":"2023-03-19"},{"lineNumber":352,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":353,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":354,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":355,"author":{"gitId":"nichyjt"},"content":"     * Deletes the file from the /data directory.","lastModifiedDate":"2023-03-20"},{"lineNumber":356,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":357,"author":{"gitId":"nichyjt"},"content":"     * @param fileName name of the file to be deleted","lastModifiedDate":"2023-03-19"},{"lineNumber":358,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException when there are unexpected IO errors","lastModifiedDate":"2023-03-19"},{"lineNumber":359,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":360,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":361,"author":{"gitId":"nichyjt"},"content":"    protected void deleteFile(String fileName) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":362,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_FILENAME_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":363,"author":{"gitId":"nichyjt"},"content":"        assert fileName.length() \u003e FILENAME_EMPTY : ASSERT_FILENAME_NOT_EMPTY;","lastModifiedDate":"2023-03-26"},{"lineNumber":364,"author":{"gitId":"nichyjt"},"content":"        if (!isValidFileName(fileName)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":365,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.WARNING, LOG_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":366,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":367,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":368,"author":{"gitId":"nichyjt"},"content":"        File file \u003d getFile(fileName);","lastModifiedDate":"2023-03-19"},{"lineNumber":369,"author":{"gitId":"nichyjt"},"content":"        boolean isDeleted \u003d file.delete();","lastModifiedDate":"2023-03-19"},{"lineNumber":370,"author":{"gitId":"nichyjt"},"content":"        if (!isDeleted) {","lastModifiedDate":"2023-03-19"},{"lineNumber":371,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_CANNOT_DELETE_FILE);","lastModifiedDate":"2023-03-19"},{"lineNumber":372,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":373,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":374,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":375,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"haoyangw":1,"nichyjt":374}},{"path":"src/main/java/wellnus/storage/Tokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":" * Template for all Tokenizers in WellNUS++ that are responsible for converting","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":" *     Managers into Strings(for storage) and also Strings(from storage) back","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" *     into Managers with the previously saved state.\u003cbr/\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":" *","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" * Example of how to implement this in a feature: \u003ccode\u003epublic class AtomicHabitTokenizer","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":" *     implements Tokenizer\u0026lt;AtomicHabit\u0026gt;\u003c/code\u003e.","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":" * @param \u003cT\u003e Data type of the corresponding feature, e.g. \u003ccode\u003eAtomicHabit\u003c/code\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":" *     the atomic habit feature","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"public interface Tokenizer\u003cT\u003e {","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"     * Converts the attributes of the given \u003ccode\u003eManager\u003c/code\u003e into a String representation to be","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"     *     saved to storage.","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"     * @param dataObjects List of Objects which represent data we want to convert into a String representation","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"     * @return ArrayList of Strings representing the data objects that we can write to storage","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"     * @throws TokenizerException If tokenizing fails and state cannot be converted into a valid String","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"     *     representation","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"    ArrayList\u003cString\u003e tokenize(ArrayList\u003cT\u003e dataObjects);","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"     * Converts the String representation of a \u003ccode\u003eManager\u003c/code\u003e\u0027s state back into an","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"     *     \u003ccode\u003eArrayList\u003c/code\u003e of the feature\u0027s data type class that can be used to restore that","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"     *     \u003ccode\u003eManager\u003c/code\u003e\u0027s previous state.","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"     * @param tokenizedDataObjects String representation of the Data Objects whose state we want to restore","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"     * @return ArrayList containing all the data from the Manager\u0027s previously saved state","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"     * @throws TokenizerException If detokenizing fails and valid state cannot be restored","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    ArrayList\u003cT\u003e detokenize(ArrayList\u003cString\u003e tokenizedDataObjects) throws TokenizerException;","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"BernardLesley":3,"haoyangw":34}},{"path":"src/main/java/wellnus/ui/TextUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.nio.BufferOverflowException;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.WellNusLogger;","lastModifiedDate":"2023-04-06"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-04-06"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":" * TextUi class for reading user inputs and printing outputs.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":" * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":" * Subclasses of TextUI class can override separator, printErrorFor and printOutputMessage.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":" * This is to accommodate to the uniqueness of each feature.","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"public class TextUi {","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    private static final Logger LOGGER \u003d WellNusLogger.getLogger(\"TextUiLogger\");","lastModifiedDate":"2023-04-06"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String ALERT_SEPARATOR \u003d \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!\"","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"            + \"---------!!!!!!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDENTATION_SPACES \u003d \"    \";","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final int DEFAULT_SEPARATOR_LENGTH \u003d 60;","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_MESSAGE \u003d 0;","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_MESSAGE_LABEL \u003d \"Error Message:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_EMPTY_STRING \u003d \"The string argument should not be empty!\";","lastModifiedDate":"2023-04-03"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String EXTRA_MESSAGE_LABEL \u003d \"Note:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String NO_INPUT_ELEMENT_MSG \u003d \"There is no new line of element, \"","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"            + \"please key in input!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String BUFFER_OVERFLOW_MSG \u003d \"Input is too long, please shorten your input!\";","lastModifiedDate":"2023-04-04"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    private static final String CURSOR_CARET \u003d \"(%s):~$ \";","lastModifiedDate":"2023-04-03"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-04-04"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private String separator \u003d \"-\";","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private int separatorLength;","lastModifiedDate":"2023-04-08"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private String cursor \u003d CURSOR_CARET;","lastModifiedDate":"2023-04-03"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"     * Returns a new instance of TextUi that reads user input from the default","lastModifiedDate":"2023-04-08"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"     * System.in InputStream.","lastModifiedDate":"2023-04-08"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    public TextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"        this(System.in);","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     * Returns a new instance of TextUi that reads user input from the given","lastModifiedDate":"2023-04-08"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     * InputStream.","lastModifiedDate":"2023-04-08"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"     * @param inputStream InputStream that WellNUS++ will read user input(commands) from","lastModifiedDate":"2023-04-08"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    public TextUi(InputStream inputStream) {","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"        this.scanner \u003d new Scanner(inputStream);","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        this.separatorLength \u003d DEFAULT_SEPARATOR_LENGTH;","lastModifiedDate":"2023-04-08"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    //@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-03"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"     * Print spaces before output message for better formatting.","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"    public void printIndentation() {","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(INDENTATION_SPACES);","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"     * Read user\u0027s input command and return back the command string.\u003cbr/\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"     * @return User input command with leading/dangling whitespace being removed","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"    public String getCommand() {","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"        printCursor();","lastModifiedDate":"2023-04-04"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"        String userCommand \u003d \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"            String inputLine \u003d scanner.nextLine();","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"            userCommand \u003d inputLine.trim();","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"        } catch (BufferOverflowException bufferOverFlowException) {","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, BUFFER_OVERFLOW_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"            printErrorFor(bufferOverFlowException, BUFFER_OVERFLOW_MSG);","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"        } catch (NoSuchElementException noElementException) {","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, NO_INPUT_ELEMENT_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"            printErrorFor(noElementException, NO_INPUT_ELEMENT_MSG);","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"        return userCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"     * Customise separators for each feature.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"     * At this moment we can only use length \u003d\u003d 1 separator for consistency of length of line separator.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"     * This will be improved on in the future to allow for more patterns.","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"     * @param separator Length \u003d\u003d 1 string","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"    public void setSeparator(String separator) {","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"        this.separator \u003d separator;","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-04-08"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"     * Customises the length of the separator as needed by a particular feature\u0027s","lastModifiedDate":"2023-04-08"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"     * unique style.","lastModifiedDate":"2023-04-08"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-04-08"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"     * @param separatorLength Number of characters to print in the feature\u0027s separator","lastModifiedDate":"2023-04-08"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-04-08"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"    public void setSeparatorLength(int separatorLength) {","lastModifiedDate":"2023-04-08"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"        this.separatorLength \u003d separatorLength;","lastModifiedDate":"2023-04-08"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-08"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-08"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"     * Print line separators for output lines.\u003cbr/\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"     * Each subclass inherited from this class can override this method to vary the interface.","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"    public void printSeparator() {","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c separatorLength; i +\u003d 1) {","lastModifiedDate":"2023-04-08"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"            System.out.print(separator);","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2023-03-09"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"     * Split a message string to a string array using System.lineSeparator().\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"     * This is to help indent each new line during output.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"     * Each line of string will be trimmed to remove leading/dangling whitespace.","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     * @param message Message to be printed","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * @return Messages that are split using lineSeparator","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"    private String[] splitOutputMessage(String message) {","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"        String[] newLineMessages \u003d message.trim().split(System.lineSeparator());","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c newLineMessages.length; i +\u003d 1) {","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"            newLineMessages[i] \u003d newLineMessages[i].trim();","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"        return newLineMessages;","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"     * Print each new line of message on a separate line with indentation being added.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"     * Output message with one line is also accepted.","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"     * @param message Output message to be printed","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"    private void printMultiLineMessage(String message) {","lastModifiedDate":"2023-03-10"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"        String[] newLineMessages \u003d splitOutputMessage(message);","lastModifiedDate":"2023-03-11"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"        for (String msg : newLineMessages) {","lastModifiedDate":"2023-03-11"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"            printIndentation();","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(msg);","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"     * Print exception message with length \u003e 0 and additional notes.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"     * 0 or more lines of messages are accepted, but lineSeparator() must be added","lastModifiedDate":"2023-03-11"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"     * if you wish to have certain message to start on a new line.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"     * Error messages and additional notes will be printed on separate lines with labels.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"     * Can override to accommodate to other customised error messages.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"     * Can improve on what will be printed for empty message in the future.","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"     * @param exception         The exception being thrown in the program","lastModifiedDate":"2023-03-10"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"     * @param additionalMessage Suggestions or notes that help users figure out what causes error","lastModifiedDate":"2023-03-11"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"    public void printErrorFor(Exception exception, String additionalMessage) {","lastModifiedDate":"2023-03-11"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"        System.out.println(ALERT_SEPARATOR);","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"        String exceptionMsg \u003d exception.getMessage();","lastModifiedDate":"2023-03-10"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"        if (exceptionMsg.length() \u003e EMPTY_MESSAGE) {","lastModifiedDate":"2023-03-10"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(ERROR_MESSAGE_LABEL);","lastModifiedDate":"2023-03-11"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"            printMultiLineMessage(exceptionMsg);","lastModifiedDate":"2023-03-10"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(EXTRA_MESSAGE_LABEL);","lastModifiedDate":"2023-03-11"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"            printMultiLineMessage(additionalMessage);","lastModifiedDate":"2023-03-11"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"        System.out.println(ALERT_SEPARATOR);","lastModifiedDate":"2023-03-10"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"     * Print output message with length \u003e 0.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"     * 0 or more lines of messages are accepted, but lineSeparator() must be added","lastModifiedDate":"2023-03-11"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"     * if you wish to have certain message to start on a new line.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"     * Can override to accommodate to other customised error messages.","lastModifiedDate":"2023-03-09"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"     * @param message The exception being thrown in the program","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"    public void printOutputMessage(String message) {","lastModifiedDate":"2023-03-10"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"        printSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"        if (message.length() \u003e EMPTY_MESSAGE) {","lastModifiedDate":"2023-03-10"},{"lineNumber":187,"author":{"gitId":"wenxin-c"},"content":"            printMultiLineMessage(message);","lastModifiedDate":"2023-03-10"},{"lineNumber":188,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":189,"author":{"gitId":"wenxin-c"},"content":"        printSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":190,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":191,"author":{"gitId":"wenxin-c"},"content":"    //@@author","lastModifiedDate":"2023-03-27"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-03"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-03"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"     * Prints a user-friendly cursor with the name of the feature the user is currently in.","lastModifiedDate":"2023-04-03"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-04-03"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"     * Cursor format: ([featureName]):~$","lastModifiedDate":"2023-04-03"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-04-03"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"     * @param cursorName name of the feature to be tagged to the cursor","lastModifiedDate":"2023-04-03"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-03"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"    public void setCursorName(String cursorName) {","lastModifiedDate":"2023-04-03"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"        assert cursorName !\u003d null \u0026\u0026 cursorName.length() \u003e 0 : ERROR_EMPTY_STRING;","lastModifiedDate":"2023-04-03"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"        cursor \u003d String.format(CURSOR_CARET, cursorName);","lastModifiedDate":"2023-04-03"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-03"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"     * Utility function to print the cursor to screen","lastModifiedDate":"2023-04-04"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"    public void printCursor() {","lastModifiedDate":"2023-04-04"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"        System.out.print(cursor);","lastModifiedDate":"2023-04-04"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"     * Utility function to print a newline","lastModifiedDate":"2023-04-04"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"    public void printNewline() {","lastModifiedDate":"2023-04-04"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"        System.out.println(System.lineSeparator());","lastModifiedDate":"2023-04-04"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get the scanner belonging to TextUi.","lastModifiedDate":"2023-04-04"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"     * @return Scanner tagged to this instance of TextUi","lastModifiedDate":"2023-04-04"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"    public Scanner getScanner() {","lastModifiedDate":"2023-04-04"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"        return scanner;","lastModifiedDate":"2023-04-04"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":228,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":229,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":165,"haoyangw":24,"nichyjt":40}},{"path":"src/test/java/wellnus/WellNusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"class WellNusTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"haoyangw":2,"-":10}},{"path":"src/test/java/wellnus/atomichabit/AtomicHabitTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.AddCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.command.DeleteCommand;","lastModifiedDate":"2023-04-09"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.command.ListCommand;","lastModifiedDate":"2023-04-09"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.UpdateCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.feature.AtomicHabitUi;","lastModifiedDate":"2023-04-06"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"import wellnus.gamification.util.GamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private static final String ADD_HABIT_COMMAND \u003d \"add\";","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private static final String UPDATE_HABIT_COMMAND \u003d \"update\";","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    private static final String DELETE_HABIT_COMMAND \u003d \"delete\";","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    private static final String LIST_HABIT_COMMAND \u003d \"list\";","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList habitList;","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    private final ByteArrayOutputStream outputStreamCaptor;","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    private final CommandParser parser;","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    private final GamificationData gamificationData;","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    public AtomicHabitTest() {","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        this.habitList \u003d new AtomicHabitList();","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"        this.outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"        this.parser \u003d new CommandParser();","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"        this.gamificationData \u003d new GamificationData();","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    private String getMessageFrom(String uiOutput) {","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"        AtomicHabitUi atomicHabitUi \u003d new AtomicHabitUi();","lastModifiedDate":"2023-04-06"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"        atomicHabitUi.printSeparator();","lastModifiedDate":"2023-04-06"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"        String separator \u003d outputStream.toString().trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        StringBuilder resultBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"        String[] outputLines \u003d uiOutput.split(System.lineSeparator());","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"        for (String outputLine : outputLines) {","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"            String trimmedOutputLine \u003d outputLine.trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"            if (!trimmedOutputLine.equals(separator)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"                resultBuilder.append(trimmedOutputLine).append(System.lineSeparator());","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"        return resultBuilder.toString().trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * Test AddCommand with a standard payload to check output printed.","lastModifiedDate":"2023-04-09"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    public void addHabit_checkOutput_success() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        String expectedOutput \u003d \"Yay! You have added a new habit:\"","lastModifiedDate":"2023-03-11"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-11"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"                + \"\u0027\"","lastModifiedDate":"2023-03-11"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"                + payload","lastModifiedDate":"2023-03-11"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"                + \"\u0027\"","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"                + \" was successfully added\";","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"        String testCommand \u003d String.format(\"%s --name %s\", ADD_HABIT_COMMAND, payload);","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"        Command command \u003d new AddCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        command.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertEquals(expectedOutput, getMessageFrom(outputStreamCaptor.toString()));","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"     * Test AddCommand to throw {@link AtomicHabitException} when an invalid command is given to the AtomicHabitManager.","lastModifiedDate":"2023-04-09"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"    public void addHabit_invalidCommand_atomicHabitExceptionThrown() {","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        AtomicHabitManager atomicHabitManager \u003d new AtomicHabitManager(gamificationData);","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"        String command \u003d \"sleep\";","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertThrows(AtomicHabitException.class, () -\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"            atomicHabitManager.testInvalidCommand(command);","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"        }, \"The following is an invalid command:\\n\"","lastModifiedDate":"2023-03-11"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"                + command);","lastModifiedDate":"2023-03-11"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"     * Test AddCommand to throw {@link AtomicHabitException} when a duplicate habit is added.","lastModifiedDate":"2023-04-04"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"     * @throws WellNusException","lastModifiedDate":"2023-04-04"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-04-04"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"    public void addHabit_duplicateHabit_atomicHabitExceptionThrown() throws WellNusException {","lastModifiedDate":"2023-04-04"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-04-04"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"        String testAddCommand \u003d String.format(\"%s --name %s\", ADD_HABIT_COMMAND, payload + System.lineSeparator());","lastModifiedDate":"2023-04-04"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testAddCommand);","lastModifiedDate":"2023-04-04"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"        Command addCommand \u003d new AddCommand(arguments, habitList);","lastModifiedDate":"2023-04-04"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"        addCommand.execute();","lastModifiedDate":"2023-04-04"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertThrows(AtomicHabitException.class, addCommand::execute);","lastModifiedDate":"2023-04-04"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * Test UpdateCommand with a standard payload and default increment to check output printed.","lastModifiedDate":"2023-04-09"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"    public void updateHabit_checkOutputDefaultIncrement_success() throws WellNusException {","lastModifiedDate":"2023-03-17"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"        String testUpdateCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, habitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testUpdateCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList, gamificationData);","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"        String expectedUpdateHabitOutput \u003d \"The following habit has been incremented! Keep up the good work!\"","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"                + habitIndex + \".\" + payload + \" \" + \"[1]\";","lastModifiedDate":"2023-04-09"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-15"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"        updateCommand.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertEquals(expectedUpdateHabitOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"     * Test UpdateCommand with a standard payload and user-inputted increment to check output printed.","lastModifiedDate":"2023-04-09"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"    public void updateHabit_checkOutputUserInputIncrement_success() throws WellNusException {","lastModifiedDate":"2023-03-17"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-17"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-03-17"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-03-17"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"        String increment \u003d \"3\";","lastModifiedDate":"2023-03-17"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"        String testUpdateCommand \u003d String.format(\"%s --id %s --by %s\", UPDATE_HABIT_COMMAND, habitIndex, increment)","lastModifiedDate":"2023-04-04"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-17"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testUpdateCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList, gamificationData);","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"        String expectedUpdateHabitOutput \u003d \"The following habit has been incremented! Keep up the good work!\"","lastModifiedDate":"2023-03-17"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-17"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"                + habitIndex + \".\" + payload + \" \" + \"[3]\";","lastModifiedDate":"2023-04-09"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-17"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-17"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"        updateCommand.execute();","lastModifiedDate":"2023-03-17"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedUpdateHabitOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-03-17"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"     * Test UpdateCommand to throw {@link AtomicHabitException} when a non-integer index is given to the UpdateCommand.","lastModifiedDate":"2023-04-09"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"haoyangw"},"content":"    public void updateHabit_indexNotInteger_atomicHabitExceptionThrown() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-13"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-14"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"        String habitIndex \u003d \"a\";","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"haoyangw"},"content":"        String testIndexCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, habitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testIndexCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList, gamificationData);","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommand::execute);","lastModifiedDate":"2023-03-15"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"     * Test UpdateCommand to throw {@link AtomicHabitException} when an out-of-bounds index is given","lastModifiedDate":"2023-03-14"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"     * to the UpdateCommand.","lastModifiedDate":"2023-04-09"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"    public void updateHabit_indexOutOfBounds_atomicHabitExceptionThrown() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-13"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-14"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"        String largeHabitIndex \u003d \"100000000\" + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"haoyangw"},"content":"        String negativeHabitIndex \u003d \"-100000000\" + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":179,"author":{"gitId":"haoyangw"},"content":"        String testLargeIndexCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, largeHabitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":180,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":181,"author":{"gitId":"haoyangw"},"content":"        String testNegativeIndexCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, negativeHabitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":182,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":183,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testLargeIndexCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":184,"author":{"gitId":"haoyangw"},"content":"        Command updateCommandForLargeIndex \u003d new UpdateCommand(arguments, habitList, gamificationData);","lastModifiedDate":"2023-03-28"},{"lineNumber":185,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommandForLargeIndex::execute);","lastModifiedDate":"2023-03-15"},{"lineNumber":186,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":187,"author":{"gitId":"haoyangw"},"content":"        arguments \u003d parser.parseUserInput(testNegativeIndexCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":188,"author":{"gitId":"haoyangw"},"content":"        Command updateCommandForNegativeIndex \u003d new UpdateCommand(arguments, habitList, gamificationData);","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommandForNegativeIndex::execute);","lastModifiedDate":"2023-03-15"},{"lineNumber":190,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":192,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-04"},{"lineNumber":193,"author":{"gitId":"YongbinWang"},"content":"     * Test UpdateCommand to successfully decrement a habit.","lastModifiedDate":"2023-04-09"},{"lineNumber":194,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-04"},{"lineNumber":195,"author":{"gitId":"YongbinWang"},"content":"     * @throws WellNusException","lastModifiedDate":"2023-04-04"},{"lineNumber":196,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-04"},{"lineNumber":197,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-04-04"},{"lineNumber":198,"author":{"gitId":"YongbinWang"},"content":"    public void updateHabit_decrement_success() throws WellNusException {","lastModifiedDate":"2023-04-04"},{"lineNumber":199,"author":{"gitId":"YongbinWang"},"content":"        updateHabit_checkOutputUserInputIncrement_success();","lastModifiedDate":"2023-04-04"},{"lineNumber":200,"author":{"gitId":"YongbinWang"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-04-04"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-04-04"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"        String decrement \u003d \"-3\";","lastModifiedDate":"2023-04-04"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"        String testUpdateCommand \u003d String.format(\"%s --id %s --by %s\", UPDATE_HABIT_COMMAND, habitIndex, decrement)","lastModifiedDate":"2023-04-04"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-04-04"},{"lineNumber":205,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testUpdateCommand);","lastModifiedDate":"2023-04-04"},{"lineNumber":206,"author":{"gitId":"YongbinWang"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList, gamificationData);","lastModifiedDate":"2023-04-04"},{"lineNumber":207,"author":{"gitId":"YongbinWang"},"content":"        String expectedUpdateHabitOutput \u003d \"The following habit has been decremented.\"","lastModifiedDate":"2023-04-09"},{"lineNumber":208,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-04-04"},{"lineNumber":209,"author":{"gitId":"YongbinWang"},"content":"                + habitIndex + \".\" + payload + \" \" + \"[0]\";","lastModifiedDate":"2023-04-09"},{"lineNumber":210,"author":{"gitId":"YongbinWang"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-04"},{"lineNumber":211,"author":{"gitId":"YongbinWang"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-04"},{"lineNumber":212,"author":{"gitId":"YongbinWang"},"content":"        updateCommand.execute();","lastModifiedDate":"2023-04-04"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(expectedUpdateHabitOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-04"},{"lineNumber":214,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":215,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-04"},{"lineNumber":216,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":217,"author":{"gitId":"YongbinWang"},"content":"     * Test UpdateCommand to throw {@link AtomicHabitException} when a non-integer decrement is given.","lastModifiedDate":"2023-04-09"},{"lineNumber":218,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-09"},{"lineNumber":219,"author":{"gitId":"YongbinWang"},"content":"     * @throws WellNusException","lastModifiedDate":"2023-04-09"},{"lineNumber":220,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":221,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-04-04"},{"lineNumber":222,"author":{"gitId":"YongbinWang"},"content":"    public void updateHabit_invalidDecrement_atomicHabitExceptionThrown() throws WellNusException {","lastModifiedDate":"2023-04-04"},{"lineNumber":223,"author":{"gitId":"YongbinWang"},"content":"        updateHabit_checkOutputUserInputIncrement_success();","lastModifiedDate":"2023-04-04"},{"lineNumber":224,"author":{"gitId":"YongbinWang"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-04-04"},{"lineNumber":225,"author":{"gitId":"YongbinWang"},"content":"        String decrement \u003d \"-100000000\";","lastModifiedDate":"2023-04-04"},{"lineNumber":226,"author":{"gitId":"YongbinWang"},"content":"        String testUpdateCommand \u003d String.format(\"%s --id %s --by %s\", UPDATE_HABIT_COMMAND, habitIndex, decrement)","lastModifiedDate":"2023-04-04"},{"lineNumber":227,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-04-04"},{"lineNumber":228,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testUpdateCommand);","lastModifiedDate":"2023-04-04"},{"lineNumber":229,"author":{"gitId":"YongbinWang"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList, gamificationData);","lastModifiedDate":"2023-04-04"},{"lineNumber":230,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommand::execute);","lastModifiedDate":"2023-04-04"},{"lineNumber":231,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-04"},{"lineNumber":232,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":233,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":234,"author":{"gitId":"YongbinWang"},"content":"     * Test UpdateCommand for correct output when list is empty.","lastModifiedDate":"2023-04-09"},{"lineNumber":235,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-09"},{"lineNumber":236,"author":{"gitId":"YongbinWang"},"content":"     * @throws WellNusException","lastModifiedDate":"2023-04-09"},{"lineNumber":237,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":238,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-04-09"},{"lineNumber":239,"author":{"gitId":"YongbinWang"},"content":"    public void updateHabit_emptyListUnsuccessful() throws WellNusException {","lastModifiedDate":"2023-04-09"},{"lineNumber":240,"author":{"gitId":"YongbinWang"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-04-09"},{"lineNumber":241,"author":{"gitId":"YongbinWang"},"content":"        String decrement \u003d \"1\";","lastModifiedDate":"2023-04-09"},{"lineNumber":242,"author":{"gitId":"YongbinWang"},"content":"        String testUpdateCommand \u003d String.format(\"%s --id %s --by %s\", UPDATE_HABIT_COMMAND, habitIndex, decrement)","lastModifiedDate":"2023-04-09"},{"lineNumber":243,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":244,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testUpdateCommand);","lastModifiedDate":"2023-04-09"},{"lineNumber":245,"author":{"gitId":"YongbinWang"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList, gamificationData);","lastModifiedDate":"2023-04-09"},{"lineNumber":246,"author":{"gitId":"YongbinWang"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":247,"author":{"gitId":"YongbinWang"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":248,"author":{"gitId":"YongbinWang"},"content":"        updateCommand.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":249,"author":{"gitId":"YongbinWang"},"content":"        String expectedOutput \u003d \"There are no habits to update!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":250,"author":{"gitId":"YongbinWang"},"content":"                + \" Please `add` a habit first!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":251,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(expectedOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":252,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(true, habitList.getAllHabits().isEmpty());","lastModifiedDate":"2023-04-09"},{"lineNumber":253,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":254,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":255,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":256,"author":{"gitId":"YongbinWang"},"content":"     * Test DeleteCommand to successfully delete a habit and check output is printed correctly.","lastModifiedDate":"2023-04-09"},{"lineNumber":257,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-09"},{"lineNumber":258,"author":{"gitId":"YongbinWang"},"content":"     * @throws WellNusException","lastModifiedDate":"2023-04-09"},{"lineNumber":259,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":260,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-04-09"},{"lineNumber":261,"author":{"gitId":"YongbinWang"},"content":"    public void delete_habitSuccess() throws WellNusException {","lastModifiedDate":"2023-04-09"},{"lineNumber":262,"author":{"gitId":"YongbinWang"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-04-09"},{"lineNumber":263,"author":{"gitId":"YongbinWang"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-04-09"},{"lineNumber":264,"author":{"gitId":"YongbinWang"},"content":"        String testDeleteCommand \u003d String.format(\"%s --id %s\", DELETE_HABIT_COMMAND, habitIndex)","lastModifiedDate":"2023-04-09"},{"lineNumber":265,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":266,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testDeleteCommand);","lastModifiedDate":"2023-04-09"},{"lineNumber":267,"author":{"gitId":"YongbinWang"},"content":"        Command deleteCommand \u003d new DeleteCommand(arguments, habitList);","lastModifiedDate":"2023-04-09"},{"lineNumber":268,"author":{"gitId":"YongbinWang"},"content":"        String expectedDeleteHabitOutput \u003d \"The following habit has been deleted:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":269,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":270,"author":{"gitId":"YongbinWang"},"content":"                + \"junit test\" + \" \" + \"[0]\" + \" has been successfully deleted\";","lastModifiedDate":"2023-04-09"},{"lineNumber":271,"author":{"gitId":"YongbinWang"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":272,"author":{"gitId":"YongbinWang"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":273,"author":{"gitId":"YongbinWang"},"content":"        deleteCommand.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":274,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(true, habitList.getAllHabits().isEmpty());","lastModifiedDate":"2023-04-09"},{"lineNumber":275,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(expectedDeleteHabitOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":276,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":277,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":278,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":279,"author":{"gitId":"YongbinWang"},"content":"     * Test DeleteCommand to throw {@link AtomicHabitException} when a non-integer index is given.","lastModifiedDate":"2023-04-09"},{"lineNumber":280,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-09"},{"lineNumber":281,"author":{"gitId":"YongbinWang"},"content":"     * @throws WellNusException","lastModifiedDate":"2023-04-09"},{"lineNumber":282,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":283,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-04-09"},{"lineNumber":284,"author":{"gitId":"YongbinWang"},"content":"    public void delete_invalidIndex_atomicHabitExceptionThrown() throws WellNusException {","lastModifiedDate":"2023-04-09"},{"lineNumber":285,"author":{"gitId":"YongbinWang"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-04-09"},{"lineNumber":286,"author":{"gitId":"YongbinWang"},"content":"        String habitIndex \u003d \"1000000000000\";","lastModifiedDate":"2023-04-09"},{"lineNumber":287,"author":{"gitId":"YongbinWang"},"content":"        String testDeleteCommand \u003d String.format(\"%s --id %s\", DELETE_HABIT_COMMAND, habitIndex)","lastModifiedDate":"2023-04-09"},{"lineNumber":288,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":289,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testDeleteCommand);","lastModifiedDate":"2023-04-09"},{"lineNumber":290,"author":{"gitId":"YongbinWang"},"content":"        Command deleteCommand \u003d new DeleteCommand(arguments, habitList);","lastModifiedDate":"2023-04-09"},{"lineNumber":291,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertThrows(AtomicHabitException.class, deleteCommand::execute);","lastModifiedDate":"2023-04-09"},{"lineNumber":292,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":293,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":294,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":295,"author":{"gitId":"YongbinWang"},"content":"     * Test DeleteCommand to throw correct output when list is empty.","lastModifiedDate":"2023-04-09"},{"lineNumber":296,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-09"},{"lineNumber":297,"author":{"gitId":"YongbinWang"},"content":"     * @throws WellNusException","lastModifiedDate":"2023-04-09"},{"lineNumber":298,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":299,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-04-09"},{"lineNumber":300,"author":{"gitId":"YongbinWang"},"content":"    public void delete_emptyList_unsuccessful() throws WellNusException {","lastModifiedDate":"2023-04-09"},{"lineNumber":301,"author":{"gitId":"YongbinWang"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-04-09"},{"lineNumber":302,"author":{"gitId":"YongbinWang"},"content":"        String testDeleteCommand \u003d String.format(\"%s --id %s\", DELETE_HABIT_COMMAND, habitIndex)","lastModifiedDate":"2023-04-09"},{"lineNumber":303,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":304,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testDeleteCommand);","lastModifiedDate":"2023-04-09"},{"lineNumber":305,"author":{"gitId":"YongbinWang"},"content":"        Command deleteCommand \u003d new DeleteCommand(arguments, habitList);","lastModifiedDate":"2023-04-09"},{"lineNumber":306,"author":{"gitId":"YongbinWang"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":307,"author":{"gitId":"YongbinWang"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":308,"author":{"gitId":"YongbinWang"},"content":"        deleteCommand.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":309,"author":{"gitId":"YongbinWang"},"content":"        String expectedOutput \u003d \"There are no habits to delete!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":310,"author":{"gitId":"YongbinWang"},"content":"                + \" Please `add` a habit first!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":311,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(expectedOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":312,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(true, habitList.getAllHabits().isEmpty());","lastModifiedDate":"2023-04-09"},{"lineNumber":313,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":314,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":315,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-04-09"},{"lineNumber":316,"author":{"gitId":"YongbinWang"},"content":"     * Test ListCommand to print correct output when list is empty.","lastModifiedDate":"2023-04-09"},{"lineNumber":317,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-04-09"},{"lineNumber":318,"author":{"gitId":"YongbinWang"},"content":"     * @throws WellNusException","lastModifiedDate":"2023-04-09"},{"lineNumber":319,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-04-09"},{"lineNumber":320,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-04-09"},{"lineNumber":321,"author":{"gitId":"YongbinWang"},"content":"    public void listEmptyList_successful() throws WellNusException {","lastModifiedDate":"2023-04-09"},{"lineNumber":322,"author":{"gitId":"YongbinWang"},"content":"        String testListCommand \u003d String.format(\"%s\", LIST_HABIT_COMMAND)","lastModifiedDate":"2023-04-09"},{"lineNumber":323,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":324,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testListCommand);","lastModifiedDate":"2023-04-09"},{"lineNumber":325,"author":{"gitId":"YongbinWang"},"content":"        Command listCommand \u003d new ListCommand(arguments, habitList);","lastModifiedDate":"2023-04-09"},{"lineNumber":326,"author":{"gitId":"YongbinWang"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":327,"author":{"gitId":"YongbinWang"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":328,"author":{"gitId":"YongbinWang"},"content":"        listCommand.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":329,"author":{"gitId":"YongbinWang"},"content":"        String expectedOutput \u003d \"You have no habits in your list!\" + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":330,"author":{"gitId":"YongbinWang"},"content":"                + \"Start adding some habits by using \u0027add\u0027!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":331,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(expectedOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":332,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":333,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":334,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":335,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":58,"haoyangw":78,"YongbinWang":199}},{"path":"src/test/java/wellnus/command/CommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"public class CommandParserTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cString\u003e getValidCommandInputs() {","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e validCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"mainCommand\");","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"mainCommand payload\");","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"main --arg1 pay1\");","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"main --arg1 pay1 --arg2\");","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"main --arg1 pay1 --arg2 --arg3 pay3\");","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"        return validCommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cString\u003e getValidTrickyInputs() {","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e validCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"mainCommand pay--load\");","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"mainCommand --argument1 payload--\");","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"  mainCommand --arg--1 pay1 --arg2 pay2\");","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"        return validCommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_validInput() {","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        // The following commands should be able to pass","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e validCommandInputs \u003d getValidCommandInputs();","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        // The following tests check if adversarial inputs are processed correctly","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e validTrickyInputs \u003d getValidTrickyInputs();","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        for (String validCommand : validCommandInputs) {","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"                parser.parseUserInput(validCommand);","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"            } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"                fail(\"CommandParser threw exception on valid input:\\n\" + exception);","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"        for (String validCommand : validTrickyInputs) {","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"                parser.parseUserInput(validCommand);","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"            } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"                fail(\"CommandParser threw exception on valid input:\\n\" + exception);","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_emptyInput_exceptionThrown() {","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        // Test on empty user input","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"\";","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + command);","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_emptyArgument_exceptionThrown() {","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        // Test on empty argument","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        String commandEmptyArg \u003d \"mainCommand payload --\";","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(commandEmptyArg);","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + commandEmptyArg);","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        // Test on empty argument with padding","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        String commandEmptyArgPadded \u003d \"mainCommand payload -- \";","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(commandEmptyArgPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + commandEmptyArgPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        // Test on empty argument, payload exists","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        String emptyCmdWithPayload \u003d \"mainCommand payload -- payload1\";","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(emptyCmdWithPayload);","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + emptyCmdWithPayload);","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_noMainArgument_exceptionThrown() {","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        // Test on empty user input without padding","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"--arg1 payload\";","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + command);","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"        // Test on empty user input with padding","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        String commandPadded \u003d \" --arg1 payload\";","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(commandPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + commandPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgumentTest() {","lastModifiedDate":"2023-03-08"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        String target \u003d \"maincommand\";","lastModifiedDate":"2023-03-24"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"mainCommand payload --argument payload1\";","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"            String result1 \u003d parser.getMainArgument(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"            assertEquals(target, result1);","lastModifiedDate":"2023-03-08"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"            fail(exception.getMessage());","lastModifiedDate":"2023-03-08"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument works for valid whitespace padded input","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgumentTest_paddedInput_success() {","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        String target \u003d \"maincommand\";","lastModifiedDate":"2023-03-24"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"   mainCommand payload --argument payload1\";","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"            String result1 \u003d parser.getMainArgument(command);","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"            assertEquals(target, result1);","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"            fail(exception.getMessage());","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument works for valid \\n, \\t padded input","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgumentTest_specialWhitespace_success() {","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        String target \u003d \"maincommand\";","lastModifiedDate":"2023-03-24"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"\\n \\t mainCommand payload --argument payload1\";","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"            String result1 \u003d parser.getMainArgument(command);","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"            assertEquals(target, result1);","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"            fail(exception.getMessage());","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument throws exception for empty input","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgument_emptyInput_throwsException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"            parser.getMainArgument(\"\");","lastModifiedDate":"2023-03-10"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected error throw from empty user input\");","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument throws exception for whitespace-only input","lastModifiedDate":"2023-03-10"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgument_whiteSpacedInput_throwsException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"            parser.getMainArgument(\" \\n \\t \");","lastModifiedDate":"2023-03-10"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected error throw from white-spaced user input\");","lastModifiedDate":"2023-03-10"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-23"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_repeatedArgument_throwsException() {","lastModifiedDate":"2023-03-23"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-23"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-23"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(\"foo --bar payload --bar payload2\");","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected error throw from repeated arguments\");","lastModifiedDate":"2023-03-23"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"haoyangw":2,"nichyjt":181}},{"path":"src/test/java/wellnus/focus/FocusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.StartCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"public class FocusTest {","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String START_COMMAND \u003d \"start\";","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String CHECK_COMMAND \u003d \"check\";","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String PAUSE_COMMAND \u003d \"pause\";","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private final CommandParser parser;","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private final ByteArrayOutputStream outputStreamCaptor;","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    public FocusTest() {","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d new Session();","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"        this.parser \u003d new CommandParser();","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"        this.outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    private String getMessageFrom(String uiOutput) {","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"        TextUi textUi \u003d new TextUi();","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        textUi.printSeparator();","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        String separator \u003d outputStream.toString().trim();","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"        StringBuilder resultBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"        String[] outputLines \u003d uiOutput.split(System.lineSeparator());","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"        for (String outputLine : outputLines) {","lastModifiedDate":"2023-03-22"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"            String trimmedOutputLine \u003d outputLine.trim();","lastModifiedDate":"2023-03-22"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"            if (!trimmedOutputLine.equals(separator)) {","lastModifiedDate":"2023-03-22"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"                resultBuilder.append(trimmedOutputLine).append(System.lineSeparator());","lastModifiedDate":"2023-03-22"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"        return resultBuilder.toString().trim();","lastModifiedDate":"2023-03-22"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-22"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-22"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     * Test whether start command starts the timer program.","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     * Stops program immediately after.","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"    void startTimer_checkResult_success() throws WellNusException {","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(START_COMMAND);","lastModifiedDate":"2023-03-22"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"        StartCommand startCommand \u003d new StartCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"        startCommand.execute();","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(true, session.getSession().get(0).getIsRunning());","lastModifiedDate":"2023-03-22"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        session.getSession().get(0).setStop();","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"     * Test FocusManager to throw {@link BadCommandException} when an invalid command is given to the FocusManager","lastModifiedDate":"2023-03-22"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"    public void startTimer_invalidCommand_badCommandExceptionThrown() {","lastModifiedDate":"2023-03-22"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-22"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"        FocusManager focusManager \u003d new FocusManager();","lastModifiedDate":"2023-03-22"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"        String command \u003d \"wrong\";","lastModifiedDate":"2023-03-22"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-22"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"            focusManager.testInvalidCommand(command);","lastModifiedDate":"2023-03-22"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"        });","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"YongbinWang":85}},{"path":"src/test/java/wellnus/focus/command/ConfigCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-04-09"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-03-26"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-04-09"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-04-09"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-26"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusUi;","lastModifiedDate":"2023-04-09"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * Test that ConfigCommand\u0027s public functions work as intended","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * Only execute() is called for testing rather than the other public/protected method calls","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * as it covers almost all the main logic and branches.","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"//@@author nichyjt","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"public class ConfigCommandTest {","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    private static final String EXPECTED_ERROR_MAX_MINS \u003d \"\"","lastModifiedDate":"2023-04-09"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"            + \"Error Message:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"            + \"Invalid minutes payload given in \u0027config\u0027, the maximum time you can set is 60!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"            + \"Note:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"            + \"config command usage: config \"","lastModifiedDate":"2023-04-09"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"            + \"[--cycle number] [--work minutes] [--break minutes] [--longbreak minutes]\"","lastModifiedDate":"2023-04-09"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    private static final String EXPECTED_ERROR_MIN_MINS \u003d \"\"","lastModifiedDate":"2023-04-09"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"            + \"Error Message:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"            + \"Invalid minutes payload given in \u0027config\u0027, the minimum time you can set is 1!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"            + \"Note:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"            + \"config command usage: config \"","lastModifiedDate":"2023-04-09"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"            + \"[--cycle number] [--work minutes] [--break minutes] [--longbreak minutes]\"","lastModifiedDate":"2023-04-09"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    private static final String EXPECTED_ERROR_MAX_CYCLE \u003d \"\"","lastModifiedDate":"2023-04-09"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"            + \"Error Message:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"            + \"Invalid cycle payload given in \u0027config\u0027, the maximum cycles you can set is 5!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"            + \"Note:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"            + \"config command usage: config \"","lastModifiedDate":"2023-04-09"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"            + \"[--cycle number] [--work minutes] [--break minutes] [--longbreak minutes]\"","lastModifiedDate":"2023-04-09"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    private static final String EXPECTED_ERROR_MIN_CYCLE \u003d \"\"","lastModifiedDate":"2023-04-09"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"            + \"Error Message:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"            + \"Invalid cycle payload given in \u0027config\u0027, the minimum cycles you can set is 2!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"            + \"Note:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"            + \"config command usage: config \"","lastModifiedDate":"2023-04-09"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"            + \"[--cycle number] [--work minutes] [--break minutes] [--longbreak minutes]\"","lastModifiedDate":"2023-04-09"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"    private static final String EXPECTED_ERROR_INVALID_PAYLOAD \u003d \"\"","lastModifiedDate":"2023-04-09"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"            + \"Error Message:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"            + \"Invalid payload given in \u0027config\u0027, expected a valid integer!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"            + \"Note:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"            + \"config command usage: config \"","lastModifiedDate":"2023-04-09"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"            + \"[--cycle number] [--work minutes] [--break minutes] [--longbreak minutes]\"","lastModifiedDate":"2023-04-09"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"    private static final String EXPECTED_ERROR_INVALID_ARGS \u003d \"\"","lastModifiedDate":"2023-04-09"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"            + \"Error Message:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"            + \"Invalid arguments given to \u0027config\u0027!\"","lastModifiedDate":"2023-04-09"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"            + \"Note:\"","lastModifiedDate":"2023-04-09"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"            + \"config command usage: config [--cycle number] [--work minutes] [--break minutes] [--longbreak minutes]\"","lastModifiedDate":"2023-04-09"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"            + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"            + \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\";","lastModifiedDate":"2023-04-09"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"    private String getMessageFrom(String uiOutput) {","lastModifiedDate":"2023-04-09"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"        FocusUi ui \u003d new FocusUi();","lastModifiedDate":"2023-04-09"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        ui.printSeparator();","lastModifiedDate":"2023-04-09"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        String separator \u003d outputStream.toString().trim();","lastModifiedDate":"2023-04-09"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"        StringBuilder resultBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-04-09"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        String[] outputLines \u003d uiOutput.split(System.lineSeparator());","lastModifiedDate":"2023-04-09"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        for (String outputLine : outputLines) {","lastModifiedDate":"2023-04-09"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"            String trimmedOutputLine \u003d outputLine.trim();","lastModifiedDate":"2023-04-09"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"            if (!trimmedOutputLine.equals(separator)) {","lastModifiedDate":"2023-04-09"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"                resultBuilder.append(trimmedOutputLine).append(System.lineSeparator());","lastModifiedDate":"2023-04-09"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-04-09"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        return resultBuilder.toString().trim();","lastModifiedDate":"2023-04-09"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-04-09"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"    private boolean isSessionCorrectlyUpdated(Session session, int cycle, int work, int brk, int longbrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        if (session.getWork() !\u003d work) {","lastModifiedDate":"2023-03-26"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"            return false;","lastModifiedDate":"2023-03-26"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"        if (session.getBrk() !\u003d brk || session.getLongBrk() !\u003d longbrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"            return false;","lastModifiedDate":"2023-03-26"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        return session.getCycle() \u003d\u003d cycle;","lastModifiedDate":"2023-03-26"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"    private HashMap\u003cString, String\u003e generateArguments(String cycle, String work, String brk, String longbrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-26"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"        argumentPayload.put(\"config\", \"\");","lastModifiedDate":"2023-03-26"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"        if (cycle !\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(ConfigCommand.ARGUMENT_CYCLE, cycle);","lastModifiedDate":"2023-03-26"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"        if (work !\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(ConfigCommand.ARGUMENT_WORK, work);","lastModifiedDate":"2023-03-26"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        if (brk !\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(ConfigCommand.ARGUMENT_BREAK, brk);","lastModifiedDate":"2023-03-26"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"        if (longbrk !\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(ConfigCommand.ARGUMENT_LONG_BREAK, longbrk);","lastModifiedDate":"2023-03-26"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"        return argumentPayload;","lastModifiedDate":"2023-03-26"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_success() {","lastModifiedDate":"2023-03-26"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"        // Test with missing arguments","lastModifiedDate":"2023-03-26"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"3\", \"10\", null, null);","lastModifiedDate":"2023-03-26"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-03-26"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"            fail(\"Expected execution to pass but failed!\");","lastModifiedDate":"2023-03-26"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"        assertTrue(isSessionCorrectlyUpdated(session, 3, 10, 1, 1));","lastModifiedDate":"2023-03-26"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"        // Test with numbers within range","lastModifiedDate":"2023-03-26"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"3\", \"20\", \"10\", \"15\");","lastModifiedDate":"2023-03-26"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-03-26"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"            fail(\"Expected execution to pass but failed!\");","lastModifiedDate":"2023-03-26"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"        assertTrue(isSessionCorrectlyUpdated(session, 3, 20, 10, 15));","lastModifiedDate":"2023-03-26"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"     * Ensure that at extreme valid values, executes still works","lastModifiedDate":"2023-03-26"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"    void executeTest_minMaxRanges_success() {","lastModifiedDate":"2023-03-26"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"        // Test with edge values (max accepted values)","lastModifiedDate":"2023-03-26"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"60\", \"60\", \"60\");","lastModifiedDate":"2023-03-26"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-03-26"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"            fail(\"Expected execution to pass but failed!\");","lastModifiedDate":"2023-03-26"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"        assertTrue(isSessionCorrectlyUpdated(session, 5, 60, 60, 60));","lastModifiedDate":"2023-03-26"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"        // Test with edge values (min accepted values)","lastModifiedDate":"2023-03-26"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"2\", \"1\", \"1\", \"1\");","lastModifiedDate":"2023-03-26"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-03-26"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"            fail(\"Expected execution to pass but failed!\");","lastModifiedDate":"2023-03-26"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"        assertTrue(isSessionCorrectlyUpdated(session, 2, 1, 1, 1));","lastModifiedDate":"2023-03-26"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"     * Ensure that negative numbers cause an error to be thrown","lastModifiedDate":"2023-03-26"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_negativeNumbers_exceptionThrown() {","lastModifiedDate":"2023-03-26"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"        // Test with negative time values","lastModifiedDate":"2023-03-26"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"10\", \"-5\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-04-09"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"            fail(\"No exception expected to throw!\");","lastModifiedDate":"2023-04-09"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"        assertEquals(EXPECTED_ERROR_MIN_MINS, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"        // Test with negative cycle values","lastModifiedDate":"2023-03-26"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"-5\", \"10\", \"10\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":233,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":235,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-04-09"},{"lineNumber":236,"author":{"gitId":"nichyjt"},"content":"            fail(\"No exception expected to throw!\");","lastModifiedDate":"2023-04-09"},{"lineNumber":237,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":238,"author":{"gitId":"nichyjt"},"content":"        assertEquals(EXPECTED_ERROR_MIN_CYCLE, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":239,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":240,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":241,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":242,"author":{"gitId":"nichyjt"},"content":"     * Ensure that large numbers (in config\u0027s context) cause an error to be thrown","lastModifiedDate":"2023-03-26"},{"lineNumber":243,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":244,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":245,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_largeNumbers_exceptionThrown() {","lastModifiedDate":"2023-03-26"},{"lineNumber":246,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":247,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":248,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":249,"author":{"gitId":"nichyjt"},"content":"        // Test with large time values","lastModifiedDate":"2023-03-26"},{"lineNumber":250,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"61\", \"10\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":251,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":252,"author":{"gitId":"nichyjt"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":253,"author":{"gitId":"nichyjt"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":254,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":255,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":256,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-04-09"},{"lineNumber":257,"author":{"gitId":"nichyjt"},"content":"            fail(\"No exception expected to throw!\");","lastModifiedDate":"2023-04-09"},{"lineNumber":258,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":259,"author":{"gitId":"nichyjt"},"content":"        assertEquals(EXPECTED_ERROR_MAX_MINS, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":260,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":261,"author":{"gitId":"nichyjt"},"content":"        // Test with large cycle values","lastModifiedDate":"2023-03-26"},{"lineNumber":262,"author":{"gitId":"nichyjt"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":263,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"10\", \"10\", \"10\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":264,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":265,"author":{"gitId":"nichyjt"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":266,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":267,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":268,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-04-09"},{"lineNumber":269,"author":{"gitId":"nichyjt"},"content":"            fail(\"No exception expected to throw!\");","lastModifiedDate":"2023-04-09"},{"lineNumber":270,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":271,"author":{"gitId":"nichyjt"},"content":"        assertEquals(EXPECTED_ERROR_MAX_CYCLE, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"     * Ensure that NaN values are correctly handled","lastModifiedDate":"2023-03-26"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_notANumber_exceptionThrown() {","lastModifiedDate":"2023-03-26"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"        // Test with NaN time value","lastModifiedDate":"2023-03-26"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"foo\", \"5\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":285,"author":{"gitId":"nichyjt"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":287,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":288,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":289,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-04-09"},{"lineNumber":290,"author":{"gitId":"nichyjt"},"content":"            fail(\"No exception expected to throw!\");","lastModifiedDate":"2023-04-09"},{"lineNumber":291,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":292,"author":{"gitId":"nichyjt"},"content":"        assertEquals(EXPECTED_ERROR_INVALID_PAYLOAD, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":293,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":294,"author":{"gitId":"nichyjt"},"content":"        // Test with NaN cycle value","lastModifiedDate":"2023-03-26"},{"lineNumber":295,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"bar\", \"5\", \"10\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":296,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":297,"author":{"gitId":"nichyjt"},"content":"        outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":298,"author":{"gitId":"nichyjt"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":299,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":300,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":301,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-04-09"},{"lineNumber":302,"author":{"gitId":"nichyjt"},"content":"            fail(\"No exception expected to throw!\");","lastModifiedDate":"2023-04-09"},{"lineNumber":303,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":304,"author":{"gitId":"nichyjt"},"content":"        assertEquals(EXPECTED_ERROR_INVALID_PAYLOAD, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":305,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-04-09"},{"lineNumber":306,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":307,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":308,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":309,"author":{"gitId":"nichyjt"},"content":"     * Ensure that length of argument errors are caught (too few \u0026 too many)","lastModifiedDate":"2023-03-26"},{"lineNumber":310,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":311,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":312,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_invalidArguments_exceptionThrown() {","lastModifiedDate":"2023-03-26"},{"lineNumber":313,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":314,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":315,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":316,"author":{"gitId":"nichyjt"},"content":"        // Test with too many arguments","lastModifiedDate":"2023-03-26"},{"lineNumber":317,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"10\", \"5\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":318,"author":{"gitId":"nichyjt"},"content":"        argumentPayload.put(\"foo\", \"bar\");","lastModifiedDate":"2023-03-26"},{"lineNumber":319,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":320,"author":{"gitId":"nichyjt"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-04-09"},{"lineNumber":321,"author":{"gitId":"nichyjt"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-04-09"},{"lineNumber":322,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-04-09"},{"lineNumber":323,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-04-09"},{"lineNumber":324,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-04-09"},{"lineNumber":325,"author":{"gitId":"nichyjt"},"content":"            fail(\"No exception expected to throw!\");","lastModifiedDate":"2023-04-09"},{"lineNumber":326,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-04-09"},{"lineNumber":327,"author":{"gitId":"nichyjt"},"content":"        assertEquals(EXPECTED_ERROR_INVALID_ARGS, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-04-09"},{"lineNumber":328,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":329,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":330,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"nichyjt":330}},{"path":"src/test/java/wellnus/reflection/command/FavoriteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"class FavoriteCommandTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND \u003d \"like 1\";","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final int MIN_QUESTION_LENGTH \u003d 3;","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_CORRECT_LENGTH \u003d true;","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final Integer[] ARR_INDEXES \u003d { 5, 6, 7, 8, 1};","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final HashSet\u003cInteger\u003e RANDOM_INDEXES \u003d new HashSet\u003c\u003e(Arrays.asList(ARR_INDEXES));","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    // Test whether fav list indexes are properly saved and returned","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    void getFavQuestions_checkListLength_success() throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        questionList.setRandomQuestionIndexes(RANDOM_INDEXES);","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadLikeCmd \u003d commandParser.parseUserInput(LIKE_COMMAND);","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmd \u003d new LikeCommand(argumentPayloadLikeCmd, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"        likeCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        String favQuestions \u003d questionList.getFavQuestions();","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(IS_CORRECT_LENGTH, favQuestions.length() \u003e\u003d MIN_QUESTION_LENGTH);","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":35}},{"path":"src/test/java/wellnus/reflection/command/GetCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionQuestion;","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-04-02"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":" * Class to test different tests for GetCommand Class utilising JUnit tests","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":" * Test cases will involve expected outputs and correct exception handling","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"class GetCommandTest {","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final int EXPECTED_ARRAY_LENGTH \u003d 5;","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final int EXPECTED_ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND \u003d \"get\";","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND_WRONG_FORMAT \u003d \"get reflect\";","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    // Test whether the get command is properly generated","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    void createGetObject_checkArgumentPayload_success() throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"        reflectManager.setArgumentPayload(GET_COMMAND);","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d reflectManager.getArgumentPayload();","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EXPECTED_ARGUMENT_PAYLOAD_SIZE, argumentPayload.size());","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"        assertTrue(argumentPayload.containsKey(GET_COMMAND));","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EMPTY_PAYLOAD, argumentPayload.get(GET_COMMAND));","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    // Test the number of questions being generated","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    void getRandomQuestions_checkLength_expectFive() throws BadCommandException, StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e getCmdArgumentPayload \u003d commandParser.parseUserInput(GET_COMMAND);","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        GetCommand get \u003d new GetCommand(getCmdArgumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e selectedQuestions \u003d get.getRandomQuestions();","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EXPECTED_ARRAY_LENGTH, selectedQuestions.size());","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    // Test whether command is validated properly.","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    void validateCommand_getCommand_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e getCmdArgumentPayload \u003d commandParser.parseUserInput(GET_COMMAND_WRONG_FORMAT);","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        GetCommand get \u003d new GetCommand(getCmdArgumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class, () -\u003e get.validateCommand(getCmdArgumentPayload));","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-11"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"wenxin-c":56,"YongbinWang":6}},{"path":"src/test/java/wellnus/reflection/command/HomeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-04-02"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":" * Class to test different tests for HomeCommand Class utilising JUnit tests","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":" * Test cases will involve expected outputs and correct exception handling","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"class HomeCommandTest {","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND_WRONG_FORMAT \u003d \"home back\";","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND_WITH_SPACES \u003d \"   home   \";","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_EXIT \u003d true;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    // Test whether ReturnCommand execute() method can terminate self reflection or not.","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkIsExit_expectTrue() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setArgumentPayload(HOME_COMMAND);","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e returnArgumentPayload \u003d reflectionManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand homeCmd \u003d new HomeCommand(returnArgumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"        homeCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(IS_EXIT, reflectionManager.getIsExit());","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    // Test whether wrong format command exception is caught or not.","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkWrongCmdFormat_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e homeArgumentPayload \u003d commandParser.parseUserInput(HOME_COMMAND_WRONG_FORMAT);","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand returnCmd \u003d new HomeCommand(homeArgumentPayload, questionList);","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"            returnCmd.validateCommand(homeArgumentPayload);","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        });","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"    // Test whether leading/dangling spaces will be removed.","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkSpaceRemoval_success() throws BadCommandException {","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setCommandType(HOME_COMMAND_WITH_SPACES);","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        String homeCommand \u003d reflectionManager.getCommandType();","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(HOME_COMMAND, homeCommand);","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"wenxin-c":53,"YongbinWang":5}},{"path":"src/test/java/wellnus/reflection/command/LikeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.ReflectionException;","lastModifiedDate":"2023-04-05"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.IndexMapper;","lastModifiedDate":"2023-04-02"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"// @@author wenxin-c","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"class LikeCommandTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND_KEYWORD \u003d \"like\";","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND \u003d \"like 1\";","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND_MISSING_PARAM \u003d \"like\";","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND_WRONG_PARAM \u003d \"like ab\";","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND_OUT_OF_BOUND \u003d \"like 10\";","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final int INPUT_INDEX \u003d 2;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final int INITIAL_INDEX \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final int INCREMENT_ONE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_ADDED \u003d true;","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final Integer[] ARR_INDEXES \u003d { 5, 6, 7, 8, 1};","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final HashSet\u003cInteger\u003e RANDOM_INDEXES \u003d new HashSet\u003c\u003e(Arrays.asList(ARR_INDEXES));","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    // Test whether the wrong input format can be caught.","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    void validateLikeCommand_checkFormat_expectExceptions() throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadMissingParam \u003d commandParser.parseUserInput(LIKE_COMMAND_MISSING_PARAM);","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmdMissingParam \u003d new LikeCommand(argumentPayloadMissingParam, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadWrongParam \u003d commandParser.parseUserInput(LIKE_COMMAND_WRONG_PARAM);","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmdWrongParam \u003d new LikeCommand(argumentPayloadWrongParam, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadOutBound \u003d commandParser.parseUserInput(LIKE_COMMAND_OUT_OF_BOUND);","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmdOutBound \u003d new LikeCommand(argumentPayloadOutBound, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(NumberFormatException.class, (","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e likeCmdMissingParam.addFavQuestion(argumentPayloadMissingParam.get(LIKE_COMMAND_KEYWORD)));","lastModifiedDate":"2023-04-05"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(NumberFormatException.class, (","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e likeCmdWrongParam.addFavQuestion(argumentPayloadWrongParam.get(LIKE_COMMAND_KEYWORD)));","lastModifiedDate":"2023-04-05"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(ReflectionException.class, (","lastModifiedDate":"2023-04-05"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e likeCmdOutBound.addFavQuestion(argumentPayloadOutBound.get(LIKE_COMMAND_KEYWORD)));","lastModifiedDate":"2023-04-05"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    // Test the mapping from user input to question index.","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    void addFavList_checkIndex_success() throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        questionList.setRandomQuestionIndexes(RANDOM_INDEXES);","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        IndexMapper indexMapper \u003d new IndexMapper(questionList.getRandomQuestionIndexes());","lastModifiedDate":"2023-04-02"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cInteger, Integer\u003e indexQuestionMap \u003d indexMapper.mapIndex();","lastModifiedDate":"2023-04-02"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"        int count \u003d INITIAL_INDEX;","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"        int finalIndex \u003d INITIAL_INDEX;","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"        for (int index : RANDOM_INDEXES) {","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"            if (count \u003e INPUT_INDEX) {","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"                break;","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"            }","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"            count +\u003d INCREMENT_ONE;","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"            finalIndex \u003d index;","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"        int questionIndex \u003d indexQuestionMap.get(INPUT_INDEX);","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(finalIndex, questionIndex);","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    // Test whether like question is successfully added into fav list","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"    void addFavList_checkQuestionList_success() throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"        questionList.setRandomQuestionIndexes(RANDOM_INDEXES);","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadLikeCmd \u003d commandParser.parseUserInput(LIKE_COMMAND);","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmd \u003d new LikeCommand(argumentPayloadLikeCmd, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"        likeCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"        Set\u003cInteger\u003e favList \u003d questionList.getDataIndex().get(INDEX_ZERO);","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"        for (int index : favList) {","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(index);","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(INCREMENT_ONE, favList.size());","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"        int index \u003d Integer.parseInt(argumentPayloadLikeCmd.get(LIKE_COMMAND_KEYWORD));","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(IS_ADDED, favList.contains(index));","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":91}},{"path":"src/test/java/wellnus/reflection/command/UnlikeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-04-02"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-04-02"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-04-02"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-04-02"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-04-02"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-04-02"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.ReflectionException;","lastModifiedDate":"2023-04-04"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-04-02"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"class UnlikeCommandTest {","lastModifiedDate":"2023-04-02"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String UNLIKE_KEYWORD \u003d \"unlike\";","lastModifiedDate":"2023-04-04"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final String UNLIKE_COMMAND \u003d \"unlike 1\";","lastModifiedDate":"2023-04-02"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final String UNLIKE_CMD_OUT_BOUND_INDEX \u003d \"unlike -1\";","lastModifiedDate":"2023-04-02"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final String UNLIKE_CMD_WRONG_FORMAT \u003d \"unlike ab\";","lastModifiedDate":"2023-04-02"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_LIST \u003d 0;","lastModifiedDate":"2023-04-02"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-04-02"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    // Test whether input validation works as expected","lastModifiedDate":"2023-04-02"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-04-02"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    void validateUnlikeCommand_differentFormats_success() throws BadCommandException {","lastModifiedDate":"2023-04-02"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-04-02"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-04-02"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentsUnlikeCmdOutBound \u003d commandParser.parseUserInput(UNLIKE_CMD_OUT_BOUND_INDEX);","lastModifiedDate":"2023-04-02"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"        UnlikeCommand unlikeCmd \u003d new UnlikeCommand(argumentsUnlikeCmdOutBound, questionList);","lastModifiedDate":"2023-04-02"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"        if (questionList.hasFavQuestions()) {","lastModifiedDate":"2023-04-05"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"            assertThrows(ReflectionException.class, (","lastModifiedDate":"2023-04-04"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"            ) -\u003e {","lastModifiedDate":"2023-04-02"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"                unlikeCmd.removeFavQuestion(argumentsUnlikeCmdOutBound.get(UNLIKE_KEYWORD));","lastModifiedDate":"2023-04-04"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"            });","lastModifiedDate":"2023-04-02"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-04-04"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentsUnlikeCmdWrongFormat \u003d commandParser.parseUserInput(UNLIKE_CMD_WRONG_FORMAT);","lastModifiedDate":"2023-04-02"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(NumberFormatException.class, (","lastModifiedDate":"2023-04-02"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e {","lastModifiedDate":"2023-04-02"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"            unlikeCmd.removeFavQuestion(argumentsUnlikeCmdWrongFormat.get(UNLIKE_KEYWORD));","lastModifiedDate":"2023-04-04"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"        });","lastModifiedDate":"2023-04-02"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-04-02"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    // Check whether empty fav list is caught","lastModifiedDate":"2023-04-02"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-04-02"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    void checkFavListLength_emptyList_expectZero() throws BadCommandException {","lastModifiedDate":"2023-04-02"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-04-02"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-04-02"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentsUnlikeCmdOutBound \u003d commandParser.parseUserInput(UNLIKE_COMMAND);","lastModifiedDate":"2023-04-02"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        UnlikeCommand unlikeCmd \u003d new UnlikeCommand(argumentsUnlikeCmdOutBound, questionList);","lastModifiedDate":"2023-04-02"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        unlikeCmd.execute();","lastModifiedDate":"2023-04-02"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EMPTY_LIST, questionList.getDataIndex().get(INDEX_ZERO).size());","lastModifiedDate":"2023-04-02"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-04-02"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-04-02"}],"authorContributionMap":{"wenxin-c":53}},{"path":"src/test/java/wellnus/reflection/feature/QuestionListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"// @@author wenxin-c","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"class QuestionListTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"    private static final int FULL_ARRAY_LENGTH \u003d 10;","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"    // Test the correct number of questions are loaded into the list","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"    void setUpQuestions_checkArrayLength_success() {","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e questions \u003d questionList.getAllQuestions();","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"        int fullArrayLength \u003d questions.size();","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(FULL_ARRAY_LENGTH, fullArrayLength);","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":20}},{"path":"src/test/java/wellnus/reflection/feature/ReflectionManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"class ReflectionManagerTest {","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND \u003d \"get\";","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND \u003d \"test\";","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String SEPARATOR \u003d \" \";","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown for invalid command","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    void execution_invalidCommand_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setCommandType(INVALID_COMMAND);","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class,","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"                reflectionManager::executeCommands);","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown for empty string for commandType.","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    void setCommandType_emptyString_expectException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        String[] input \u003d EMPTY_STRING.split(SEPARATOR);","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        System.out.println(input.length);","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class, (","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e reflectionManager.setCommandType(EMPTY_STRING));","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown for empty string for argument-payload pairs.","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    void setArgumentPayload_emptyCommand_expectException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class, (","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e reflectionManager.setArgumentPayload(EMPTY_STRING));","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    // Test whether argument_payload pair is properly generated.","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    void setArgumentPayload_singleCommand_expectEmptyPayload() throws BadCommandException {","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setArgumentPayload(GET_COMMAND);","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d reflectionManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"        String value \u003d argumentPayload.get(GET_COMMAND);","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EMPTY_STRING, value);","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"wenxin-c":55}},{"path":"src/test/java/wellnus/reflection/feature/ReflectionQuestionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-04-02"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"class ReflectionQuestionTest {","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    private static final String QUESTION \u003d \"How\u0027s today?\";","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    // Test whether questions will be created and printed in a proper format","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    void createReflectionQuestion_printString_success() {","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        ReflectionQuestion question \u003d new ReflectionQuestion(QUESTION);","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(question);","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(QUESTION, outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"wenxin-c":28}},{"path":"src/test/java/wellnus/storage/StorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import java.io.File;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Order;","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"public class StorageTest {","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    private Storage getStorageInstance() {","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"        Storage storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"            storage \u003d new Storage();","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to create instance of storage!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"            return null;","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"        return storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cString\u003e getDebugStringList() {","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        String entry0 \u003d \"attr0 p0\";","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        String entry1 \u003d \"attr1 p1 --p2 p3\";","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"        String entry2 \u003d \"attr2 --p1 p2 --p3 --p4\";","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"        String entry3 \u003d \"attr3\";","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e stringList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        stringList.add(entry0);","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"        stringList.add(entry1);","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        stringList.add(entry2);","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        stringList.add(entry3);","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        return stringList;","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    private String getDebugTokenizedString() {","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        return \"attr0 p0\"","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"                + Storage.DELIMITER","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"                + \"attr1 p1 --p2 p3\"","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"                + Storage.DELIMITER","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"                + \"attr2 --p1 p2 --p3 --p4\"","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"                + Storage.DELIMITER","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"                + \"attr3\"","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"                + Storage.DELIMITER;","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    @Order(1)","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    public void createAndDeleteFile_test() {","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        String debugFilename \u003d Storage.FILE_DEBUG;","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"        // Create test","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"        File debugFile;","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            debugFile \u003d storage.getFile(debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to create and get new file!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        // Remove test","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to delete file!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        // Sanity check that file actually is deleted","lastModifiedDate":"2023-03-19"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        assertFalse(debugFile.exists());","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    @Order(2)","lastModifiedDate":"2023-03-24"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"    public void tokenizeHashmap_test() {","lastModifiedDate":"2023-03-19"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-19"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e debugList \u003d getDebugStringList();","lastModifiedDate":"2023-03-19"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        String result \u003d storage.tokenizeStringList(debugList);","lastModifiedDate":"2023-03-19"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        String expected \u003d getDebugTokenizedString();","lastModifiedDate":"2023-03-19"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2023-03-19"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    @Order(3)","lastModifiedDate":"2023-03-24"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"    public void detokenizeDataString_test() {","lastModifiedDate":"2023-03-19"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-19"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        String dataString \u003d getDebugTokenizedString();","lastModifiedDate":"2023-03-19"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e expectedList \u003d getDebugStringList();","lastModifiedDate":"2023-03-19"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e result \u003d storage.detokenizeDataString(dataString);","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        assertEquals(result, expectedList);","lastModifiedDate":"2023-03-19"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     * Tests the end-to-end of saving and loading.","lastModifiedDate":"2023-03-20"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    @Order(4)","lastModifiedDate":"2023-03-24"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"    public void saveAndLoadData_test() {","lastModifiedDate":"2023-03-19"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-19"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        String debugFilename \u003d Storage.FILE_DEBUG;","lastModifiedDate":"2023-03-19"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        // Test saving logic","lastModifiedDate":"2023-03-19"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e debugList \u003d getDebugStringList();","lastModifiedDate":"2023-03-19"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"            storage.saveData(getDebugStringList(), debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"            fail(\"Storage failed to save data!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        // Test loading logic","lastModifiedDate":"2023-03-19"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-19"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"            result \u003d storage.loadData(debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"            fail(\"Storage failed to load data!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        assertEquals(debugList, result);","lastModifiedDate":"2023-03-19"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"        // Cleanup file","lastModifiedDate":"2023-03-19"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to cleanup file!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"     * Ensures that deleting a file that does not exist due to developer error does not crash WellNUS++","lastModifiedDate":"2023-03-24"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"    @Order(5)","lastModifiedDate":"2023-03-24"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"    public void deleteFile_fileNotExist_success() {","lastModifiedDate":"2023-03-24"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-24"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(Storage.FILE_DEBUG);","lastModifiedDate":"2023-03-24"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-24"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"            fail(\"deleteFile failed on file not exist!\");","lastModifiedDate":"2023-03-24"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"     * Ensure that loading an un-instantiated file automatically creates the file as safety behaviour","lastModifiedDate":"2023-03-24"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"    @Order(6)","lastModifiedDate":"2023-03-24"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"    public void loadFile_fileNotExist() {","lastModifiedDate":"2023-03-24"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-24"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"            storage.loadData(Storage.FILE_DEBUG);","lastModifiedDate":"2023-03-24"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-24"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"            fail(\"loadData failed when loading file that does not exist despite safety checks\");","lastModifiedDate":"2023-03-24"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"        // Cleanup the debug file that was created as part of safety measures","lastModifiedDate":"2023-03-24"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"        // deleteFile must work as the above tests on deleteFile have passed","lastModifiedDate":"2023-03-24"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-24"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(Storage.FILE_DEBUG);","lastModifiedDate":"2023-03-24"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to cleanup file!\");","lastModifiedDate":"2023-03-24"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"    @Order(7)","lastModifiedDate":"2023-03-24"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"    public void getFile_invalidFileName_exceptionThrown() {","lastModifiedDate":"2023-03-24"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"        assertThrows(StorageException.class, () -\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"            storage.getFile(\"foobar\");","lastModifiedDate":"2023-03-24"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected exception to be thrown for invalid filename\");","lastModifiedDate":"2023-03-24"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"    @Order(8)","lastModifiedDate":"2023-03-24"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"    public void saveData_invalidFileName_exceptionThrown() {","lastModifiedDate":"2023-03-24"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e payload \u003d getDebugStringList();","lastModifiedDate":"2023-03-24"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"        assertThrows(StorageException.class, () -\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"            storage.saveData(payload, \"foobar\");","lastModifiedDate":"2023-03-24"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected exception to be thrown for invalid filename\");","lastModifiedDate":"2023-03-24"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"    @Order(9)","lastModifiedDate":"2023-03-24"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"    public void loadData_invalidFileName_exceptionThrown() {","lastModifiedDate":"2023-03-24"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"        assertThrows(StorageException.class, () -\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"            storage.loadData(\"foobar\");","lastModifiedDate":"2023-03-24"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected exception to be thrown for invalid filename\");","lastModifiedDate":"2023-03-24"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"    @Order(10)","lastModifiedDate":"2023-03-24"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"    public void deleteFile_invalidFileName_exceptionThrown() {","lastModifiedDate":"2023-03-24"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"        assertThrows(StorageException.class, () -\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(\"foobar\");","lastModifiedDate":"2023-03-24"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected exception to be thrown for invalid filename\");","lastModifiedDate":"2023-03-24"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"nichyjt":214}},{"path":"src/test/java/wellnus/tokenize/AtomicHabitTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.tokenize;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"import wellnus.storage.AtomicHabitTokenizer;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"public class AtomicHabitTokenizerTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cString\u003e getInvalidTokenizedArrayList(String invalidString) {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e invalidTokenizedArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"        invalidTokenizedArrayList.add(invalidString);","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"        return invalidTokenizedArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    void tokenizeHabit_checkOutput_success() {","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedHabitOne \u003d \"--description foo --count 1\";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedHabitTwo \u003d \"--description bar --count 2\";","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e habitsToTokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabit atomicHabitTestOne \u003d new AtomicHabit(\"foo\", 1);","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabit atomicHabitTestTwo \u003d new AtomicHabit(\"bar\", 2);","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"        habitsToTokenize.add(atomicHabitTestOne);","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"        habitsToTokenize.add(atomicHabitTestTwo);","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabitTokenizer habitTokenizer \u003d new AtomicHabitTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e actualTokenizedAtomicHabits \u003d habitTokenizer.tokenize(habitsToTokenize);","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedTokenizedHabitOne, actualTokenizedAtomicHabits.get(INDEX_ZERO));","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedTokenizedHabitTwo, actualTokenizedAtomicHabits.get(INDEX_ONE));","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeHabit_checkOutput_success() throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedHabitTestOne \u003d \"--description foo --count 1\";","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedHabitTestTwo \u003d \"--description bar baz --count 1000\";","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        String expectedDescriptionTestOne \u003d \"foo\";","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"        String expectedDescriptionTestTwo \u003d \"bar baz\";","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"        int expectedCountTestOne \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"        int expectedCountTestTwo \u003d 1000;","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e tokenizedHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"        tokenizedHabits.add(tokenizedHabitTestOne);","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"        tokenizedHabits.add(tokenizedHabitTestTwo);","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabitTokenizer habitTokenizer \u003d new AtomicHabitTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e actualDetokenizedAtomicHabits \u003d habitTokenizer.detokenize(tokenizedHabits);","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedDescriptionTestOne, actualDetokenizedAtomicHabits.get(INDEX_ZERO).getDescription());","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedCountTestOne, actualDetokenizedAtomicHabits.get(INDEX_ZERO).getCount());","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedDescriptionTestTwo, actualDetokenizedAtomicHabits.get(INDEX_ONE).getDescription());","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedCountTestTwo, actualDetokenizedAtomicHabits.get(INDEX_ONE).getCount());","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeHabit_checkOutputEmptyString_success() throws TokenizerException {","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e expectedDetokenizedAtomicHabit \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e tokenizedHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabitTokenizer habitTokenizer \u003d new AtomicHabitTokenizer();","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e actualDetokenizedAtomicHabits \u003d habitTokenizer.detokenize(tokenizedHabits);","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedDetokenizedAtomicHabit, actualDetokenizedAtomicHabits);","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeHabit_invalidTokenizedAtomicHabitString_tokenizerExceptionThrown() throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabitTokenizer habitTokenizer \u003d new AtomicHabitTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringOne \u003d \"foo\";","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringOne));","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringTwo \u003d \"--description\";","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringTwo));","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringThree \u003d \"description count\";","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringThree));","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringFour \u003d \"--description --count\";","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringFour));","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringFive \u003d \"--description foo --count bar\";","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringFive));","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringSix \u003d \"--description foo --count 1 --baz baz\";","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringSix));","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":92}},{"path":"src/test/java/wellnus/tokenize/ReflectionTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.tokenize;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-04-08"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"import wellnus.storage.ReflectionTokenizer;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"public class ReflectionTokenizerTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    void tokenizeReflect_checkOutput_success() {","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e indexesToTokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e likeTestIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"        likeTestIndexes.add(1);","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"        likeTestIndexes.add(2);","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e prevTestIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-04-02"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"        prevTestIndexes.add(3);","lastModifiedDate":"2023-04-02"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"        prevTestIndexes.add(4);","lastModifiedDate":"2023-04-02"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"        indexesToTokenize.add(likeTestIndexes);","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"        indexesToTokenize.add(prevTestIndexes);","lastModifiedDate":"2023-04-02"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedLike \u003d \"like:1,2\";","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedPrev \u003d \"prev:3,4\";","lastModifiedDate":"2023-04-02"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e expectedTokenizedIndex \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"        expectedTokenizedIndex.add(expectedTokenizedLike);","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"        expectedTokenizedIndex.add(expectedTokenizedPrev);","lastModifiedDate":"2023-04-02"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"        ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e actualTokenizedIndex \u003d reflectionTokenizer.tokenize(indexesToTokenize);","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedTokenizedIndex, actualTokenizedIndex);","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"    void tokenizeReflect_checkOutputEmptyIndex_success() {","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e indexesToTokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e likeTestIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e prevTestIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-04-02"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"        indexesToTokenize.add(likeTestIndexes);","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"        indexesToTokenize.add(prevTestIndexes);","lastModifiedDate":"2023-04-02"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedLike \u003d \"like:\";","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedPrev \u003d \"prev:\";","lastModifiedDate":"2023-04-02"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e expectedTokenizedIndex \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"        expectedTokenizedIndex.add(expectedTokenizedLike);","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        expectedTokenizedIndex.add(expectedTokenizedPrev);","lastModifiedDate":"2023-04-02"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e actualTokenizedIndex \u003d reflectionTokenizer.tokenize(indexesToTokenize);","lastModifiedDate":"2023-03-22"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedTokenizedIndex, actualTokenizedIndex);","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeReflect_checkOutput_success() throws TokenizerException {","lastModifiedDate":"2023-04-08"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e expectedDetokenizedLikes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedLikes.add(1);","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedLikes.add(2);","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e expectedDetokenizedPrevs \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-04-02"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedPrevs.add(1);","lastModifiedDate":"2023-04-02"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedPrevs.add(2);","lastModifiedDate":"2023-04-02"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedPrevs.add(3);","lastModifiedDate":"2023-04-02"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedPrevs.add(4);","lastModifiedDate":"2023-04-02"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedPrevs.add(5);","lastModifiedDate":"2023-04-02"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e stringsToDetokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedLikeTest \u003d \"like:1,2\";","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedPrevTest \u003d \"prev:1,2,3,4,5\";","lastModifiedDate":"2023-04-02"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"        stringsToDetokenize.add(tokenizedLikeTest);","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"        stringsToDetokenize.add(tokenizedPrevTest);","lastModifiedDate":"2023-04-02"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"        ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e actualDetokenizedIndex \u003d reflectionTokenizer.detokenize(stringsToDetokenize);","lastModifiedDate":"2023-03-22"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedDetokenizedLikes, actualDetokenizedIndex.get(INDEX_ZERO));","lastModifiedDate":"2023-03-22"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedDetokenizedPrevs, actualDetokenizedIndex.get(INDEX_ONE));","lastModifiedDate":"2023-04-02"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeReflect_checkOutputEmptyString_success() throws TokenizerException {","lastModifiedDate":"2023-04-08"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e expectedDetokenizedLikes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e expectedDetokenizedPrevs \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-04-02"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e stringsToDetokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e actualDetokenizedIndex \u003d reflectionTokenizer.detokenize(stringsToDetokenize);","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedDetokenizedLikes, actualDetokenizedIndex.get(INDEX_ZERO));","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedDetokenizedPrevs, actualDetokenizedIndex.get(INDEX_ONE));","lastModifiedDate":"2023-04-02"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":87}},{"path":"src/test/java/wellnus/ui/TextUiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"// Test methods associated with TextUi class","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"class TextUiTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final String DEFAULT_SEPARATOR \u003d \"----------------------------------------\"","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"            + \"--------------------\";","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final String ALERT_SEPARATOR \u003d \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!\"","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"            + \"---------!!!!!!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String TEST_OUTPUT_MSG_ONE \u003d \"Hello \";","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String TEST_OUTPUT_MSG_TWO \u003d \"World\";","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String OUTPUT_MSG_ONE \u003d \"Hello\";","lastModifiedDate":"2023-04-09"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDENTATION \u003d \"    \";","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARITHMETIC_EXCEPTION_MSG_ONE \u003d \"Please check your arithmetic equation!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARITHMETIC_EXCEPTION_MSG_TWO \u003d \"E.g. Denominator is 0 in division.\";","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_MESSAGE_LABEL \u003d \"Error Message:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String EXTRA_MESSAGE_LABEL \u003d \"Note:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String GREET_MSG \u003d \"How are you?\";","lastModifiedDate":"2023-04-09"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String OPERATION \u003d \"/ by zero\";","lastModifiedDate":"2023-04-09"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String INPUT_WHITESPACE \u003d \" My string \";","lastModifiedDate":"2023-04-09"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final String INPUT_WITHOUT_WHITESPACE \u003d \"My string\";","lastModifiedDate":"2023-04-09"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final TextUi UI \u003d new TextUi();","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final int TEST_NUMERATOR \u003d 2;","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final int TEST_DENOMINATOR \u003d 0;","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"     * Read test input command and return back the command string.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"     * For JUnit testing purpose only.","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"     * @param readInput Scanner object with System.in being overwritten in test","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"     * @return User input command with leading/dangling whitespace being removed","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    public static String getCommand(Scanner readInput) {","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        String inputLine \u003d readInput.nextLine();","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        String userCommand \u003d inputLine.trim();","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        return userCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    // Test whether removal of leading/dangling space is successful","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    void getCommand_trimSpace_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        InputStream sysInBackup \u003d System.in;","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"        ByteArrayInputStream in \u003d new ByteArrayInputStream((INPUT_WHITESPACE","lastModifiedDate":"2023-04-09"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator()).getBytes());","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"        System.setIn(in);","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"        Scanner readLine \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"        String command \u003d getCommand(readLine);","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(INPUT_WITHOUT_WHITESPACE, command);","lastModifiedDate":"2023-04-09"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"        System.setIn(sysInBackup);","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"        readLine.close();","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    // Test whether default line separator is properly drawn","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"    void printSeparator_defaultVersion_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"        UI.printSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(DEFAULT_SEPARATOR, outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exception message will properly printed with correct format","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    void printErrorFor_arithmeticException_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        String errorMsg \u003d ARITHMETIC_EXCEPTION_MSG_ONE + System.lineSeparator() + ARITHMETIC_EXCEPTION_MSG_TWO;","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"            int result \u003d TEST_NUMERATOR / TEST_DENOMINATOR;","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"        } catch (ArithmeticException exception) {","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(exception, errorMsg);","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(ALERT_SEPARATOR + System.lineSeparator() + ERROR_MESSAGE_LABEL","lastModifiedDate":"2023-03-11"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + INDENTATION + OPERATION + System.lineSeparator()","lastModifiedDate":"2023-04-09"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"                + EXTRA_MESSAGE_LABEL + System.lineSeparator() + INDENTATION + ARITHMETIC_EXCEPTION_MSG_ONE","lastModifiedDate":"2023-03-11"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + INDENTATION + ARITHMETIC_EXCEPTION_MSG_TWO + System.lineSeparator()","lastModifiedDate":"2023-03-11"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"                + ALERT_SEPARATOR,","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"                outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"    // Test whether messages will be properly printed with correct format","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"    void printOutputMessage_greeting_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(GREET_MSG);","lastModifiedDate":"2023-04-09"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(DEFAULT_SEPARATOR + System.lineSeparator()","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"                + INDENTATION + GREET_MSG + System.lineSeparator() + DEFAULT_SEPARATOR,","lastModifiedDate":"2023-04-09"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"                outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"    // Test whether multi-line message can be printed with correct indentation","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"    void printMultiLineMessage_twoLines_success() {","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"        String multiLineOutput \u003d TEST_OUTPUT_MSG_ONE + System.lineSeparator() + TEST_OUTPUT_MSG_TWO;","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(multiLineOutput);","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"        assertEquals((DEFAULT_SEPARATOR + System.lineSeparator() + INDENTATION + OUTPUT_MSG_ONE","lastModifiedDate":"2023-04-09"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + INDENTATION + TEST_OUTPUT_MSG_TWO","lastModifiedDate":"2023-04-09"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + DEFAULT_SEPARATOR),","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"                outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":109,"haoyangw":1,"nichyjt":4}}]
