[{"path":".github/ISSUE_TEMPLATE/administrative-matters.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"name: Administrative Matters","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"about: Add chores that must be done","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"title: \"[Task] Your Chore Name\"","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"labels: priority.Low, type.Task","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"**Describe the Task**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what the Task/Chore is.  ","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"e.g. Move testing code to new folder","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"**To Reproduce**","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"Steps to reproduce the behavior:","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"1. Go to \u0027...\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"2. Click on \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"3. Scroll down to \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"4. See error","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"**Expected behavior**","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what you expected to happen.","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"**Screenshots**","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"If applicable, add screenshots to help explain your problem.","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"**Desktop (please complete the following information):**","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" - OS: [e.g. iOS]","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" - Browser [e.g. chrome, safari]","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":" - Version [e.g. 22]","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"**Additional context**","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"Add any other context about the problem here.","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"**Labels**","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"Remember to tag the priority using the labels function.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"nichyjt":36}},{"path":".github/ISSUE_TEMPLATE/bug_report.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"name: Bug report","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"about: File a bug report for WellNUS++","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"title: \"[Bug] Your Bug Name\"","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"labels: severity.Low, type.Bug","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"**Describe the bug**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what the bug is.","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"**To Reproduce**","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"Steps to reproduce the behavior:","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"1. Go to \u0027...\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"2. Click on \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"3. Scroll down to \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"4. See error","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"**Expected behavior**","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what you expected to happen.","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"**Screenshots**","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"If applicable, add screenshots to help explain your problem.","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"**Desktop (please complete the following information):**","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" - OS: [e.g. iOS]","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" - Browser [e.g. chrome, safari]","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" - Version [e.g. 22]","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"**Additional context**","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"Add any other context about the problem here.","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"**Severity**","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"Remember to tag the severity of the bug and priority (if applicable) using the labels function.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"nichyjt":35}},{"path":".github/ISSUE_TEMPLATE/enhancement.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"name: Enhancement","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"about: Anything that improves on an existing feature/implementation","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"title: \"[Enhancement] Your Enhancement\"","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"labels: priority.Low, type.Enhancement","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"**What is the current behaviour? Please describe any relevant features.**","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"**Why should this behaviour be changed/improved? Describe any relevant user stories/frustrations.**","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"**Describe your proposed enhancement.**","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"**Screenshots(if any) of the enhancement.**","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"**Any alternative implementations/enhancements that were considered?**","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"If any exist, explain why they were not chosen.","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"**Why should this enhancement be added? Explain its benefits/significance.**","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"haoyangw":21}},{"path":".github/ISSUE_TEMPLATE/user-story-features.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"name: User Story Features","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"about: Anything related to adding features that involve user stories","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"title: \"[User Story Feature] Your Feature\"","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"labels: priority.Low, type.Story","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"**User Story**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"What is the user story this feature aims to achieve?  ","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"Describe it and label the issue accordingly.  ","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"- Is it a \u0027Epic\u0027 -\u003e A big feature which can be broken down into smaller stories","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"- Is it a \u0027Story\u0027 -\u003e A smaller feature","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"**Is your feature request related to a problem? Please describe.**","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what the problem is. Ex. I\u0027m always frustrated when [...]","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"**Describe the solution you\u0027d like**","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what you want to happen.","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"**Describe alternatives you\u0027ve considered**","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of any alternative solutions or features you\u0027ve considered.  Optional if it does not value-add to the issue.  ","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"**Additional context**","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"Add any other context or screenshots about the feature request here.","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"**Labels**","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"Remember to label the feature with the appropriate `priority` and `type`.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"nichyjt":29}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    mainClass \u003d \"wellnus.WellNus\"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    archiveBaseName \u003d \"WellNus\"","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"haoyangw":1,"-":44,"nichyjt":1}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"| Display                                       |           Name             |            Github Profile                  |             Portfolio              |","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"|-----------------------------------------------|:--------------------------:|:-------------------------------------:     |:---------------------------------: |","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"| ![Chen Wenxin](./team/wenxin.jpg)             |        Chen Wenxin         | [Github](https://github.com/wenxin-c)      | [Portfolio](docs/team/wenxin.md)   |","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"| ![Wang Haoyang](./team/WangHaoyang.png)       |        Wang Haoyang        | [Github](https://github.com/haoyangw)      | [Portfolio](docs/team/haoyangw.md) |","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"| ![Wang Yongbin](./team/yongbin.png)           |        Wang Yongbin        | [Github](https://github.com/YongbinWang)   | [Portfolio](docs/team/yongbin.md)  |","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"| ![Bernard Lesley](./team/Bernard.jpg)         |   Bernard Lesley Efendy    | [Github](https://github.com/BernardLesley) | [Portfolio](docs/team/bernard.md)  |","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"| ![Yek Jin Teck, Nicholas](./team/nichyjt.jpg) |   Yek Jin Teck, Nicholas   |  [Github](https://github.com/nichyjt)      | [Portfolio](docs/team/nichyjt.md)  |","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"wenxin-c":1,"-":2,"nichyjt":6}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"# WellNUS++ User Guide","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":",--.   ,--.       ,--.,--.,--.  ,--.,--. ,--. ,---.     |  |        |  |     ","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"|  |   |  | ,---. |  ||  ||  ,\u0027.|  ||  | |  |\u0027   .-\u0027,---|  |---.,---|  |---. ","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"|  |.\u0027.|  || .-. :|  ||  ||  |\u0027 \u0027  ||  | |  |`.  `-.\u0027---|  |---\u0027\u0027---|  |---\u0027 ","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"|   ,\u0027.   |\\\\  --.|  ||  ||  | `   |\u0027  \u0027-\u0027  \u0027.-\u0027    |   |  |        |  |     ","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"\u0027--\u0027   \u0027--\u0027 `----\u0027`--\u0027`--\u0027`--\u0027  `--\u0027 `-----\u0027 `-----\u0027    `--\u0027        `--\u0027     ","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"WellNUS++ is a Command Line Interface(CLI) app for NUS Computing students to keep track and improve their physical and","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"mental wellness in various aspects. If you can type fast, WellNUS++ can update their wellness progress faster than","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"traditional Graphical User Interface(GUI) apps.","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"## Table of Contents","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"- [WellNUS++ User Guide](#wellnus-user-guide)","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    - [Quick Start](#quick-start)","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    - [Features](#features)","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"        - [Command format](#command-format)","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"        - [Viewing help](#viewing-help--help)","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"        - [Accessing feature](#accessing-feature--featurename)","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"        - [Add new atomic habit](#add-new-atomic-habit--add)","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"        - [List all atomic habits](#list-all-atomic-habit--list)","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"        - [Update an atomic habit](#update-an-atomic-habit---update)","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"        - [Home](#home--home)","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"        - [Get reflection questions](#get-reflection-questions--get)","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"        - [Exit](#exit--exit)","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    - [FAQ](#faq)","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    - [Command Summary](#command-summary)","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"1. Ensure you have Java 11 or above installed in your Computer.","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"2. Download the latest wellnus++.jar from here.","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"3. Copy the file to the folder you want to use as the home folder for your WellNUS++.","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"4. Open a command terminal, cd into the folder you put the .jar file in, and use the java -jar wellnus++.jar command to","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"   run the application.","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"   A CLI should appear in a few seconds.","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"WellNUS++ comes with a variety of features to help you enhance your overall wellness in NUS!","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"### Command Format","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"* Words in UPPER_CASE are the parameters to be supplied by the user.","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"  e.g. in add --name NAME is a parameter which can be used as add --name John Doe.","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"* Items in square brackets are optional.","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"  E.g --name NAME  [--tag TAG] can be used as --name John Doe --tag friend or as --name John Doe.","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"* Items with … after them can be used multiple times including zero times.","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"  e.g. [--tag TAG]… can be used as   (i.e. 0 times), --tag friend, --tag friend, --tag family etc.","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"* Parameters can be in any order.","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"  e.g. if the command specifies --name NAME --phone PHONE_NUMBER, --phone PHONE_NUMBER --name NAME is also acceptable.","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"### Viewing help: `help`","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"Lists all commands available and provide a short description of the application","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"Format: `help`","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"* List all commands available in the app and a short description of the app","lastModifiedDate":"2023-03-17"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"* Give a detailed explanation of the parameters and subcommands for a given command","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"`help`","lastModifiedDate":"2023-03-17"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"    We are here to ensure your wellness is taken care of through WellNUS++","lastModifiedDate":"2023-03-17"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"    Here are all the commands available for you!","lastModifiedDate":"2023-03-17"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"    1. hb - Enter Atomic Habits: Track your small daily habits and nurture it to form a larger behaviour","lastModifiedDate":"2023-03-17"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    usage: hb","lastModifiedDate":"2023-03-17"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"    2. reflect - Read through introspective questions for your reflection","lastModifiedDate":"2023-03-17"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"    usage: reflect","lastModifiedDate":"2023-03-17"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"    3. exit - Exit WellNUS++","lastModifiedDate":"2023-03-17"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"    usage: exit","lastModifiedDate":"2023-03-17"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"### Accessing feature: `FEATURE_NAME`","lastModifiedDate":"2023-03-17"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"Access specific feature from main interface by inputting the feature_name","lastModifiedDate":"2023-03-17"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"Feature name can be referenced by calling the help command","lastModifiedDate":"2023-03-17"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"Format: `FEATURE_NAME`","lastModifiedDate":"2023-03-17"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"* Accesses unique features to utilise their respective actions","lastModifiedDate":"2023-03-17"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"`reflect`","lastModifiedDate":"2023-03-17"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-17"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"    Welcome to WellNUS++ Self Reflection section :D","lastModifiedDate":"2023-03-17"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"    Feel very occupied and cannot find time to self reflect?","lastModifiedDate":"2023-03-17"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"    No worries, this section will give you the opportunity to reflect and improve on yourself!!","lastModifiedDate":"2023-03-17"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-17"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"### Add new atomic habit: `add`","lastModifiedDate":"2023-03-17"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"Adds an atomic habit to be tracked by WellNUS++ when accessing atomic habit feature","lastModifiedDate":"2023-03-17"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"Format: `add --name ATOMIC_HABIT_NAME `","lastModifiedDate":"2023-03-17"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"* ATOMIC_HABIT_NAME is used to uniquely identify each habit(unique and not null)","lastModifiedDate":"2023-03-17"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"`add --name make bed every morning`","lastModifiedDate":"2023-03-17"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    Yay! You have added a new habit:","lastModifiedDate":"2023-03-17"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"    \u0027make bed every morning\u0027 was successfully added","lastModifiedDate":"2023-03-17"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":139,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"### List all atomic habit: `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":142,"author":{"gitId":"YongbinWang"},"content":"Shows a list of all atomic habits.","lastModifiedDate":"2023-03-17"},{"lineNumber":143,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":144,"author":{"gitId":"YongbinWang"},"content":"Format: `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"`list`","lastModifiedDate":"2023-03-17"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":152,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"—-------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":154,"author":{"gitId":"YongbinWang"},"content":"Here is the current accumulation of your atomic habits!","lastModifiedDate":"2023-03-17"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"Keep up the good work and you will develop a helpful habit in no time","lastModifiedDate":"2023-03-17"},{"lineNumber":156,"author":{"gitId":"YongbinWang"},"content":"1.Make Bed every morning [1]","lastModifiedDate":"2023-03-17"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"2.Read for at least 30 minutes every day [3]","lastModifiedDate":"2023-03-17"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"3.Avoid checking phone for the first hour after waking up [2]","lastModifiedDate":"2023-03-17"},{"lineNumber":159,"author":{"gitId":"YongbinWang"},"content":"... ","lastModifiedDate":"2023-03-17"},{"lineNumber":160,"author":{"gitId":"YongbinWang"},"content":"—--------------------------------------------------------------- ","lastModifiedDate":"2023-03-17"},{"lineNumber":161,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":162,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":163,"author":{"gitId":"YongbinWang"},"content":"### Update an atomic habit: `update","lastModifiedDate":"2023-03-17"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":165,"author":{"gitId":"YongbinWang"},"content":"Increment the number of times that an atomic habit has been carried out.","lastModifiedDate":"2023-03-17"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":167,"author":{"gitId":"YongbinWang"},"content":"Format:","lastModifiedDate":"2023-03-17"},{"lineNumber":168,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"* Step 1: List the current habits using command","lastModifiedDate":"2023-03-17"},{"lineNumber":170,"author":{"gitId":"YongbinWang"},"content":"* `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"* Step 2: Select the habit to update by entering the index number of the habit HABIT_INDEX according to index of the","lastModifiedDate":"2023-03-17"},{"lineNumber":172,"author":{"gitId":"YongbinWang"},"content":"  list output","lastModifiedDate":"2023-03-17"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"  The user can specify the number of increments for the habit count via NUMBER_TO_INCREMENT","lastModifiedDate":"2023-03-17"},{"lineNumber":174,"author":{"gitId":"YongbinWang"},"content":"  The default behaviour is to increment the behaviour by 1","lastModifiedDate":"2023-03-17"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"* `update --id HABIT-INDEX [--inc NUMBER_TO_INCREMENT]`","lastModifiedDate":"2023-03-17"},{"lineNumber":176,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":177,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":178,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"* `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":180,"author":{"gitId":"YongbinWang"},"content":"* `update --id 1 --inc 2`","lastModifiedDate":"2023-03-17"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":183,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":184,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":185,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":186,"author":{"gitId":"YongbinWang"},"content":"Here is the current accumulation of your atomic habits!","lastModifiedDate":"2023-03-17"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"Keep up the good work and you will develop a helpful habit in no time","lastModifiedDate":"2023-03-17"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"1. Make bed every morning [5]","lastModifiedDate":"2023-03-17"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"2. Read for at least 30 minutes every day [3] ","lastModifiedDate":"2023-03-17"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":192,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":193,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":194,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":195,"author":{"gitId":"YongbinWang"},"content":"The following habit has been incremented! Keep up the good work!","lastModifiedDate":"2023-03-17"},{"lineNumber":196,"author":{"gitId":"YongbinWang"},"content":"1. Make bed every morning [7]","lastModifiedDate":"2023-03-17"},{"lineNumber":197,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":198,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":199,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":200,"author":{"gitId":"YongbinWang"},"content":"### Home: `home`","lastModifiedDate":"2023-03-17"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"To leave the current feature and return back to main interface","lastModifiedDate":"2023-03-17"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"Format: `home`","lastModifiedDate":"2023-03-17"},{"lineNumber":205,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":206,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":207,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":208,"author":{"gitId":"YongbinWang"},"content":"`home`","lastModifiedDate":"2023-03-17"},{"lineNumber":209,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":210,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":211,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":212,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":214,"author":{"gitId":"YongbinWang"},"content":"Thank you for using atomic habits. Do not forget about me!","lastModifiedDate":"2023-03-17"},{"lineNumber":215,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":216,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":217,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":218,"author":{"gitId":"YongbinWang"},"content":"### Get reflection questions: `get`","lastModifiedDate":"2023-03-17"},{"lineNumber":219,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":220,"author":{"gitId":"YongbinWang"},"content":"Ask WellNUS++ to get a set of 5 random introspective questions for users to view","lastModifiedDate":"2023-03-17"},{"lineNumber":221,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":222,"author":{"gitId":"YongbinWang"},"content":"Format: `get`","lastModifiedDate":"2023-03-17"},{"lineNumber":223,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":224,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":225,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":226,"author":{"gitId":"YongbinWang"},"content":"`get`","lastModifiedDate":"2023-03-17"},{"lineNumber":227,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":228,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":229,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":230,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":231,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-17"},{"lineNumber":232,"author":{"gitId":"YongbinWang"},"content":"    1.What are three of my most cherished personal values?","lastModifiedDate":"2023-03-17"},{"lineNumber":233,"author":{"gitId":"YongbinWang"},"content":"    2.What is my purpose in life?","lastModifiedDate":"2023-03-17"},{"lineNumber":234,"author":{"gitId":"YongbinWang"},"content":"    3.What scares me the most right now?","lastModifiedDate":"2023-03-17"},{"lineNumber":235,"author":{"gitId":"YongbinWang"},"content":"    4.What is something that brings me joy?","lastModifiedDate":"2023-03-17"},{"lineNumber":236,"author":{"gitId":"YongbinWang"},"content":"    5.When is the last time I gave back to others?","lastModifiedDate":"2023-03-17"},{"lineNumber":237,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-17"},{"lineNumber":238,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":239,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":240,"author":{"gitId":"YongbinWang"},"content":"### Exit: `exit`","lastModifiedDate":"2023-03-17"},{"lineNumber":241,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":242,"author":{"gitId":"YongbinWang"},"content":"To exit the app, data of the current progress will be saved upon exiting the program","lastModifiedDate":"2023-03-17"},{"lineNumber":243,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":244,"author":{"gitId":"YongbinWang"},"content":"Format: `exit`","lastModifiedDate":"2023-03-17"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":246,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":248,"author":{"gitId":"YongbinWang"},"content":"`exit`","lastModifiedDate":"2023-03-17"},{"lineNumber":249,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":250,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":252,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":253,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":254,"author":{"gitId":"YongbinWang"},"content":"    Thank you for using WellNUS++! See you again soon Dx","lastModifiedDate":"2023-03-17"},{"lineNumber":255,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":256,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":258,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-24"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":260,"author":{"gitId":"YongbinWang"},"content":"**Q**: Will my data be saved after every update?","lastModifiedDate":"2023-03-17"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":262,"author":{"gitId":"YongbinWang"},"content":"**A**: No it is currently not implemented, saving will only be done when you exit the program","lastModifiedDate":"2023-03-17"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":264,"author":{"gitId":"YongbinWang"},"content":"**Q**: How can I navigate the program?","lastModifiedDate":"2023-03-17"},{"lineNumber":265,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":266,"author":{"gitId":"YongbinWang"},"content":"**A**: Please type help when you start the program to view all the commands available","lastModifiedDate":"2023-03-17"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":268,"author":{"gitId":"YongbinWang"},"content":"**Q**: How do I start the program?","lastModifiedDate":"2023-03-17"},{"lineNumber":269,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":270,"author":{"gitId":"YongbinWang"},"content":"**A**: Please run the JAR file on your local machine","lastModifiedDate":"2023-03-17"},{"lineNumber":271,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":272,"author":{"gitId":"YongbinWang"},"content":"**Q**: Where will my data be stored?","lastModifiedDate":"2023-03-17"},{"lineNumber":273,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":274,"author":{"gitId":"YongbinWang"},"content":"**A**: Your data will be stored in the separate folder with reference from the program directory","lastModifiedDate":"2023-03-17"},{"lineNumber":275,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":276,"author":{"gitId":"YongbinWang"},"content":"## Command Summary","lastModifiedDate":"2023-03-17"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":278,"author":{"gitId":"YongbinWang"},"content":"* Help `help`","lastModifiedDate":"2023-03-17"},{"lineNumber":279,"author":{"gitId":"YongbinWang"},"content":"* Access feature `reflect`","lastModifiedDate":"2023-03-17"},{"lineNumber":280,"author":{"gitId":"YongbinWang"},"content":"* Add habit `add --name make bed`","lastModifiedDate":"2023-03-17"},{"lineNumber":281,"author":{"gitId":"YongbinWang"},"content":"* View habit `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":282,"author":{"gitId":"YongbinWang"},"content":"* Update habit `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":283,"author":{"gitId":"YongbinWang"},"content":"  `update --id 1 [--inc 2]`","lastModifiedDate":"2023-03-17"},{"lineNumber":284,"author":{"gitId":"YongbinWang"},"content":"* Return to main interface `home`","lastModifiedDate":"2023-03-17"},{"lineNumber":285,"author":{"gitId":"YongbinWang"},"content":"* Get question `get`","lastModifiedDate":"2023-03-17"},{"lineNumber":286,"author":{"gitId":"YongbinWang"},"content":"* Exit program `exit`","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"YongbinWang":264,"-":22}},{"path":"docs/team/bernard.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"# John Doe - Project Portfolio Page","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"## Overview","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"BernardLesley":5}},{"path":"docs/team/haoyangw.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"# Wang Haoyang - Project Portfolio","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"## Overview","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"A developer from Team 4 of CS2113 Tutorial Group 12","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"haoyangw":6}},{"path":"docs/team/nichyjt.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"# Yek Jin Teck, Nicholas - Project Portfolio Page","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"## Overview","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"Hi, I\u0027m Nicholas.","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"nichyjt":6}},{"path":"docs/team/wenxin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"# Wenxin - Project Portfolio Page","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"## Overview","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"wenxin-c":6}},{"path":"docs/team/yongbin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"# Yongbin - Project Portfolio Page","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"## Overview","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"Hi I am yongbin","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"YongbinWang":6}},{"path":"src/main/java/wellnus/WellNus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.MainManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"public class WellNus {","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"    private static final String BYE_MESSAGE \u003d \"Thank you for using WellNUS++! See you again soon Dx\";","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"    private static final String GREETING_MESSAGE \u003d \"Very good day to you! Welcome to \";","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"    private static final String NEWLINE \u003d System.lineSeparator();","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"    private final MainManager mainManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"    public WellNus() {","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"        this.mainManager \u003d new MainManager();","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private static String getWellNusLogo() {","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"        return NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"                + \",--.   ,--.       ,--.,--.,--.  ,--.,--. ,--. ,---.     |  |        |  |     \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"                + \"|  |   |  | ,---. |  ||  ||  ,\u0027.|  ||  | |  |\u0027   .-\u0027,---|  |---.,---|  |---. \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"                + \"|  |.\u0027.|  || .-. :|  ||  ||  |\u0027 \u0027  ||  | |  |`.  `-.\u0027---|  |---\u0027\u0027---|  |---\u0027 \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"                + \"|   ,\u0027.   |\\\\   --.|  ||  ||  | `   |\u0027  \u0027-\u0027  \u0027.-\u0027    |   |  |        |  |     \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"                + \"\u0027--\u0027   \u0027--\u0027 `----\u0027`--\u0027`--\u0027`--\u0027  `--\u0027 `-----\u0027 `-----\u0027    `--\u0027        `--\u0027     \" + NEWLINE;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    private void byeUser() {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"        this.getTextUi().printOutputMessage(WellNus.BYE_MESSAGE);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    private void executeUserCommands() {","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"        this.getMainManager().runEventDriver();","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"    private MainManager getMainManager() {","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"        return this.mainManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"    private void greet() {","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"        this.getTextUi().printOutputMessage(WellNus.GREETING_MESSAGE + WellNus.NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"                + WellNus.getWellNusLogo());","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"     * Executes the WellNus application and provides the user with our features.","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     * @param args Commandline arguments passed to the WellNus Java ARchive","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-03-02"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"        new WellNus().start();","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    public void start() {","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"        this.greet();","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"        this.executeUserCommands();","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"        this.byeUser();","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-02"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":7,"haoyangw":56,"YongbinWang":1}},{"path":"src/main/java/wellnus/atomichabit/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_DETAILED_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_KEYWORD \u003d \"add\";","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Wrong arguments given to \u0027hb add\u0027!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_NAME_ARGUMENT \u003d \"name\";","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be add.\";","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should not be empty.\";","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 2;","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_SUPPORTED_ARGUMENTS \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_WRONG_KEYWORD_MESSAGE \u003d \"Wrong command issued by the user, expected \u0027hb add\u0027?\";","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_STRING_ONE \u003d \"Yay! You have added a new habit:\";","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_STRING_TWO \u003d \"was successfully added\";","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private final CommandParser commandParser;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    public AddCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"        this.commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    private AtomicHabitList getAtomicHabits() {","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"        return atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"        return textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"        assert COMMAND_KEYWORD !\u003d null : \"COMMAND_KEYWORD cannot be null\";","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"     * Returns a detailed user-friendly description of what this specific command does.","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"     * @return String Detailed explanation of this command","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"    protected String getDetailedDescription() {","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_DETAILED_DESCRIPTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"     * Returns all the supported arguments for this Command.","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"     * @return String All supported arguments for this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"    protected String getSupportedCommandArguments() {","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_SUPPORTED_ARGUMENTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"     * Adds of the new atomic habit into our list of atomic habits.","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"     * After that, print a message telling the user what the new habit added is","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"            String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"            this.getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"        assert super.getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"        String name \u003d super.getArguments().get(AddCommand.COMMAND_NAME_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"        AtomicHabit habit \u003d new AtomicHabit(name);","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        this.getAtomicHabits().addAtomicHabit(habit);","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"        String messageToUser \u003d FEEDBACK_STRING_ONE + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        messageToUser +\u003d String.format(\"\u0027%s\u0027 %s\", habit, FEEDBACK_STRING_TWO);","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"        getTextUi().printOutputMessage(messageToUser);","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"     * If no exceptions are thrown, command is valid.","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() !\u003d AddCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(AddCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(AddCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(AddCommand.COMMAND_WRONG_KEYWORD_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"        String name \u003d arguments.get(AddCommand.COMMAND_NAME_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"        if (name.isEmpty()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(AddCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"haoyangw":112,"YongbinWang":21}},{"path":"src/main/java/wellnus/atomichabit/command/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"public class HomeCommand extends Command {","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"That is not a valid home command for \"","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"            + \"atomic habits!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Wrong command given for home!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_DETAILED_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_SUPPORTED_ARGUMENTS \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_MESSAGE \u003d \"Thank you for using atomic habits. Do not forget about me!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    public HomeCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"        return textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     * Check if a HomeCommand is executed and user wants to return to home","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"     * @param command User command","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     * @return true If user wants to exit feature false if not","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    public static boolean isExit(Command command) {","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        return command instanceof HomeCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"     * Returns a detailed user-friendly description of what this specific command does.","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     * @return String Detailed explanation of this command","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    protected String getDetailedDescription() {","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_DETAILED_DESCRIPTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"     * Returns all the supported arguments for this Command.","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"     * @return String All supported arguments for this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"    protected String getSupportedCommandArguments() {","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_SUPPORTED_ARGUMENTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"     * Prints the exit feature message for the atomic habits feature on the user\u0027s screen.","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"            String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"            this.getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"        getTextUi().printOutputMessage(HOME_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"     * The validation logic and strictness is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"     * As a guideline, \u003ccode\u003eisValidCommand\u003c/code\u003e should minimally: \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY arguments exist\u003c/li\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY payloads exist\u003c/li\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"     * \u003cli\u003eSafely verify the payload type (int, date, etc should be properly processed)\u003c/li\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"     * Additionally, payload value cleanup (such as trimming) is also possible. \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"     * As Java is pass (object reference) by value, any changes made to commandMap","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"     * will persist out of the function call.","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException if the commandMap has any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d HomeCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-16"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(HomeCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"haoyangw":94,"YongbinWang":31}},{"path":"src/main/java/wellnus/atomichabit/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_KEYWORD \u003d \"list\";","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_DETAILED_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid command, expected \u0027hb list\u0027\";","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_SUPPORTED_ARGUMENTS \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final String FIRST_STRING \u003d \"Here is the current accumulation of your atomic habits!\"","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"            + LINE_SEPARATOR + \"Keep up the good work and you will develop a helpful habit in no time\";","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    public ListCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"        return textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     * Returns a detailed user-friendly description of what this specific command does.","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"     * @return String Detailed explanation of this command","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    protected String getDetailedDescription() {","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_DETAILED_DESCRIPTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     * Returns all the supported arguments for this Command.","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"     * @return String All supported arguments for this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"    protected String getSupportedCommandArguments() {","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_SUPPORTED_ARGUMENTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"     * Executes the list command for atomic habits, which prints all atomic habits","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"     * added by the user so far.","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"            String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"            this.getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"        int taskNo \u003d 1;","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        StringBuilder stringOfHabitsBuilder \u003d new StringBuilder(FIRST_STRING + LINE_SEPARATOR);","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"        for (AtomicHabit habit : atomicHabits.getAllHabits()) {","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"            String currentHabitString \u003d String.format(\"%d.%s [%d]\",","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"                    taskNo, habit.toString(), habit.getCount());","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"            stringOfHabitsBuilder.append(currentHabitString).append(LINE_SEPARATOR);","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"            taskNo +\u003d 1;","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"        int FIRST_CHAR \u003d 0;","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"        String messageToUser \u003d stringOfHabitsBuilder.substring(FIRST_CHAR,","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"                stringOfHabitsBuilder.length() - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"        getTextUi().printOutputMessage(messageToUser);","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"     * If no exceptions are thrown, arguments are valid.","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the commandMap has any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(ListCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(ListCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"haoyangw":100,"YongbinWang":18}},{"path":"src/main/java/wellnus/atomichabit/command/UpdateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"public class UpdateCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_KEYWORD \u003d \"update\";","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_DETAILED_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INCREMENT_ARGUMENT \u003d \"inc\";","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INDEX_ARGUMENT \u003d \"id\";","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    private static final int COMMAND_MIN_NUM_OF_ARGUMENTS \u003d 2;","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_SUPPORTED_ARGUMENTS \u003d \"--id \u003cindex\u003e --inc \u003cincrement\u003e\";","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Wrong command issued, expected \u0027hb update\u0027?\";","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    private static final int DEFAULT_INCREMENT \u003d 1;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_STRING \u003d \"The following habit has been incremented! Keep up the good work!\";","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_INDEX_NOT_INTEGER_ERROR \u003d \"Invalid index! Please enter an integer\";","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_INDEX_OUT_OF_BOUNDS_ERROR \u003d \"Index out of Range! Please enter a valid index\";","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_OFFSET \u003d 1;","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    private static final String UPDATE_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments for updating, no update shall \"","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"            + \"be performed.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"    private static final String REGEX_INTEGER_ONLY_PATTERN \u003d \"\\\\s*-?\\\\d+\\\\s*\";","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    private static final Logger logger \u003d Logger.getLogger(\"UpdateAtomicHabitLogger\");","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"    private static final String LOG_STR_INPUT_NOT_INTEGER \u003d \"Input string is not an integer.\"","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"            + \"This should be properly handled\";","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"    private static final String LOG_INDEX_OUT_OF_BOUNDS \u003d \"Input index is out of bounds.\"","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"            + \"This should be properly handled\";","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"    private String indexString;","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    private final CommandParser parser;","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    public UpdateCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"        this.parser \u003d new CommandParser();","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    public UpdateCommand(InputStream inputStream, HashMap\u003cString, String\u003e arguments,","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"                AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"        this.parser \u003d new CommandParser();","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi(inputStream);","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"    private AtomicHabitList getAtomicHabits() {","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"        return this.atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"    private CommandParser getParser() {","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"        return parser;","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    private int getIncrementCountFrom(HashMap\u003cString, String\u003e arguments)","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"            throws BadCommandException, NumberFormatException {","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.UPDATE_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"        String incrementCountString \u003d arguments.get(UpdateCommand.COMMAND_INCREMENT_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        return Integer.parseInt(incrementCountString);","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"    private int getIndexFrom(HashMap\u003cString, String\u003e arguments)","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"            throws BadCommandException, NumberFormatException {","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_INDEX_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.UPDATE_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        String indexString \u003d arguments.get(UpdateCommand.COMMAND_INDEX_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"        return Integer.parseInt(indexString);","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"     * Returns a detailed user-friendly description of what this specific command does.","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"     * @return String Detailed explanation of this command","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"    protected String getDetailedDescription() {","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_DETAILED_DESCRIPTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"     * Returns all the supported arguments for this Command.","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"     * @return String All supported arguments for this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"    protected String getSupportedCommandArguments() {","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_SUPPORTED_ARGUMENTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"     * Executes the update command for atomic habits.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"     * This command is interactive, so user will continue providing arguments via","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"     *     further prompts provided.","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"    public void execute() throws AtomicHabitException {","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"haoyangw"},"content":"            String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"            getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"haoyangw"},"content":"            int incrementCount \u003d DEFAULT_INCREMENT;","lastModifiedDate":"2023-03-15"},{"lineNumber":151,"author":{"gitId":"haoyangw"},"content":"            if (super.getArguments().containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"                incrementCount \u003d this.getIncrementCountFrom(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":153,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"            int index \u003d this.getIndexFrom(super.getArguments()) - INDEX_OFFSET;","lastModifiedDate":"2023-03-15"},{"lineNumber":155,"author":{"gitId":"haoyangw"},"content":"            AtomicHabit habit \u003d getAtomicHabits().getHabitByIndex(index);","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"haoyangw"},"content":"            habit.increaseCount(incrementCount);","lastModifiedDate":"2023-03-15"},{"lineNumber":157,"author":{"gitId":"haoyangw"},"content":"            String stringOfUpdatedHabit \u003d (index + 1) + DOT + habit + \" \" + \"[\" + habit.getCount() + \"]\"","lastModifiedDate":"2023-03-15"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"                    + LINE_SEPARATOR;","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"haoyangw"},"content":"            getTextUi().printOutputMessage(FEEDBACK_STRING + LINE_SEPARATOR","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"                    + stringOfUpdatedHabit);","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"haoyangw"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"            logger.log(Level.INFO, LOG_STR_INPUT_NOT_INTEGER);","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"            throw new AtomicHabitException(FEEDBACK_INDEX_NOT_INTEGER_ERROR);","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"BernardLesley"},"content":"            logger.log(Level.INFO, LOG_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"            throw new AtomicHabitException(FEEDBACK_INDEX_OUT_OF_BOUNDS_ERROR);","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"            String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":169,"author":{"gitId":"haoyangw"},"content":"            getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":173,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"     * If no exceptions are thrown, arguments are valid.","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":179,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":180,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":181,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":182,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":183,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":184,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":185,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":186,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() \u003c UpdateCommand.COMMAND_MIN_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-15"},{"lineNumber":187,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":188,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":189,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_INDEX_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":190,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":191,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":192,"author":{"gitId":"haoyangw"},"content":"        if (arguments.containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":193,"author":{"gitId":"haoyangw"},"content":"            String incrementString \u003d arguments.get(COMMAND_INCREMENT_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":194,"author":{"gitId":"haoyangw"},"content":"            if (incrementString.isBlank()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":195,"author":{"gitId":"haoyangw"},"content":"                throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":196,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":197,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":198,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":199,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":200,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"BernardLesley":41,"haoyangw":159}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabit.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabit {","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"    private final String description;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"    private int count;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"     * Constructor of atomic habit class","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"     * Will initialise private description to the input parameter","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"     * Assigns count to 1 when a new habit is added","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"     * @param description Description of this new atomic habit provided by the user","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabit(String description) {","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"        this.count \u003d 1;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"        return description;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    public int getCount() {","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"        return count;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    public void increaseCount(int increment) {","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"        count +\u003d increment;","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    public String toString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"        return getDescription();","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":4,"haoyangw":3,"YongbinWang":29}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabitList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitList {","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"    private final ArrayList\u003cAtomicHabit\u003e allAtomicHabits;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"        allAtomicHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"     * Method to add atomicHabit to list containing all habits","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"     * @param atomicHabit New atomic habit to add into the list that this class manages","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    public void addAtomicHabit(AtomicHabit atomicHabit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"        allAtomicHabits.add(atomicHabit);","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"     * Method to get list containing all habits","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"     * @return allAtomicHabits which is an arraylist containing all habits","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    public ArrayList\u003cAtomicHabit\u003e getAllHabits() {","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"        return allAtomicHabits;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    public AtomicHabit getHabitByIndex(int index) {","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"        return allAtomicHabits.get(index);","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":4,"haoyangw":3,"YongbinWang":28}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabitManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.AddCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.command.HomeCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.ListCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.UpdateCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"public class AtomicHabitManager extends Manager {","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    public static final String FEATURE_NAME \u003d \"hb\";","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private static final String ADD_COMMAND_KEYWORD \u003d \"add\";","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final String ATOMIC_HABIT_LOGO \u003d \"   _    _                _       _  _        _     _  _       \\n\" +","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"            \"  /_\\\\  | |_  ___  _ __  (_) __  | || | __ _ | |__ (_)| |_  ___\\n\" +","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"            \" / _ \\\\ |  _|/ _ \\\\| \u0027  \\\\ | |/ _| | __ |/ _` || \u0027_ \\\\| ||  _|(_-\u003c\\n\" +","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"            \"/_/ \\\\_\\\\ \\\\__|\\\\___/|_|_|_||_|\\\\__| |_||_|\\\\__,_||_.__/|_| \\\\__|/__/\\n\" +","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"            \"                                                              \\n\";","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private static final String ATOMIC_HABIT_GREET \u003d \"Welcome to the atomic habits feature!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    /*","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"     * FEATURE_* variables: Information about this feature to assist the \u0027help\u0027 command","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    private static final String FEATURE_BRIEF_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    private static final String FEATURE_FULL_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    private static final String LIST_COMMAND_KEYWORD \u003d \"list\";","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    private static final String UNKNOWN_COMMAND_MESSAGE \u003d \"No such command in atomic habits!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    private static final String UPDATE_COMMAND_KEYWORD \u003d \"update\";","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"    private final AtomicHabitList habitList;","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitManager() {","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        this.habitList \u003d new AtomicHabitList();","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * Parses the given command from the user and determines the correct Command","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     * subclass that can handle its execution.","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     * @param commandString Full command issued by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If an unknown command was issued by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    private Command getCommandFor(String commandString) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d getCommandParser().parseUserInput(commandString);","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        String commandKeyword \u003d getCommandParser().getMainArgument(commandString);","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        switch (commandKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"        case ADD_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"            return new AddCommand(arguments, getHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"        case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"            return new HomeCommand(arguments);","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"        case LIST_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"            return new ListCommand(arguments, getHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"        case UPDATE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"            return new UpdateCommand(arguments, getHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"        default:","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UNKNOWN_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    private AtomicHabitList getHabitList() {","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        return this.habitList;","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    private void greet() {","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"        getTextUi().printOutputMessage(ATOMIC_HABIT_GREET + System.lineSeparator() + ATOMIC_HABIT_LOGO);","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"     * Reads user commands continuously and execute those that are supported","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     * until the exit command is given.","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"    private void runCommands() {","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"            try {","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"                String commandString \u003d getTextUi().getCommand();","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"                Command command \u003d getCommandFor(commandString);","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"                command.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"                isExit \u003d HomeCommand.isExit(command);","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"            } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"                String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"                getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"            } catch (WellNusException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"                getTextUi().printErrorFor(exception, \"Check user guide for valid commands!\");","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"     * Returns the commandline name of the atomic habits feature","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"     * @return Commandline name of this feature","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"     * Returns a summary description of the atomic habits feature","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"     * @return Summary description of this feature","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"    public String getBriefDescription() {","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"        return FEATURE_BRIEF_DESCRIPTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"     * Returns the full description of the atomic habits feature","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"     * @return Full description of this feature","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"    public String getFullDescription() {","lastModifiedDate":"2023-03-15"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"        return FEATURE_FULL_DESCRIPTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"     * Returns a list of main commands the atomic habit feature supports \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"     * Suggested implementation: \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"     * \u003ccode\u003e this.supportedCommands.add([cmd1, cmd2, ...]); \u003c/code\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"    protected void setSupportedCommands() {","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"     * First welcomes user with our unique greeting.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"     * Then continuously read commands from the user and execute those that are supported.","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"        greet();","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"haoyangw"},"content":"        runCommands();","lastModifiedDate":"2023-03-15"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":152,"author":{"gitId":"YongbinWang"},"content":"     * Method to test for exception handling of invalid command using JUnit","lastModifiedDate":"2023-03-10"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"     * @param userCommand Command identified after parsing through userInput","lastModifiedDate":"2023-03-15"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"     * @return Command according to userInput","lastModifiedDate":"2023-03-10"},{"lineNumber":156,"author":{"gitId":"haoyangw"},"content":"     * @throws AtomicHabitException For every invalid command being tested below","lastModifiedDate":"2023-03-15"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"    public Command testInvalidCommand(String userCommand) throws AtomicHabitException {","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"haoyangw"},"content":"        String DESCRIPTION_TEST \u003d \"testing\";","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"haoyangw"},"content":"        String EXIT_COMMAND \u003d \"hb exit\";","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"haoyangw"},"content":"        String LIST_COMMAND \u003d \"hb list\";","lastModifiedDate":"2023-03-15"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"        String indexTest \u003d \"1\";","lastModifiedDate":"2023-03-14"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"        String invalidCommandErrorMessage \u003d \"Invalid command! Please enter a valid command\";","lastModifiedDate":"2023-03-14"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2023-03-15"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"            switch (userCommand) {","lastModifiedDate":"2023-03-10"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"            case ADD_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"                arguments \u003d getCommandParser().parseUserInput(DESCRIPTION_TEST);","lastModifiedDate":"2023-03-15"},{"lineNumber":169,"author":{"gitId":"haoyangw"},"content":"                return new AddCommand(arguments, new AtomicHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"            case LIST_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"haoyangw"},"content":"                arguments \u003d getCommandParser().parseUserInput(LIST_COMMAND);","lastModifiedDate":"2023-03-15"},{"lineNumber":172,"author":{"gitId":"haoyangw"},"content":"                return new ListCommand(arguments, new AtomicHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"            case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-16"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"                arguments \u003d getCommandParser().parseUserInput(EXIT_COMMAND);","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"                return new HomeCommand(arguments);","lastModifiedDate":"2023-03-16"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"            case UPDATE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"                arguments \u003d getCommandParser().parseUserInput(indexTest);","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"haoyangw"},"content":"                return new UpdateCommand(arguments, new AtomicHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"            default:","lastModifiedDate":"2023-03-10"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"                throw new AtomicHabitException(invalidCommandErrorMessage);","lastModifiedDate":"2023-03-14"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":182,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":183,"author":{"gitId":"haoyangw"},"content":"            String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":184,"author":{"gitId":"haoyangw"},"content":"            getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":185,"author":{"gitId":"haoyangw"},"content":"            return null;","lastModifiedDate":"2023-03-15"},{"lineNumber":186,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":4,"haoyangw":127,"YongbinWang":60}},{"path":"src/main/java/wellnus/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" * Superclass for all supported commands in Duke.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" * Each Command is initialised with the arguments issued","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":" * by the user. Execute the specified Command by calling","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":" * execute().\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":" * Child classes must provide the static isValidCommand() method for checking whether a set of","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":" * arguments are valid for a given command.","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"public abstract class Command {","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    private static final String ARGUMENT_DELIMITER \u003d \"--\";","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final String DELIMITER_FOR_WORDS \u003d \" \";","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private static final String WEIRD_ARGUMENTS_GIVEN \u003d \"Weird arguments given for command, cannot continue\";","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    // Key: An argument\u0027s name. Value: An argument\u0027s provided value from the user","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private final HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    public Command(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"        // Arguments should never be null, or later code will call methods on a null reference","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"        assert arguments !\u003d null : WEIRD_ARGUMENTS_GIVEN;","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    protected HashMap\u003cString, String\u003e getArguments() {","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        return this.arguments;","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    protected abstract String getCommandKeyword();","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     * Returns a detailed user-friendly description of what this specific command does.","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     * @return String Detailed explanation of this command","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"    protected abstract String getDetailedDescription();","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    protected abstract String getFeatureKeyword();","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     * Returns all the supported arguments for this Command.","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     * @return String All supported arguments for this Command","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    protected abstract String getSupportedCommandArguments();","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     * Executes the specified command from the user.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"     * May throw Exceptions if command fails.","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"     * @throws WellNusException If command fails","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    public abstract void execute() throws WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"     * Very basic specialised toString() method for commands that returns","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"     * a formatted list of all arguments issued by the user.\u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"     * Example:","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"     * For the \u003ccode\u003ehb add\u003c/code\u003e command, toString() will output","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     * \u003ccode\u003ehb [add] [--name] \u0026lt;habit name\u0026gt;\u003c/code\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"     * @return String Representation of this Command that includes all given arguments","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"    public String toString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        builder.append(this.getFeatureKeyword());","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"        builder.append(Command.DELIMITER_FOR_WORDS);","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        builder.append(this.getCommandKeyword());","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"        for (Map.Entry\u003cString, String\u003e set : this.getArguments().entrySet()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"            builder.append(Command.DELIMITER_FOR_WORDS);","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"            builder.append(Command.ARGUMENT_DELIMITER);","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"            builder.append(set.getKey());","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"            builder.append(Command.DELIMITER_FOR_WORDS);","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"            builder.append(set.getValue());","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     * The validation logic and strictness is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"     * As a guideline, \u003ccode\u003eisValidCommand\u003c/code\u003e should minimally: \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY arguments exist\u003c/li\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY payloads exist\u003c/li\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eSafely verify the payload type (int, date, etc should be properly processed)\u003c/li\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"     * Additionally, payload value cleanup (such as trimming) is also possible. \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     * As Java is pass (object reference) by value, any changes made to commandMap","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"     * will persist out of the function call.","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"    public abstract void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"BernardLesley":1,"haoyangw":97,"nichyjt":21}},{"path":"src/main/java/wellnus/command/CommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * A CommandParser processes user input from a defined format \u003cp\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" * Each user input via console consists of: \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" * \u003col\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eCOMMANDS - A Argument and Payload pairs \u003c/li\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eARGUMENTS - String representing the action/parameters of the command \u003c/li\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003ePAYLOADS - value of the action/parameters \u003c/li\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" * \u003c/ol\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * In short, user input is a list of commands, each command containing arguments and payloads. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * Further, we define the FIRST command to be the MAIN command of any given user input. \u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * So, \u003ccode\u003e\"deadline work on CS2113 --by Sunday\"\u003c/code\u003e has \u003ccode\u003e\"deadline work on CS2113\"\u003c/code\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * as the main command \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * Each command (argument-payload pair) except for the main command MUST","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" * be delimited by \u003ccode\u003e\" --\"\u003c/code\u003e (whitespace intentional)","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":" * For example, a given user input: \u003ccode\u003e\"deadline work on CS2113 --by Sunday\"\u003c/code\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eHas commands [\"deadline work on CS2113\", \"by Sunday\"]\u003c/li\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eHas arguments [\"deadline\", \"by\"]\u003c/li\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eHas payloads [\"work on CS2113\", [\"Sunday\"]\u003c/li\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"public class CommandParser {","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    private static final String ARGUMENT_DELIMITER \u003d \" --\";","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private static final String UNPADDED_DELIMITER \u003d \"--\";","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    private static final String PAYLOAD_DELIMITER \u003d \" \";","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    // Message string constants for errors and ui","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_EMPTY_COMMAND \u003d \"Command is empty!\";","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_EMPTY_ARGUMENT \u003d \"Command is missing an argument!\";","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    private static final Logger logger \u003d Logger.getLogger(\"CommandParserLogger\");","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_STR_EMPTY_INPUT \u003d \"Input string is empty. This should be properly handled\";","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_EMPTY_ARG \u003d \"Argument is empty. This should be properly handled\";","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"     * Constructs an instance of CommandParser. \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"     * CommandParser should be used to break down raw user input into","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     * logical \u003ccode\u003e[Argument,Payload]\u003c/code\u003e pairs","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    public CommandParser() {","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    private String[] splitIntoCommands(String fullCommandString) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        assert fullCommandString !\u003d null : \"fullCommandString should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        // Perform a string length sanity check","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"        fullCommandString \u003d fullCommandString.strip();","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"        if (fullCommandString.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"            logger.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"        int NO_LIMIT \u003d -1;","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"        String[] rawCommands \u003d fullCommandString.split(ARGUMENT_DELIMITER, NO_LIMIT);","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        // Adversarial user input check","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"        // There are 2 possible adversarial inputs that should be checked for","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"        // 1. Whitespace/Empty Arguments: `cmd payload -- payload1 -- `","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"        //    Split renders it as [\"cmd payload\", \" payload1\", \"\"]","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"        //    \" payload1\" will cause issues with rendering","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"        //    So, check for empty commands and whitespace prefix","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        // 2. Missing main argument: `--argument payload`","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        //    Split renders this as [\"--argument payload\"]","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        //    So, check for \"--\" prefix","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        String[] cleanCommands \u003d new String[rawCommands.length];","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 0; i \u003c rawCommands.length; ++i) {","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"            String currentCommand \u003d rawCommands[i];","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            // Case 1 check","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"            if (currentCommand.startsWith(\" \") || currentCommand.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"                logger.log(Level.INFO, LOG_EMPTY_ARG);","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(ERROR_EMPTY_ARGUMENT);","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"            // Strip command of whitespace to clean input","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"            currentCommand \u003d currentCommand.strip();","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"            // Case 2 check","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"            if (currentCommand.startsWith(UNPADDED_DELIMITER)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"                logger.log(Level.INFO, LOG_EMPTY_ARG);","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"            cleanCommands[i] \u003d currentCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        return cleanCommands;","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"    private String getArgumentFromCommand(String commandString) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        assert commandString !\u003d null : \"commandString should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d commandString.split(PAYLOAD_DELIMITER);","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"        // Bad input checks","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        if (words.length \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"            logger.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_ARGUMENT);","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"        return words[0];","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    private String getPayloadFromCommand(String commandString) {","lastModifiedDate":"2023-03-08"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        assert commandString !\u003d null : \"commandString should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d commandString.split(PAYLOAD_DELIMITER);","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        String payload \u003d \"\";","lastModifiedDate":"2023-03-08"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"        // Ignore the first word (Main Command), so start from 1","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 1; i \u003c words.length; ++i) {","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"            payload \u003d payload.concat(words[i]);","lastModifiedDate":"2023-03-08"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"            if (i !\u003d words.length - 1) {","lastModifiedDate":"2023-03-08"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"                payload \u003d payload.concat(PAYLOAD_DELIMITER);","lastModifiedDate":"2023-03-08"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        // No checks for payload length is done as payload CAN be empty","lastModifiedDate":"2023-03-08"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        return payload;","lastModifiedDate":"2023-03-08"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     * Takes in raw user input and splits it into Argument-Payload pairs","lastModifiedDate":"2023-03-08"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     * @param userInput Raw user input from stdin in string form","lastModifiedDate":"2023-03-08"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"     * @return HashMap mapping a Argument (key) to a Payload (value)","lastModifiedDate":"2023-03-08"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"     * @throws BadCommandException when command is empty or is problematic","lastModifiedDate":"2023-03-08"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"    public HashMap\u003cString, String\u003e parseUserInput(String userInput) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        assert userInput !\u003d null : \"userInput should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"        if (userInput.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"            logger.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-08"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"        String[] commands \u003d splitIntoCommands(userInput);","lastModifiedDate":"2023-03-08"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"        for (String command : commands) {","lastModifiedDate":"2023-03-08"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"            String argument \u003d getArgumentFromCommand(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"            String payload \u003d getPayloadFromCommand(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(argument, payload);","lastModifiedDate":"2023-03-08"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        return argumentPayload;","lastModifiedDate":"2023-03-08"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"     * Takes in a string and returns the inferred \"Main Argument\"","lastModifiedDate":"2023-03-08"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"     * Practically, this is the \u003cb\u003eFirst\u003c/b\u003e argument of any command string.","lastModifiedDate":"2023-03-08"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"     * For example, \u003ccode\u003e\"hb add --name foobar\"\u003c/code\u003e \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"     * Has main argument \"hb\"","lastModifiedDate":"2023-03-08"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"     * @param userInput Any string input representing a command","lastModifiedDate":"2023-03-08"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"     * @return the inferred Main Argument","lastModifiedDate":"2023-03-08"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"     * @throws BadCommandException when String is empty","lastModifiedDate":"2023-03-08"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"    public String getMainArgument(String userInput) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        assert userInput !\u003d null : \"userInput should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"        userInput \u003d userInput.strip();","lastModifiedDate":"2023-03-08"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"        if (userInput.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"            logger.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-03-14"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"        String[] parameters \u003d userInput.split(\" \");","lastModifiedDate":"2023-03-10"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"        return parameters[0];","lastModifiedDate":"2023-03-08"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"BernardLesley":1,"haoyangw":4,"nichyjt":166}},{"path":"src/main/java/wellnus/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_ARGUMENTS \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_DETAILED_DESCRIPTION \u003d \"Exits from the WellNUS++ application\";","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid exit command given!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_KEYWORD \u003d \"exit\";","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"    private static final String FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    public ExitCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    public static boolean isExit(Command command) {","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"        return command instanceof ExitCommand;","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"        return ExitCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"     * Returns a detailed user-friendly description of what this specific command does.","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * @return String Detailed explanation of this command","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    protected String getDetailedDescription() {","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        return ExitCommand.COMMAND_DETAILED_DESCRIPTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"        return ExitCommand.FEATURE_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     * Returns all the supported arguments for this Command.","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"     * @return String All supported arguments for this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    protected String getSupportedCommandArguments() {","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        return ExitCommand.COMMAND_ARGUMENTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"     * Exits the WellNUS++ application.","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments passed by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using the user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the commandMap has any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(ExitCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(ExitCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"haoyangw":90}},{"path":"src/main/java/wellnus/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.MainManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" * Implementation of WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":" * by WellNus and how to use each command.","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    private static final String BAD_COMMAND_MESSAGE \u003d \"help does not take in any arguments!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_ARGUMENTS \u003d \"\u003cfeature\u003e\";","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_DETAILED_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    private static final String HELP_PREAMBLE \u003d \"We are here to ensure your wellness\"","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"                                                    + \" is taken care of through WellNUS++\\n\"","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"                                                    + \"Here are all the commands available for you!\\n\";","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private static final String FEATURE_HABIT \u003d \"hb - Enter Atomic Habits: \"","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"                                                    + \"Track your small daily habits and \"","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"                                                    + \"nurture it to form a larger behaviour\";","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"    private static final String USAGE_HABIT \u003d \"\\tusage: hb\";","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    private static final String FEATURE_REFLECT \u003d \"reflect - Read through introspective questions for your reflection\";","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private static final String USAGE_REFLECT \u003d \"\\tusage: reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private static final String COMMAND_EXIT \u003d \"exit - Exit WellNUS++\";","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    private static final String USAGE_EXIT \u003d \"\\tusage: exit\";","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private static final int EMPTY_ARG_LENGTH \u003d 0;","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments, MainManager mainManager) throws BadCommandException {","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     * Lists all features available in WellNUS++ and a short description","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"        this.getTextUi().printOutputMessage(HELP_PREAMBLE);","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"        // Refactor this out if it does not scale well","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"        String[] commandDescriptions \u003d {","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"            FEATURE_HABIT, FEATURE_REFLECT, COMMAND_EXIT","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        };","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        String[] commandUsages \u003d {","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"            USAGE_HABIT, USAGE_REFLECT, USAGE_EXIT","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"        };","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"        String outputMessage \u003d \"\";","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 0; i \u003c commandUsages.length; i +\u003d 1) {","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions[i] + System.lineSeparator());","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"            outputMessage \u003d outputMessage.concat(commandUsages[i] + System.lineSeparator());","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"        this.getTextUi().printOutputMessage(outputMessage);","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"    // TODO: Potential depreciation of the below functions","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"    protected String getDetailedDescription() {","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        return HelpCommand.COMMAND_DETAILED_DESCRIPTION;","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"    protected String getSupportedCommandArguments() {","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        return HelpCommand.COMMAND_ARGUMENTS;","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"     * Prints a brief description of all of WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"            getTextUi().printOutputMessage(exception.getMessage());","lastModifiedDate":"2023-03-16"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-16"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-16"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        if (arguments.get(COMMAND_KEYWORD).length() \u003e EMPTY_ARG_LENGTH || arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-17"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(BAD_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"haoyangw":72,"nichyjt":53}},{"path":"src/main/java/wellnus/common/MainManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.common;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.ExitCommand;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.HelpCommand;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.reflection.ReflectionManager;","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"import java.util.List;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"public class MainManager extends Manager {","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    private static final String EXIT_COMMAND_KEYWORD \u003d \"exit\";","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final String GREETING_MESSAGE \u003d \"Enter a command to start using WellNUS++! Try \u0027help\u0027 \"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"            + \"if you\u0027re new, or just unsure.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    private static final String HELP_COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d \"Don\u0027t recognise that command?\";","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_COMMAND_ADDITIONAL_MESSAGE \u003d \"Try \u0027help\u0027 for some guidance\";","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_FEATURE_KEYWORD_MESSAGE \u003d \"Feature keyword can\u0027t be empty dear\";","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    private static final String WELLNUS_FEATURE_NAME \u003d \"\";","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    private ArrayList\u003cManager\u003e featureManagers;","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    public MainManager() {","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"        super();","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        this.featureManagers \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        this.setSupportedFeatureManagers();","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    private static String getBriefAppDescription() {","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"        return \"WellNUS++ helps you keep track and improve your physical and mental wellness.\";","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    private static String getLongAppDescription() {","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"        return \"WellNUS++ is a Command Line Interface(CLI) app for NUS Computing students to \"","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"                + \"keep track and improve their physical and mental wellness in various aspects.\"","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"                + \" If you can type fast, WellNUS++ can update their wellness progress faster than \"","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"                + \"traditional Graphical User Interface(GUI) apps.\";","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"     * Continuously reads user\u0027s commands and executes those that are supported","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     *     by WellNUS++ until the `exit` command is given.\u003cbr\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * If an unrecognised command is given, a warning is printed on the user\u0027s screen.","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"    private void executeCommands() {","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"            String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"            try {","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"                String nextCommand \u003d this.getTextUi().getCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"                String featureKeyword \u003d parser.getMainArgument(nextCommand);","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"                Optional\u003cManager\u003e featureManager \u003d this.getManagerFor(featureKeyword);","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"                // User gave a command that\u0027s not any feature\u0027s keyword nor a recognised main command","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"                if (featureManager.isEmpty() \u0026\u0026 !this.isSupportedCommand(featureKeyword)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"                    BadCommandException badCommandException \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"                            new BadCommandException(MainManager.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"                    this.getTextUi().printErrorFor(badCommandException,","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"                            MainManager.INVALID_COMMAND_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"                    continue;","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"                }","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"                // User issued a feature keyword, pass control to the corresponding feature\u0027s Manager","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"                featureManager.ifPresent((manager) -\u003e {","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"                    // TODO: Consider if there\u0027s a way to avoid this extra try-catch?","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"                    try {","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"                        manager.runEventDriver();","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"                    } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"                        this.getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"                    }","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"                });","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"                // User issued a main command, e.g. \u0027help\u0027","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"                if (featureManager.isEmpty()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"                    Command mainCommand \u003d this.getMainCommandFor(nextCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"                    mainCommand.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"                    isExit \u003d ExitCommand.isExit(mainCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"                }","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"            } catch (WellNusException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"                this.getTextUi().printErrorFor(exception, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"     * Parses the given command String issued by the user and returns the corresponding","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"     *     Command object that can execute it.","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"     * @param command Command issued by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If command issued is not supported or invalid","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"    private Command getMainCommandFor(String command) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"        String commandKeyword \u003d getCommandParser().getMainArgument(command);","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d getCommandParser().parseUserInput(command);","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"        switch (commandKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        case MainManager.HELP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"            return new HelpCommand(arguments, this);","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        case MainManager.EXIT_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"            return new ExitCommand(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"        default:","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(MainManager.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"    private List\u003cString\u003e getSupportedCommandKeywords() {","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"        List\u003cString\u003e commandKeywords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"        // TODO: Consider if there\u0027s a better way than exposing a static variable(a helper method?)","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"        commandKeywords.add(MainManager.HELP_COMMAND_KEYWORD);","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"        commandKeywords.add(MainManager.EXIT_COMMAND_KEYWORD);","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"        return commandKeywords;","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"    private List\u003cManager\u003e getSupportedFeatureManagers() {","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"        return this.featureManagers;","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-13"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"    private void greet() {","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"        this.getTextUi().printOutputMessage(MainManager.GREETING_MESSAGE);","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"    private boolean isSupportedCommand(String commandKeyword) {","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"        List\u003cString\u003e cmdKeywords \u003d this.getSupportedCommandKeywords();","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"        for (String cmdKeyword : cmdKeywords) {","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"            if (commandKeyword.equals(cmdKeyword)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"                return true;","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"        return false;","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"     * Returns a brief description of the WellNUS++ app","lastModifiedDate":"2023-03-13"},{"lineNumber":145,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"     * @return Brief description of this app","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"haoyangw"},"content":"    public String getBriefDescription() {","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"haoyangw"},"content":"        return MainManager.getBriefAppDescription();","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"     * Returns the name of this feature. In this case, it\u0027s just empty(not any particular feature).","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"haoyangw"},"content":"     * @return Empty String to imply that this Manager is not associated with any feature","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"haoyangw"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":160,"author":{"gitId":"haoyangw"},"content":"        return WELLNUS_FEATURE_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"     * Returns a full description of the WellNUS++ app.","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"haoyangw"},"content":"     * @return Full description of the app","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"haoyangw"},"content":"    public String getFullDescription() {","lastModifiedDate":"2023-03-13"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"        // TODO: Call other feature\u0027s Managers to build a complete full description of WellNUS++.","lastModifiedDate":"2023-03-14"},{"lineNumber":171,"author":{"gitId":"haoyangw"},"content":"        //     getLongAppDescription() is an overall app description, it doesn\u0027t include features.","lastModifiedDate":"2023-03-14"},{"lineNumber":172,"author":{"gitId":"haoyangw"},"content":"        return MainManager.getLongAppDescription();","lastModifiedDate":"2023-03-13"},{"lineNumber":173,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":175,"author":{"gitId":"haoyangw"},"content":"    public Optional\u003cManager\u003e getManagerFor(String featureKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"        assert (featureKeyword !\u003d null \u0026\u0026 !featureKeyword.isBlank())","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"                : MainManager.INVALID_FEATURE_KEYWORD_MESSAGE;","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"haoyangw"},"content":"        for (Manager featureManager : this.getSupportedFeatureManagers()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":179,"author":{"gitId":"haoyangw"},"content":"            if (featureManager.getFeatureName().equals(featureKeyword)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":180,"author":{"gitId":"haoyangw"},"content":"                return Optional.of(featureManager);","lastModifiedDate":"2023-03-15"},{"lineNumber":181,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":182,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":183,"author":{"gitId":"haoyangw"},"content":"        return Optional.empty();","lastModifiedDate":"2023-03-15"},{"lineNumber":184,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":185,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":186,"author":{"gitId":"haoyangw"},"content":"    public boolean isSupportedFeature(String featureKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":187,"author":{"gitId":"haoyangw"},"content":"        return this.getManagerFor(featureKeyword).isPresent();","lastModifiedDate":"2023-03-15"},{"lineNumber":188,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":189,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":190,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":191,"author":{"gitId":"haoyangw"},"content":"     * Executes the basic commands(e.g. \u003ccode\u003ehelp\u003c/code\u003e) as well as any feature-specific","lastModifiedDate":"2023-03-13"},{"lineNumber":192,"author":{"gitId":"haoyangw"},"content":"     *     commands, which are delegated to the corresponding features\u0027 Managers.\u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":193,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":194,"author":{"gitId":"haoyangw"},"content":"     * This method will keep reading the user\u0027s command until the exit command is given.","lastModifiedDate":"2023-03-14"},{"lineNumber":195,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":196,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":197,"author":{"gitId":"haoyangw"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-14"},{"lineNumber":198,"author":{"gitId":"haoyangw"},"content":"        this.greet();","lastModifiedDate":"2023-03-13"},{"lineNumber":199,"author":{"gitId":"haoyangw"},"content":"        this.executeCommands();","lastModifiedDate":"2023-03-14"},{"lineNumber":200,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":201,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":202,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":203,"author":{"gitId":"haoyangw"},"content":"     * Returns a list of basic commands supported by WellNUS++(e.g. \u003ccode\u003ehelp\u003c/code\u003e) \u003cbr\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":204,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":205,"author":{"gitId":"haoyangw"},"content":"     * Suggested implementation: \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":206,"author":{"gitId":"haoyangw"},"content":"     * \u003ccode\u003e this.supportedCommands.add([cmd1, cmd2, ...]); \u003c/code\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":207,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":208,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":209,"author":{"gitId":"haoyangw"},"content":"    protected void setSupportedCommands() {","lastModifiedDate":"2023-03-13"},{"lineNumber":210,"author":{"gitId":"haoyangw"},"content":"        // TODO: Implement once basic Command subclasses are in","lastModifiedDate":"2023-03-13"},{"lineNumber":211,"author":{"gitId":"haoyangw"},"content":"        // Unable to implement this now since Command subclasses don\u0027t exist","lastModifiedDate":"2023-03-13"},{"lineNumber":212,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":213,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":214,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":215,"author":{"gitId":"haoyangw"},"content":"     * Returns a list of features supported by WellNUS++ \u003cbr\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":216,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":217,"author":{"gitId":"haoyangw"},"content":"     * Suggested implementation: \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":218,"author":{"gitId":"haoyangw"},"content":"     * \u003ccode\u003e this.supportedManagers.add([mgr1, mgr2, ...]); \u003c/code\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":219,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":220,"author":{"gitId":"haoyangw"},"content":"    protected void setSupportedFeatureManagers() {","lastModifiedDate":"2023-03-13"},{"lineNumber":221,"author":{"gitId":"haoyangw"},"content":"        this.getSupportedFeatureManagers().add(new AtomicHabitManager());","lastModifiedDate":"2023-03-15"},{"lineNumber":222,"author":{"gitId":"haoyangw"},"content":"        this.getSupportedFeatureManagers().add(new ReflectionManager());","lastModifiedDate":"2023-03-16"},{"lineNumber":223,"author":{"gitId":"haoyangw"},"content":"        // TODO: Implement once all Managers are in","lastModifiedDate":"2023-03-13"},{"lineNumber":224,"author":{"gitId":"haoyangw"},"content":"        // e.g. this.getSupportedFeatureManagers().add(new AtomicHabitManager());","lastModifiedDate":"2023-03-15"},{"lineNumber":225,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":226,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":227,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"haoyangw":227}},{"path":"src/main/java/wellnus/exception/AtomicHabitException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitException extends WellNusException {","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitException(String errorMessage) {","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"haoyangw":1,"YongbinWang":6}},{"path":"src/main/java/wellnus/exception/BadCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"public class BadCommandException extends WellNusException {","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"    public BadCommandException(String errorMessage) {","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"BernardLesley":1,"haoyangw":1,"nichyjt":5}},{"path":"src/main/java/wellnus/exception/WellNusException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"public class WellNusException extends Exception {","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"    public WellNusException(String errorMessage) {","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":6,"haoyangw":1}},{"path":"src/main/java/wellnus/manager/Manager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.manager;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * Manager is the superclass for all WellNUS++ event drivers \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" * Each manager is in charge of \u0027managing\u0027 exactly one feature. \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" * For example, \u003ci\u003ehb\u003c/i\u003e and \u003ci\u003ereflect\u003c/i\u003e. \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" * Each feature consists of multiple \u003ccode\u003eMainCommands\u003c/code\u003e,","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" * stored in \u003ccode\u003esupportedCommands\u003c/code\u003e \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * Each manager may also support entering other features","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * via \u003ccode\u003eManager\u003c/code\u003e (event drivers),","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * stored in \u003ccode\u003esupportedManagers\u003c/code\u003e \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":" * The manager should run an event driver (infinite loop) and is in charge","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":" * of a Feature\u0027s input, output, \u0027business\u0027 logic and graceful termination.","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"public abstract class Manager {","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"    protected CommandParser commandParser;","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    // For this Manager\u0027s feature, what commands exist?","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    protected ArrayList\u003cCommand\u003e supportedCommands;","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"     * Construct a feature Manager to handle control flow for the given feature. \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"     * Internally, it sets up the following for convenience:","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eCommandParser\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eSupported Commands\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    public Manager() {","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        this.commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        this.supportedCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get the CommandParser tied to the Manager class.","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     * @return commandParser reference to this manager\u0027s instance of CommandParser","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    public CommandParser getCommandParser() {","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"        assert commandParser !\u003d null : \"commandParser should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"        return this.commandParser;","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get the featureName this Manager is administering","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     * @return name of the feature that this Manager handles","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"    public abstract String getFeatureName();","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get a summary description of the feature this Manager is administering","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"     * @return summary description of the feature that this Manager handles","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"    public abstract String getBriefDescription();","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get the full description of the feature this Manager is administering","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * @return full description of the feature that this Manager handles","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    public abstract String getFullDescription();","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"     * Utility function to set a list of main commands the feature supports \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"     * Suggested implementation: \u003cbr\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"     * \u003ccode\u003e this.supportedCommands.add([cmd1, cmd2, ...]); \u003c/code\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"    protected abstract void setSupportedCommands();","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get a string array of","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"     * all the supported commands\u0027 descriptions","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"     * @return ArrayList of each command\u0027s full description","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    public ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        assert supportedCommands !\u003d null : \"supportedCommands should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e descriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        for (Command command : supportedCommands) {","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"            descriptions.add(command.toString());","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        return descriptions;","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get a list of main arguments the feature supports","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     * @return \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eCommand\u003c/code\u003es","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    public ArrayList\u003cCommand\u003e getSupportedCommands() {","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        assert supportedCommands !\u003d null : \"supportedCommands should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"        return supportedCommands;","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"     * runEventDriver is the entry point into a feature\u0027s driver loop \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     * This should be the part that contains the infinite loop and switch cases,","lastModifiedDate":"2023-03-11"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     * but it is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * Its implementation should include the following:","lastModifiedDate":"2023-03-11"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eA way to terminate runEventDriver\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eA way to read input from console\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"    public abstract void runEventDriver() throws BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"haoyangw":6,"nichyjt":117}},{"path":"src/main/java/wellnus/reflection/GetCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.Random;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"public class GetCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ReflectGetCommandLogger\");","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final int NUM_OF_RANDOM_QUESTIONS \u003d 5;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD \u003d \"get\";","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final String FULL_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARGUMENT \u003d \"get\";","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final int MIN_SIZE \u003d 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Command is invalid.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"Please check the available commands \"","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            + \"and the format of commands.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_ARGUMENT_PAYLOAD_ASSERTION \u003d \"The argument-payload pair cannot be empty!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be get.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should be empty.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String NUM_SELECTED_QUESTIONS_ASSERTION \u003d \"The number of selected questions should be 5.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private HashMap\u003cString, String\u003e argumentPayload;","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    public GetCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        this.argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"        assert !argumentPayload.isEmpty() : EMPTY_ARGUMENT_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"     * Entry point to this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"     * Trigger the generation of five random questions and print to users.\u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(this.argumentPayload);","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException invalidCommand) {","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"        assert argumentPayload.containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"        assert argumentPayload.get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        String outputString \u003d convertQuestionsToString();","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(outputString);","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"     * Get a random set of 5 reflection questions.","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"     * @return The selected sets of random questions","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    public ArrayList\u003cReflectionQuestion\u003e getRandomQuestions() {","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e selectedQuestions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        SelfReflection selfReflection \u003d new SelfReflection();","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"        ArrayList\u003cReflectionQuestion\u003e questions \u003d selfReflection.getQuestions();","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"        Set\u003cInteger\u003e fiveRandomNumbers \u003d generateRandomNumbers(questions.size());","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"        for (int index : fiveRandomNumbers) {","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"            selectedQuestions.add(questions.get(index));","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"        assert selectedQuestions.size() \u003d\u003d NUM_OF_RANDOM_QUESTIONS : NUM_SELECTED_QUESTIONS_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"        return selectedQuestions;","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: get","lastModifiedDate":"2023-03-12"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-12"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-12"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"    protected HashMap\u003cString, String\u003e getArgumentPayload() {","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"        return argumentPayload;","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"     * Only one supported argument for get command.","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * @return Argument: get","lastModifiedDate":"2023-03-12"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"    protected String getSupportedCommandArguments() {","lastModifiedDate":"2023-03-12"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"        return ARGUMENT;","lastModifiedDate":"2023-03-12"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"     * Get detailed description of a get command.","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"     * TODO: FULL_DESCRIPTION is not completed yet.","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"     * @return Full description of get command","lastModifiedDate":"2023-03-12"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"    protected String getDetailedDescription() {","lastModifiedDate":"2023-03-12"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"        return FULL_DESCRIPTION;","lastModifiedDate":"2023-03-12"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this get command is generated.","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"     * @return Self reflection","lastModifiedDate":"2023-03-12"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-12"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-12"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-12"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: get","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload is empty","lastModifiedDate":"2023-03-12"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-12"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"     * Generate an array of 5 random numbers.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"     * Each number num: num \u003e\u003d 0 and num \u003c\u003d (maxSize - 1)","lastModifiedDate":"2023-03-11"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"     * @param maxSize Number of questions available to be chosen","lastModifiedDate":"2023-03-11"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"     * @return Array of 5 random numbers","lastModifiedDate":"2023-03-11"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"    private Set\u003cInteger\u003e generateRandomNumbers(int maxSize) {","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"        Set\u003cInteger\u003e randomNumbers \u003d new Random().ints(MIN_SIZE, maxSize - ONE_OFFSET)","lastModifiedDate":"2023-03-17"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"                .distinct()","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"                .limit(NUM_OF_RANDOM_QUESTIONS)","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"                .boxed()","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"        assert randomNumbers.size() \u003d\u003d NUM_OF_RANDOM_QUESTIONS : NUM_SELECTED_QUESTIONS_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"        return randomNumbers;","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"     * Convert all five questions to a single string to be printed.","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"     * @return Single string that consists of all questions","lastModifiedDate":"2023-03-11"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"    private String convertQuestionsToString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"        ArrayList\u003cReflectionQuestion\u003e selectedQuestions \u003d getRandomQuestions();","lastModifiedDate":"2023-03-16"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"        String questionString \u003d \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c selectedQuestions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-10"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"            questionString +\u003d (Integer.toString(i + ONE_OFFSET) + DOT + selectedQuestions.get(i).toString()","lastModifiedDate":"2023-03-17"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"                    + System.lineSeparator());","lastModifiedDate":"2023-03-14"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"        return questionString;","lastModifiedDate":"2023-03-10"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":175,"haoyangw":4}},{"path":"src/main/java/wellnus/reflection/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"public class HomeCommand extends Command {","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ReflectHomeCommandLogger\");","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final String FULL_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARGUMENT \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_ARGUMENT_PAYLOAD \u003d 0;","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Command is invalid.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"Please check the available commands \"","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"            + \"and the format of commands.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_ARGUMENT_PAYLOAD_ASSERTION \u003d \"The argument-payload pair cannot be empty!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be return.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should be empty.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_MESSAGE \u003d \"How do you feel after reflecting on yourself?\" +","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"            System.lineSeparator() + \"Hope you have gotten some takeaways from self reflection, see you again!!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private HashMap\u003cString, String\u003e argumentPayload;","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    public HomeCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        this.argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        assert argumentPayload.size() \u003e EMPTY_ARGUMENT_PAYLOAD : EMPTY_ARGUMENT_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: home","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"     * Get detailed description of a home command.\u003cbr/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"     * TODO: FULL_DESCRIPTION is not completed yet.","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"     * @return Full description of home command","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    protected String getDetailedDescription() {","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        return FULL_DESCRIPTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this home command is generated.","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"     * Only one supported argument for home command.","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     * @return Argument: home","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    protected String getSupportedCommandArguments() {","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"        return ARGUMENT;","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"     * Main entry point of this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"     * Return back to WellNUS++ main interface","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(this.argumentPayload);","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException invalidCommand) {","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"        assert argumentPayload.containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"        assert argumentPayload.get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(HOME_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager.setIsExit(true);","lastModifiedDate":"2023-03-12"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-12"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: return","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload is empty","lastModifiedDate":"2023-03-12"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-12"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"wenxin-c":118,"haoyangw":1}},{"path":"src/main/java/wellnus/reflection/ReflectUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":" * This section is to be updated with main UI class","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"public class ReflectUi extends TextUi {","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"    private static final String SEPARATOR \u003d \"\u003d\";","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"     * Call setSeparator() method inherited from TextUi superclass to re-define separator.","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    public ReflectUi() {","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"        setSeparator(SEPARATOR);","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private void printLogo(String logo) {","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(logo);","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    protected void printLogoWithSeparator(String logo) {","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        printSeparator();","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        printLogo(logo);","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":27}},{"path":"src/main/java/wellnus/reflection/ReflectionManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"public class ReflectionManager extends Manager {","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ReflectionManagerLogger\");","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final String BRIEF_DESCRIPTION \u003d \"Users can get a random set of questions to reflect on.\";","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final String FULL_DESCRIPTION \u003d \"\";","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND \u003d \"get\";","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String NO_ELEMENT_MESSAGE \u003d \"There is no new line of input, please key in inputs.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d \"Please check the available commands \"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"            + \"and enter a valid command.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String IS_EXIT_ASSERTION \u003d \"isExit should be true after exiting while loop\";","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_COMMAND \u003d 0;","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_TYPE_ASSERTION \u003d \"Command type should have length greater than 0\";","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    // TODO: Update with more commands being added","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final int NUM_SUPPORTED_COMMANDS \u003d 2;","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String SUPPORTED_COMMANDS_ASSERTION \u003d \"The number of supported commands should be 2\";","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARGUMENT_PAYLOAD_ASSERTION \u003d \"Argument-payload pairs cannot be empty\";","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean INITIAL_EXIT_STATUS \u003d false;","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    // This attribute should be set as static to avoid confusion if a new object is created.","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    // It means exit from self reflection back to main interface","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private static boolean isExit;","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    private String commandType;","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    private HashMap\u003cString, String\u003e argumentPayload;","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    public ReflectionManager() {","lastModifiedDate":"2023-03-11"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        setIsExit(INITIAL_EXIT_STATUS);","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        setSupportedCommands();","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    public HashMap\u003cString, String\u003e getArgumentPayload() {","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        return argumentPayload;","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        return commandType;","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    public static void setIsExit(boolean status) {","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        isExit \u003d status;","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    public static boolean getIsExit() {","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        return isExit;","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"     * Get Self Reflection feature name.","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"     * @return Self Reflection feature name","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-11"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-11"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     * Get a summary of description of self reflection feature.","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"     * @return Brief description of self reflection","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    public String getBriefDescription() {","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"        return BRIEF_DESCRIPTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     * Get a full description of self reflection feature.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     * TODO: FULL_DESCRIPTION is not completed yet!","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"     * @return Full description of self reflection","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"    public String getFullDescription() {","lastModifiedDate":"2023-03-11"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"        return FULL_DESCRIPTION;","lastModifiedDate":"2023-03-11"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"     * Set up the set of command-payload pairs supported by self reflection.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eCommand: get, Payload: \"\"","lastModifiedDate":"2023-03-12"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eCommand: home, Payload: \"\"","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"    protected void setSupportedCommands() {","lastModifiedDate":"2023-03-11"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"            HashMap\u003cString, String\u003e getCmdArgumentPayload \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-12"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"            getCmdArgumentPayload.put(GET_COMMAND, GET_PAYLOAD);","lastModifiedDate":"2023-03-12"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"            GetCommand getCmd \u003d new GetCommand(getCmdArgumentPayload);","lastModifiedDate":"2023-03-12"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"            HashMap\u003cString, String\u003e homeCmdArgumentPayload \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"            homeCmdArgumentPayload.put(HOME_COMMAND, HOME_PAYLOAD);","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"            HomeCommand returnCmd \u003d new HomeCommand(homeCmdArgumentPayload);","lastModifiedDate":"2023-03-16"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"            supportedCommands.add(getCmd);","lastModifiedDate":"2023-03-12"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"            supportedCommands.add(returnCmd);","lastModifiedDate":"2023-03-12"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-12"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(badCommandException, INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"        assert supportedCommands.size() \u003d\u003d NUM_SUPPORTED_COMMANDS : SUPPORTED_COMMANDS_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"     * Set command argument and payload pairs from user inputs.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"     * This is to be used to generate command.","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"     * @param inputCommand Read from user input","lastModifiedDate":"2023-03-11"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command was given","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"    public void setArgumentPayload(String inputCommand) throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"        argumentPayload \u003d commandParser.parseUserInput(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"        assert argumentPayload.size() \u003e EMPTY_COMMAND : ARGUMENT_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     * Set the main command type to determine which command to create.","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"     * @param inputCommand Read from user input","lastModifiedDate":"2023-03-11"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command was given","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"    public void setCommandType(String inputCommand) throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"        String mainArgument \u003d commandParser.getMainArgument(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"        commandType \u003d mainArgument;","lastModifiedDate":"2023-03-10"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"        assert commandType.length() \u003e EMPTY_COMMAND : COMMAND_TYPE_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"     * Main entry point of self reflection section.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"     * It prints out greeting messages, listen to and execute user commands.","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-12"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"        setIsExit(false);","lastModifiedDate":"2023-03-12"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"        SelfReflection.greet();","lastModifiedDate":"2023-03-12"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-12"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"            try {","lastModifiedDate":"2023-03-12"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"                String inputCommand \u003d UI.getCommand();","lastModifiedDate":"2023-03-12"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"                setCommandType(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"                setArgumentPayload(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"                executeCommands();","lastModifiedDate":"2023-03-14"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"            } catch (NoSuchElementException noSuchElement) {","lastModifiedDate":"2023-03-12"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"                LOGGER.log(Level.INFO, NO_ELEMENT_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"                UI.printErrorFor(noSuchElement, NO_ELEMENT_MESSAGE);","lastModifiedDate":"2023-03-12"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"            } catch (BadCommandException badCommand) {","lastModifiedDate":"2023-03-12"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"                LOGGER.log(Level.INFO, INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"                UI.printErrorFor(badCommand, INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"            }","lastModifiedDate":"2023-03-12"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"     * Decide which command to create based on command type.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"     * Commands available at this moment are:","lastModifiedDate":"2023-03-10"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eGet a random set of reflection questions\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eReturn back main interface\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command was given","lastModifiedDate":"2023-03-14"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"    public void executeCommands() throws BadCommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"        assert commandType.length() \u003e EMPTY_COMMAND : COMMAND_TYPE_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"        switch (commandType) {","lastModifiedDate":"2023-03-10"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"        case GET_COMMAND:","lastModifiedDate":"2023-03-10"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"            GetCommand getQuestionsCmd \u003d new GetCommand(argumentPayload);","lastModifiedDate":"2023-03-12"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"            getQuestionsCmd.execute();","lastModifiedDate":"2023-03-10"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-10"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"        case HOME_COMMAND:","lastModifiedDate":"2023-03-16"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"            HomeCommand returnCmd \u003d new HomeCommand(argumentPayload);","lastModifiedDate":"2023-03-16"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"            returnCmd.execute();","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"            assert isExit : IS_EXIT_ASSERTION;","lastModifiedDate":"2023-03-15"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-10"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"        default:","lastModifiedDate":"2023-03-10"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":187,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":188,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":189,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":190,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":189,"haoyangw":1}},{"path":"src/main/java/wellnus/reflection/ReflectionQuestion.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":" * ReflectQuestion class is used to create reflect question objects.","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"public class ReflectionQuestion {","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_QUESTION \u003d 0;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_QUESTION_MSG \u003d \"Question description cannot be empty.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"    private String questionDescription;","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"    public ReflectionQuestion(String questionDescription) {","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"        assert questionDescription.length() \u003e EMPTY_QUESTION : EMPTY_QUESTION_MSG;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"        this.questionDescription \u003d questionDescription;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    public String getQuestionDescription() {","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"        return this.questionDescription;","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"     * Convert each reflect question to a string to be printed","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"     * @return Question description with its status","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    public String toString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"        return questionDescription;","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":30}},{"path":"src/main/java/wellnus/reflection/SelfReflection.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":" * The main body of self reflect section.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":" * Including pre-defined questions and greeting messages.","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"public class SelfReflection {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"    private static final String LOGO \u003d","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"            \"  _____ ______ _      ______   _____  ______ ______ _      ______ _____ _______ _____ ____  _   _ \\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"                    + \" / ____|  ____| |    |  ____| |  __ \\\\|  ____|  ____| \"","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"                    + \"|    |  ____/ ____|__   __|_   _/ __ \\\\| \\\\ | |\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"                    + \"| (___ | |__  | |    | |__    | |__) | |__  | |__  | \"","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"                    + \"|    | |__ | |       | |    | || |  | |  \\\\| |\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"                    + \" \\\\___ \\\\|  __| | |    |  __|   |  _  /|  __| |  __| \"","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"                    + \"| |    |  __|| |       | |    | || |  | | . ` |\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"                    + \" ____) | |____| |____| |      | | \\\\ \\\\| |____| |    \"","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"                    + \"| |____| |___| |____   | |   _| || |__| | |\\\\  |\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"                    + \"|_____/|______|______|_|      |_|  \\\\_\\\\______|_|    \"","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"                    + \"|______|______\\\\_____|  |_|  \"","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"                    + \"|_____\\\\____/|_| \\\\_|\\n\";","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String GREETING_MESSAGE \u003d \"Welcome to WellNUS++ Self Reflection section :D\"","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"Feel very occupied and cannot find time to self reflect?\"","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"No worries, this section will give you the opportunity to reflect \"","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            + \"and improve on yourself!!\";","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    // Questions are adopted from website: https://www.usa.edu/blog/self-discovery-questions/","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String[] QUESTIONS \u003d {","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"        \"What are three of my most cherished personal values?\",","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        \"What is my purpose in life?\",","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        \"What is my personality type?\",","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        \"Did I make time for myself this week?\",","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"        \"Am I making time for my social life?\",","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"        \"What scares me the most right now?\",","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"        \"What is something I find inspiring?\",","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        \"What is something that brings me joy?\",","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        \"When is the last time I gave back to others?\",","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"        \"What matters to me most right now?\"","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    };","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    // TODO: To be changed/updated at later stages","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    private static final int TOTAL_NUM_QUESTIONS \u003d 10;","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    private static final String TOTAL_NUM_QUESTION_ASSERTIONS \u003d \"The total number of questions is 10.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    private ArrayList\u003cReflectionQuestion\u003e questions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"    public SelfReflection() {","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        setUpQuestions();","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"        assert questions.size() \u003d\u003d TOTAL_NUM_QUESTIONS : TOTAL_NUM_QUESTION_ASSERTIONS;","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"     * Load the questions list with pre-defined reflect questions.","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    private void setUpQuestions() {","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c QUESTIONS.length; i +\u003d 1) {","lastModifiedDate":"2023-03-11"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"            ReflectionQuestion newQuestion \u003d new ReflectionQuestion(QUESTIONS[i]);","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"            addReflectQuestion(newQuestion);","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-11"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"     * Print greeting logo and message.","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    public static void greet() {","lastModifiedDate":"2023-03-11"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"        UI.printLogoWithSeparator(LOGO);","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(GREETING_MESSAGE);","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"    public ArrayList\u003cReflectionQuestion\u003e getQuestions() {","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"        return questions;","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    public void clearQuestions() {","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"        questions.clear();","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"    public void addReflectQuestion(ReflectionQuestion question) {","lastModifiedDate":"2023-03-16"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"        questions.add(question);","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":84}},{"path":"src/main/java/wellnus/ui/TextUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.nio.BufferOverflowException;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":" * TextUi class for reading user inputs and printing outputs.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":" * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":" * Subclasses of TextUI class can override separator, printErrorFor and printOutputMessage.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":" * This is to accommodate to the uniqueness of each feature.","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"public class TextUi {","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"TextUiLogger\");","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final String ALERT_SEPARATOR \u003d \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!\"","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"            + \"---------!!!!!!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDENTATION_SPACES \u003d \"    \";","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final int DEFAULT_SEPARATOR_LENGTH \u003d 60;","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_MESSAGE \u003d 0;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_MESSAGE_LABEL \u003d \"Error Message:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String EXTRA_MESSAGE_LABEL \u003d \"Note:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String NO_INPUT_ELEMENT_MSG \u003d \"There is no new line of element,\"","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            + \"please key in your input!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String BUFFER_OVERFLOW_MSG \u003d \"Your input is too long,\"","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"            + \"please shorten it!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    private final Scanner scanner;","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private String separator \u003d \"-\";","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    public TextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        this(System.in);","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    public TextUi(InputStream inputStream) {","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"        this.scanner \u003d new Scanner(inputStream);","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"     * Print spaces before output message for better formatting.","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    public void printIndentation() {","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(INDENTATION_SPACES);","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"     * Read user\u0027s input command and return back the command string.\u003cbr/\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"     * @return User input command with leading/dangling whitespace being removed","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    public String getCommand() {","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        String userCommand \u003d \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"            String inputLine \u003d scanner.nextLine();","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"            userCommand \u003d inputLine.trim();","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        } catch (BufferOverflowException bufferOverFlowException) {","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, BUFFER_OVERFLOW_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"            printErrorFor(bufferOverFlowException, BUFFER_OVERFLOW_MSG);","lastModifiedDate":"2023-03-11"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"        } catch (NoSuchElementException noElementException) {","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, NO_INPUT_ELEMENT_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"            printErrorFor(noElementException, NO_INPUT_ELEMENT_MSG);","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"        return userCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"     * Customise separators for each feature.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     * At this moment we can only use length \u003d\u003d 1 separator for consistency of length of line separator.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     * This will be improved on in the future to allow for more patterns.","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"     * @param separator Length \u003d\u003d 1 string","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"    public void setSeparator(String separator) {","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"        this.separator \u003d separator;","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"     * Print line separators for output lines.\u003cbr/\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     * Each subclass inherited from this class can override this method to vary the interface.","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"    public void printSeparator() {","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c DEFAULT_SEPARATOR_LENGTH; i +\u003d 1) {","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"            System.out.print(separator);","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"     * Split a message string to a string array using System.lineSeparator().\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     * This is to help indent each new line during output.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * Each line of string will be trimmed to remove leading/dangling whitespace.","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     * @param message Message to be printed","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"     * @return Messages that are split using lineSeparator","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    private String[] splitOutputMessage(String message) {","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        String[] newLineMessages \u003d message.trim().split(System.lineSeparator());","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c newLineMessages.length; i +\u003d 1) {","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"            newLineMessages[i] \u003d newLineMessages[i].trim();","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"        return newLineMessages;","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"     * Print each new line of message on a separate line with indentation being added.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"     * Output message with one line is also accepted.","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"     * @param message Output message to be printed","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"    private void printMultiLineMessage(String message) {","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"        String[] newLineMessages \u003d splitOutputMessage(message);","lastModifiedDate":"2023-03-11"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"        for (String msg : newLineMessages) {","lastModifiedDate":"2023-03-11"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"            printIndentation();","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(msg);","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     * Print exception message with length \u003e 0 and additional notes.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * 0 or more lines of messages are accepted, but lineSeparator() must be added","lastModifiedDate":"2023-03-11"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * if you wish to have certain message to start on a new line.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     * Error messages and additional notes will be printed on separate lines with labels.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"     * Can override to accommodate to other customised error messages.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"     * Can improve on what will be printed for empty message in the future.","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"     * @param exception The exception being thrown in the program","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"     * @param additionalMessage Suggestions or notes that help users figure out what causes error","lastModifiedDate":"2023-03-11"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"    public void printErrorFor(Exception exception, String additionalMessage) {","lastModifiedDate":"2023-03-11"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"        System.out.println(ALERT_SEPARATOR);","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        String exceptionMsg \u003d exception.getMessage();","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"        if (exceptionMsg.length() \u003e EMPTY_MESSAGE) {","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(ERROR_MESSAGE_LABEL);","lastModifiedDate":"2023-03-11"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"            printMultiLineMessage(exceptionMsg);","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(EXTRA_MESSAGE_LABEL);","lastModifiedDate":"2023-03-11"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"            printMultiLineMessage(additionalMessage);","lastModifiedDate":"2023-03-11"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"        System.out.println(ALERT_SEPARATOR);","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"     * Print output message with length \u003e 0.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"     * 0 or more lines of messages are accepted, but lineSeparator() must be added","lastModifiedDate":"2023-03-11"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"     * if you wish to have certain message to start on a new line.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"     * Can override to accommodate to other customised error messages.","lastModifiedDate":"2023-03-09"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"     * @param message The exception being thrown in the program","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"    public void printOutputMessage(String message) {","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"        printSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"        if (message.length() \u003e EMPTY_MESSAGE) {","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"            printMultiLineMessage(message);","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"        printSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":152,"haoyangw":12}},{"path":"src/test/java/wellnus/WellNusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"class WellNusTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"haoyangw":2,"-":10}},{"path":"src/test/java/wellnus/atomichabit/AtomicHabitTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.AddCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.UpdateCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final String ADD_HABIT_COMMAND \u003d \"add\";","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private static final String UPDATE_HABIT_COMMAND \u003d \"update\";","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList habitList;","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private final ByteArrayOutputStream outputStreamCaptor;","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private final CommandParser parser;","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"    public AtomicHabitTest() {","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"        this.habitList \u003d new AtomicHabitList();","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"        this.outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"        this.parser \u003d new CommandParser();","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    private String getMessageFrom(String uiOutput) {","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"        TextUi textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"        textUi.printSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"        String separator \u003d outputStream.toString().trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"        StringBuilder resultBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"        String[] outputLines \u003d uiOutput.split(System.lineSeparator());","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"        for (String outputLine : outputLines) {","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"            String trimmedOutputLine \u003d outputLine.trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"            if (!trimmedOutputLine.equals(separator)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"                resultBuilder.append(trimmedOutputLine).append(System.lineSeparator());","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        return resultBuilder.toString().trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * Test AddCommand with a standard payload to check output printed","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"    public void addHabit_checkOutput_success() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"        String expectedOutput \u003d \"Yay! You have added a new habit:\"","lastModifiedDate":"2023-03-11"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"                + \"\u0027\"","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"                + payload","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"                + \"\u0027\"","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"                + \" was successfully added\";","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"        String testCommand \u003d String.format(\"%s --name %s\", ADD_HABIT_COMMAND, payload);","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"        Command command \u003d new AddCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"        command.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertEquals(expectedOutput, getMessageFrom(outputStreamCaptor.toString()));","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"     * Test AddCommand to throw {@link AtomicHabitException} when an invalid command is given to the AtomicHabitManager","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"    public void addHabit_invalidCommand_atomicHabitExceptionThrown() {","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"        AtomicHabitManager atomicHabitManager \u003d new AtomicHabitManager();","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"        String command \u003d \"sleep\";","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertThrows(AtomicHabitException.class, () -\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"            atomicHabitManager.testInvalidCommand(command);","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"        }, \"The following is an invalid command:\\n\"","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"                + command);","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"     * Test UpdateCommand with a standard payload and default increment to check output printed","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"    public void updateHabit_checkOutput_success() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"        String testUpdateCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, habitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testUpdateCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"        String expectedUpdateHabitOutput \u003d \"The following habit has been incremented! Keep up the good work!\"","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"                + habitIndex + \".\" + payload + \" \" + \"[2]\";","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"        updateCommand.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertEquals(expectedUpdateHabitOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"     * Test UpdateCommand to throw {@link AtomicHabitException} when a non-integer index is given to the UpdateCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"    public void updateHabit_indexNotInteger_atomicHabitExceptionThrown() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"        String habitIndex \u003d \"a\";","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"        String testIndexCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, habitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testIndexCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommand::execute);","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"     * Test UpdateCommand to throw {@link AtomicHabitException} when an out-of-bounds index is given","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"     * to the UpdateCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"    public void updateHabit_indexOutOfBounds_atomicHabitExceptionThrown() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"        String largeHabitIndex \u003d \"100000000\" + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"        String negativeHabitIndex \u003d \"-100000000\" + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"        String testLargeIndexCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, largeHabitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"        String testNegativeIndexCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, negativeHabitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testLargeIndexCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"        Command updateCommandForLargeIndex \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommandForLargeIndex::execute);","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"        arguments \u003d parser.parseUserInput(testNegativeIndexCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"        Command updateCommandForNegativeIndex \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommandForNegativeIndex::execute);","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":35,"haoyangw":83,"YongbinWang":31}},{"path":"src/test/java/wellnus/command/CommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"public class CommandParserTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_validInput() {","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"        // The following commands should be able to pass","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"        String[] validCommandInputs \u003d {","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"            \"mainCommand\",","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"            \"mainCommand payload\",","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"            \"main --arg1 pay1\",","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"            \"main --arg1 pay1 --arg2\",","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"            \"main --arg1 pay1 --arg2 --arg3 pay3\",","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        };","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"        // The following tests check if adversarial inputs are processed correctly","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"        String[] validTrickyInputs \u003d {","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            \"mainCommand pay--load\",","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"            \"mainCommand --argument1 payload--\",","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"            \"  mainCommand --arg--1 pay1 --arg2 pay2\",","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"        };","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"        for (String validCommand : validCommandInputs) {","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"                parser.parseUserInput(validCommand);","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"            } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"                fail(\"CommandParser threw exception on valid input:\\n\" + exception);","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        for (String validCommand : validTrickyInputs) {","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"                parser.parseUserInput(validCommand);","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"            } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"                fail(\"CommandParser threw exception on valid input:\\n\" + exception);","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_emptyInput_exceptionThrown() {","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"        // Test on empty user input","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"\";","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + command);","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_emptyArgument_exceptionThrown() {","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        // Test on empty argument","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"        String commandEmptyArg \u003d \"mainCommand payload --\";","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(commandEmptyArg);","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + commandEmptyArg);","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        // Test on empty argument with padding","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"        String commandEmptyArgPadded \u003d \"mainCommand payload -- \";","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(commandEmptyArgPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + commandEmptyArgPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        // Test on empty argument, payload exists","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        String emptyCmdWithPayload \u003d \"mainCommand payload -- payload1\";","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(emptyCmdWithPayload);","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + emptyCmdWithPayload);","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_noMainArgument_exceptionThrown() {","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        // Test on empty user input without padding","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"--arg1 payload\";","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + command);","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        // Test on empty user input with padding","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"        String commandPadded \u003d \" --arg1 payload\";","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(commandPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + commandPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgumentTest() {","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        String target \u003d \"mainCommand\";","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"mainCommand payload --argument payload1\";","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"            String result1 \u003d parser.getMainArgument(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"            assertEquals(target, result1);","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"            fail(exception.getMessage());","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument works for valid whitespace padded input","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgumentTest_paddedInput_success() {","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        String target \u003d \"mainCommand\";","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"   mainCommand payload --argument payload1\";","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"            String result1 \u003d parser.getMainArgument(command);","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"            assertEquals(target, result1);","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"            fail(exception.getMessage());","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument works for valid \\n, \\t padded input","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgumentTest_specialWhitespace_success() {","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        String target \u003d \"mainCommand\";","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"\\n \\t mainCommand payload --argument payload1\";","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"            String result1 \u003d parser.getMainArgument(command);","lastModifiedDate":"2023-03-10"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"            assertEquals(target, result1);","lastModifiedDate":"2023-03-10"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"            fail(exception.getMessage());","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument throws exception for empty input","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgument_emptyInput_throwsException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"            parser.getMainArgument(\"\");","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected error throw from empty user input\");","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument throws exception for whitespace-only input","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgument_whiteSpacedInput_throwsException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"            parser.getMainArgument(\" \\n \\t \");","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected error throw from white-spaced user input\");","lastModifiedDate":"2023-03-10"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"haoyangw":2,"nichyjt":161}},{"path":"src/test/java/wellnus/reflection/GetCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"class GetCommandTest {","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final int EXPECTED_ARRAY_LENGTH \u003d 5;","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final int EXPECTED_ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND \u003d \"get\";","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND_WRONG_FORMAT \u003d \"get reflect\";","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    // Test whether the get command is properly generated","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    void createGetObject_checkArgumentPayload_success() throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        reflectManager.setArgumentPayload(GET_COMMAND);","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e getCmdArgumentPayload \u003d reflectManager.getArgumentPayload();","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        GetCommand get \u003d new GetCommand(getCmdArgumentPayload);","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d get.getArgumentPayload();","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EXPECTED_ARGUMENT_PAYLOAD_SIZE, argumentPayload.size());","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"        assertTrue(argumentPayload.containsKey(GET_COMMAND));","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EMPTY_PAYLOAD, argumentPayload.get(GET_COMMAND));","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    // Test the number of questions being generated","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    void getRandomQuestions_checkLength_expectFive() throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        reflectManager.setArgumentPayload(GET_COMMAND);","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e getCmdArgumentPayload \u003d reflectManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"        GetCommand get \u003d new GetCommand(getCmdArgumentPayload);","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e selectedQuestions \u003d get.getRandomQuestions();","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EXPECTED_ARRAY_LENGTH, selectedQuestions.size());","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    // Test whether command is validated properly.","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    void validateCommand_getCommand_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        reflectManager.setArgumentPayload(GET_COMMAND_WRONG_FORMAT);","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e getCmdArgumentPayload \u003d reflectManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        GetCommand get \u003d new GetCommand(getCmdArgumentPayload);","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class,","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"                () -\u003e get.validateCommand(getCmdArgumentPayload));","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"wenxin-c":55}},{"path":"src/test/java/wellnus/reflection/HomeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"class HomeCommandTest {","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND_WRONG_FORMAT \u003d \"home back\";","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND_WITH_SPACES \u003d \"   home   \";","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_NOT_EXIT \u003d false;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_EXIT \u003d true;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    // Test whether ReturnCommand execute() method can terminate self reflection or not.","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkIsExit_expectTrue() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setArgumentPayload(HOME_COMMAND);","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e returnArgumentPayload \u003d reflectionManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand returnCmd \u003d new HomeCommand(returnArgumentPayload);","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"        returnCmd.execute();","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(IS_EXIT, reflectionManager.getIsExit());","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    // Test whether isExit is false for a new ReflectionManager object after exiting from previous one.","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkNewObjectIsExit_expectFalse() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setArgumentPayload(HOME_COMMAND);","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e returnArgumentPayload \u003d reflectionManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand returnCmd \u003d new HomeCommand(returnArgumentPayload);","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"        returnCmd.execute();","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager newReflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(IS_NOT_EXIT, newReflectionManager.getIsExit());","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    // Test whether wrong format command exception is caught or not.","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkWrongCmdFormat_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setArgumentPayload(HOME_COMMAND_WRONG_FORMAT);","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e returnArgumentPayload \u003d reflectionManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand returnCmd \u003d new HomeCommand(returnArgumentPayload);","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"            returnCmd.validateCommand(returnArgumentPayload);","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        });","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    // Test whether leading/dangling spaces will be removed.","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkSpaceRemoval_success() throws BadCommandException {","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setCommandType(HOME_COMMAND_WITH_SPACES);","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        String homeCommand \u003d reflectionManager.getCommandType();","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(HOME_COMMAND, homeCommand);","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"wenxin-c":62}},{"path":"src/test/java/wellnus/reflection/ReflectionManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"class ReflectionManagerTest {","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND \u003d \"get\";","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND \u003d \"test\";","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown for invalid command","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    void execution_invalidCommand_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setCommandType(INVALID_COMMAND);","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class,","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"                reflectionManager::executeCommands);","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown for empty string for commandType.","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    void setCommandType_emptyString_expectException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        String[] input \u003d EMPTY_STRING.split(\" \");","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        System.out.println(input.length);","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class,","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"                () -\u003e reflectionManager.setCommandType(EMPTY_STRING));","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown for empty string for argument-payload pairs.","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    void setArgumentPayload_emptyCommand_expectException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class,","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"                () -\u003e reflectionManager.setArgumentPayload(EMPTY_STRING));","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    // Test whether argument_payload pair is properly generated.","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    void setArgumentPayload_singleCommand_expectEmptyPayload() throws BadCommandException {","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setArgumentPayload(GET_COMMAND);","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d reflectionManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"        String value \u003d argumentPayload.get(GET_COMMAND);","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EMPTY_STRING, value);","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    // Test whether supported commands are properly set up.","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    void setSupportedCommands_checkCommandTypes_success() {","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cCommand\u003e supportedCommands \u003d reflectionManager.getSupportedCommands();","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"        assertTrue(supportedCommands.get(0) instanceof GetCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"        assertTrue(supportedCommands.get(1) instanceof HomeCommand);","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"wenxin-c":65}},{"path":"src/test/java/wellnus/reflection/ReflectionQuestionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"class ReflectionQuestionTest {","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    private static final String QUESTION \u003d \"How\u0027s today?\";","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_QUESTION \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    // Test whether questions will be created and printed in a proper format","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    void createReflectionQuestion_printString_success() {","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        ReflectionQuestion question \u003d new ReflectionQuestion(QUESTION);","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(question);","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(QUESTION, outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"wenxin-c":29}},{"path":"src/test/java/wellnus/reflection/SelfReflectionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"class SelfReflectionTest {","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final String DEFAULT_SEPARATOR \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\"","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"            + \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String LOGO \u003d","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"            \"  _____ ______ _      ______   _____  ______ ______ _      ______ _____ _______ _____ ____  _   _ \\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"                    + \" / ____|  ____| |    |  ____| |  __ \\\\|  ____|  ____| |    \"","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"                    + \"|  ____/ ____|__   __|_   _/ __ \\\\| \\\\ | |\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"                    + \"| (___ | |__  | |    | |__    | |__) | |__  | |__  | |    \"","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"                    + \"| |__ | |       | |    | || |  | |  \\\\| |\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"                    + \" \\\\___ \\\\|  __| | |    |  __|   |  _  /|  __| |  __| | \"","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"                    + \"|    |  __|| |       | |    | || |  | | . ` |\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"                    + \" ____) | |____| |____| |      | | \\\\ \\\\| |____| |    | \"","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"                    + \"|____| |___| |____   | |   _| || |__| | |\\\\  |\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"                    + \"|_____/|______|______|_|      |_|  \\\\_\\\\______|_|    \"","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"                    + \"|______|______\\\\_____|  |_|  |_____\\\\____/|_| \\\\_|\";","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String GREETING_MESSAGE \u003d \"    Welcome to WellNUS++ Self Reflection section :D\"","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"    Feel very occupied and cannot find time to self reflect?\"","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"    No worries, this section will give you the opportunity to reflect \"","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"            + \"and improve on yourself!!\";","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_ARRAY_LENGTH \u003d 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final int FULL_ARRAY_LENGTH \u003d 10;","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-11"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-11"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-11"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    // Test the correct number of questions are loaded into the list","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    void setUpQuestions_checkArrayLength_success() {","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        SelfReflection selfReflection \u003d new SelfReflection();","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e questions \u003d selfReflection.getQuestions();","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        int fullArrayLength \u003d questions.size();","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(FULL_ARRAY_LENGTH, fullArrayLength);","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"wenxin-c":52}},{"path":"src/test/java/wellnus/ui/TextUiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"// Test methods associated with TextUi class","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"class TextUiTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String DEFAULT_SEPARATOR \u003d \"----------------------------------------\"","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"            + \"--------------------\";","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final String ALERT_SEPARATOR \u003d \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!\"","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"            + \"---------!!!!!!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String TEST_OUTPUT_MSG_ONE \u003d \"Hello \";","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String TEST_OUTPUT_MSG_TWO \u003d \"World\";","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDENTATION \u003d \"    \";","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARITHMETIC_EXCEPTION_MSG_ONE \u003d \"Please check your arithmetic equation!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARITHMETIC_EXCEPTION_MSG_TWO \u003d \"E.g. Denominator is 0 in division.\";","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_MESSAGE_LABEL \u003d \"Error Message:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String EXTRA_MESSAGE_LABEL \u003d \"Note:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final TextUi UI \u003d new TextUi();","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final int TEST_NUMERATOR \u003d 2;","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final int TEST_DENOMINATOR \u003d 0;","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"     * Read test input command and return back the command string.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"     * For JUnit testing purpose only.","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"     * @param readInput Scanner object with System.in being overwritten in test","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"     * @return User input command with leading/dangling whitespace being removed","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    public static String getCommand(Scanner readInput) {","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"        String inputLine \u003d readInput.nextLine();","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        String userCommand \u003d inputLine.trim();","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        return userCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    // Test whether removal of leading/dangling space is successful","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    void getCommand_trimSpace_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        InputStream sysInBackup \u003d System.in;","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        ByteArrayInputStream in \u003d new ByteArrayInputStream((\" My string \"","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator()).getBytes());","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"        System.setIn(in);","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        Scanner readLine \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        String command \u003d getCommand(readLine);","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(\"My string\", command);","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"        System.setIn(sysInBackup);","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"        readLine.close();","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    // Test whether default line separator is properly drawn","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    void printSeparator_defaultVersion_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"        UI.printSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(DEFAULT_SEPARATOR, outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exception message will properly printed with correct format","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    void printErrorFor_arithmeticException_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"        String errorMsg \u003d ARITHMETIC_EXCEPTION_MSG_ONE + System.lineSeparator() + ARITHMETIC_EXCEPTION_MSG_TWO;","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"            int result \u003d TEST_NUMERATOR / TEST_DENOMINATOR;","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"        } catch (ArithmeticException exception) {","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(exception, errorMsg);","lastModifiedDate":"2023-03-11"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(ALERT_SEPARATOR + System.lineSeparator() + ERROR_MESSAGE_LABEL","lastModifiedDate":"2023-03-11"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + INDENTATION + \"/ by zero\" + System.lineSeparator()","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"                + EXTRA_MESSAGE_LABEL + System.lineSeparator() + INDENTATION + ARITHMETIC_EXCEPTION_MSG_ONE","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + INDENTATION + ARITHMETIC_EXCEPTION_MSG_TWO + System.lineSeparator()","lastModifiedDate":"2023-03-11"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"                + ALERT_SEPARATOR,","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"                outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"    // Test whether messages will be properly printed with correct format","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    void printOutputMessage_greeting_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"        String greeting \u003d \"How are you?\";","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(greeting);","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(DEFAULT_SEPARATOR + System.lineSeparator()","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"                + INDENTATION + \"How are you?\" + System.lineSeparator() + DEFAULT_SEPARATOR,","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"                outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"    // Test whether multi-line message can be printed with correct indentation","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    void printMultiLineMessage_twoLines_success() {","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        String multiLineOutput \u003d TEST_OUTPUT_MSG_ONE + System.lineSeparator() + TEST_OUTPUT_MSG_TWO;","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(multiLineOutput);","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"        assertEquals((DEFAULT_SEPARATOR + System.lineSeparator() + INDENTATION + \"Hello\"","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + INDENTATION + \"World\"","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + DEFAULT_SEPARATOR),","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"                outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":108,"haoyangw":1}}]
