[{"path":".github/ISSUE_TEMPLATE/administrative-matters.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"name: Administrative Matters","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"about: Add chores that must be done","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"title: \"[Task] Your Chore Name\"","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"labels: priority.Low, type.Task","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"**Describe the Task**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what the Task/Chore is.  ","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"e.g. Move testing code to new folder","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"**To Reproduce**","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"Steps to reproduce the behavior:","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"1. Go to \u0027...\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"2. Click on \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"3. Scroll down to \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"4. See error","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"**Expected behavior**","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what you expected to happen.","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"**Screenshots**","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"If applicable, add screenshots to help explain your problem.","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"**Desktop (please complete the following information):**","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" - OS: [e.g. iOS]","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" - Browser [e.g. chrome, safari]","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":" - Version [e.g. 22]","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"**Additional context**","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"Add any other context about the problem here.","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"**Labels**","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"Remember to tag the priority using the labels function.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"nichyjt":36}},{"path":".github/ISSUE_TEMPLATE/bug_report.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"name: Bug report","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"about: File a bug report for WellNUS++","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"title: \"[Bug] Your Bug Name\"","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"labels: severity.Low, type.Bug","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"**Describe the bug**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what the bug is.","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"**To Reproduce**","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"Steps to reproduce the behavior:","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"1. Go to \u0027...\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"2. Click on \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"3. Scroll down to \u0027....\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"4. See error","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"**Expected behavior**","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what you expected to happen.","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"**Screenshots**","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"If applicable, add screenshots to help explain your problem.","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"**Desktop (please complete the following information):**","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" - OS: [e.g. iOS]","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" - Browser [e.g. chrome, safari]","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" - Version [e.g. 22]","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"**Additional context**","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"Add any other context about the problem here.","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"**Severity**","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"Remember to tag the severity of the bug and priority (if applicable) using the labels function.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"nichyjt":35}},{"path":".github/ISSUE_TEMPLATE/enhancement.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"name: Enhancement","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"about: Anything that improves on an existing feature/implementation","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"title: \"[Enhancement] Your Enhancement\"","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"labels: priority.Low, type.Enhancement","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"**What is the current behaviour? Please describe any relevant features.**","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"**Why should this behaviour be changed/improved? Describe any relevant user stories/frustrations.**","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"**Describe your proposed enhancement.**","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"**Screenshots(if any) of the enhancement.**","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"**Any alternative implementations/enhancements that were considered?**","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"If any exist, explain why they were not chosen.","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"**Why should this enhancement be added? Explain its benefits/significance.**","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"haoyangw":21}},{"path":".github/ISSUE_TEMPLATE/user-story-features.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"name: User Story Features","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"about: Anything related to adding features that involve user stories","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"title: \"[User Story Feature] Your Feature\"","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"labels: priority.Low, type.Story","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"assignees: \u0027\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"**User Story**","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"What is the user story this feature aims to achieve?  ","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"Describe it and label the issue accordingly.  ","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"- Is it a \u0027Epic\u0027 -\u003e A big feature which can be broken down into smaller stories","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"- Is it a \u0027Story\u0027 -\u003e A smaller feature","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"**Is your feature request related to a problem? Please describe.**","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what the problem is. Ex. I\u0027m always frustrated when [...]","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"**Describe the solution you\u0027d like**","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of what you want to happen.","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"**Describe alternatives you\u0027ve considered**","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"A clear and concise description of any alternative solutions or features you\u0027ve considered.  Optional if it does not value-add to the issue.  ","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"**Additional context**","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"Add any other context or screenshots about the feature request here.","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"**Labels**","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"Remember to label the feature with the appropriate `priority` and `type`.","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"nichyjt":29}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    mainClass \u003d \"wellnus.WellNus\"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    archiveBaseName.set(\u0027WellNus\u0027)","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    archiveClassifier.set(\u0027\u0027)","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    archiveVersion.set(\u0027v2.0\u0027)","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"jar {","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    manifest {","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"        attributes \"Main-Class\": \"wellnus.WellNus\"","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    from {","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"wenxin-c":1,"haoyangw":14,"-":43}},{"path":"config/checkstyle/checkstyle.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"\u003c!DOCTYPE module PUBLIC","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"        \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"        \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c!--","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    This configuration file enforces rules for the coding standard at","lastModifiedDate":"2022-05-29"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"    https://se-education.org/guides/conventions/java/intermediate.html","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cmodule name\u003d\"Checker\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"FileTabCharacter\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that there are no tab characters in the file. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"RegexpSingleline\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that FIXME is not used in comments.  TODO is preferred. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"SuppressionFilter\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"LineLength\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a line is too long. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003cmodule name\u003d\"TreeWalker\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c!-- Required to allow exceptions in code style --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        IMPORT CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses.","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"          1. STATIC: static imports","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"          2. STANDARD_JAVA_PACKAGE: standard java/javax imports","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"          3. SPECIAL_IMPORTS: defined as org imports","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"          4. THIRD_PARTY_PACKAGE: defined as com imports","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"        --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"CustomImportOrder\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"customImportOrderRules\"","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"                      value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for redundant import statements.","lastModifiedDate":"2022-04-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        An import statement is redundant if:","lastModifiedDate":"2022-04-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"          * It is a duplicate of another import. This is, when a class is imported more than once.","lastModifiedDate":"2022-04-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String.","lastModifiedDate":"2022-04-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"          * The class non-statically imported is from the same package as the current package.","lastModifiedDate":"2022-04-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RedundantImport\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for unused import statements.","lastModifiedDate":"2022-04-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        An import statement is unused if:","lastModifiedDate":"2022-04-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"          It\u0027s not referenced in the file.","lastModifiedDate":"2022-04-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UnusedImports\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AvoidStarImport\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        NAMING CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"PackageName\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"TypeName\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ConstantName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            \u003cmessage key\u003d\"name.invalidPattern\"","lastModifiedDate":"2020-05-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                     value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"StaticVariableName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MemberName\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            \u003c!-- Validates non-static members against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MethodName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ParameterName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LocalVariableName\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        LENGTH and CODING CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that array type declarations follow Java Style","lastModifiedDate":"2022-04-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"          Java style: public static void main(String[] args) // Allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":"          C style:    public static void main(String args[]) // Not allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"LeftCurly\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"RightCurly\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on","lastModifiedDate":"2022-04-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            the same line. e.g., the following example is fine:","lastModifiedDate":"2022-04-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"              } else","lastModifiedDate":"2022-04-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            \u003c!-- This next example is not fine:","lastModifiedDate":"2022-04-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            \u003cpre\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"              if {","lastModifiedDate":"2022-04-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                ...","lastModifiedDate":"2022-04-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"              }","lastModifiedDate":"2022-04-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"              else","lastModifiedDate":"2022-04-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            \u003c/pre\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        \u003c!-- Checks for braces around loop blocks --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NeedBraces\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            if (true) return 1; // Not allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            if (true) { return 1; } // Not allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            else if {","lastModifiedDate":"2022-04-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"              return 1; // else if should always be multi line","lastModifiedDate":"2022-04-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2022-04-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            if (true)","lastModifiedDate":"2022-04-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"              return 1; // Not allowed","lastModifiedDate":"2022-04-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that long constants are defined with an upper ell.--\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"UpperEll\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"FallThrough\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            \u003c!-- Warn about falling through to the next case statement.  Similar to","lastModifiedDate":"2022-04-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment","lastModifiedDate":"2022-04-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or","lastModifiedDate":"2022-04-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            some other variants which we don\u0027t publicized to promote consistency).","lastModifiedDate":"2022-04-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"reliefPattern\"","lastModifiedDate":"2022-04-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                      value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":221,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that Class variables should never be declared public. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":222,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"VisibilityModifier\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":223,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":224,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":225,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":226,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":227,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        ORDER CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order.","lastModifiedDate":"2022-04-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"             @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated","lastModifiedDate":"2022-04-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        \u003c!-- Checks if the Class and Interface declarations is organized in this order","lastModifiedDate":"2022-04-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"          1. Class (static) variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"          2. Instance variables. Order: public, protected, package level (no access modifier), private.","lastModifiedDate":"2022-04-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"          3. Constructors","lastModifiedDate":"2022-04-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"          4. Methods","lastModifiedDate":"2022-04-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        \u003cmodule name \u003d\"DeclarationOrder\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that default is after all cases in a switch statement --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"DefaultComesLast\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"ModifierOrder\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and","lastModifiedDate":"2022-04-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                 8.4.3.  The prescribed order is:","lastModifiedDate":"2022-04-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                 public, protected, private, abstract, static, final, transient, volatile,","lastModifiedDate":"2022-04-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                 synchronized, native, strictfp","lastModifiedDate":"2022-04-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"              --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        WHITESPACE CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that comments are indented relative to their position in the code --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"CommentsIndentation\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":265,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"WhitespaceAround\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":266,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that various tokens are surrounded by whitespace.","lastModifiedDate":"2023-03-16"},{"lineNumber":267,"author":{"gitId":"haoyangw"},"content":"                 This includes most binary operators and keywords followed","lastModifiedDate":"2023-03-16"},{"lineNumber":268,"author":{"gitId":"haoyangw"},"content":"                 by regular or curly braces.","lastModifiedDate":"2023-03-16"},{"lineNumber":269,"author":{"gitId":"haoyangw"},"content":"            --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":270,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,","lastModifiedDate":"2023-03-16"},{"lineNumber":271,"author":{"gitId":"haoyangw"},"content":"        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,","lastModifiedDate":"2023-03-16"},{"lineNumber":272,"author":{"gitId":"haoyangw"},"content":"        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,","lastModifiedDate":"2023-03-16"},{"lineNumber":273,"author":{"gitId":"haoyangw"},"content":"        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,","lastModifiedDate":"2023-03-16"},{"lineNumber":274,"author":{"gitId":"haoyangw"},"content":"        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,","lastModifiedDate":"2023-03-16"},{"lineNumber":275,"author":{"gitId":"haoyangw"},"content":"        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,","lastModifiedDate":"2023-03-16"},{"lineNumber":276,"author":{"gitId":"haoyangw"},"content":"        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":277,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":278,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":279,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty methods e.g. void func() {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":280,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":281,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":282,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":283,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":284,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":285,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":286,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":287,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":288,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":289,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"WhitespaceAfter\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":290,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":291,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":292,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":293,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":294,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":295,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":296,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,","lastModifiedDate":"2023-03-16"},{"lineNumber":297,"author":{"gitId":"haoyangw"},"content":"        UNARY_PLUS\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":298,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":299,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":300,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":301,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- No trailing whitespace --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":302,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"Regexp\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":303,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":304,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":305,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":306,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":307,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":308,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":309,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap.","lastModifiedDate":"2023-03-16"},{"lineNumber":310,"author":{"gitId":"haoyangw"},"content":"                 This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\",","lastModifiedDate":"2023-03-16"},{"lineNumber":311,"author":{"gitId":"haoyangw"},"content":"                 \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\",","lastModifiedDate":"2023-03-16"},{"lineNumber":312,"author":{"gitId":"haoyangw"},"content":"                 \"\u0026\" when used in a generic upper or lower bounds constraints,","lastModifiedDate":"2023-03-16"},{"lineNumber":313,"author":{"gitId":"haoyangw"},"content":"                   e.g. \u003cT extends Foo \u0026 Bar\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":314,"author":{"gitId":"haoyangw"},"content":"                 \"::\" when used as a reference to a method or constructor without arguments.","lastModifiedDate":"2023-03-16"},{"lineNumber":315,"author":{"gitId":"haoyangw"},"content":"                   e.g. String::compareToIgnoreCase","lastModifiedDate":"2023-03-16"},{"lineNumber":316,"author":{"gitId":"haoyangw"},"content":"            --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":317,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,","lastModifiedDate":"2023-03-16"},{"lineNumber":318,"author":{"gitId":"haoyangw"},"content":"        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":319,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":320,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":321,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"OperatorWrap\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":322,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap.","lastModifiedDate":"2023-03-16"},{"lineNumber":323,"author":{"gitId":"haoyangw"},"content":"                 This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\".","lastModifiedDate":"2023-03-16"},{"lineNumber":324,"author":{"gitId":"haoyangw"},"content":"            --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":325,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,","lastModifiedDate":"2023-03-16"},{"lineNumber":326,"author":{"gitId":"haoyangw"},"content":"        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":327,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":328,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":329,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":330,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":331,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":332,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":333,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":334,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":335,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"SeparatorWrap\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":336,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":337,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":338,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":339,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":340,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"Indentation\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"throwsIndent\" value\u003d\"8\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":346,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":347,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":348,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":349,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":350,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":351,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"NoWhitespaceBeforeCaseDefaultColon\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":354,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that there is no whitespace between method/constructor name and open parenthesis. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":355,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"MethodParamPad\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":356,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":357,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"ParenPad\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":358,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":359,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":360,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":361,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":362,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character.","lastModifiedDate":"2023-03-16"},{"lineNumber":363,"author":{"gitId":"haoyangw"},"content":"             a \u003d 1; // Allowed","lastModifiedDate":"2023-03-16"},{"lineNumber":364,"author":{"gitId":"haoyangw"},"content":"             a  \u003d 1; // Not allowed (more than one space before \u003d)","lastModifiedDate":"2023-03-16"},{"lineNumber":365,"author":{"gitId":"haoyangw"},"content":"        --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":366,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":367,"author":{"gitId":"haoyangw"},"content":"            \u003c!-- Validate whitespace surrounding comments as well.","lastModifiedDate":"2023-03-16"},{"lineNumber":368,"author":{"gitId":"haoyangw"},"content":"                 a \u003d 1; // Allowed (single space before start of comment)","lastModifiedDate":"2023-03-16"},{"lineNumber":369,"author":{"gitId":"haoyangw"},"content":"                 a \u003d 1; /* Allowed (single space before start of comment) */","lastModifiedDate":"2023-03-16"},{"lineNumber":370,"author":{"gitId":"haoyangw"},"content":"                 /* Allowed (single space after end of comment) */ a \u003d 1;","lastModifiedDate":"2023-03-16"},{"lineNumber":371,"author":{"gitId":"haoyangw"},"content":"                 a \u003d 1;  // Not allowed (more than one space before start of comment)","lastModifiedDate":"2023-03-16"},{"lineNumber":372,"author":{"gitId":"haoyangw"},"content":"                 a \u003d 1;  /* Not allowed (more than one space before start of comment) */","lastModifiedDate":"2023-03-16"},{"lineNumber":373,"author":{"gitId":"haoyangw"},"content":"                 /* Not allowed (more than one space after end of comment) */  a \u003d 1;","lastModifiedDate":"2023-03-16"},{"lineNumber":374,"author":{"gitId":"haoyangw"},"content":"                 This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed.","lastModifiedDate":"2023-03-16"},{"lineNumber":375,"author":{"gitId":"haoyangw"},"content":"            --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":376,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":377,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":378,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":379,"author":{"gitId":"-"},"content":"        \u003c!--","lastModifiedDate":"2022-04-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"        JAVADOC CHECKS","lastModifiedDate":"2022-04-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"        --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all block-tags are ordered correctly. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"AtclauseOrder\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that Javadoc block tags appear only at the beginning of the line. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocBlockTagLocation\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that all Javadoc comments start from the second line. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocContentLocationCheck\" /\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each line in Javadoc has leading asterisks. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingLeadingAsterisk\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that each non-empty line in Javadoc has whitespace after leading asterisk. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMissingWhitespaceAfterAsterisk\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":398,"author":{"gitId":"-"},"content":"        \u003c!-- Checks that for block tags, indentation of continuation lines is at least 4 spaces. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocTagContinuationIndentation\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every class, enumeration and interface. --\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":402,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocType\"\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":403,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":404,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":406,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks the Javadoc\u0027s format for every public method (excluding getters, setters and constructors). --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":407,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"JavadocMethod\"\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":408,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":409,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"accessModifiers\" value\u003d\"public\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":410,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":411,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":412,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":413,"author":{"gitId":"-"},"content":"            \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":414,"author":{"gitId":"-"},"content":"        \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":416,"author":{"gitId":"-"},"content":"        \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e","lastModifiedDate":"2022-04-29"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-04-29"},{"lineNumber":418,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":419,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":420,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":421,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":422,"author":{"gitId":"haoyangw"},"content":"            \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":423,"author":{"gitId":"haoyangw"},"content":"        \u003c/module\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":424,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":425,"author":{"gitId":"haoyangw"},"content":"        \u003c!-- Checks that every public class, enumeration and interface has a header comment. --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":426,"author":{"gitId":"haoyangw"},"content":"        \u003cmodule name\u003d\"MissingJavadocType\"/\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":427,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":428,"author":{"gitId":"-"},"content":"    \u003c/module\u003e","lastModifiedDate":"2020-05-24"},{"lineNumber":429,"author":{"gitId":"-"},"content":"\u003c/module\u003e","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"haoyangw":147,"-":282}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"| Display                                       |           Name             |            Github Profile                  |             Portfolio              |","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"|-----------------------------------------------|:--------------------------:|:-------------------------------------:     |:---------------------------------: |","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"| ![Chen Wenxin](./team/wenxin.jpg)             |        Chen Wenxin         | [Github](https://github.com/wenxin-c)      | [Portfolio](docs/team/wenxin.md)   |","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"| ![Wang Haoyang](./team/WangHaoyang.png)       |        Wang Haoyang        | [Github](https://github.com/haoyangw)      | [Portfolio](docs/team/haoyangw.md) |","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"| ![Wang Yongbin](./team/yongbin.png)           |        Wang Yongbin        | [Github](https://github.com/YongbinWang)   | [Portfolio](docs/team/yongbin.md)  |","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"| ![Bernard Lesley](./team/Bernard.jpg)         |   Bernard Lesley Efendy    | [Github](https://github.com/BernardLesley) | [Portfolio](docs/team/bernard.md)  |","lastModifiedDate":"2023-03-11"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"| ![Yek Jin Teck, Nicholas](./team/nichyjt.jpg) |   Yek Jin Teck, Nicholas   |  [Github](https://github.com/nichyjt)      | [Portfolio](docs/team/nichyjt.md)  |","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"wenxin-c":1,"-":2,"nichyjt":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Developer Guide","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"## Table of Content","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- TOC --\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"* [Developer Guide](#developer-guide)","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"    * [Table of Content](#table-of-content)","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"    * [Product Name](#product-name)","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"    * [Acknowledgements](#acknowledgements)","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"    * [Setting up, getting started](#setting-up-getting-started)","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"        * [Setting up the project in your computer](#setting-up-the-project-in-your-computer)","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"        * [Before writing code](#before-writing-code)","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    * [Design \u0026 implementation](#design--implementation)","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"        * [Object Diagram](#object-diagram)","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    * [Product scope](#product-scope)","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"        * [Target user profile](#target-user-profile)","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"        * [Value proposition](#value-proposition)","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    * [User Stories](#user-stories)","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    * [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    * [Glossary](#glossary)","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    * [Instructions for manual testing](#instructions-for-manual-testing)","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        * [Launch](#launch)","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        * [Sample test cases](#sample-test-cases)","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"            * [Help command](#help-command)","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            * [Get reflection questions](#get-reflection-questions)","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"            * [Add atomic habits](#add-atomic-habits)","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"        * [Saving data](#saving-data)","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"\u003c!-- TOC --\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"## Product Name","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"**WellNUS++**","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"## Acknowledgements","lastModifiedDate":"2020-05-24"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"1. Reference to AB-3 Developer Guide: https://se-education.org/addressbook-level3/DeveloperGuide.html","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"2. Reference to AB-3 diagrams code: https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"## Setting up, getting started","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"### Setting up the project in your computer","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"Firstly, **fork** this repo, and **clone** the fork into your computer. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"If you plan to use Intellij IDEA (highly recommended): \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"1. **Configure the JDK**: Follow the guide","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"   [[se-edu/guides] IDEA: Configuring the JDK](https://se-education.org/guides/tutorials/intellijJdk.html)","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"   to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"2. **Import the project as a Gradle project**: Follow the guide","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"   [[se-edu/guides] IDEA: Importing a Gradle project](https://se-education.org/guides/tutorials/intellijImportGradleProject.html)","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"   to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"   **Note**: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"3. **Verify the setup:**","lastModifiedDate":"2023-03-20"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    1. Run the ```wellnus.WellNus``` and try a few commands.","lastModifiedDate":"2023-03-20"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    2. Run the tests to ensure they all pass.","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"### Before writing code","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"1. **Configure the coding style**\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"   If using IDEA, follow the guide","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"   [[se-edu/guides] IDEA: Configuring the code style](https://se-education.org/guides/tutorials/intellijCodeStyle.html)","lastModifiedDate":"2023-03-20"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"   to set up IDEA’s coding style to match ours.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"   \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"2. **Set up CI**\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder).","lastModifiedDate":"2023-03-20"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"   When GitHub detects those files, it will run the CI for your project automatically at each push","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"   to the `master` branch or to any PR. No set up required.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"   \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"3. **Learn the design**\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"   When you are ready to start coding, we recommend that you look at the class diagrams to understand the structure of","lastModifiedDate":"2023-03-22"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"   the","lastModifiedDate":"2023-03-22"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"   code and the interaction among different classes.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"## Design \u0026 implementation","lastModifiedDate":"2020-05-24"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"### Reflection Component","lastModifiedDate":"2023-03-22"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"![Reflection Component Class Diagram](diagrams/ReflectionSequenceDiagram.png)","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"![Reflection Component Class Diagram](diagrams/ReflectionClassDiagram.png)","lastModifiedDate":"2023-03-22"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"This `Reflection` component provides users with random sets of introspective questions for users to reflect on.\u003cbr\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"The `reflection` package consists of two packages `command` and `feature` packages. There are also abstract classes ","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"such as `Manager`, `Command`, `TextUi` that some classes in `reflection` package inherit from. But these abstract classes","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"are not the focus of this section since they are outside of `reflection` package.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"#### Feature Package (`ReflectionManager`, `ReflectionQuestion`, `QuestionList`, `TextUi`, `RandomNumberGenerator` classes)","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"`ReflectionManager` class:\u003cbr\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"- It is charge of the overall execution of the **Self Reflection** feature. ","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"- It inherits from abstract class `Manager`","lastModifiedDate":"2023-03-22"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"- Each `ReflectionManager` object contains exactly one `ReflectUi` object as an attribute to get user inputs. This is to","lastModifiedDate":"2023-03-22"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"use a common `Scanner` object (created in the `ReflectUi` object) to read all the user inputs within Self Reflection feature.","lastModifiedDate":"2023-03-22"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"This can avoid potential unexpected behaviours from creating multiple `Scanner` objects. ","lastModifiedDate":"2023-03-22"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"- The `runEventDriver()` method is the entry of the Self Reflection feature. It contains a **while loop** to continuously ","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"get user input commands as users are expected to continuously perform a series of actions within Self Reflection feature ","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"until they wish to return back to main WellNUS++ interface(input `home` command). ","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"- The termination condition of the while loop is controlled by a static attribute `isExit`. Whenever `runEventDriver()`","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"method is called, the `isExit` attribute will be initialised as `false`. This attribute can be accessed by other objects","lastModifiedDate":"2023-03-22"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"(more specifically `HomeCommand` object) through a static method `setIsExit()` to set to `true` and the while loop will ","lastModifiedDate":"2023-03-22"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"be terminated. The `static` attribute allows other objects to modify `isExit` value. ","lastModifiedDate":"2023-03-22"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"- The `runEventDriver()` method will call the `executeCommands()` method upon getting user commands. Based on the ","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"input command type, the `executeCommands()` method will then create the correct type of command objects and call `.execute()`","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"method to execute the command accordingly. Since the command objects are local variables, they are dependencies for `ReflectionManager`","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"class.","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"`ReflectionQuestion` class:\u003cbr\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"- Each introspective question is a `ReflectionQuestion` object. ","lastModifiedDate":"2023-03-22"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"- It contains the basic description of the introspective question. Being modelled as an object instead of pure string, each","lastModifiedDate":"2023-03-22"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"question will be able to have more attributes which might be utilized for future features.","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"`QuestionList` class:\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"- This class stores the list of questions in Self Reflection feature.","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"- It contains a `String` array of 10 introspective questions. These descriptions will be used to instantiate an arrayList","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"of 10 ReflectionQuestion.","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"- It also stores the indexes of the previous set of generated question and questions liked by users. As such data is used ","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"by all commands, a `QuestionList` object is passed by reference to construct command objects(`LikeCommand`, `GetCommand`,","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"`HomeCommand`, `FavoriteCommand`). Hence, it is a dependency to all command objects in Self Reflection. This structure allows ","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"data to be centralised and well organised by one class.","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"- By abstracting the above-mentioned attributes and methods as a separate class instead of putting them in `ReflectionManager`,","lastModifiedDate":"2023-03-22"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"the `ReflectionManager` class can solely focus command execution. All the data related to the list of questions is stored ","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"in `QuestionList` class. As such, Single responsibility can be better achieved.  ","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"`ReflectUi` class: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"- It inherits from `TextUi` class and is in charge of printing output to users.","lastModifiedDate":"2023-03-28"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"- This subclass is created to allow Self Reflection feature to have more customised output behaviour(e.g. type of separators)","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"  other than those inherited from parent class `TextUi`.","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"`RandomNumberGenerator` class; \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"- It is used generate a set of 5 distinct integers(0 ~ num_of_questions-1), this set","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"  of integers will be used as indexes to select the corresponding questions from the pool of 10 questions available.","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"#### Command Package","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"`GetCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"- Command format: `get`","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"- This command allows users to get a list of 5 random introspective questions.","lastModifiedDate":"2023-03-22"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"- The commands are validated by the `validateCommand()` method and a `BadCommandException` will be thrown if the commands are invalid.","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"- A `QuestionList` object is passed in as a dependency to generate the set of indexes and provide the pool of 10 ","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"introspective questions available.  ","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"`LikeCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"- Command format: `like \u003cindex of question(1~5)\u003e`","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"- Users can add an introspective question that is generated in the previous set into their favorite list. Since there will only","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"be 5 questions per set, the indexes are restricted to integer 1~5. ","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"- `addFavQuestion()` method in `QuestionList` class is used to add and store the data. ","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"- Users can only successfully add a question to favorite list if they have gotten a set of questions previously.","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"- Every time a question is added into the favorite list, the indexes of this particular question will be stored in data ","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"file straightaway. It prevents data loss due to unforeseen computer shutdown.","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"`FavoriteCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"- Command format: `fav`","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"- Users can get the questions in their favorite list.","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"- `getFavQuestions()` method in `QuestionList` class matches the indexes to corresponding questions and return this set of questions","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"back to `FavCommand` for output. As such, `QuestionList` is a dependency for `FavoriteCommand` as well.","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"`HomeCommand` class: \u003cbr\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"- Command format: `home`","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"- This command allows users to return back to the main WellNUS++ interface. ","lastModifiedDate":"2023-03-22"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"- Similar to `GetCommand`, `validateCommand()` method will also be called to validate the command. ","lastModifiedDate":"2023-03-22"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"- It will then call the class-level method `ReflectionManager.setIsExit()` to terminate the while loop in `Reflectionmanager`.","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"### CommandParser Component","lastModifiedDate":"2023-03-22"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"The CommandParser is a core feature of WellNUS++.","lastModifiedDate":"2023-03-22"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"It defines the following:","lastModifiedDate":"2023-03-22"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"1. The syntax for users to input commands","lastModifiedDate":"2023-03-22"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"2. A common API for developers to **process** user input","lastModifiedDate":"2023-03-22"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"#### Design Considerations","lastModifiedDate":"2023-03-22"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"The CommandParser is implicitly used by users 100% of the time.","lastModifiedDate":"2023-03-22"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"It is the abstraction through which the users will interact with WellNUS++\u0027s features.","lastModifiedDate":"2023-03-22"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"Its ease of use is critical to ensure a good user experience.","lastModifiedDate":"2023-03-22"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"**User design Considerations**:  ","lastModifiedDate":"2023-03-22"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"Our [target user profile](#target-user-profile) are Computing and Engineering students.","lastModifiedDate":"2023-03-22"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"With that, we have done extensive research and laid out the following design considerations.","lastModifiedDate":"2023-03-22"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"1. **Easy learning curve**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"   Our users are often strapped for time and tend to prefer to use tools that","lastModifiedDate":"2023-03-22"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"   they are familiar with or can learn quickly. Our command syntax should be easy","lastModifiedDate":"2023-03-22"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"   to remember, predictable and intuitive.","lastModifiedDate":"2023-03-22"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"2. **Flexible usage**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"   \"Arguments\" for a command should not care about the order of arguments.","lastModifiedDate":"2023-03-22"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"   Users often type what comes to mind first. Allowing flexible order of arguments","lastModifiedDate":"2023-03-22"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"   reduces the cognitive load on the user\u0027s end and allows for a","lastModifiedDate":"2023-03-22"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"   more pleasant experience.","lastModifiedDate":"2023-03-22"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"**Developer Design Considerations**:  ","lastModifiedDate":"2023-03-22"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"Virtually every feature in WellNUS++ will require user input to be processed. This means that all features","lastModifiedDate":"2023-03-22"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"will have to interact with `CommandParser`. Hence, the","lastModifiedDate":"2023-03-22"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"design for the `CommandParser` API must be understandable, unambiguous and easy to develop on.","lastModifiedDate":"2023-03-22"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"3. **Easy way to extract components of user input**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"   Each component of userInput (arguments, payload, etc) should be obtainable in predictable and non-arbitrary way.","lastModifiedDate":"2023-03-22"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"   Arbitrary way (using index) is not preferred as it is prone to developer erros.","lastModifiedDate":"2023-03-22"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"4. **Easy way to validate user input**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"   There should also be built-in ways to easily validate components of user input for a command,","lastModifiedDate":"2023-03-22"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"   such as checking length.","lastModifiedDate":"2023-03-22"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"#### CommandParser Syntax","lastModifiedDate":"2023-03-22"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"The command parser defines any arbitrary user input to be valid","lastModifiedDate":"2023-03-22"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"if it follows the following structure.","lastModifiedDate":"2023-03-22"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-22"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"mainCommand [payload] [--argument1 [payload1] --argument2 [payload2] ... ]","lastModifiedDate":"2023-03-22"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-22"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"This should be familiar to you. It is similar to how most CLI applications process arguments in the wild.","lastModifiedDate":"2023-03-22"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"![Example](diagrams/git_command.png)","lastModifiedDate":"2023-03-22"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"\u003cfigcaption align\u003d\"center\"\u003eExample of CLI input syntax in the wild\u003c/figcaption\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"This achieves design consideration (1). Why?  ","lastModifiedDate":"2023-03-22"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"This syntax is intuitive at a glance to our target users,","lastModifiedDate":"2023-03-22"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"is predictable and easy to remember as the only thing they need to remember is the argument name and","lastModifiedDate":"2023-03-22"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"the \u0027--\u0027 delimiter.","lastModifiedDate":"2023-03-22"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"From this syntax, we can generalise ALL user inputs as `(argument, payload)` pairs.  ","lastModifiedDate":"2023-03-22"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"`mainCommand` is a special `argument`, where it MUST be the first word in the user input.","lastModifiedDate":"2023-03-22"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"Due to the unique one-to-one relationship between arguments and payloads, we can model a user input","lastModifiedDate":"2023-03-22"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"using this syntax using a `HashMap` mapping each `argument` to a `payload`.","lastModifiedDate":"2023-03-22"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"For example,","lastModifiedDate":"2023-03-22"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"`","lastModifiedDate":"2023-03-22"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"$ foo bar --arg1 payload1 payload1--1 --arg2 payload2 --arg3","lastModifiedDate":"2023-03-22"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"`","lastModifiedDate":"2023-03-22"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"Will be mapped as:","lastModifiedDate":"2023-03-22"},{"lineNumber":233,"author":{"gitId":"nichyjt"},"content":"`","lastModifiedDate":"2023-03-22"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"(foo, bar), (arg1 payload1 payload1--1), (arg2 payload2), (arg3, \"\")","lastModifiedDate":"2023-03-22"},{"lineNumber":235,"author":{"gitId":"nichyjt"},"content":"`","lastModifiedDate":"2023-03-22"},{"lineNumber":236,"author":{"gitId":"nichyjt"},"content":"where `\"\"` represents an empty string (for visualization).","lastModifiedDate":"2023-03-22"},{"lineNumber":237,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":238,"author":{"gitId":"nichyjt"},"content":"Using a `HashMap` fulfils design considerations (2), (3) and (4).","lastModifiedDate":"2023-03-22"},{"lineNumber":239,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":240,"author":{"gitId":"nichyjt"},"content":"- (2): Order of arguments do not matter as","lastModifiedDate":"2023-03-22"},{"lineNumber":241,"author":{"gitId":"nichyjt"},"content":"- (3): To get a `payload`, the developer simply needs to call `myHashMap.get(\"argument\")`.  ","lastModifiedDate":"2023-03-22"},{"lineNumber":242,"author":{"gitId":"nichyjt"},"content":"  This syntatic sugar prevents developer errors compared to an index-based approach.","lastModifiedDate":"2023-03-22"},{"lineNumber":243,"author":{"gitId":"nichyjt"},"content":"- (4): Validating commands is much less difficult using `HashMap`. For example, size can be checked with","lastModifiedDate":"2023-03-22"},{"lineNumber":244,"author":{"gitId":"nichyjt"},"content":"  built-in `.size()`,","lastModifiedDate":"2023-03-22"},{"lineNumber":245,"author":{"gitId":"nichyjt"},"content":"  argument existence can be queried with `.containsKey()`.","lastModifiedDate":"2023-03-22"},{"lineNumber":246,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":247,"author":{"gitId":"nichyjt"},"content":"#### Integration with WellNUS++","lastModifiedDate":"2023-03-22"},{"lineNumber":248,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":249,"author":{"gitId":"nichyjt"},"content":"![Integration](diagrams/CommandParserClass.png)","lastModifiedDate":"2023-03-22"},{"lineNumber":250,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":251,"author":{"gitId":"nichyjt"},"content":"`CommandParser` integrates into the boilerplate via the abstract Manager class.  ","lastModifiedDate":"2023-03-22"},{"lineNumber":252,"author":{"gitId":"nichyjt"},"content":"All features are controlled by a manager subclass - hence the developers just need to call","lastModifiedDate":"2023-03-22"},{"lineNumber":253,"author":{"gitId":"nichyjt"},"content":"`getCommandParser` to get a reference to the `CommandParser` taking care of all commands","lastModifiedDate":"2023-03-22"},{"lineNumber":254,"author":{"gitId":"nichyjt"},"content":"in the `Manager` subclass.","lastModifiedDate":"2023-03-22"},{"lineNumber":255,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":256,"author":{"gitId":"nichyjt"},"content":"#### CommandParser API","lastModifiedDate":"2023-03-22"},{"lineNumber":257,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":258,"author":{"gitId":"nichyjt"},"content":"There are only two methods that developers need to know to use `CommandParser`.","lastModifiedDate":"2023-03-22"},{"lineNumber":259,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":260,"author":{"gitId":"nichyjt"},"content":"1. `parseUserInput`","lastModifiedDate":"2023-03-22"},{"lineNumber":261,"author":{"gitId":"nichyjt"},"content":"2. `getMainArgument`","lastModifiedDate":"2023-03-22"},{"lineNumber":262,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":263,"author":{"gitId":"nichyjt"},"content":"**Usage: `parseUserInput`**","lastModifiedDate":"2023-03-22"},{"lineNumber":264,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":265,"author":{"gitId":"nichyjt"},"content":"`parseUserInput` is used to get a `HashMap` representation of the user input, a bijection","lastModifiedDate":"2023-03-22"},{"lineNumber":266,"author":{"gitId":"nichyjt"},"content":"between `argument` and `payload` pairs.","lastModifiedDate":"2023-03-22"},{"lineNumber":267,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":268,"author":{"gitId":"nichyjt"},"content":"Implementation of `parseUserInput`:","lastModifiedDate":"2023-03-22"},{"lineNumber":269,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":270,"author":{"gitId":"nichyjt"},"content":"![CommandParser implementation](diagrams/CommandParserSequence.png)","lastModifiedDate":"2023-03-22"},{"lineNumber":271,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"`parseUserInput(String userInput)` is used to directly convert a string into their argument-payload pairs.","lastModifiedDate":"2023-03-22"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"It first calls `splitIntoCommand` to split input over the `\u0027 --\u0027` delimiter to get a `String[] commands`.","lastModifiedDate":"2023-03-22"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"Each `command` in `commands[]` contain the argument and payload. Internally, it splits the","lastModifiedDate":"2023-03-22"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"argument from the payload and populates a `HashMap` with the one-to-one mapping. After all `command`s have","lastModifiedDate":"2023-03-22"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"been processed, the map is returned to the `Manager` for usage.","lastModifiedDate":"2023-03-22"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"**Sample Code**","lastModifiedDate":"2023-03-22"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"```java","lastModifiedDate":"2023-03-22"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"// Example usage to get the HashMap","lastModifiedDate":"2023-03-22"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"public class FooManager extends Manager {","lastModifiedDate":"2023-03-22"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"    public HashMap\u003cString, String\u003e handleCommand(String userInput) {","lastModifiedDate":"2023-03-22"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"        // Get a reference to the parser","lastModifiedDate":"2023-03-22"},{"lineNumber":285,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d getCommandParser();","lastModifiedDate":"2023-03-22"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"        // Get the one-to-one mapping","lastModifiedDate":"2023-03-22"},{"lineNumber":287,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e result \u003d parseUserInput(userInput);","lastModifiedDate":"2023-03-22"},{"lineNumber":288,"author":{"gitId":"nichyjt"},"content":"        return result;","lastModifiedDate":"2023-03-22"},{"lineNumber":289,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":290,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":291,"author":{"gitId":"nichyjt"},"content":"```","lastModifiedDate":"2023-03-22"},{"lineNumber":292,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":293,"author":{"gitId":"nichyjt"},"content":"**Usage: `getMainCommand(userInput)`**","lastModifiedDate":"2023-03-22"},{"lineNumber":294,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":295,"author":{"gitId":"nichyjt"},"content":"To understand what the user wants to do, we need a convenient way to get the `mainCommand` from the user input.","lastModifiedDate":"2023-03-22"},{"lineNumber":296,"author":{"gitId":"nichyjt"},"content":"The canonical way to do this is to use `getMainCommand`. This defeats adversarial input where the main command","lastModifiedDate":"2023-03-22"},{"lineNumber":297,"author":{"gitId":"nichyjt"},"content":"is input as an argument.","lastModifiedDate":"2023-03-22"},{"lineNumber":298,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":299,"author":{"gitId":"nichyjt"},"content":"Internally, this just splits the string by whitespace and returns the first word in the array.","lastModifiedDate":"2023-03-22"},{"lineNumber":300,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":301,"author":{"gitId":"nichyjt"},"content":"#### Alternative Designs Considered","lastModifiedDate":"2023-03-22"},{"lineNumber":302,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":303,"author":{"gitId":"nichyjt"},"content":"We considered alternative command structures such as [AB3](https://se-education.org/addressbook-level3/UserGuide.html)","lastModifiedDate":"2023-03-22"},{"lineNumber":304,"author":{"gitId":"nichyjt"},"content":"where input types are","lastModifiedDate":"2023-03-22"},{"lineNumber":305,"author":{"gitId":"nichyjt"},"content":"specified , `e.g. n/John Doe` which more \u0027secure\u0027 from the get go.","lastModifiedDate":"2023-03-22"},{"lineNumber":306,"author":{"gitId":"nichyjt"},"content":"However, due to the following issues, AB3 was not chosen as the alternative solution compared to the shell-like","lastModifiedDate":"2023-03-22"},{"lineNumber":307,"author":{"gitId":"nichyjt"},"content":"structure.","lastModifiedDate":"2023-03-22"},{"lineNumber":308,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":309,"author":{"gitId":"nichyjt"},"content":"**Steep learning curve**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":310,"author":{"gitId":"nichyjt"},"content":"For experienced and inexperienced users, it is a hassle to remember what letter corresponds to what argument.","lastModifiedDate":"2023-03-22"},{"lineNumber":311,"author":{"gitId":"nichyjt"},"content":"For AB3, the user needs to remember all the different `char` \u0027verbs\u0027 such as `e/` for email, `n/` for name.","lastModifiedDate":"2023-03-22"},{"lineNumber":312,"author":{"gitId":"nichyjt"},"content":"This violates design consideration (1).","lastModifiedDate":"2023-03-22"},{"lineNumber":313,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":314,"author":{"gitId":"nichyjt"},"content":"**Does not scale well**  ","lastModifiedDate":"2023-03-22"},{"lineNumber":315,"author":{"gitId":"nichyjt"},"content":"AB3 structure runs the high risk of argument-space collision as well.  ","lastModifiedDate":"2023-03-22"},{"lineNumber":316,"author":{"gitId":"nichyjt"},"content":"For example, consider a command that needs an \"email\" and \"entry\". What does `e/\u003cpayload\u003e` correspond to?","lastModifiedDate":"2023-03-22"},{"lineNumber":317,"author":{"gitId":"nichyjt"},"content":"We could simply just put entry as *some other character* -- but that defeats the purpose of having the structure in the","lastModifiedDate":"2023-03-22"},{"lineNumber":318,"author":{"gitId":"nichyjt"},"content":"first place as the character is the argument\u0027s first character.","lastModifiedDate":"2023-03-22"},{"lineNumber":319,"author":{"gitId":"nichyjt"},"content":"This makes behaviour **unpredictable** and a **confusing** user experience.","lastModifiedDate":"2023-03-22"},{"lineNumber":320,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":321,"author":{"gitId":"nichyjt"},"content":"**Bad expert user experience**","lastModifiedDate":"2023-03-22"},{"lineNumber":322,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":323,"author":{"gitId":"nichyjt"},"content":"For expert users and CLI-masters, pedantic argument input like AB3 makes the typing experience MUCH slower due to the","lastModifiedDate":"2023-03-22"},{"lineNumber":324,"author":{"gitId":"nichyjt"},"content":"need to type which is relatively clunky as the user will need to type far off to the \u0027/\u0027 key on the keyboard.","lastModifiedDate":"2023-03-22"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":326,"author":{"gitId":"YongbinWang"},"content":"### AtomicHabit Component","lastModifiedDate":"2023-03-21"},{"lineNumber":327,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":328,"author":{"gitId":"YongbinWang"},"content":"![AtomicHabit Component](diagrams/AtomicHabit.png)","lastModifiedDate":"2023-03-21"},{"lineNumber":329,"author":{"gitId":"YongbinWang"},"content":"The `AtomicHabit` component is responsible for tracking the user\u0027s daily habits.","lastModifiedDate":"2023-03-21"},{"lineNumber":330,"author":{"gitId":"YongbinWang"},"content":"It consists of the `feature` package and the `command` package.","lastModifiedDate":"2023-03-21"},{"lineNumber":331,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":332,"author":{"gitId":"YongbinWang"},"content":"The `command` package consists of the `AddCommand`, `HomeCommand`, `ListCommand`, `UpdateCommand`.","lastModifiedDate":"2023-03-21"},{"lineNumber":333,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":334,"author":{"gitId":"YongbinWang"},"content":"* `AddCommand` - Adds a new habit to the user\u0027s habit list.","lastModifiedDate":"2023-03-21"},{"lineNumber":335,"author":{"gitId":"YongbinWang"},"content":"* `HomeCommand` - Returns the user back to main interface.","lastModifiedDate":"2023-03-21"},{"lineNumber":336,"author":{"gitId":"YongbinWang"},"content":"* `ListCommand` - Lists all the user\u0027s habits.","lastModifiedDate":"2023-03-21"},{"lineNumber":337,"author":{"gitId":"YongbinWang"},"content":"* `UpdateCommand` - Updates the user\u0027s habit count.","lastModifiedDate":"2023-03-21"},{"lineNumber":338,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":339,"author":{"gitId":"YongbinWang"},"content":"The `feature` package contains the `AtomicHabit` class, the `AtomicHabitList` class and the `AtomicHabitManager` class.","lastModifiedDate":"2023-03-21"},{"lineNumber":340,"author":{"gitId":"YongbinWang"},"content":"The `AtomicHabit` class represents a single habit, while the `AtomicHabitList` class represents the list of all the","lastModifiedDate":"2023-03-21"},{"lineNumber":341,"author":{"gitId":"YongbinWang"},"content":"user\u0027s habit and the `AtomicHabitManager` class is the class that manages the `AtomicHabitList` class and executes","lastModifiedDate":"2023-03-21"},{"lineNumber":342,"author":{"gitId":"YongbinWang"},"content":"the `commands`.","lastModifiedDate":"2023-03-21"},{"lineNumber":343,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":344,"author":{"gitId":"YongbinWang"},"content":"The `AtomicHabitManager` class utilises `TextUi` class to process user inputs and execute the `commands` accordingly.","lastModifiedDate":"2023-03-21"},{"lineNumber":345,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":346,"author":{"gitId":"YongbinWang"},"content":"The `AtomicHabitList` class is implemented as an ArrayList of `AtomicHabit` objects.","lastModifiedDate":"2023-03-21"},{"lineNumber":347,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":348,"author":{"gitId":"YongbinWang"},"content":"The `AtomicHabit` class has the following attributes:","lastModifiedDate":"2023-03-21"},{"lineNumber":349,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":350,"author":{"gitId":"YongbinWang"},"content":"* `description` - the description of the habit","lastModifiedDate":"2023-03-21"},{"lineNumber":351,"author":{"gitId":"YongbinWang"},"content":"* `count` - the number of times the habit is done","lastModifiedDate":"2023-03-21"},{"lineNumber":352,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":353,"author":{"gitId":"haoyangw"},"content":"### Managers","lastModifiedDate":"2023-03-23"},{"lineNumber":354,"author":{"gitId":"haoyangw"},"content":"![Manager](diagrams/managers.png)\u003cbr/\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":355,"author":{"gitId":"haoyangw"},"content":"The `Manager` abstract class is the superclass for classes responsible for handling user interaction with the app.","lastModifiedDate":"2023-03-23"},{"lineNumber":356,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":357,"author":{"gitId":"haoyangw"},"content":"Each `Manager` provides `runEventDriver()`, which takes over control of user interaction and provides a particular","lastModifiedDate":"2023-03-23"},{"lineNumber":358,"author":{"gitId":"haoyangw"},"content":"feature(along with all its commands). This fulfils the `Single Responsibility Principle` as every `Manager` is in charge","lastModifiedDate":"2023-03-23"},{"lineNumber":359,"author":{"gitId":"haoyangw"},"content":"of one particular feature and recognises its feature\u0027s commands, so it will only change when the feature","lastModifiedDate":"2023-03-23"},{"lineNumber":360,"author":{"gitId":"haoyangw"},"content":"and/or its commands change. This reduces coupling and increases cohesion as changes in one feature will not","lastModifiedDate":"2023-03-23"},{"lineNumber":361,"author":{"gitId":"haoyangw"},"content":"cascade and require amendments to other code(e.g. other `Manager`s), and one feature\u0027s commands and input are processed","lastModifiedDate":"2023-03-23"},{"lineNumber":362,"author":{"gitId":"haoyangw"},"content":"together in one class(a particular implementation of `Manager`). This design further fulfils the `Dependency Inversion","lastModifiedDate":"2023-03-23"},{"lineNumber":363,"author":{"gitId":"haoyangw"},"content":"Principle` as the main `WellNus` class doesn\u0027t depend on actual implementations of `Manager`, but on the abstract","lastModifiedDate":"2023-03-23"},{"lineNumber":364,"author":{"gitId":"haoyangw"},"content":"`Manager` class and its `runEventDriver()` method that all implementations of `Manager` shall provide(with the same","lastModifiedDate":"2023-03-23"},{"lineNumber":365,"author":{"gitId":"haoyangw"},"content":"expected functionality). Individual `Manager`s are free to provide additional functionality, but `WellNus` shall not","lastModifiedDate":"2023-03-23"},{"lineNumber":366,"author":{"gitId":"haoyangw"},"content":"expect any or depend on them so changes in individual features will not require updating the main `WellNus` class.","lastModifiedDate":"2023-03-23"},{"lineNumber":367,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":368,"author":{"gitId":"haoyangw"},"content":"In `runEventDriver()`, every `Manager` shall read and process user input using `TextUi` and `CommandParser` and delegate","lastModifiedDate":"2023-03-23"},{"lineNumber":369,"author":{"gitId":"haoyangw"},"content":"the issued command to the corresponding `Command` class. This fulfils the `Single Responsibility Principle`, as a","lastModifiedDate":"2023-03-23"},{"lineNumber":370,"author":{"gitId":"haoyangw"},"content":"particular implementation of `Manager` is not responsible for providing logic to read user input from the commandline,","lastModifiedDate":"2023-03-23"},{"lineNumber":371,"author":{"gitId":"haoyangw"},"content":"nor provide logic for any of the feature\u0027s supported commands. Its responsibility is abstract and singular: to recognise","lastModifiedDate":"2023-03-23"},{"lineNumber":372,"author":{"gitId":"haoyangw"},"content":"supported commands and call the corresponding `Command` implementation to execute the user\u0027s","lastModifiedDate":"2023-03-23"},{"lineNumber":373,"author":{"gitId":"haoyangw"},"content":"requested action. This ensures that changes in logic for individual commands or reading of user input will not require","lastModifiedDate":"2023-03-23"},{"lineNumber":374,"author":{"gitId":"haoyangw"},"content":"any changes in a particular implementation of `Manager`, as should be expected. A `Manager` class will only change to","lastModifiedDate":"2023-03-23"},{"lineNumber":375,"author":{"gitId":"haoyangw"},"content":"recognise new commands for its feature.","lastModifiedDate":"2023-03-23"},{"lineNumber":376,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":377,"author":{"gitId":"haoyangw"},"content":"`MainManager` is a unique implementation of `Manager` in that it holds references to every feature\u0027s `Manager` instance.","lastModifiedDate":"2023-03-23"},{"lineNumber":378,"author":{"gitId":"haoyangw"},"content":"This is important as `MainManager` then acts as an abstraction barrier for the application: `WellNus` does not know","lastModifiedDate":"2023-03-23"},{"lineNumber":379,"author":{"gitId":"haoyangw"},"content":"what features or commands are supported by the application, and only knows that `MainManager` can recognise supported","lastModifiedDate":"2023-03-23"},{"lineNumber":380,"author":{"gitId":"haoyangw"},"content":"features and commands within its `runEventDriver()` implementation. As such, the main `WellNus` class can be kept","lastModifiedDate":"2023-03-23"},{"lineNumber":381,"author":{"gitId":"haoyangw"},"content":"abstract and simple: call `MainManager.runEventDriver()` to handle user interaction and greet the user. Additionally,","lastModifiedDate":"2023-03-23"},{"lineNumber":382,"author":{"gitId":"haoyangw"},"content":"holding references to every feature\u0027s `Manager` allows `MainManager` to preserve the entire state of the running","lastModifiedDate":"2023-03-23"},{"lineNumber":383,"author":{"gitId":"haoyangw"},"content":"application so that a previous session for a feature can be fully restored when the user returns to it, as though","lastModifiedDate":"2023-03-23"},{"lineNumber":384,"author":{"gitId":"haoyangw"},"content":"he/she never left. This makes sense conceptually for a class named `MainManager` and eliminates the need to restore a","lastModifiedDate":"2023-03-23"},{"lineNumber":385,"author":{"gitId":"haoyangw"},"content":"particular `Manager`\u0027s state from storage if the application is still running and the user returns to a particular","lastModifiedDate":"2023-03-23"},{"lineNumber":386,"author":{"gitId":"haoyangw"},"content":"feature.","lastModifiedDate":"2023-03-23"},{"lineNumber":387,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":388,"author":{"gitId":"BernardLesley"},"content":"### Tokenizer","lastModifiedDate":"2023-03-23"},{"lineNumber":389,"author":{"gitId":"BernardLesley"},"content":"![Tokenizer](diagrams/Tokenizer.png)\u003cbr/\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":390,"author":{"gitId":"BernardLesley"},"content":"The `Tokenizer` interface is the superclass for classes responsible for converting data stored temporarily in feature\u0027s","lastModifiedDate":"2023-03-23"},{"lineNumber":391,"author":{"gitId":"BernardLesley"},"content":"Managers into Strings for storage and also convert Strings from storage back into data that can be restored by Managers.","lastModifiedDate":"2023-03-23"},{"lineNumber":392,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":393,"author":{"gitId":"BernardLesley"},"content":"Each `Tokenizer` provided `tokenize()` and `detokenize()`, which can then be adapted for each feature. This fulfills the","lastModifiedDate":"2023-03-23"},{"lineNumber":394,"author":{"gitId":"BernardLesley"},"content":"`Single Responsibility Principle` as each `Tokenizer` are only responsible to tokenize and detokenize data from only one","lastModifiedDate":"2023-03-23"},{"lineNumber":395,"author":{"gitId":"BernardLesley"},"content":"Feature. Furthermore, this design also fulfills `Open-Closed Principle` where `Tokenizer` interface are open for extension","lastModifiedDate":"2023-03-23"},{"lineNumber":396,"author":{"gitId":"BernardLesley"},"content":"should there be a new feature added into WellNUS++., while the `Tokenizer` feature itself are closed for modification. In","lastModifiedDate":"2023-03-23"},{"lineNumber":397,"author":{"gitId":"BernardLesley"},"content":"addition, this design principle fulfills the `Dependency Inversion Principle` as the feature\u0027s Managers are not dependent on","lastModifiedDate":"2023-03-23"},{"lineNumber":398,"author":{"gitId":"BernardLesley"},"content":"actual implementation of `Tokenizer`, but on the abstract of `Tokenizer` class and its `tokenize()` and `detokenize()`","lastModifiedDate":"2023-03-23"},{"lineNumber":399,"author":{"gitId":"BernardLesley"},"content":"method. Each feature\u0027s tokenizer are free to implement `tokenize()` and `detokenize()` as every feature might store different","lastModifiedDate":"2023-03-23"},{"lineNumber":400,"author":{"gitId":"BernardLesley"},"content":"kinds of date.","lastModifiedDate":"2023-03-23"},{"lineNumber":401,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":402,"author":{"gitId":"BernardLesley"},"content":"`AtomicHabitTokernizer` class is responsible to tokenize and detokenize ArrayList of AtomicHabits that AtomicHabitManager will","lastModifiedDate":"2023-03-23"},{"lineNumber":403,"author":{"gitId":"BernardLesley"},"content":"use or store. Each habit will be tokenized in the following format `--description [description of habit] --count [count of","lastModifiedDate":"2023-03-23"},{"lineNumber":404,"author":{"gitId":"BernardLesley"},"content":"habit]` using the `tokenize()` method. While `detokenize()` method converts the strings back to ArrayList of AtomicHabit that","lastModifiedDate":"2023-03-23"},{"lineNumber":405,"author":{"gitId":"BernardLesley"},"content":"can be initialized in AtomicHabitManager to restore the state of the Manager.","lastModifiedDate":"2023-03-23"},{"lineNumber":406,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":407,"author":{"gitId":"BernardLesley"},"content":"`ReflectionTokenizer` class is responsible to tokenize the liked question\u0027s index and previous questions\u0027s index and detokenize","lastModifiedDate":"2023-03-23"},{"lineNumber":408,"author":{"gitId":"BernardLesley"},"content":"it back. ArrayList of Set containing the index of `like` and `pref` will be passed to the `tokenize()` function. The data will","lastModifiedDate":"2023-03-23"},{"lineNumber":409,"author":{"gitId":"BernardLesley"},"content":"be stored in the following format","lastModifiedDate":"2023-03-23"},{"lineNumber":410,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":411,"author":{"gitId":"BernardLesley"},"content":"```","lastModifiedDate":"2023-03-23"},{"lineNumber":412,"author":{"gitId":"BernardLesley"},"content":"like [index of liked question]","lastModifiedDate":"2023-03-23"},{"lineNumber":413,"author":{"gitId":"BernardLesley"},"content":"prev [index of previous question]","lastModifiedDate":"2023-03-23"},{"lineNumber":414,"author":{"gitId":"BernardLesley"},"content":"``` ","lastModifiedDate":"2023-03-23"},{"lineNumber":415,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":416,"author":{"gitId":"BernardLesley"},"content":"`detokenize()` then can be called by ReflectionManager to retrieve the ArrayList containing the Set of liked and previous","lastModifiedDate":"2023-03-23"},{"lineNumber":417,"author":{"gitId":"BernardLesley"},"content":"questions\u0027 index to restore its state.","lastModifiedDate":"2023-03-23"},{"lineNumber":418,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":419,"author":{"gitId":"nichyjt"},"content":"### Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":420,"author":{"gitId":"nichyjt"},"content":"Storage is a common API built to work completely decoupled from any `Tokenizer` implementation.","lastModifiedDate":"2023-03-28"},{"lineNumber":421,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":422,"author":{"gitId":"nichyjt"},"content":"Saving: `saveData`, `Storage` allows for any tokenizing structure logic as long as the input data is in the form","lastModifiedDate":"2023-03-28"},{"lineNumber":423,"author":{"gitId":"nichyjt"},"content":"of an `ArrayList\u003cString\u003e`.","lastModifiedDate":"2023-03-28"},{"lineNumber":424,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":425,"author":{"gitId":"nichyjt"},"content":"Loading: `loadData` will load all `WellNUS++` data into a common data type, `ArrayList\u003cString\u003e`.","lastModifiedDate":"2023-03-28"},{"lineNumber":426,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":427,"author":{"gitId":"nichyjt"},"content":"The data transformation from `String` to the target data type by the managers is solely up to `Tokenizer`.","lastModifiedDate":"2023-03-28"},{"lineNumber":428,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":429,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":430,"author":{"gitId":"nichyjt"},"content":"#### Usage: `saveData()`","lastModifiedDate":"2023-03-28"},{"lineNumber":431,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":432,"author":{"gitId":"nichyjt"},"content":"To illustrate the overall flow on how to save data, refer to the sequence diagram below.  ","lastModifiedDate":"2023-03-28"},{"lineNumber":433,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":434,"author":{"gitId":"nichyjt"},"content":"The general idea is to `tokenize` it first into the `ArrayList\u003cString\u003e` format calling  before","lastModifiedDate":"2023-03-28"},{"lineNumber":435,"author":{"gitId":"nichyjt"},"content":"calling `Storage`\u0027s `saveData` method.","lastModifiedDate":"2023-03-28"},{"lineNumber":436,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":437,"author":{"gitId":"nichyjt"},"content":"![](./diagrams/StorageSequence-Saving_Data__Emphasis_on_Storage_Subroutine_.png)","lastModifiedDate":"2023-03-28"},{"lineNumber":438,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":439,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":440,"author":{"gitId":"nichyjt"},"content":"#### Design Considerations","lastModifiedDate":"2023-03-28"},{"lineNumber":441,"author":{"gitId":"nichyjt"},"content":"- Only filenames defined by public string constants in the `Storage` class. ","lastModifiedDate":"2023-03-28"},{"lineNumber":442,"author":{"gitId":"nichyjt"},"content":"  This is meant to prevent developer mis-use and control what exactly waht files WellNUS++ can create. ","lastModifiedDate":"2023-03-28"},{"lineNumber":443,"author":{"gitId":"nichyjt"},"content":"- Internally, each entry in `ArrayList\u003cString\u003e` will be delimited by ` --\\n`, where \\n is `System.LineSeparator()`.","lastModifiedDate":"2023-03-28"},{"lineNumber":444,"author":{"gitId":"nichyjt"},"content":"  This was chosen due to the invariant property of `\u0027 --\u0027` in the context of WellNUS++. Due to the way all user input","lastModifiedDate":"2023-03-28"},{"lineNumber":445,"author":{"gitId":"nichyjt"},"content":"  is filtered by the `CommandParser`, the chosen delimiter should never show up in any data input, such as a habit name","lastModifiedDate":"2023-03-28"},{"lineNumber":446,"author":{"gitId":"nichyjt"},"content":"  from `AtomicHabits`","lastModifiedDate":"2023-03-28"},{"lineNumber":447,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"## Product scope","lastModifiedDate":"2020-05-24"},{"lineNumber":449,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":450,"author":{"gitId":"-"},"content":"### Target user profile","lastModifiedDate":"2020-05-24"},{"lineNumber":451,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":452,"author":{"gitId":"wenxin-c"},"content":"* NUS Computing and Engineering students","lastModifiedDate":"2023-03-20"},{"lineNumber":453,"author":{"gitId":"wenxin-c"},"content":"* Spend lots of time coding on their IDE and type relatively fast","lastModifiedDate":"2023-03-20"},{"lineNumber":454,"author":{"gitId":"wenxin-c"},"content":"* Have to regularly use digital gadgets and Internet for their courses","lastModifiedDate":"2023-03-20"},{"lineNumber":455,"author":{"gitId":"wenxin-c"},"content":"* Very familiar with command line interfaces","lastModifiedDate":"2023-03-20"},{"lineNumber":456,"author":{"gitId":"wenxin-c"},"content":"* Stressed about academy and many others","lastModifiedDate":"2023-03-20"},{"lineNumber":457,"author":{"gitId":"wenxin-c"},"content":"* Busy with work and drowning in deadlines","lastModifiedDate":"2023-03-20"},{"lineNumber":458,"author":{"gitId":"wenxin-c"},"content":"* Wants to improve their wellness","lastModifiedDate":"2023-03-20"},{"lineNumber":459,"author":{"gitId":"wenxin-c"},"content":"* Sometimes unmotivated with short attention span","lastModifiedDate":"2023-03-20"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":461,"author":{"gitId":"-"},"content":"### Value proposition","lastModifiedDate":"2020-05-24"},{"lineNumber":462,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":463,"author":{"gitId":"wenxin-c"},"content":"NUS Computing and Engineering students are often busy with work and sometimes will neglect their wellness. This app aims","lastModifiedDate":"2023-03-20"},{"lineNumber":464,"author":{"gitId":"nichyjt"},"content":"to help NUS Computing and Engineering students improve their overall wellness by encouraging the **cultivation of","lastModifiedDate":"2023-03-22"},{"lineNumber":465,"author":{"gitId":"nichyjt"},"content":"meaningful","lastModifiedDate":"2023-03-22"},{"lineNumber":466,"author":{"gitId":"wenxin-c"},"content":"atomic habits**, **practice of self reflection** and **usage of offline timer to stay focused**. By using this app,","lastModifiedDate":"2023-03-20"},{"lineNumber":467,"author":{"gitId":"wenxin-c"},"content":"we hope users will be more aware of the healthiness of their daily life and take actions to improve their wellness.\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":468,"author":{"gitId":"wenxin-c"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":469,"author":{"gitId":"wenxin-c"},"content":"WellNUS++ is a CLI app, primarily due to the following reasons:","lastModifiedDate":"2023-03-20"},{"lineNumber":470,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":471,"author":{"gitId":"wenxin-c"},"content":"* Computing students generally type fast and prefer typing to mouse due to their daily coding routines.","lastModifiedDate":"2023-03-20"},{"lineNumber":472,"author":{"gitId":"wenxin-c"},"content":"* Due to the data heavy nature and personalised user input of this app, typing will be preferred to clicking.","lastModifiedDate":"2023-03-20"},{"lineNumber":473,"author":{"gitId":"wenxin-c"},"content":"* In particular, our application is built to reduce context switching. Users can launch the application from the comfort","lastModifiedDate":"2023-03-20"},{"lineNumber":474,"author":{"gitId":"wenxin-c"},"content":"  of their favourite IDE’s terminal to reduce disruption to their daily coding lives.","lastModifiedDate":"2023-03-20"},{"lineNumber":475,"author":{"gitId":"wenxin-c"},"content":"* Instead of using electronics with fancy GUI, this CLI app gives computing students an opportunity to minimise digital","lastModifiedDate":"2023-03-20"},{"lineNumber":476,"author":{"gitId":"wenxin-c"},"content":"  interaction which will be beneficial for their wellness.","lastModifiedDate":"2023-03-20"},{"lineNumber":477,"author":{"gitId":"wenxin-c"},"content":"* The app is gamified to make it more attractive for students to use. Levels and micro-goals incentivise our","lastModifiedDate":"2023-03-20"},{"lineNumber":478,"author":{"gitId":"wenxin-c"},"content":"  users to keep using the app’s features, allowing them to focus on their work and achieve wellness.","lastModifiedDate":"2023-03-20"},{"lineNumber":479,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":480,"author":{"gitId":"-"},"content":"## User Stories","lastModifiedDate":"2020-05-24"},{"lineNumber":481,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":482,"author":{"gitId":"-"},"content":"| Version | As a ...                                           | I want to ...                                               | So that I can ...                                  |","lastModifiedDate":"2020-05-24"},{"lineNumber":483,"author":{"gitId":"wenxin-c"},"content":"|---------|----------------------------------------------------|-------------------------------------------------------------|----------------------------------------------------|","lastModifiedDate":"2023-03-22"},{"lineNumber":484,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who prefers typing over clicking | I can use keyboard instead of mouse                         | I can use the app efficiently                      |","lastModifiedDate":"2023-03-20"},{"lineNumber":485,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who is too used to the Internet  | Reduce my browsing and information overload                 | I can improve my attention span                    |","lastModifiedDate":"2023-03-20"},{"lineNumber":486,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Reflective student                                 | I can get one introspective question on-demand              | I can reflect and grow emotionally at my own pace  |","lastModifiedDate":"2023-03-20"},{"lineNumber":487,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who wishes to improve lifestyle  | I can add an atomic habit to track                          | I can start the process of inculcating a new habit |","lastModifiedDate":"2023-03-22"},{"lineNumber":488,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who wishes to improve lifestyle  | I can view all my atomic habits                             | I can keep track of my self-improvement progress   |","lastModifiedDate":"2023-03-22"},{"lineNumber":489,"author":{"gitId":"wenxin-c"},"content":"| v1.0    | Computing student who wishes to improve lifestyle  | I can update my atomic habits                               | I can adjust the habits based on my progress       |","lastModifiedDate":"2023-03-22"},{"lineNumber":490,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | Reflective student                                 | I can mark introspective questions that I resonate with     | I can reflect using my favourite questions         |","lastModifiedDate":"2023-03-22"},{"lineNumber":491,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | Reflective student                                 | I can get the previous questions I viewed                   | I can re-view these questions                      |","lastModifiedDate":"2023-03-22"},{"lineNumber":492,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | Easily distracted computing student                | I want to start a timer to keep track of time spent on work | I can do timed-practice                            |","lastModifiedDate":"2023-03-22"},{"lineNumber":493,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | Easily distracted computing student                | I want to check the time                                    | I can keep track of my pace                        |","lastModifiedDate":"2023-03-22"},{"lineNumber":494,"author":{"gitId":"wenxin-c"},"content":"| v2.0    | A regular WellNUS++ user                           | I wish to have my information stored in the app             | I can re-view my past data                         |","lastModifiedDate":"2023-03-22"},{"lineNumber":495,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":496,"author":{"gitId":"-"},"content":"## Non-Functional Requirements","lastModifiedDate":"2020-05-24"},{"lineNumber":497,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":498,"author":{"gitId":"wenxin-c"},"content":"1. Should work on any mainstream OS as long as it has Java 11 or above installed.","lastModifiedDate":"2023-03-20"},{"lineNumber":499,"author":{"gitId":"wenxin-c"},"content":"2. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should","lastModifiedDate":"2023-03-20"},{"lineNumber":500,"author":{"gitId":"wenxin-c"},"content":"   be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2023-03-20"},{"lineNumber":501,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":502,"author":{"gitId":"-"},"content":"## Glossary","lastModifiedDate":"2020-05-24"},{"lineNumber":503,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":504,"author":{"gitId":"-"},"content":"* *glossary item* - Definition","lastModifiedDate":"2020-05-24"},{"lineNumber":505,"author":{"gitId":"wenxin-c"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2023-03-20"},{"lineNumber":506,"author":{"gitId":"nichyjt"},"content":"* **Main Command**: The first WORD that a user types in. `e.g. reflect, exit`","lastModifiedDate":"2023-03-22"},{"lineNumber":507,"author":{"gitId":"nichyjt"},"content":"* **Argument**: A word that is a parameter to a `Main Command` and is prefixed by ` --`. `e.g. --id, --name`","lastModifiedDate":"2023-03-22"},{"lineNumber":508,"author":{"gitId":"nichyjt"},"content":"* **Payload**: An (optional) arbitrary sequence of characters immediately following a main command or argument.","lastModifiedDate":"2023-03-22"},{"lineNumber":509,"author":{"gitId":"nichyjt"},"content":"  The payload will terminate when the user clicks `enter` or separates the payload with another argument","lastModifiedDate":"2023-03-22"},{"lineNumber":510,"author":{"gitId":"nichyjt"},"content":"  with the `--` delimiter.","lastModifiedDate":"2023-03-22"},{"lineNumber":511,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":512,"author":{"gitId":"-"},"content":"## Instructions for manual testing","lastModifiedDate":"2020-05-24"},{"lineNumber":513,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":514,"author":{"gitId":"wenxin-c"},"content":"### Launch","lastModifiedDate":"2023-03-20"},{"lineNumber":515,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":516,"author":{"gitId":"wenxin-c"},"content":"1. Ensure you have Java 11 or above installed in your Computer.","lastModifiedDate":"2023-03-20"},{"lineNumber":517,"author":{"gitId":"wenxin-c"},"content":"2. Download the latest `wellnus.jar` from here.","lastModifiedDate":"2023-03-20"},{"lineNumber":518,"author":{"gitId":"wenxin-c"},"content":"3. Copy the file to the folder you want to use as the home folder for your WellNUS++.","lastModifiedDate":"2023-03-20"},{"lineNumber":519,"author":{"gitId":"wenxin-c"},"content":"4. Open a command terminal, cd into the folder you put the `wellnus.jar` file in, and use the `java -jar wellnus.jar`","lastModifiedDate":"2023-03-20"},{"lineNumber":520,"author":{"gitId":"wenxin-c"},"content":"   command to run the application. A CLI should appear in a few seconds.","lastModifiedDate":"2023-03-20"},{"lineNumber":521,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":522,"author":{"gitId":"wenxin-c"},"content":"### Sample test cases","lastModifiedDate":"2023-03-20"},{"lineNumber":523,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":524,"author":{"gitId":"wenxin-c"},"content":"#### Help command","lastModifiedDate":"2023-03-20"},{"lineNumber":525,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":526,"author":{"gitId":"wenxin-c"},"content":"1. Make sure you are in the main interface, but individual features(i.e. hb, reflect and timer)","lastModifiedDate":"2023-03-20"},{"lineNumber":527,"author":{"gitId":"wenxin-c"},"content":"2. Test case: `help`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":528,"author":{"gitId":"wenxin-c"},"content":"   Expected output: a list of commands with their usage","lastModifiedDate":"2023-03-20"},{"lineNumber":529,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":530,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":531,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":532,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":533,"author":{"gitId":"wenxin-c"},"content":"    We are here to ensure your wellness is taken care of through WellNUS++","lastModifiedDate":"2023-03-20"},{"lineNumber":534,"author":{"gitId":"wenxin-c"},"content":"Here are all the commands available for you!","lastModifiedDate":"2023-03-20"},{"lineNumber":535,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":536,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":537,"author":{"gitId":"wenxin-c"},"content":"    1. hb - Enter Atomic Habits: Track your small daily habits and nurture it to form a larger behaviour","lastModifiedDate":"2023-03-20"},{"lineNumber":538,"author":{"gitId":"wenxin-c"},"content":"    usage: hb","lastModifiedDate":"2023-03-20"},{"lineNumber":539,"author":{"gitId":"wenxin-c"},"content":"    2. reflect - Read through introspective questions for your reflection","lastModifiedDate":"2023-03-20"},{"lineNumber":540,"author":{"gitId":"wenxin-c"},"content":"    usage: reflect","lastModifiedDate":"2023-03-20"},{"lineNumber":541,"author":{"gitId":"wenxin-c"},"content":"    3. exit - Exit WellNUS++","lastModifiedDate":"2023-03-20"},{"lineNumber":542,"author":{"gitId":"wenxin-c"},"content":"    usage: exit","lastModifiedDate":"2023-03-20"},{"lineNumber":543,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":544,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":545,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":546,"author":{"gitId":"wenxin-c"},"content":"3. Test case: `help me`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":547,"author":{"gitId":"wenxin-c"},"content":"   Expected output: the list of commands will not be generated as it is an invalid command\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":548,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":549,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":550,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":551,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":552,"author":{"gitId":"wenxin-c"},"content":"    help does not take in any arguments!","lastModifiedDate":"2023-03-20"},{"lineNumber":553,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":554,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":555,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":556,"author":{"gitId":"wenxin-c"},"content":"4. To get a list of available commands, any command other than `help` is invalid","lastModifiedDate":"2023-03-20"},{"lineNumber":557,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":558,"author":{"gitId":"wenxin-c"},"content":"#### Get reflection questions","lastModifiedDate":"2023-03-20"},{"lineNumber":559,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":560,"author":{"gitId":"wenxin-c"},"content":"1. Make sure you are inside **Self Reflection** feature by enter `reflect` command after the launch of the program","lastModifiedDate":"2023-03-20"},{"lineNumber":561,"author":{"gitId":"wenxin-c"},"content":"2. Test case: `get`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":562,"author":{"gitId":"wenxin-c"},"content":"   Expected output: get a set of 5 random introspective questions\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":563,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":564,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":565,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":566,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-20"},{"lineNumber":567,"author":{"gitId":"wenxin-c"},"content":"    1.What is my purpose in life?","lastModifiedDate":"2023-03-20"},{"lineNumber":568,"author":{"gitId":"wenxin-c"},"content":"    2.What is my personality type?","lastModifiedDate":"2023-03-20"},{"lineNumber":569,"author":{"gitId":"wenxin-c"},"content":"    3.Did I make time for myself this week?","lastModifiedDate":"2023-03-20"},{"lineNumber":570,"author":{"gitId":"wenxin-c"},"content":"    4.What scares me the most right now?","lastModifiedDate":"2023-03-20"},{"lineNumber":571,"author":{"gitId":"wenxin-c"},"content":"    5.When is the last time I gave back to others?","lastModifiedDate":"2023-03-20"},{"lineNumber":572,"author":{"gitId":"wenxin-c"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-20"},{"lineNumber":573,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":574,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":575,"author":{"gitId":"wenxin-c"},"content":"3. Test case: `get reflect`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":576,"author":{"gitId":"wenxin-c"},"content":"   Expected output: introspective questions will not be generated as this is an invalid command. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":577,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":578,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":579,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":580,"author":{"gitId":"wenxin-c"},"content":"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!","lastModifiedDate":"2023-03-20"},{"lineNumber":581,"author":{"gitId":"wenxin-c"},"content":"Error Message:","lastModifiedDate":"2023-03-20"},{"lineNumber":582,"author":{"gitId":"wenxin-c"},"content":"    Command is invalid.","lastModifiedDate":"2023-03-20"},{"lineNumber":583,"author":{"gitId":"wenxin-c"},"content":"Note:","lastModifiedDate":"2023-03-20"},{"lineNumber":584,"author":{"gitId":"wenxin-c"},"content":"    Please check the available commands and the format of commands.","lastModifiedDate":"2023-03-20"},{"lineNumber":585,"author":{"gitId":"wenxin-c"},"content":"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!","lastModifiedDate":"2023-03-20"},{"lineNumber":586,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":587,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":588,"author":{"gitId":"wenxin-c"},"content":"4. Any command other than `get` is invalid","lastModifiedDate":"2023-03-20"},{"lineNumber":589,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":590,"author":{"gitId":"wenxin-c"},"content":"#### Add atomic habits","lastModifiedDate":"2023-03-20"},{"lineNumber":591,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":592,"author":{"gitId":"wenxin-c"},"content":"1. Make sure you are inside **Atomic habit** feature by enter `hb` command after the launch of the program","lastModifiedDate":"2023-03-20"},{"lineNumber":593,"author":{"gitId":"wenxin-c"},"content":"2. Test case: `add --name make bed every morning`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":594,"author":{"gitId":"wenxin-c"},"content":"   Expected output: a new atomic habit is successfully added\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":595,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":596,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":597,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":598,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":599,"author":{"gitId":"wenxin-c"},"content":"    Yay! You have added a new habit:","lastModifiedDate":"2023-03-20"},{"lineNumber":600,"author":{"gitId":"wenxin-c"},"content":"    \u0027make bed every morning\u0027 was successfully added","lastModifiedDate":"2023-03-20"},{"lineNumber":601,"author":{"gitId":"wenxin-c"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-20"},{"lineNumber":602,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":603,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":604,"author":{"gitId":"wenxin-c"},"content":"3. Test case: `add name make bed every morning`\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":605,"author":{"gitId":"wenxin-c"},"content":"   Expected output: the atomic habit will not be added in as this is an invalid command\u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":606,"author":{"gitId":"wenxin-c"},"content":"   Example:","lastModifiedDate":"2023-03-20"},{"lineNumber":607,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":608,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":609,"author":{"gitId":"wenxin-c"},"content":"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!","lastModifiedDate":"2023-03-20"},{"lineNumber":610,"author":{"gitId":"wenxin-c"},"content":"Error Message:","lastModifiedDate":"2023-03-20"},{"lineNumber":611,"author":{"gitId":"wenxin-c"},"content":"    Wrong arguments given to \u0027add\u0027!","lastModifiedDate":"2023-03-20"},{"lineNumber":612,"author":{"gitId":"wenxin-c"},"content":"Note:","lastModifiedDate":"2023-03-20"},{"lineNumber":613,"author":{"gitId":"wenxin-c"},"content":"    ","lastModifiedDate":"2023-03-20"},{"lineNumber":614,"author":{"gitId":"wenxin-c"},"content":"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!","lastModifiedDate":"2023-03-20"},{"lineNumber":615,"author":{"gitId":"wenxin-c"},"content":"```","lastModifiedDate":"2023-03-20"},{"lineNumber":616,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":617,"author":{"gitId":"wenxin-c"},"content":"4. Any commands that does not follow the format of `add --name ATOMIC_HABIT_NAME` is invalid","lastModifiedDate":"2023-03-20"},{"lineNumber":618,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":619,"author":{"gitId":"wenxin-c"},"content":"### Saving data","lastModifiedDate":"2023-03-20"},{"lineNumber":620,"author":{"gitId":"wenxin-c"},"content":"To be implemented. ","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"wenxin-c":269,"BernardLesley":32,"haoyangw":35,"-":24,"nichyjt":233,"YongbinWang":27}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"# WellNUS++ User Guide","lastModifiedDate":"2023-03-17"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":",--.   ,--.       ,--.,--.,--.  ,--.,--. ,--. ,---.     |  |        |  |     ","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"|  |   |  | ,---. |  ||  ||  ,\u0027.|  ||  | |  |\u0027   .-\u0027,---|  |---.,---|  |---. ","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"|  |.\u0027.|  || .-. :|  ||  ||  |\u0027 \u0027  ||  | |  |`.  `-.\u0027---|  |---\u0027\u0027---|  |---\u0027 ","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"|   ,\u0027.   |\\\\  --.|  ||  ||  | `   |\u0027  \u0027-\u0027  \u0027.-\u0027    |   |  |        |  |     ","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"\u0027--\u0027   \u0027--\u0027 `----\u0027`--\u0027`--\u0027`--\u0027  `--\u0027 `-----\u0027 `-----\u0027    `--\u0027        `--\u0027     ","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Introduction","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"WellNUS++ is a Command Line Interface(CLI) app for NUS Computing students to keep track and improve their physical and","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"mental wellness in various aspects. If you can type fast, WellNUS++ can update their wellness progress faster than","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"traditional Graphical User Interface(GUI) apps.","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"## Table of Contents","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"- [WellNUS++ User Guide](#wellnus-user-guide)","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    - [Quick Start](#quick-start)","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    - [Features](#features)","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"        - [Command format](#command-format)","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"        - [Viewing help](#viewing-help--help)","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"        - [Accessing feature](#accessing-feature--featurename)","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"        - [Add new atomic habit](#add-new-atomic-habit--add)","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"        - [List all atomic habits](#list-all-atomic-habit--list)","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"        - [Update an atomic habit](#update-an-atomic-habit---update)","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"        - [Home](#home--home)","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"        - [Get reflection questions](#get-reflection-questions--get)","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"        - [Exit](#exit--exit)","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    - [FAQ](#faq)","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    - [Command Summary](#command-summary)","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Quick Start","lastModifiedDate":"2020-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"1. Ensure you have Java 11 or above installed in your Computer.","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"2. Download the latest wellnus++.jar from here.","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"3. Copy the file to the folder you want to use as the home folder for your WellNUS++.","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"4. Open a command terminal, cd into the folder you put the .jar file in, and use the java -jar wellnus++.jar command to","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"   run the application.","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"   A CLI should appear in a few seconds.","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"WellNUS++ comes with a variety of features to help you enhance your overall wellness in NUS!","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"### Command Format","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"* Words in UPPER_CASE are the parameters to be supplied by the user.","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"  e.g. in add --name NAME is a parameter which can be used as add --name John Doe.","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"* Items in square brackets are optional.","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"  E.g --name NAME  [--tag TAG] can be used as --name John Doe --tag friend or as --name John Doe.","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"* Items with … after them can be used multiple times including zero times.","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"  e.g. [--tag TAG]… can be used as   (i.e. 0 times), --tag friend, --tag friend, --tag family etc.","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"* Parameters can be in any order.","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"  e.g. if the command specifies --name NAME --phone PHONE_NUMBER, --phone PHONE_NUMBER --name NAME is also acceptable.","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"### Viewing help: `help`","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"Lists all commands available and provide a short description of the application","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"Format: `help`","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"* List all commands available in the app and a short description of the app","lastModifiedDate":"2023-03-17"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"* Give a detailed explanation of the parameters and subcommands for a given command","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"`help`","lastModifiedDate":"2023-03-17"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"    We are here to ensure your wellness is taken care of through WellNUS++","lastModifiedDate":"2023-03-17"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"    Here are all the commands available for you!","lastModifiedDate":"2023-03-17"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"    1. hb - Enter Atomic Habits: Track your small daily habits and nurture it to form a larger behaviour","lastModifiedDate":"2023-03-17"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    usage: hb","lastModifiedDate":"2023-03-17"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"    2. reflect - Read through introspective questions for your reflection","lastModifiedDate":"2023-03-17"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"    usage: reflect","lastModifiedDate":"2023-03-17"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"    3. exit - Exit WellNUS++","lastModifiedDate":"2023-03-17"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"    usage: exit","lastModifiedDate":"2023-03-17"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"### Accessing feature: `FEATURE_NAME`","lastModifiedDate":"2023-03-17"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"Access specific feature from main interface by inputting the feature_name","lastModifiedDate":"2023-03-17"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"Feature name can be referenced by calling the help command","lastModifiedDate":"2023-03-17"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"Format: `FEATURE_NAME`","lastModifiedDate":"2023-03-17"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"* Accesses unique features to utilise their respective actions","lastModifiedDate":"2023-03-17"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"`reflect`","lastModifiedDate":"2023-03-17"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-17"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"    Welcome to WellNUS++ Self Reflection section :D","lastModifiedDate":"2023-03-17"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"    Feel very occupied and cannot find time to self reflect?","lastModifiedDate":"2023-03-17"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"    No worries, this section will give you the opportunity to reflect and improve on yourself!!","lastModifiedDate":"2023-03-17"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-17"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"### Add new atomic habit: `add`","lastModifiedDate":"2023-03-17"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"Adds an atomic habit to be tracked by WellNUS++ when accessing atomic habit feature","lastModifiedDate":"2023-03-17"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"Format: `add --name ATOMIC_HABIT_NAME `","lastModifiedDate":"2023-03-17"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"* ATOMIC_HABIT_NAME is used to uniquely identify each habit(unique and not null)","lastModifiedDate":"2023-03-17"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"`add --name make bed every morning`","lastModifiedDate":"2023-03-17"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    Yay! You have added a new habit:","lastModifiedDate":"2023-03-17"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"    \u0027make bed every morning\u0027 was successfully added","lastModifiedDate":"2023-03-17"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":139,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"### List all atomic habit: `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":142,"author":{"gitId":"YongbinWang"},"content":"Shows a list of all atomic habits.","lastModifiedDate":"2023-03-17"},{"lineNumber":143,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":144,"author":{"gitId":"YongbinWang"},"content":"Format: `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"`list`","lastModifiedDate":"2023-03-17"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":152,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"—-------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":154,"author":{"gitId":"YongbinWang"},"content":"Here is the current accumulation of your atomic habits!","lastModifiedDate":"2023-03-17"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"Keep up the good work and you will develop a helpful habit in no time","lastModifiedDate":"2023-03-17"},{"lineNumber":156,"author":{"gitId":"YongbinWang"},"content":"1.Make Bed every morning [1]","lastModifiedDate":"2023-03-17"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"2.Read for at least 30 minutes every day [3]","lastModifiedDate":"2023-03-17"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"3.Avoid checking phone for the first hour after waking up [2]","lastModifiedDate":"2023-03-17"},{"lineNumber":159,"author":{"gitId":"YongbinWang"},"content":"... ","lastModifiedDate":"2023-03-17"},{"lineNumber":160,"author":{"gitId":"YongbinWang"},"content":"—--------------------------------------------------------------- ","lastModifiedDate":"2023-03-17"},{"lineNumber":161,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":162,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":163,"author":{"gitId":"YongbinWang"},"content":"### Update an atomic habit: `update","lastModifiedDate":"2023-03-17"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":165,"author":{"gitId":"YongbinWang"},"content":"Increment the number of times that an atomic habit has been carried out.","lastModifiedDate":"2023-03-17"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":167,"author":{"gitId":"YongbinWang"},"content":"Format:","lastModifiedDate":"2023-03-17"},{"lineNumber":168,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"* Step 1: List the current habits using command","lastModifiedDate":"2023-03-17"},{"lineNumber":170,"author":{"gitId":"YongbinWang"},"content":"* `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"* Step 2: Select the habit to update by entering the index number of the habit HABIT_INDEX according to index of the","lastModifiedDate":"2023-03-17"},{"lineNumber":172,"author":{"gitId":"YongbinWang"},"content":"  list output","lastModifiedDate":"2023-03-17"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"  The user can specify the number of increments for the habit count via NUMBER_TO_INCREMENT","lastModifiedDate":"2023-03-17"},{"lineNumber":174,"author":{"gitId":"YongbinWang"},"content":"  The default behaviour is to increment the behaviour by 1","lastModifiedDate":"2023-03-17"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"* `update --id HABIT-INDEX [--inc NUMBER_TO_INCREMENT]`","lastModifiedDate":"2023-03-17"},{"lineNumber":176,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":177,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":178,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"* `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":180,"author":{"gitId":"YongbinWang"},"content":"* `update --id 1 --inc 2`","lastModifiedDate":"2023-03-17"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":183,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":184,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":185,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":186,"author":{"gitId":"YongbinWang"},"content":"Here is the current accumulation of your atomic habits!","lastModifiedDate":"2023-03-17"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"Keep up the good work and you will develop a helpful habit in no time","lastModifiedDate":"2023-03-17"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"1. Make bed every morning [5]","lastModifiedDate":"2023-03-17"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"2. Read for at least 30 minutes every day [3] ","lastModifiedDate":"2023-03-17"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":192,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":193,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":194,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":195,"author":{"gitId":"YongbinWang"},"content":"The following habit has been incremented! Keep up the good work!","lastModifiedDate":"2023-03-17"},{"lineNumber":196,"author":{"gitId":"YongbinWang"},"content":"1. Make bed every morning [7]","lastModifiedDate":"2023-03-17"},{"lineNumber":197,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":198,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":199,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":200,"author":{"gitId":"YongbinWang"},"content":"### Home: `home`","lastModifiedDate":"2023-03-17"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"To leave the current feature and return back to main interface","lastModifiedDate":"2023-03-17"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"Format: `home`","lastModifiedDate":"2023-03-17"},{"lineNumber":205,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":206,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":207,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":208,"author":{"gitId":"YongbinWang"},"content":"`home`","lastModifiedDate":"2023-03-17"},{"lineNumber":209,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":210,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":211,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":212,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":214,"author":{"gitId":"YongbinWang"},"content":"Thank you for using atomic habits. Do not forget about me!","lastModifiedDate":"2023-03-17"},{"lineNumber":215,"author":{"gitId":"YongbinWang"},"content":"—---------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":216,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":217,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":218,"author":{"gitId":"YongbinWang"},"content":"### Get reflection questions: `get`","lastModifiedDate":"2023-03-17"},{"lineNumber":219,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":220,"author":{"gitId":"YongbinWang"},"content":"Ask WellNUS++ to get a set of 5 random introspective questions for users to view","lastModifiedDate":"2023-03-17"},{"lineNumber":221,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":222,"author":{"gitId":"YongbinWang"},"content":"Format: `get`","lastModifiedDate":"2023-03-17"},{"lineNumber":223,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":224,"author":{"gitId":"YongbinWang"},"content":"Example of usage:","lastModifiedDate":"2023-03-17"},{"lineNumber":225,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":226,"author":{"gitId":"YongbinWang"},"content":"`get`","lastModifiedDate":"2023-03-17"},{"lineNumber":227,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":228,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":229,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":230,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":231,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-17"},{"lineNumber":232,"author":{"gitId":"YongbinWang"},"content":"    1.What are three of my most cherished personal values?","lastModifiedDate":"2023-03-17"},{"lineNumber":233,"author":{"gitId":"YongbinWang"},"content":"    2.What is my purpose in life?","lastModifiedDate":"2023-03-17"},{"lineNumber":234,"author":{"gitId":"YongbinWang"},"content":"    3.What scares me the most right now?","lastModifiedDate":"2023-03-17"},{"lineNumber":235,"author":{"gitId":"YongbinWang"},"content":"    4.What is something that brings me joy?","lastModifiedDate":"2023-03-17"},{"lineNumber":236,"author":{"gitId":"YongbinWang"},"content":"    5.When is the last time I gave back to others?","lastModifiedDate":"2023-03-17"},{"lineNumber":237,"author":{"gitId":"YongbinWang"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-17"},{"lineNumber":238,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":239,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":240,"author":{"gitId":"YongbinWang"},"content":"### Exit: `exit`","lastModifiedDate":"2023-03-17"},{"lineNumber":241,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":242,"author":{"gitId":"YongbinWang"},"content":"To exit the app, data of the current progress will be saved upon exiting the program","lastModifiedDate":"2023-03-17"},{"lineNumber":243,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":244,"author":{"gitId":"YongbinWang"},"content":"Format: `exit`","lastModifiedDate":"2023-03-17"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":246,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2020-05-24"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":248,"author":{"gitId":"YongbinWang"},"content":"`exit`","lastModifiedDate":"2023-03-17"},{"lineNumber":249,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":250,"author":{"gitId":"YongbinWang"},"content":"Expected outcome:","lastModifiedDate":"2023-03-17"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":252,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":253,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":254,"author":{"gitId":"YongbinWang"},"content":"    Thank you for using WellNUS++! See you again soon Dx","lastModifiedDate":"2023-03-17"},{"lineNumber":255,"author":{"gitId":"YongbinWang"},"content":"------------------------------------------------------------","lastModifiedDate":"2023-03-17"},{"lineNumber":256,"author":{"gitId":"YongbinWang"},"content":"```","lastModifiedDate":"2023-03-17"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":258,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-24"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":260,"author":{"gitId":"YongbinWang"},"content":"**Q**: Will my data be saved after every update?","lastModifiedDate":"2023-03-17"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":262,"author":{"gitId":"YongbinWang"},"content":"**A**: No it is currently not implemented, saving will only be done when you exit the program","lastModifiedDate":"2023-03-17"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":264,"author":{"gitId":"YongbinWang"},"content":"**Q**: How can I navigate the program?","lastModifiedDate":"2023-03-17"},{"lineNumber":265,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":266,"author":{"gitId":"YongbinWang"},"content":"**A**: Please type help when you start the program to view all the commands available","lastModifiedDate":"2023-03-17"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":268,"author":{"gitId":"YongbinWang"},"content":"**Q**: How do I start the program?","lastModifiedDate":"2023-03-17"},{"lineNumber":269,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":270,"author":{"gitId":"YongbinWang"},"content":"**A**: Please run the JAR file on your local machine","lastModifiedDate":"2023-03-17"},{"lineNumber":271,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":272,"author":{"gitId":"YongbinWang"},"content":"**Q**: Where will my data be stored?","lastModifiedDate":"2023-03-17"},{"lineNumber":273,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":274,"author":{"gitId":"YongbinWang"},"content":"**A**: Your data will be stored in the separate folder with reference from the program directory","lastModifiedDate":"2023-03-17"},{"lineNumber":275,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":276,"author":{"gitId":"YongbinWang"},"content":"## Command Summary","lastModifiedDate":"2023-03-17"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":278,"author":{"gitId":"YongbinWang"},"content":"* Help `help`","lastModifiedDate":"2023-03-17"},{"lineNumber":279,"author":{"gitId":"YongbinWang"},"content":"* Access feature `reflect`","lastModifiedDate":"2023-03-17"},{"lineNumber":280,"author":{"gitId":"YongbinWang"},"content":"* Add habit `add --name make bed`","lastModifiedDate":"2023-03-17"},{"lineNumber":281,"author":{"gitId":"YongbinWang"},"content":"* View habit `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":282,"author":{"gitId":"YongbinWang"},"content":"* Update habit `list`","lastModifiedDate":"2023-03-17"},{"lineNumber":283,"author":{"gitId":"YongbinWang"},"content":"  `update --id 1 [--inc 2]`","lastModifiedDate":"2023-03-17"},{"lineNumber":284,"author":{"gitId":"YongbinWang"},"content":"* Return to main interface `home`","lastModifiedDate":"2023-03-17"},{"lineNumber":285,"author":{"gitId":"YongbinWang"},"content":"* Get question `get`","lastModifiedDate":"2023-03-17"},{"lineNumber":286,"author":{"gitId":"YongbinWang"},"content":"* Exit program `exit`","lastModifiedDate":"2023-03-17"}],"authorContributionMap":{"YongbinWang":264,"-":22}},{"path":"docs/diagrams/AtomicHabit.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"@startuml","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"!include style.puml","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"Package atomichabit \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"Package command \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"Class AddCommand","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"Class HomeCommand","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"Class ListCommand","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"Class UpdateCommand","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"Package feature \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"Class AtomicHabit","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"Class AtomicHabitManager","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"Class AtomicHabitList","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"Class TextUi","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"Class \"{abstract}\\nCommand\" as Command","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"Class \"{abstract}\\nManager\" as Manager","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"Command \u003c|-- AddCommand","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"Command \u003c|-- HomeCommand","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"Command \u003c|-- ListCommand","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"Command \u003c|-- UpdateCommand","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"Manager \u003c|-- AtomicHabitManager","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitList -\u003e \"*\" AtomicHabit : contains \u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager -right-\u003e \"1\" AtomicHabitList : create \u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager --\u003e AddCommand : execute \u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager --\u003e HomeCommand : execute \u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager --\u003e ListCommand : execute \u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager --\u003e UpdateCommand : execute \u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"AddCommand --\u003e \"1\"AtomicHabitList","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"ListCommand --\u003e \"1\"AtomicHabitList","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"UpdateCommand --\u003e \"1\"AtomicHabitList","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"AtomicHabitManager -down-\u003e \"1\"TextUi","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"AddCommand -right-\u003e \"1\"TextUi","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"ListCommand -right-\u003e \"1\"TextUi","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"UpdateCommand -right-\u003e \"1\"TextUi","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"@enduml","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"YongbinWang":43}},{"path":"docs/diagrams/CommandParserClass.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"@startuml","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"\u0027https://plantuml.com/class-diagram","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"!include style.puml","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"Package command {","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"    Class CommandParser {","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"        + parseUserInput(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"        + getMainArgument(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"        - splitIntoCommands(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"        - getArgumentFromCommand(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"        - getPayloadFromCommand(String)","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"Package manager{","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    Class \"{abstract}\\nManager\" as Manager {","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"        # commandParser : CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        + getCommandParser()","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"Class AtomicHabitManager {","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    # commandParser : CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    + getCommandParser()","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"Class ReflectionManager {","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    # commandParser : CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    + getCommandParser()","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"CommandParser \"1\" -- Manager : contains \u003c","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"Manager \u003c|-- AtomicHabitManager","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"Manager \u003c|-- ReflectionManager","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"@enduml","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"nichyjt":42}},{"path":"docs/diagrams/CommandParserSequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"@startuml","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"!include style.puml","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"hide footbox","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"Manager -\u003e CommandParser : parseUserInput(userInput)","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"activate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"CommandParser -\u003e CommandParser : splitIntoCommands(userInput)","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"activate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"CommandParser --\u003e CommandParser : String[] commands","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"deactivate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    loop for each command in commands","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"        CommandParser -\u003e CommandParser :getArgumentFromCommand(command)","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"        activate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"        CommandParser --\u003e CommandParser : argument","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"        deactivate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"        CommandParser -\u003e CommandParser :getPayloadFromCommand(command)","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"        activate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        CommandParser --\u003e CommandParser : payload","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"        deactivate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    end","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"CommandParser --\u003e Manager: HashMap\u003cString,String\u003e argumentPayload","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"deactivate CommandParser","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"@enduml","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"nichyjt":27}},{"path":"docs/diagrams/ReflectionClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"@startuml","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"!include style.puml","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"Package reflection \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"Package command \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"class GetCommand{","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"-reflectUi : ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"+getRandomQuestions() : ArrayList\u003cReflectionQuestion\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"class HomeCommand{","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"-reflectUi : ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"class LikeCommand{","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"-reflectUi : ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"+addFavQuestion(questionIndex: String)","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"+mapInputToQuestion() : HashMap\u003cInteger, Integer\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"class FavCommand{","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"-reflectUi : ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"Package feature \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"class ReflectionManager{","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"-reflectUi : ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"+executeCommands() : void","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"+runEventDriver() : void","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"class ReflectUi{","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"#printLogoWithSeparator(logo : String) : void","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"class ReflectionQuestion{","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"-questionDescription : String","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"class QuestionList{","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"-setUpQuestions() : void","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"+getQuestions() : ArrayList\u003cReflectionQuestion\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"class RandomNumberGenerator{","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"+generateRandomNumbers() : Set\u003cInteger\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"class TextUi{","lastModifiedDate":"2023-03-22"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"+printOutputMessage(message : String) : void","lastModifiedDate":"2023-03-22"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"+printErrorFor(exception : Exception, additionalMessage : String) : void","lastModifiedDate":"2023-03-22"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"class \"{abstract}\\nManager\" as Manager{","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"#{abstract}setSupportedCommands() : void","lastModifiedDate":"2023-03-22"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"#{abstract}runEventDriver() : void","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"class \"{abstract}\\nCommand\" as Command{","lastModifiedDate":"2023-03-22"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"-arguments : HashMap\u003cString, String\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"#{abstract}execute : void","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"#{abstract}validateCommand(commandMap: HashMap\u003cString, String\u003e) : void","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"class Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager --\u003e \"1\" QuestionList : create \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager --|\u003e Manager","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager ..\u003e GetCommand : execute \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager ..\u003e HomeCommand : execute \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager ..\u003e LikeCommand : execute \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager ..\u003e FavCommand : execute \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"GetCommand ..\u003e QuestionList","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"FavCommand ..\u003e QuestionList","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"LikeCommand ..\u003e QuestionList","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"HomeCommand ..\u003e QuestionList","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e \"10\" ReflectionQuestion : contains \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e \"1\" ReflectUi : uses \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e \"1\" Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e \"1\" RandomNumberGenerator : uses \u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"ReflectUi --|\u003e TextUi","lastModifiedDate":"2023-03-22"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"GetCommand --|\u003e Command","lastModifiedDate":"2023-03-22"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"HomeCommand --|\u003e Command","lastModifiedDate":"2023-03-22"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"LikeCommand --|\u003e Command","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"FavCommand --|\u003e Command","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"HomeCommand ..\u003e ReflectionManager : calls \u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"@enduml","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"wenxin-c":83}},{"path":"docs/diagrams/ReflectionSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"@startuml","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"!include style.puml","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"hide footbox","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"activate MainManager","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"create ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"MainManager -\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"activate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"create ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"activate ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"ReflectUi --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"deactivate ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"create QuestionList","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e QuestionList","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"activate QuestionList","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"QuestionList --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"deactivate QuestionList","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"create CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"activate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"CommandParser --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"deactivate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager --\u003e MainManager","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"deactivate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"MainManager -\u003e ReflectionManager : runEventDriver()","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"activate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e ReflectUi : getCommands()","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"activate ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"ReflectUi --\u003e ReflectionManager : inputCommand: String","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"deactivate ReflectUi","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e CommandParser : setCommandType(inputCommand: String)","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"activate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"CommandParser --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"deactivate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e CommandParser : setCommandArgument(inputCommand: String)","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"activate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"CommandParser --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"deactivate CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"ReflectionManager -\u003e ReflectionManager : executeCommands()","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"activate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    alt commandType \u003d get","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        create GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager -\u003e GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        activate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"        GetCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"        deactivate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager -\u003e GetCommand : execute()","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"        activate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"        GetCommand -\u003e GetCommand : validateCommand()","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"        activate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"        GetCommand --\u003e GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"        deactivate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"        GetCommand -\u003e GetCommand : convertQuestionsToString()","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"        activate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"        GetCommand --\u003e GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"        deactivate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"        GetCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"        deactivate GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"        destroy GetCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    else commandType \u003d like","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"        create LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager -\u003e LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"        activate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"        deactivate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager -\u003e LikeCommand : execute()","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"        activate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand -\u003e LikeCommand : validateCommand()","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"        activate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand --\u003e LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"        deactivate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand -\u003e LikeCommand : addFavQuestion()","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"        activate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand --\u003e LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"        deactivate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"        deactivate LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"        destroy LikeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    else commandType \u003d fav","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        create FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager -\u003e FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"        activate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"        FavoriteCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"        deactivate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager -\u003e FavoriteCommand : execute()","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"        activate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"        FavoriteCommand -\u003e FavoriteCommand : validateCommand()","lastModifiedDate":"2023-03-28"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"        activate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"        FavoriteCommand --\u003e FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"        deactivate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"        FavoriteCommand -\u003e QuestionList : getFavQuestions()","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"        activate QuestionList","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"        QuestionList --\u003e FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"        deactivate QuestionList","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"        FavoriteCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"        deactivate FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"        destroy FavoriteCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"    else commandType \u003d home","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"        create HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager -\u003e HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"        activate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"        deactivate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager -\u003e HomeCommand : execute()","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"        activate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand -\u003e HomeCommand : validateCommand()","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"        activate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand --\u003e HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"        deactivate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand -\u003e ReflectionManager : setIsExit()","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        activate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager --\u003e HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"        deactivate ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"        deactivate HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"        destroy HomeCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"    else","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"        create BadCommandException","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager -\u003e BadCommandException : new()","lastModifiedDate":"2023-03-29"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"        activate BadCommandException","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"        BadCommandException --\u003e ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"        deactivate BadCommandException","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"    end","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"@enduml","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"wenxin-c":152}},{"path":"docs/diagrams/StorageClass.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"@startuml","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"!include style.puml","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"Package command {","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    Class CommandParser {","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"        + parseUserInput(String)","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"        + getMainArgument(String)","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"        - splitIntoCommands(String)","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"        - getArgumentFromCommand(String)","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"        - getPayloadFromCommand(String)","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"Package manager{","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    Class \"{abstract}\\nManager\" as Manager {","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        # commandParser : CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"        + getCommandParser()","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"Class AtomicHabitManager {","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    # commandParser : CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    + getCommandParser()","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"Class ReflectionManager {","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    # commandParser : CommandParser","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    + getCommandParser()","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"CommandParser \"1\" -- Manager : contains \u003c","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"Manager \u003c|-- AtomicHabitManager","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"Manager \u003c|-- ReflectionManager","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"@enduml","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"nichyjt":40}},{"path":"docs/diagrams/StorageSequence.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"@startuml","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"\u0027https://plantuml.com/sequence-diagram","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"!include style.puml","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"hide footbox","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"title Saving Data (Emphasis on Storage Subroutine)","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"FooManager -\u003e FooTokenizer : tokenize(ArrayList\u003cT\u003e)","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"activate FooTokenizer","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"activate FooManager","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"FooTokenizer --\u003e FooManager: ArrayList\u003cString\u003e tokenizedManager","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"deactivate FooTokenizer","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"FooManager -\u003e Storage : saveData(ArrayList\u003cString\u003e tokenizedManager, fileName)","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"Storage -\u003e Storage: isValidFileName(fileName)","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"Storage -\u003e Storage: getFile()","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e Storage: file","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"Storage -\u003e Storage: tokenizeString(tokenizedManager)","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e Storage: tokenizedString","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"Storage -\u003e Storage: writeDataToDisk(tokenizedString, file)","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"activate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"Storage --\u003e FooManager","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"deactivate Storage","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"@enduml","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"nichyjt":37}},{"path":"docs/diagrams/Tokenizer.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"@startuml","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"!include style.puml","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"package \"Storage\" {","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"  interface Tokenizer {","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"    + tokenize(ArrayList\u003cT\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"    + detokenize(ArrayList\u003cString\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"  }","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"  class AtomicHabitTokenizer {","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"    - splitTokenizedHabitIntoParameter(String)","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    + tokenize(ArrayList\u003cAtomicHabit\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"    + detokenize(ArrayList\u003cString\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"  }","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"  class ReflectionTokenizer {","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    - getTokenizedIndexes(String, Set\u003cInteger\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    - getSet(String)","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    + tokenize(ArrayList\u003cSet\u003cInteger\u003e\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    + detokenize(ArrayList\u003cString\u003e)","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"  }","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"Tokenizer \u003c|-- AtomicHabitTokenizer","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"Tokenizer \u003c|-- ReflectionTokenizer","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"@enduml","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"BernardLesley":29}},{"path":"docs/diagrams/managers.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"@startuml","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"!include style.puml","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"Package common {","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"Class MainManager {","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"+greet()","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"+executeCommands()","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"Class WellNus {","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"+greet()","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"+executeUserCommands()","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"+byeUser()","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"Package manager {","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"Class \"{abstract}\\nManager\" as Manager {","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"+executeCommands()","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"Package atomichabit {","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"Class AtomicHabitManager {","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"+executeCommands()","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"Package reflection {","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"Class ReflectionManager {","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"+executeCommands()","lastModifiedDate":"2023-03-23"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"Manager \u003c|-- MainManager","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"Manager \u003c|-- AtomicHabitManager","lastModifiedDate":"2023-03-23"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"Manager \u003c|-- ReflectionManager","lastModifiedDate":"2023-03-23"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"WellNus --\u003e \"1\"MainManager : executes \u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"MainManager --\u003e \"1\"AtomicHabitManager : calls \u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"MainManager --\u003e \"1\"ReflectionManager : calls \u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"@enduml","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"haoyangw":46}},{"path":"docs/diagrams/style.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"/\u0027","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":" \u0027Code is adopted from https://github.com/se-edu/addressbook-level3/blob/master/docs/diagrams/style.puml","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":" \u0027Commonly used styles and colors across diagrams.","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":" \u0027Refer to https://plantuml-documentation.readthedocs.io/en/latest for a more","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":" \u0027comprehensive list of skinparams.","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":" \u0027/","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"\u0027T1 through T4 are shades of the original color from lightest to darkest","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR #9D0012","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR_T1 #F97181","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR_T2 #E41F36","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR_T3 #7B000E","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"!define MODEL_COLOR_T4 #51000A","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"!define USER_COLOR #FFFFFF","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"skinparam BackgroundColor #FFFFFFF","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"skinparam MinClassWidth 50","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"skinparam ParticipantPadding 10","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"skinparam DefaultTextAlignment center","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"skinparam packageStyle Rectangle","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"skinparam Shadowing false","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"skinparam Class {","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    FontColor #FFFFFF","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    BorderThickness 1","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    BorderColor #FFFFFF","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    StereotypeFontColor #000000","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    FontName Arial","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"skinparam Actor {","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    BorderColor USER_COLOR","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    Color USER_COLOR","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    FontName Arial","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"skinparam Sequence {","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    MessageAlign center","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    BoxFontSize 15","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    BoxPadding 0","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    BoxFontColor #FFFFFF","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    FontName Arial","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"skinparam Participant {","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"    FontColor #FFFFFF","lastModifiedDate":"2023-03-22"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    Padding 20","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"\u0027hide footbox","lastModifiedDate":"2023-03-22"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"hide circle","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"wenxin-c":55}},{"path":"docs/team/bernard.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"# John Doe - Project Portfolio Page","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"## Overview","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"BernardLesley":5}},{"path":"docs/team/haoyangw.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"# Wang Haoyang - Project Portfolio","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"## Overview","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"A developer from Team 4 of CS2113 Tutorial Group 12","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"haoyangw":6}},{"path":"docs/team/nichyjt.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"# Yek Jin Teck, Nicholas - Project Portfolio Page","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"## Overview","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"Hi, I\u0027m Nicholas.","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"nichyjt":6}},{"path":"docs/team/wenxin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"# Wenxin - Project Portfolio Page","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"## Overview","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"wenxin-c":6}},{"path":"docs/team/yongbin.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"# Yongbin - Project Portfolio Page","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"## Overview","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"Hi I am yongbin","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"YongbinWang":6}},{"path":"src/main/java/wellnus/WellNus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.common.MainManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":" * Main class of our WellNUS++ application. main() is executed when the application is launched.\u003cbr/\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" * Control is then passed to MainManager.runEventDriver().","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":" *","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" * @see MainManager#runEventDriver()","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"public class WellNus {","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"    private static final String BYE_MESSAGE \u003d \"Thank you for using WellNUS++! See you again soon Dx\";","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    private static final String GREETING_MESSAGE \u003d \"Very good day to you! Welcome to \";","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    private static final String NEWLINE \u003d System.lineSeparator();","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    private final MainManager mainManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"     * Initialises an instance of WellNUS++, which needs \u003ccode\u003eTextUi\u003c/code\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"     * and \u003ccode\u003eMainManager\u003c/code\u003e.","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    public WellNus() {","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"        this.mainManager \u003d new MainManager();","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    private static String getWellNusLogo() {","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"        return NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"                + \",--.   ,--.       ,--.,--.,--.  ,--.,--. ,--. ,---.     |  |        |  |     \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"                + \"|  |   |  | ,---. |  ||  ||  ,\u0027.|  ||  | |  |\u0027   .-\u0027,---|  |---.,---|  |---. \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"                + \"|  |.\u0027.|  || .-. :|  ||  ||  |\u0027 \u0027  ||  | |  |`.  `-.\u0027---|  |---\u0027\u0027---|  |---\u0027 \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"                + \"|   ,\u0027.   |\\\\   --.|  ||  ||  | `   |\u0027  \u0027-\u0027  \u0027.-\u0027    |   |  |        |  |     \" + NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"                + \"\u0027--\u0027   \u0027--\u0027 `----\u0027`--\u0027`--\u0027`--\u0027  `--\u0027 `-----\u0027 `-----\u0027    `--\u0027        `--\u0027     \" + NEWLINE;","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    private void byeUser() {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"        this.getTextUi().printOutputMessage(WellNus.BYE_MESSAGE);","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     * Calls MainManager to read and execute the user\u0027s commands.","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     * @see Manager#runEventDriver()","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    private void executeUserCommands() {","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"        this.getMainManager().runEventDriver();","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    private MainManager getMainManager() {","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        return this.mainManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    private void greet() {","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"        this.getTextUi().printOutputMessage(WellNus.GREETING_MESSAGE + WellNus.NEWLINE","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"                + WellNus.getWellNusLogo());","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"     * Executes the WellNus application and provides the user with our features.","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     * @param args Commandline arguments passed to the WellNus Java ARchive","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-03-02"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        new WellNus().start();","lastModifiedDate":"2023-03-23"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"     * Starts up WellNUS++: Greets the user, reads for commands until a exit command is given,","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"     * and bids the user goodbye.\u003cbr/\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"     * The bulk of the work is done in executeUserCommands(), which delegates control to the","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"     * appropriate Manager.","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"     * @see Manager#runEventDriver()","lastModifiedDate":"2023-03-18"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"    public void start() {","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"        this.greet();","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"        this.executeUserCommands();","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"        this.byeUser();","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":7,"haoyangw":79,"YongbinWang":4}},{"path":"src/main/java/wellnus/atomichabit/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" * The AddCommand class is a command class that adds a new atomic habit to an AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"add - Add a habit to your habit tracker.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: add --name (your habit name)\";","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"add\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Wrong arguments given to \u0027add\u0027!\";","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_NAME_ARGUMENT \u003d \"name\";","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be add.\";","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should not be empty.\";","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 2;","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_WRONG_KEYWORD_MESSAGE \u003d \"Wrong command issued by the user, expected \u0027add\u0027?\";","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_STRING_ONE \u003d \"Yay! You have added a new habit:\";","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private static final String FEEDBACK_STRING_TWO \u003d \"was successfully added\";","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an AddCommand object.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object to add the habit to.","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    public AddCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"    private AtomicHabitList getAtomicHabits() {","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"        return atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"        return textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"        assert COMMAND_KEYWORD !\u003d null : \"COMMAND_KEYWORD cannot be null\";","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"     * Adds of the new atomic habit into our list of atomic habits.","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"     * After that, print a message telling the user what the new habit added is","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"            this.getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"        assert super.getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        String name \u003d super.getArguments().get(AddCommand.COMMAND_NAME_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"        AtomicHabit habit \u003d new AtomicHabit(name);","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        this.getAtomicHabits().addAtomicHabit(habit);","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"        String messageToUser \u003d FEEDBACK_STRING_ONE + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"        messageToUser +\u003d String.format(\"\u0027%s\u0027 %s\", habit, FEEDBACK_STRING_TWO);","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"        getTextUi().printOutputMessage(messageToUser);","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     * If no exceptions are thrown, command is valid.","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() !\u003d AddCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(AddCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(AddCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(AddCommand.COMMAND_WRONG_KEYWORD_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.get(COMMAND_KEYWORD) !\u003d \"\") {","lastModifiedDate":"2023-03-18"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(AddCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-18"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"        String name \u003d arguments.get(AddCommand.COMMAND_NAME_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"        if (name.isEmpty()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(AddCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":18,"haoyangw":82,"YongbinWang":18,"nichyjt":30}},{"path":"src/main/java/wellnus/atomichabit/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":" * Implementation of Atomic Habit WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" * by Atomic Habit and how to use each command.","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"help - Get help on what commands can be used \"","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"            + \"in Atomic Habit WellNUS++\";","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: help [command-to-check]\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final String BAD_COMMAND_MESSAGE \u003d \"help does not take in any arguments!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    private static final String HELP_PREAMBLE \u003d \"Input `help` to see all available commands.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"            + \"Input `help [command-to-check] to get usage help for a specific command.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"            + \"Here are all the commands available for you!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"    private static final String ERROR_UNKNOWN_COMMAND \u003d \"Sorry, we couldn\u0027t find that command!\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"            + \"To find a command accessible in this part of WellNUS++, try `help`!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"     * Initialises a HelpCommand Object using the command arguments issued by the user.","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(AddCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HelpCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HomeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(ListCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(UpdateCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        return commandDescriptions;","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"     * Prints either the general help message or the command-specific help message","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"     * based on the presence of a payload.","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"        String commandToSearch \u003d argumentPayload.get(COMMAND_KEYWORD);","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"        if (commandToSearch.equals(NO_FEATURE_KEYWORD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"            printGeneralHelpMessage();","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"        printSpecificHelpMessage(commandToSearch);","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"     * Lists all features available in Atomic Habit WellNUS++ and a short description.","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"    public void printGeneralHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d getCommandDescriptions();","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"        String outputMessage \u003d AtomicHabitManager.FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(HELP_PREAMBLE);","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator() + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c commandDescriptions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions.get(i) + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"        this.getTextUi().printOutputMessage(outputMessage);","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"     * Prints the help message for a given commandToSearch.","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"     * If it does not exist,","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"    public void printSpecificHelpMessage(String commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"        switch (commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"        case AddCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(AddCommand.COMMAND_DESCRIPTION, AddCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"        case HelpCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HelpCommand.COMMAND_DESCRIPTION, HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"        case HomeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HomeCommand.COMMAND_DESCRIPTION, HomeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"        case ListCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(ListCommand.COMMAND_DESCRIPTION, ListCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"        case UpdateCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(UpdateCommand.COMMAND_DESCRIPTION, UpdateCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"        default:","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"            textUi.printOutputMessage(ERROR_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"    private void printUsageMessage(String commandDescription, String usageString) {","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"        String message \u003d commandDescription + System.lineSeparator() + usageString;","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        textUi.printOutputMessage(message);","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"     * Prints a brief description of all of Atomic Habit WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"    public void execute() {","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"            getTextUi().printOutputMessage(exception.getMessage());","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-29"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(BAD_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"BernardLesley"},"content":"     * Abstract method to ensure developers add in a command usage.","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":174,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-28"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":181,"author":{"gitId":"BernardLesley"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-28"},{"lineNumber":182,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":183,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-28"},{"lineNumber":184,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":185,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":186,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-28"},{"lineNumber":187,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"BernardLesley":189}},{"path":"src/main/java/wellnus/atomichabit/command/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":" * The HomeCommand class is a command class that returns user back to the main WellNUS++ program.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"public class HomeCommand extends Command {","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"home - Return back to the main menu of WellNUS++.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: home\";","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"That is not a valid home command for \"","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"            + \"atomic habits!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Wrong command given for home!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_MESSAGE \u003d \"Thank you for using atomic habits. Do not forget about me!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an HomeCommand object.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    public HomeCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"        return textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"     * Check if a HomeCommand is executed and user wants to return to home.","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"     * @param command User command","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * @return true If user wants to exit feature false if not","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    public static boolean isExit(Command command) {","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"        return command instanceof HomeCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"     * Prints the exit feature message for the atomic habits feature on the user\u0027s screen.","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"            this.getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"        getTextUi().printOutputMessage(HOME_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"     * The validation logic and strictness is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"     * As a guideline, \u003ccode\u003eisValidCommand\u003c/code\u003e should minimally: \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY arguments exist\u003c/li\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY payloads exist\u003c/li\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"     * \u003cli\u003eSafely verify the payload type (int, date, etc should be properly processed)\u003c/li\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"     * Additionally, payload value cleanup (such as trimming) is also possible. \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"     * As Java is pass (object reference) by value, any changes made to commandMap","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"     * will persist out of the function call.","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException if the commandMap has any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d HomeCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.get(COMMAND_KEYWORD) !\u003d \"\") {","lastModifiedDate":"2023-03-17"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(HomeCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":15,"haoyangw":72,"YongbinWang":25,"nichyjt":30}},{"path":"src/main/java/wellnus/atomichabit/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" * The ListCommand class is a command class that lists all atomic habit in AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"list - Lists out all the habits in your tracker.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: list\";","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"list\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid command, expected \u0027list\u0027\";","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String FIRST_STRING \u003d \"Here is the current accumulation of your atomic habits!\"","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"            + LINE_SEPARATOR + \"Keep up the good work and you will develop a helpful habit in no time\";","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an ListCommand object.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object to get all atomic habit.","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    public ListCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"        return textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     * Executes the list command for atomic habits, which prints all atomic habits","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     * added by the user so far.","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"            this.getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"        int taskNo \u003d 1;","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        int firstChar \u003d 0;","lastModifiedDate":"2023-03-19"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        StringBuilder stringOfHabitsBuilder \u003d new StringBuilder(FIRST_STRING + LINE_SEPARATOR);","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"        for (AtomicHabit habit : atomicHabits.getAllHabits()) {","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"            String currentHabitString \u003d String.format(\"%d.%s [%d]\",","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"                    taskNo, habit.toString(), habit.getCount());","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"            stringOfHabitsBuilder.append(currentHabitString).append(LINE_SEPARATOR);","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"            taskNo +\u003d 1;","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"        String messageToUser \u003d stringOfHabitsBuilder.substring(firstChar,","lastModifiedDate":"2023-03-19"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"                stringOfHabitsBuilder.length() - 1);","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        getTextUi().printOutputMessage(messageToUser);","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"     * If no exceptions are thrown, arguments are valid.","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the commandMap has any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() !\u003d ListCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-18"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(ListCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(ListCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(ListCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.get(COMMAND_KEYWORD) !\u003d \"\") {","lastModifiedDate":"2023-03-18"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(ListCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":139,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":22,"haoyangw":73,"YongbinWang":15,"nichyjt":30}},{"path":"src/main/java/wellnus/atomichabit/command/UpdateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":" * The UpdateCommand class is a command class that updates the number of times a habit","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":" * has been preformed.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"public class UpdateCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"update - Update how many times you\u0027ve done a habit.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: update --id habit-index [--inc increment_number]\";","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"update\";","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INCREMENT_ARGUMENT \u003d \"inc\";","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INDEX_ARGUMENT \u003d \"id\";","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private static final int COMMAND_MIN_NUM_OF_ARGUMENTS \u003d 2;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    private static final int COMMAND_MAX_NUM_OF_ARGUMENTS \u003d 3;","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Wrong command issued, expected \u0027update\u0027\";","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final int DEFAULT_INCREMENT \u003d 1;","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_STRING \u003d \"The following habit has been incremented! Keep up the good work!\";","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_STRING_NO_INCREMENT \u003d \"The following habit has not been updated! \"","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"            + \"Enter a positive integer to update your habit!\";","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_INDEX_NOT_INTEGER_ERROR \u003d \"Invalid input! Please enter an integer\";","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"    private static final String FEEDBACK_INDEX_OUT_OF_BOUNDS_ERROR \u003d \"Index out of Range! Please enter a valid index\";","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_OFFSET \u003d 1;","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"    private static final String LINE_SEPARATOR \u003d System.lineSeparator();","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"    private static final int MINIMUM_INCREMENT \u003d 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    private static final String UPDATE_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid arguments for updating, no update shall \"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"            + \"be performed.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"    private static final String UPDATE_INVALID_INCREMENT_COUNT \u003d \"Increment with minimum of 1 is expected, no update \"","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"            + \"shall be performed.\";","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"    private static final String REGEX_INTEGER_ONLY_PATTERN \u003d \"\\\\s*-?\\\\d+\\\\s*\";","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"    private static final Logger logger \u003d Logger.getLogger(\"UpdateAtomicHabitLogger\");","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"    private static final String LOG_STR_INPUT_NOT_INTEGER \u003d \"Input string is not an integer.\"","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"            + \"This should be properly handled\";","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"    private static final String LOG_INDEX_OUT_OF_BOUNDS \u003d \"Input index is out of bounds.\"","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"            + \"This should be properly handled\";","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an UpdateCommand object with the given arguments and AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object containing habit to be updates.","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    public UpdateCommand(HashMap\u003cString, String\u003e arguments, AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"     * Constructs an UpdateCommand object with the given InputStream, arguments and AtomicHabitList.\u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"     * @param inputStream  An InputStream object representing the input stream to be used.","lastModifiedDate":"2023-03-19"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments    Argument-Payload map generated by CommandParser.","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"     * @param atomicHabits The AtomicHabitList object containing habit to be updates.","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    public UpdateCommand(InputStream inputStream, HashMap\u003cString, String\u003e arguments,","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"                         AtomicHabitList atomicHabits) {","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"        this.atomicHabits \u003d atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi(inputStream);","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"    private AtomicHabitList getAtomicHabits() {","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"        return this.atomicHabits;","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"    private int getIncrementCountFrom(HashMap\u003cString, String\u003e arguments)","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"            throws BadCommandException, NumberFormatException {","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"        assert arguments.containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)","lastModifiedDate":"2023-03-17"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"                : \"--inc argument missing for \u0027hb update\u0027 command\";","lastModifiedDate":"2023-03-17"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"        String incrementCountString \u003d arguments.get(UpdateCommand.COMMAND_INCREMENT_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"        if (Integer.parseInt(incrementCountString) \u003c MINIMUM_INCREMENT) {","lastModifiedDate":"2023-03-17"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(UpdateCommand.UPDATE_INVALID_INCREMENT_COUNT);","lastModifiedDate":"2023-03-17"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"        return Integer.parseInt(incrementCountString);","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"    private int getIndexFrom(HashMap\u003cString, String\u003e arguments)","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"            throws BadCommandException, NumberFormatException {","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_INDEX_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.UPDATE_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        String indexString \u003d arguments.get(UpdateCommand.COMMAND_INDEX_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"        return Integer.parseInt(indexString);","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"        return AtomicHabitManager.FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"     * Executes the update command for atomic habits.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-17"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"     * This command is interactive, so user will continue providing arguments via","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"     * further prompts provided.","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"    public void execute() throws AtomicHabitException {","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"            getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-13"},{"lineNumber":145,"author":{"gitId":"haoyangw"},"content":"            int incrementCount \u003d DEFAULT_INCREMENT;","lastModifiedDate":"2023-03-15"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"            if (super.getArguments().containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"                incrementCount \u003d this.getIncrementCountFrom(super.getArguments());","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":149,"author":{"gitId":"haoyangw"},"content":"            int index \u003d this.getIndexFrom(super.getArguments()) - INDEX_OFFSET;","lastModifiedDate":"2023-03-15"},{"lineNumber":150,"author":{"gitId":"haoyangw"},"content":"            AtomicHabit habit \u003d getAtomicHabits().getHabitByIndex(index);","lastModifiedDate":"2023-03-15"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"            habit.increaseCount(incrementCount);","lastModifiedDate":"2023-03-15"},{"lineNumber":153,"author":{"gitId":"haoyangw"},"content":"            String stringOfUpdatedHabit \u003d (index + 1) + DOT + habit + \" \" + \"[\" + habit.getCount() + \"]\"","lastModifiedDate":"2023-03-15"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"                    + LINE_SEPARATOR;","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"haoyangw"},"content":"            getTextUi().printOutputMessage(FEEDBACK_STRING + LINE_SEPARATOR","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"                    + stringOfUpdatedHabit);","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":158,"author":{"gitId":"haoyangw"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"            logger.log(Level.INFO, LOG_STR_INPUT_NOT_INTEGER);","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"            throw new AtomicHabitException(FEEDBACK_INDEX_NOT_INTEGER_ERROR);","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"            logger.log(Level.INFO, LOG_INDEX_OUT_OF_BOUNDS);","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"            throw new AtomicHabitException(FEEDBACK_INDEX_OUT_OF_BOUNDS_ERROR);","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"            getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-17"},{"lineNumber":172,"author":{"gitId":"haoyangw"},"content":"     * If no exceptions are thrown, arguments are valid.","lastModifiedDate":"2023-03-15"},{"lineNumber":173,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":179,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":180,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":181,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":182,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.get(COMMAND_KEYWORD) !\u003d \"\") {","lastModifiedDate":"2023-03-17"},{"lineNumber":183,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":184,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":185,"author":{"gitId":"haoyangw"},"content":"        if (arguments.size() \u003c UpdateCommand.COMMAND_MIN_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-15"},{"lineNumber":186,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":187,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003e UpdateCommand.COMMAND_MAX_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-17"},{"lineNumber":189,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":190,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":191,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(UpdateCommand.COMMAND_INDEX_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":192,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":193,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":194,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003d\u003d UpdateCommand.COMMAND_MAX_NUM_OF_ARGUMENTS","lastModifiedDate":"2023-03-17"},{"lineNumber":195,"author":{"gitId":"BernardLesley"},"content":"                \u0026\u0026 !arguments.containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)) {","lastModifiedDate":"2023-03-17"},{"lineNumber":196,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":197,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":198,"author":{"gitId":"haoyangw"},"content":"        if (arguments.containsKey(UpdateCommand.COMMAND_INCREMENT_ARGUMENT)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":199,"author":{"gitId":"haoyangw"},"content":"            String incrementString \u003d arguments.get(COMMAND_INCREMENT_ARGUMENT);","lastModifiedDate":"2023-03-15"},{"lineNumber":200,"author":{"gitId":"haoyangw"},"content":"            if (incrementString.isBlank()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":201,"author":{"gitId":"haoyangw"},"content":"                throw new BadCommandException(UpdateCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":202,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":203,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":204,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":205,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":232,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"BernardLesley":77,"haoyangw":127,"nichyjt":28}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabit.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":" * Class to represent a unique atomic habit that the user will practice","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":" * It contains primarily the description of the habit and the count of the habit","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabit {","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"    private final String description;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"    private int count;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"     * Constructor of atomic habit class","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"     * Will initialise private description to the input parameter","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"     * Assigns count to 1 when a new habit is added","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"     * @param description Description of this new atomic habit provided by the user","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabit(String description) {","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"        this.count \u003d 1;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"     * Constructor of atomic habit class.","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"     * Will initialise private description and count to the input parameter.","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"     * @param description Description of atomic habit.","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"     * @param count Number of habit to be initialized.","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    public AtomicHabit(String description, int count) {","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"        this.count \u003d count;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"        return description;","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    public int getCount() {","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        return count;","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"    public void increaseCount(int increment) {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"        count +\u003d increment;","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"    public String toString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"        return getDescription();","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":15,"haoyangw":3,"YongbinWang":33}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabitList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":" * Class to represent a container that will contain all unique AtomicHabit objects in an arraylist","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitList {","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"    private final ArrayList\u003cAtomicHabit\u003e allAtomicHabits;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"        allAtomicHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"     * Method to add atomicHabit to list containing all habits","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"     * @param atomicHabit New atomic habit to add into the list that this class manages","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    public void addAtomicHabit(AtomicHabit atomicHabit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"        allAtomicHabits.add(atomicHabit);","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"     * Method to get list containing all habits","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"     * @return allAtomicHabits which is an arraylist containing all habits","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    public ArrayList\u003cAtomicHabit\u003e getAllHabits() {","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"        return allAtomicHabits;","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    public AtomicHabit getHabitByIndex(int index) {","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"        return allAtomicHabits.get(index);","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":4,"haoyangw":3,"YongbinWang":31}},{"path":"src/main/java/wellnus/atomichabit/feature/AtomicHabitManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit.feature;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.AddCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.command.HelpCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.atomichabit.command.HomeCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.ListCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.UpdateCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":" * Class to represent the event driver of Atomic Habits feature","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":" * This class will handle calling the different available commands for Atomic Habits according to user input","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"public class AtomicHabitManager extends Manager {","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    public static final String FEATURE_HELP_DESCRIPTION \u003d \"Atomic Habits (hb) - Track and manage your habits \"","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"            + \"with our suite of tools to help you grow and nurture a better you!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    public static final String FEATURE_NAME \u003d \"hb\";","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private static final String ADD_COMMAND_KEYWORD \u003d \"add\";","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private static final String ATOMIC_HABIT_LOGO \u003d \"   _    _                _       _  _        _     _  _       \\n\"","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"            + \"  /_\\\\  | |_  ___  _ __  (_) __  | || | __ _ | |__ (_)| |_  ___\\n\"","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"            + \" / _ \\\\ |  _|/ _ \\\\| \u0027  \\\\ | |/ _| | __ |/ _` || \u0027_ \\\\| ||  _|(_-\u003c\\n\"","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"            + \"/_/ \\\\_\\\\ \\\\__|\\\\___/|_|_|_||_|\\\\__| |_||_|\\\\__,_||_.__/|_| \\\\__|/__/\\n\";","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    private static final String ATOMIC_HABIT_GREET \u003d \"Welcome to the atomic habits feature!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    private static final String LIST_COMMAND_KEYWORD \u003d \"list\";","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"    private static final String UNKNOWN_COMMAND_MESSAGE \u003d \"No such command in atomic habits!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private static final String UPDATE_COMMAND_KEYWORD \u003d \"update\";","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"    private static final String HELP_COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"    private final AtomicHabitList habitList;","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"     * Constructor of AtomicHabitManager","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"     * Will initialise the private objects habitList and textUi","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitManager() {","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"        this.habitList \u003d new AtomicHabitList();","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    private static String getHelpDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"        return \"Atomic Habits: \";","lastModifiedDate":"2023-03-23"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * Parses the given command from the user and determines the correct Command","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     * subclass that can handle its execution.","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"     * @param commandString Full command issued by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If an unknown command was issued by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    private Command getCommandFor(String commandString) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d getCommandParser().parseUserInput(commandString);","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"        String commandKeyword \u003d getCommandParser().getMainArgument(commandString);","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"        switch (commandKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"        case ADD_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"            return new AddCommand(arguments, getHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"        case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"            return new HomeCommand(arguments);","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        case LIST_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"            return new ListCommand(arguments, getHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"        case UPDATE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"            return new UpdateCommand(arguments, getHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        case HELP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"            return new HelpCommand(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"        default:","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(UNKNOWN_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"    private AtomicHabitList getHabitList() {","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        return this.habitList;","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"    private void greet() {","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"        getTextUi().printOutputMessage(ATOMIC_HABIT_GREET + System.lineSeparator() + ATOMIC_HABIT_LOGO);","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"     * Reads user commands continuously and execute those that are supported","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"     * until the exit command is given.","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"    private void runCommands() {","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"            try {","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"                String commandString \u003d getTextUi().getCommand();","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"                Command command \u003d getCommandFor(commandString);","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"haoyangw"},"content":"                command.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"                isExit \u003d HomeCommand.isExit(command);","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"            } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"                String additionalMessage \u003d \"\";","lastModifiedDate":"2023-03-18"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"                getTextUi().printErrorFor(badCommandException, additionalMessage);","lastModifiedDate":"2023-03-18"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"            } catch (WellNusException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"                getTextUi().printErrorFor(exception, \"Check user guide for valid commands!\");","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"     * Returns the commandline name of the atomic habits feature","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"     * @return Commandline name of this feature","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"     * Abstract function to ensure developers add in a getter for the feature\u0027s help description.","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"     * This description will be shown when the user types in the help command. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     * The description should be a brief overview of what the feature does. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     * For example: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     * \"reflect: Reflect is your go-to tool to get, save and reflect on our specially","lastModifiedDate":"2023-03-23"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"     * curated list of questions to reflect on\"","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"     * @return String of the feature\u0027s help description","lastModifiedDate":"2023-03-23"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"    public String getFeatureHelpDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"        return FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"     * First welcomes user with our unique greeting.\u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"     * Then continuously read commands from the user and execute those that are supported.","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"haoyangw"},"content":"        greet();","lastModifiedDate":"2023-03-15"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"        runCommands();","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"     * Method to test for exception handling of invalid command using JUnit","lastModifiedDate":"2023-03-10"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"     * @param userCommand Command identified after parsing through userInput","lastModifiedDate":"2023-03-15"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"     * @return Command according to userInput","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"     * @throws AtomicHabitException For every invalid command being tested below","lastModifiedDate":"2023-03-15"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":156,"author":{"gitId":"YongbinWang"},"content":"    public Command testInvalidCommand(String userCommand) throws AtomicHabitException {","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"        String descriptionTest \u003d \"testing\";","lastModifiedDate":"2023-03-18"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"        String exitCommand \u003d \"hb exit\";","lastModifiedDate":"2023-03-18"},{"lineNumber":159,"author":{"gitId":"YongbinWang"},"content":"        String listCommand \u003d \"hb list\";","lastModifiedDate":"2023-03-18"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"        String indexTest \u003d \"1\";","lastModifiedDate":"2023-03-14"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"        String invalidCommandErrorMessage \u003d \"Invalid command! Please enter a valid command\";","lastModifiedDate":"2023-03-14"},{"lineNumber":162,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"            switch (userCommand) {","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"            case ADD_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"                arguments \u003d getCommandParser().parseUserInput(descriptionTest);","lastModifiedDate":"2023-03-18"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"                return new AddCommand(arguments, new AtomicHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"            case LIST_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"                arguments \u003d getCommandParser().parseUserInput(listCommand);","lastModifiedDate":"2023-03-18"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"                return new ListCommand(arguments, new AtomicHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"            case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-16"},{"lineNumber":172,"author":{"gitId":"YongbinWang"},"content":"                arguments \u003d getCommandParser().parseUserInput(exitCommand);","lastModifiedDate":"2023-03-18"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"                return new HomeCommand(arguments);","lastModifiedDate":"2023-03-16"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"            case UPDATE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"haoyangw"},"content":"                arguments \u003d getCommandParser().parseUserInput(indexTest);","lastModifiedDate":"2023-03-15"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"                return new UpdateCommand(arguments, new AtomicHabitList());","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"YongbinWang"},"content":"            default:","lastModifiedDate":"2023-03-10"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"                throw new AtomicHabitException(invalidCommandErrorMessage);","lastModifiedDate":"2023-03-14"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":180,"author":{"gitId":"haoyangw"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"            String additionalMessage \u003d \"\";","lastModifiedDate":"2023-03-18"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"            getTextUi().printErrorFor(badCommandException, additionalMessage);","lastModifiedDate":"2023-03-18"},{"lineNumber":183,"author":{"gitId":"haoyangw"},"content":"            return null;","lastModifiedDate":"2023-03-15"},{"lineNumber":184,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":185,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":186,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":8,"haoyangw":88,"YongbinWang":77,"nichyjt":16}},{"path":"src/main/java/wellnus/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" * Superclass for all supported commands in Duke.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" * Each Command is initialised with the arguments issued","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":" * by the user. Execute the specified Command by calling","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":" * execute().\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":" * Child classes must provide the static isValidCommand() method for checking whether a set of","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":" * arguments are valid for a given command.","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"public abstract class Command {","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"    private static final String ARGUMENT_DELIMITER \u003d \"--\";","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final String DELIMITER_FOR_WORDS \u003d \" \";","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private static final String WEIRD_ARGUMENTS_GIVEN \u003d \"Weird arguments given for command, cannot continue\";","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    // Key: An argument\u0027s name. Value: An argument\u0027s provided value from the user","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private final HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"     * Initialises a Command Object with the given arguments from the user","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"     * @param arguments","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    public Command(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"        // Arguments should never be null, or later code will call methods on a null reference","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        assert arguments !\u003d null : WEIRD_ARGUMENTS_GIVEN;","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    protected HashMap\u003cString, String\u003e getArguments() {","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"        return this.arguments;","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    protected abstract String getCommandKeyword();","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"    protected abstract String getFeatureKeyword();","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"     * Executes the specified command from the user.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     * May throw Exceptions if command fails.","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     * @throws WellNusException If command fails","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    public abstract void execute() throws WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"     * Very basic specialised toString() method for commands that returns","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     * a formatted list of all arguments issued by the user.\u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"     * Example:","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"     * For the \u003ccode\u003ehb add\u003c/code\u003e command, toString() will output","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"     * \u003ccode\u003ehb [add] [--name] \u0026lt;habit name\u0026gt;\u003c/code\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * @return String Representation of this Command that includes all given arguments","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"    public String toString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"        StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"        builder.append(this.getFeatureKeyword());","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"        builder.append(Command.DELIMITER_FOR_WORDS);","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"        builder.append(this.getCommandKeyword());","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"        for (Map.Entry\u003cString, String\u003e set : this.getArguments().entrySet()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"            builder.append(Command.DELIMITER_FOR_WORDS);","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"            builder.append(Command.ARGUMENT_DELIMITER);","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"            builder.append(set.getKey());","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"            builder.append(Command.DELIMITER_FOR_WORDS);","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"            builder.append(set.getValue());","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"     * The validation logic and strictness is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"     * As a guideline, \u003ccode\u003eisValidCommand\u003c/code\u003e should minimally: \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY arguments exist\u003c/li\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY payloads exist\u003c/li\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eSafely verify the payload type (int, date, etc should be properly processed)\u003c/li\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"     * Additionally, payload value cleanup (such as trimming) is also possible. \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"     * As Java is pass (object reference) by value, any changes made to commandMap","lastModifiedDate":"2023-03-13"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     * will persist out of the function call.","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"    public abstract void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-23"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    public abstract String getCommandUsage();","lastModifiedDate":"2023-03-23"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"    public abstract String getCommandDescription();","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"haoyangw":88,"nichyjt":43}},{"path":"src/main/java/wellnus/command/CommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * A CommandParser processes user input from a defined format \u003cp\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" * Each user input via console consists of: \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" * \u003col\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eCOMMANDS - A Argument and Payload pairs \u003c/li\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eARGUMENTS - String representing the action/parameters of the command \u003c/li\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003ePAYLOADS - value of the action/parameters \u003c/li\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" * \u003c/ol\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * In short, user input is a list of commands, each command containing arguments and payloads. \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * Further, we define the FIRST command to be the MAIN command of any given user input. \u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * So, \u003ccode\u003e\"deadline work on CS2113 --by Sunday\"\u003c/code\u003e has \u003ccode\u003e\"deadline work on CS2113\"\u003c/code\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * as the main command \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * Each command (argument-payload pair) except for the main command MUST","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" * be delimited by \u003ccode\u003e\" --\"\u003c/code\u003e (whitespace intentional)","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":" * For example, a given user input: \u003ccode\u003e\"deadline work on CS2113 --by Sunday\"\u003c/code\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eHas commands [\"deadline work on CS2113\", \"by Sunday\"]\u003c/li\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eHas arguments [\"deadline\", \"by\"]\u003c/li\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" * \u003cli\u003eHas payloads [\"work on CS2113\", [\"Sunday\"]\u003c/li\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"public class CommandParser {","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    private static final String ARGUMENT_DELIMITER \u003d \" --\";","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private static final String UNPADDED_DELIMITER \u003d \"--\";","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    private static final String PAYLOAD_DELIMITER \u003d \" \";","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    // Message string constants for errors and ui","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_EMPTY_COMMAND \u003d \"Command is empty!\";","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_EMPTY_ARGUMENT \u003d \"Command is missing an argument!\";","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_REPEATED_ARGUMENT \u003d \"Command has repeated arguments!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    private static final Logger logger \u003d Logger.getLogger(\"CommandParserLogger\");","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_STR_EMPTY_INPUT \u003d \"Input string is empty. This should be properly handled\";","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_EMPTY_ARG \u003d \"Argument is empty. This should be properly handled\";","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"     * Constructs an instance of CommandParser. \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"     * CommandParser should be used to break down raw user input into","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"     * logical \u003ccode\u003e[Argument,Payload]\u003c/code\u003e pairs","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    public CommandParser() {","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"     * Split a userInput by the standardized delimiter.","lastModifiedDate":"2023-03-24"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * This function handles some adversarial user input.","lastModifiedDate":"2023-03-24"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     * There are 2 possible adversarial inputs that this function checks for:","lastModifiedDate":"2023-03-24"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"     * 1. Whitespace/Empty Arguments: `cmd payload -- payload1 -- ` \u003cbr\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"     * Split renders it as [\"cmd payload\", \" payload1\", \"\"]","lastModifiedDate":"2023-03-24"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"     * \" payload1\" will cause issues with rendering","lastModifiedDate":"2023-03-24"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"     * So, check for empty commands and whitespace prefix. \u003cbr\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"     * 2. Missing main argument: `--argument payload` \u003cbr\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"     * Split renders this as [\"--argument payload\"]","lastModifiedDate":"2023-03-24"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"     * So, check for \"--\" prefix.","lastModifiedDate":"2023-03-24"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"     * @param fullCommandString Raw user input from stdin in string form","lastModifiedDate":"2023-03-24"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     * @return String array of command substrings","lastModifiedDate":"2023-03-24"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"     * @throws BadCommandException when command is empty or is problematic","lastModifiedDate":"2023-03-24"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"    private String[] splitIntoCommands(String fullCommandString) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        assert fullCommandString !\u003d null : \"fullCommandString should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        // Perform a string length sanity check","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        fullCommandString \u003d fullCommandString.strip();","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        if (fullCommandString.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"            logger.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"        int noLimit \u003d -1;","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"        String[] rawCommands \u003d fullCommandString.split(ARGUMENT_DELIMITER, noLimit);","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        String[] cleanCommands \u003d new String[rawCommands.length];","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 0; i \u003c rawCommands.length; ++i) {","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"            String currentCommand \u003d rawCommands[i];","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"            // Case 1 check","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"            if (currentCommand.startsWith(\" \") || currentCommand.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"                logger.log(Level.INFO, LOG_EMPTY_ARG);","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(ERROR_EMPTY_ARGUMENT);","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"            // Strip command of whitespace to clean input","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"            currentCommand \u003d currentCommand.strip();","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"            // Case 2 check","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"            if (currentCommand.startsWith(UNPADDED_DELIMITER)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"                logger.log(Level.INFO, LOG_EMPTY_ARG);","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"            cleanCommands[i] \u003d currentCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"        return cleanCommands;","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    private String getArgumentFromCommand(String commandString) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        assert commandString !\u003d null : \"commandString should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d commandString.split(PAYLOAD_DELIMITER);","lastModifiedDate":"2023-03-08"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        // Bad input checks","lastModifiedDate":"2023-03-08"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        if (words.length \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"            logger.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_ARGUMENT);","lastModifiedDate":"2023-03-08"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        return words[0].toLowerCase();","lastModifiedDate":"2023-03-24"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    private String getPayloadFromCommand(String commandString) {","lastModifiedDate":"2023-03-08"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        assert commandString !\u003d null : \"commandString should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        String[] words \u003d commandString.split(PAYLOAD_DELIMITER);","lastModifiedDate":"2023-03-08"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"        String payload \u003d \"\";","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"        // Ignore the first word (Main Command), so start from 1","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 1; i \u003c words.length; ++i) {","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"            payload \u003d payload.concat(words[i]);","lastModifiedDate":"2023-03-08"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"            if (i !\u003d words.length - 1) {","lastModifiedDate":"2023-03-08"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"                payload \u003d payload.concat(PAYLOAD_DELIMITER);","lastModifiedDate":"2023-03-08"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        // No checks for payload length is done as payload CAN be empty","lastModifiedDate":"2023-03-08"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        return payload;","lastModifiedDate":"2023-03-08"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"     * Takes in raw user input and splits it into Argument-Payload pairs","lastModifiedDate":"2023-03-08"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"     * @param userInput Raw user input from stdin in string form","lastModifiedDate":"2023-03-08"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"     * @return HashMap mapping a Argument (key) to a Payload (value)","lastModifiedDate":"2023-03-08"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"     * @throws BadCommandException when command is empty or is problematic","lastModifiedDate":"2023-03-08"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"    public HashMap\u003cString, String\u003e parseUserInput(String userInput) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        assert userInput !\u003d null : \"userInput should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        if (userInput.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"            logger.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-03-14"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-08"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"        String[] commands \u003d splitIntoCommands(userInput);","lastModifiedDate":"2023-03-08"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"        for (String command : commands) {","lastModifiedDate":"2023-03-08"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"            String argument \u003d getArgumentFromCommand(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"            // Safety check if arguments already exists","lastModifiedDate":"2023-03-23"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"            if (argumentPayload.containsKey(argument)) {","lastModifiedDate":"2023-03-23"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(ERROR_REPEATED_ARGUMENT);","lastModifiedDate":"2023-03-23"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-23"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"            String payload \u003d getPayloadFromCommand(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(argument, payload);","lastModifiedDate":"2023-03-08"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"        return argumentPayload;","lastModifiedDate":"2023-03-08"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"     * Takes in a string and returns the inferred \"Main Argument\"","lastModifiedDate":"2023-03-08"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"     * Practically, this is the \u003cb\u003eFirst\u003c/b\u003e argument of any command string.","lastModifiedDate":"2023-03-08"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"     * For example, \u003ccode\u003e\"hb add --name foobar\"\u003c/code\u003e \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"     * Has main argument \"hb\"","lastModifiedDate":"2023-03-08"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"     * @param userInput Any string input representing a command","lastModifiedDate":"2023-03-08"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"     * @return the inferred Main Argument, converted to lowercase","lastModifiedDate":"2023-03-24"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"     * @throws BadCommandException when String is empty","lastModifiedDate":"2023-03-08"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"    public String getMainArgument(String userInput) throws BadCommandException {","lastModifiedDate":"2023-03-08"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"        assert userInput !\u003d null : \"userInput should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"        userInput \u003d userInput.strip();","lastModifiedDate":"2023-03-08"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"        if (userInput.length() \u003d\u003d 0) {","lastModifiedDate":"2023-03-10"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"            logger.log(Level.INFO, LOG_STR_EMPTY_INPUT);","lastModifiedDate":"2023-03-14"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_EMPTY_COMMAND);","lastModifiedDate":"2023-03-08"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"        String[] parameters \u003d userInput.split(\" \");","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"        return parameters[0].toLowerCase();","lastModifiedDate":"2023-03-24"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"haoyangw":5,"nichyjt":180}},{"path":"src/main/java/wellnus/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":" * Provides the exit command of the WellNUS++ app.","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"exit - Close WellNUS++ and return to your terminal.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: exit\";","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_KEYWORD \u003d \"exit\";","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Invalid exit command given!\";","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"    private static final String FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"     * Initialises an ExitCommand Object using the arguments issued by the user.","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"     * @see ExitCommand#validateCommand(HashMap)","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    public ExitCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"    public static boolean isExit(Command command) {","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"        return command instanceof ExitCommand;","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"        return ExitCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"        return ExitCommand.FEATURE_KEYWORD;","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"     * Exits the WellNUS++ application.","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"     * Validate the arguments passed by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using the user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the commandMap has any issues","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"        if (!arguments.containsKey(ExitCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(ExitCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-23"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"haoyangw":75,"nichyjt":30}},{"path":"src/main/java/wellnus/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import wellnus.common.MainManager;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":" * Implementation of WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":" * by WellNus and how to use each command.","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"//@@author: nichyjt","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"help - Get help on what commands can be used in WellNUS++.\";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: help [command-to-check]\";","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    private static final String BAD_COMMAND_MESSAGE \u003d \"help does not take in any arguments!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String HELP_PREAMBLE \u003d \"Input `help` to see all available commands.\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"            + \"Input `help [command-to-check] to get usage help for a specific command.\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            + \"Here are all the commands available for you!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    private static final String USAGE_HABIT \u003d \"\\tusage: hb\";","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"    private static final String USAGE_REFLECT \u003d \"\\tusage: reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_UNKNOWN_COMMAND \u003d \"Sorry, we couldn\u0027t find that command!\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"            + \"To find a command accessible in this part of WellNUS++, try `help`!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    private static final int EMPTY_ARG_LENGTH \u003d 0;","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"     * Initialises a HelpCommand Object using the command arguments issued by the user.","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"        super(arguments);","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-23"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-23"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(AtomicHabitManager.FEATURE_HELP_DESCRIPTION);","lastModifiedDate":"2023-03-23"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(ReflectionManager.FEATURE_HELP_DESCRIPTION);","lastModifiedDate":"2023-03-23"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(FocusManager.FEATURE_HELP_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(ExitCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        commandDescriptions.add(COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"        return commandDescriptions;","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"     * Prints either the general help message or the command-specific help message","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"     * based on the presence of a payload.","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"        String commandToSearch \u003d argumentPayload.get(COMMAND_KEYWORD);","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"        if (commandToSearch.equals(NO_FEATURE_KEYWORD)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"            printGeneralHelpMessage();","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        printSpecificHelpMessage(commandToSearch);","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"     * Lists all features available in WellNUS++ and a short description.","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    public void printGeneralHelpMessage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d getCommandDescriptions();","lastModifiedDate":"2023-03-23"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        String outputMessage \u003d MainManager.FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator());","lastModifiedDate":"2023-03-23"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        outputMessage \u003d outputMessage.concat(HELP_PREAMBLE);","lastModifiedDate":"2023-03-23"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator() + System.lineSeparator());","lastModifiedDate":"2023-03-23"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        for (int i \u003d 0; i \u003c commandDescriptions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions.get(i) + System.lineSeparator());","lastModifiedDate":"2023-03-23"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"        this.getTextUi().printOutputMessage(outputMessage);","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"     * Prints the help message for a given commandToSearch.","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"     * If it does not exist,","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"    public void printSpecificHelpMessage(String commandToSearch) {","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        switch (commandToSearch) {","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        case AtomicHabitManager.FEATURE_NAME:","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"            printUsageMessage(AtomicHabitManager.FEATURE_HELP_DESCRIPTION, USAGE_HABIT);","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        case ReflectionManager.FEATURE_NAME:","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"            printUsageMessage(ReflectionManager.FEATURE_HELP_DESCRIPTION, USAGE_REFLECT);","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"        case HelpCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"            printUsageMessage(HelpCommand.COMMAND_DESCRIPTION, HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        case ExitCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"            printUsageMessage(ExitCommand.COMMAND_DESCRIPTION, ExitCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-28"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"            break;","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        default:","lastModifiedDate":"2023-03-28"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"    private void printUsageMessage(String commandDescription, String usageString) {","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        String message \u003d commandDescription + System.lineSeparator() + usageString;","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"        textUi.printOutputMessage(message);","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-09"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-09"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-09"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-09"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"     * Prints a brief description of all of WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-09"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-09"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-09"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"    public void execute() {","lastModifiedDate":"2023-03-09"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-16"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-16"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"            getTextUi().printOutputMessage(exception.getMessage());","lastModifiedDate":"2023-03-16"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"            return;","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-16"},{"lineNumber":149,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":150,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":151,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-15"},{"lineNumber":153,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":155,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":157,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":158,"author":{"gitId":"haoyangw"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-16"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-16"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        if (arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(BAD_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"     * Abstract method to ensure developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-23"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-23"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-23"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-23"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-23"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-23"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":191,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":1,"haoyangw":65,"nichyjt":125}},{"path":"src/main/java/wellnus/common/MainManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.common;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.util.List;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.ExitCommand;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.HelpCommand;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * MainManager is the primary event driver for WellNUS++ \u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * MainManager creates and stores exactly one instance of each feature\u0027s Manager in WellNUS++.","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":" * It runs an event driver, matches user input to the selected feature","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":" * and executes its instance to launch the feature Manager.","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"public class MainManager extends Manager {","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    public static final String FEATURE_HELP_DESCRIPTION \u003d \"WellNUS++ is a Command Line Interface (CLI)\"","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"            + \" app for you to keep track, manage and improve your physical and mental wellness.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"    private static final String EXIT_COMMAND_KEYWORD \u003d \"exit\";","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    private static final String GREETING_MESSAGE \u003d \"Enter a command to start using WellNUS++! Try \u0027help\u0027 \"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"            + \"if you\u0027re new, or just unsure.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private static final String HELP_COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d \"Don\u0027t recognise that command?\";","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_COMMAND_ADDITIONAL_MESSAGE \u003d \"Try \u0027help\u0027 for some guidance\";","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"    private static final String INVALID_FEATURE_KEYWORD_MESSAGE \u003d \"Feature keyword can\u0027t be empty dear\";","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    private static final String WELLNUS_FEATURE_NAME \u003d \"\";","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"    private ArrayList\u003cManager\u003e featureManagers;","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"     * Constructs an instance of MainManager. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"     * Instantiates boilerplate utilities like TextUi","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"     * and populates featureManagers with exactly one instance to be executed on user selection","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"    public MainManager() {","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"        super();","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"        this.featureManagers \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"        this.setSupportedFeatureManagers();","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"haoyangw"},"content":"     * Continuously reads user\u0027s commands and executes those that are supported","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"haoyangw"},"content":"     * by WellNUS++ until the `exit` command is given.\u003cbr\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"haoyangw"},"content":"     * If an unrecognised command is given, a warning is printed on the user\u0027s screen.","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"haoyangw"},"content":"    private void executeCommands() {","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"haoyangw"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"haoyangw"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"haoyangw"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"haoyangw"},"content":"            try {","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"haoyangw"},"content":"                String nextCommand \u003d this.getTextUi().getCommand();","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"haoyangw"},"content":"                String featureKeyword \u003d parser.getMainArgument(nextCommand);","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"                Optional\u003cManager\u003e featureManager \u003d this.getManagerFor(featureKeyword);","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"                // User gave a command that\u0027s not any feature\u0027s keyword nor a recognised main command","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"                if (featureManager.isEmpty() \u0026\u0026 !this.isSupportedCommand(featureKeyword)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"                    BadCommandException badCommandException \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"                            new BadCommandException(MainManager.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"haoyangw"},"content":"                    this.getTextUi().printErrorFor(badCommandException,","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"haoyangw"},"content":"                            MainManager.INVALID_COMMAND_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"haoyangw"},"content":"                    continue;","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"haoyangw"},"content":"                }","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"haoyangw"},"content":"                // User issued a feature keyword, pass control to the corresponding feature\u0027s Manager","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"haoyangw"},"content":"                featureManager.ifPresent((manager) -\u003e {","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"                    // TODO: Consider if there\u0027s a way to avoid this extra try-catch?","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"haoyangw"},"content":"                    try {","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"haoyangw"},"content":"                        manager.runEventDriver();","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"haoyangw"},"content":"                    } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"haoyangw"},"content":"                        this.getTextUi().printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"haoyangw"},"content":"                    }","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"haoyangw"},"content":"                });","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"haoyangw"},"content":"                // User issued a main command, e.g. \u0027help\u0027","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"haoyangw"},"content":"                if (featureManager.isEmpty()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"haoyangw"},"content":"                    Command mainCommand \u003d this.getMainCommandFor(nextCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"haoyangw"},"content":"                    mainCommand.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"haoyangw"},"content":"                    isExit \u003d ExitCommand.isExit(mainCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"haoyangw"},"content":"                }","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"haoyangw"},"content":"            } catch (WellNusException exception) {","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"haoyangw"},"content":"                this.getTextUi().printErrorFor(exception, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"     * Parses the given command String issued by the user and returns the corresponding","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"     * Command object that can execute it.","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":102,"author":{"gitId":"haoyangw"},"content":"     * @param command Command issued by the user","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"     * @throws BadCommandException If command issued is not supported or invalid","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"    private Command getMainCommandFor(String command) throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"        String commandKeyword \u003d getCommandParser().getMainArgument(command);","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d getCommandParser().parseUserInput(command);","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"haoyangw"},"content":"        switch (commandKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"haoyangw"},"content":"        case MainManager.HELP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"haoyangw"},"content":"            return new HelpCommand(arguments);","lastModifiedDate":"2023-03-19"},{"lineNumber":112,"author":{"gitId":"haoyangw"},"content":"        case MainManager.EXIT_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"haoyangw"},"content":"            return new ExitCommand(arguments);","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"haoyangw"},"content":"        default:","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"haoyangw"},"content":"            throw new BadCommandException(MainManager.INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"haoyangw"},"content":"    private List\u003cString\u003e getSupportedCommandKeywords() {","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"haoyangw"},"content":"        List\u003cString\u003e commandKeywords \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"haoyangw"},"content":"        // TODO: Consider if there\u0027s a better way than exposing a static variable(a helper method?)","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"haoyangw"},"content":"        commandKeywords.add(MainManager.HELP_COMMAND_KEYWORD);","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"haoyangw"},"content":"        commandKeywords.add(MainManager.EXIT_COMMAND_KEYWORD);","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"haoyangw"},"content":"        return commandKeywords;","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"haoyangw"},"content":"    private List\u003cManager\u003e getSupportedFeatureManagers() {","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"haoyangw"},"content":"        return this.featureManagers;","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"haoyangw"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"haoyangw"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-13"},{"lineNumber":133,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":134,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":135,"author":{"gitId":"haoyangw"},"content":"    private void greet() {","lastModifiedDate":"2023-03-13"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"        this.getTextUi().printOutputMessage(MainManager.GREETING_MESSAGE);","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":139,"author":{"gitId":"haoyangw"},"content":"    private boolean isSupportedCommand(String commandKeyword) {","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"        List\u003cString\u003e cmdKeywords \u003d this.getSupportedCommandKeywords();","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"        for (String cmdKeyword : cmdKeywords) {","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"            if (commandKeyword.equals(cmdKeyword)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"                return true;","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":146,"author":{"gitId":"haoyangw"},"content":"        return false;","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":148,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":149,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"     * Returns a help description of the WellNUS++ app.","lastModifiedDate":"2023-03-25"},{"lineNumber":151,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"     * @return Help description of this app","lastModifiedDate":"2023-03-23"},{"lineNumber":153,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"    public String getFeatureHelpDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"        return FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":157,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":160,"author":{"gitId":"haoyangw"},"content":"     * Returns the name of this feature. In this case, it\u0027s just empty(not any particular feature).","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"haoyangw"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"haoyangw"},"content":"     * @return Empty String to imply that this Manager is not associated with any feature","lastModifiedDate":"2023-03-13"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"haoyangw"},"content":"        return WELLNUS_FEATURE_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"haoyangw"},"content":"    public Optional\u003cManager\u003e getManagerFor(String featureKeyword) {","lastModifiedDate":"2023-03-15"},{"lineNumber":170,"author":{"gitId":"haoyangw"},"content":"        assert (featureKeyword !\u003d null \u0026\u0026 !featureKeyword.isBlank())","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"haoyangw"},"content":"                : MainManager.INVALID_FEATURE_KEYWORD_MESSAGE;","lastModifiedDate":"2023-03-15"},{"lineNumber":172,"author":{"gitId":"haoyangw"},"content":"        for (Manager featureManager : this.getSupportedFeatureManagers()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":173,"author":{"gitId":"haoyangw"},"content":"            if (featureManager.getFeatureName().equals(featureKeyword)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":174,"author":{"gitId":"haoyangw"},"content":"                return Optional.of(featureManager);","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":176,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":177,"author":{"gitId":"haoyangw"},"content":"        return Optional.empty();","lastModifiedDate":"2023-03-15"},{"lineNumber":178,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":179,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":180,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":181,"author":{"gitId":"haoyangw"},"content":"     * Executes the basic commands(e.g. \u003ccode\u003ehelp\u003c/code\u003e) as well as any feature-specific","lastModifiedDate":"2023-03-13"},{"lineNumber":182,"author":{"gitId":"haoyangw"},"content":"     * commands, which are delegated to the corresponding features\u0027 Managers.\u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":183,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":184,"author":{"gitId":"haoyangw"},"content":"     * This method will keep reading the user\u0027s command until the exit command is given.","lastModifiedDate":"2023-03-14"},{"lineNumber":185,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":186,"author":{"gitId":"haoyangw"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":187,"author":{"gitId":"haoyangw"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-14"},{"lineNumber":188,"author":{"gitId":"haoyangw"},"content":"        this.greet();","lastModifiedDate":"2023-03-13"},{"lineNumber":189,"author":{"gitId":"haoyangw"},"content":"        this.executeCommands();","lastModifiedDate":"2023-03-14"},{"lineNumber":190,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":191,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":192,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"     * Returns a list of features supported by WellNUS++. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":194,"author":{"gitId":"haoyangw"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":195,"author":{"gitId":"haoyangw"},"content":"     * Suggested implementation: \u003cbr\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":196,"author":{"gitId":"haoyangw"},"content":"     * \u003ccode\u003e this.supportedManagers.add([mgr1, mgr2, ...]); \u003c/code\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":197,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":198,"author":{"gitId":"haoyangw"},"content":"    protected void setSupportedFeatureManagers() {","lastModifiedDate":"2023-03-13"},{"lineNumber":199,"author":{"gitId":"haoyangw"},"content":"        this.getSupportedFeatureManagers().add(new AtomicHabitManager());","lastModifiedDate":"2023-03-15"},{"lineNumber":200,"author":{"gitId":"haoyangw"},"content":"        this.getSupportedFeatureManagers().add(new ReflectionManager());","lastModifiedDate":"2023-03-16"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"        this.getSupportedFeatureManagers().add(new FocusManager());","lastModifiedDate":"2023-03-25"},{"lineNumber":202,"author":{"gitId":"haoyangw"},"content":"        // TODO: Implement once all Managers are in","lastModifiedDate":"2023-03-13"},{"lineNumber":203,"author":{"gitId":"haoyangw"},"content":"        // e.g. this.getSupportedFeatureManagers().add(new AtomicHabitManager());","lastModifiedDate":"2023-03-15"},{"lineNumber":204,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":205,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":206,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"wenxin-c":1,"haoyangw":175,"nichyjt":28,"YongbinWang":2}},{"path":"src/main/java/wellnus/exception/AtomicHabitException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * AtomicHabitException is thrown when a conceptual/logical error occurs in the AtomicHabit package \u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception should only be used within the AtomicHabit package.","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * It differentiates between WellNUS and regular Java exceptions,","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * which allows better pinpointing of errors to the AtomicHabit logic.","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitException extends WellNusException {","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"    public AtomicHabitException(String errorMessage) {","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"haoyangw":1,"YongbinWang":6,"nichyjt":7}},{"path":"src/main/java/wellnus/exception/BadCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * BadCommandException is thrown when a conceptual/logical error occurs in Command (sub)classes \u003cbr\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception should be used in classes extending from the Command class.","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * It differentiates between WellNUS and regular Java exceptions,","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * allowing better pinpointing of errors to Command subclasses.","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"public class BadCommandException extends WellNusException {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    public BadCommandException(String errorMessage) {","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"BernardLesley":1,"haoyangw":1,"nichyjt":12}},{"path":"src/main/java/wellnus/exception/FocusException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * FocusException is thrown when a conceptual/logical error occurs in Focus.","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception is only thrown within the functional code for Focus.","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"public class FocusException extends WellNusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"    public FocusException(String message) {","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"        super(message);","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"nichyjt":13}},{"path":"src/main/java/wellnus/exception/StorageException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * StorageException is thrown when a conceptual/logical error occurs in Storage.","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception is only thrown within the functional code for Storage.","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"public class StorageException extends Exception {","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"    public StorageException(String message) {","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"        super(message);","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"nichyjt":12}},{"path":"src/main/java/wellnus/exception/TokenizerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":" * Category of Exceptions related to the \u003ccode\u003eTokenizer\u003c/code\u003e interface and its operations/subclasses.","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":" * @see wellnus.storage.Tokenizer","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"public class TokenizerException extends WellNusException {","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":"     * Initializes an instance of TokenizerException with the given error message.","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":"     * @param errorMessage Error message to show to the user","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"    public TokenizerException(String errorMessage) {","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"haoyangw":15}},{"path":"src/main/java/wellnus/exception/WellNusException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.exception;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":" * WellNusException is thrown when a conceptual/logical error occurs in WellNUS++","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":" * This exception may be thrown for any general error in WellNUS++\u0027s execution.","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * It is meant to differentiate between Java exceptions to allow better pinpointing of errors.","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"public class WellNusException extends Exception {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"    public WellNusException(String errorMessage) {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"        super(errorMessage);","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":6,"haoyangw":1,"nichyjt":6}},{"path":"src/main/java/wellnus/focus/command/CheckCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a command to check the time left in the current session.","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class CheckCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"check - Check the time left in the current session.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"            + \"This can only be used when a countdown is underway!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: check\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"check\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid command, expected \u0027check\u0027\";","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String CHECK_OUTPUT \u003d \"Time left: \";","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_COUNTDOWN_NOT_RUNNING \u003d \"Nothing to check - the countdown has not started yet!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a CheckCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    public CheckCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"     * Checks the current time left in the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * Prints the time left in the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"            textUi.printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_COUNTDOWN_NOT_RUNNING);","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionWaiting()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_COUNTDOWN_NOT_RUNNING);","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        int minutes \u003d session.getCurrentCountdown().getMinutes();","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        int seconds \u003d session.getCurrentCountdown().getSeconds();","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        textUi.printOutputMessage(CHECK_OUTPUT + String.format(\"%d:%d\", minutes, seconds));","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":1,"YongbinWang":114,"nichyjt":17}},{"path":"src/main/java/wellnus/focus/command/ConfigCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-26"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.FocusException;","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-26"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-26"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * ConfigCommand sets the configuration for a Session\u0027s parameters.","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * These parameters are: cycles, work time, break time, long break time.","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"//@@author nichyjt","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"public class ConfigCommand extends Command {","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"config - Change the number of cycles\"","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"            + \" and the times of the work, break and long break of your session!\\n\"","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            + \"Note that the minimum cycles is 2,\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"            + \"the maximum number of cycles is 5,\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"            + \"the maximum work/break times is 60 minutes,\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"            + \"the minimum work/break times is 1 minute.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"            + \"This is to ensure your well-being, as higher values might be counter-productive!\";","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: config ([--cycle number] [--work minutes]\"","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"            + \"[--break minutes] [--longbreak minutes])\";","lastModifiedDate":"2023-03-26"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    protected static final String COMMAND_KEYWORD \u003d \"config\";","lastModifiedDate":"2023-03-26"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    protected static final String ARGUMENT_CYCLE \u003d \"cycle\";","lastModifiedDate":"2023-03-26"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    protected static final String ARGUMENT_WORK \u003d \"work\";","lastModifiedDate":"2023-03-26"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    protected static final String ARGUMENT_BREAK \u003d \"break\";","lastModifiedDate":"2023-03-26"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    protected static final String ARGUMENT_LONG_BREAK \u003d \"longbreak\";","lastModifiedDate":"2023-03-26"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_MESSAGE \u003d \"Okay, here\u0027s your new session details!\\n\";","lastModifiedDate":"2023-03-26"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_CYCLES \u003d \"Cycles: \";","lastModifiedDate":"2023-03-26"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_WORK \u003d \"Work: \";","lastModifiedDate":"2023-03-26"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_BREAK \u003d \"Break: \";","lastModifiedDate":"2023-03-26"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_LONG_BREAK \u003d \"Long break: \";","lastModifiedDate":"2023-03-26"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    private static final String SINGLE_SPACE_PAD \u003d \" \";","lastModifiedDate":"2023-03-26"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_MINS \u003d \"minutes\";","lastModifiedDate":"2023-03-26"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    private static final String PRINT_CONFIG_MIN \u003d \"minute\";","lastModifiedDate":"2023-03-26"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    private static final int COMMAND_MAX_NUM_ARGUMENTS \u003d 5;","lastModifiedDate":"2023-03-26"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    private static final int COMMAND_MIN_NUM_ARGUMENTS \u003d 2;","lastModifiedDate":"2023-03-26"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    private static final int MAX_MINUTES \u003d 60;","lastModifiedDate":"2023-03-26"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"    private static final int MIN_MINUTES \u003d 1;","lastModifiedDate":"2023-03-26"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    private static final int MAX_CYCLES \u003d 5;","lastModifiedDate":"2023-03-26"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    private static final int MIN_CYCLES \u003d 2;","lastModifiedDate":"2023-03-26"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    // Message constants","lastModifiedDate":"2023-03-26"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_STRING_INPUT_NOT_NULL \u003d \"String input should not be null!\";","lastModifiedDate":"2023-03-26"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_NOT_A_NUMBER \u003d \"You didn\u0027t input a valid number!\";","lastModifiedDate":"2023-03-26"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_LARGE_CYCLES \u003d \"Sorry, the max cycles you can set is \" + MAX_CYCLES;","lastModifiedDate":"2023-03-26"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_LESS_EQUAL_MIN_CYCLES \u003d \"Sorry, the min cycles you can set is \" + MIN_CYCLES;","lastModifiedDate":"2023-03-26"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_LARGE_MINUTES \u003d \"Sorry, the max time you can set is \" + MAX_MINUTES;","lastModifiedDate":"2023-03-26"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_LESS_EQUAL_MIN_MINUTES \u003d \"Sorry, the min time you can set is \" + MIN_MINUTES;","lastModifiedDate":"2023-03-26"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_TOO_MANY_ARGUMENTS \u003d \"Sorry, you seem to have added too many arguments!\";","lastModifiedDate":"2023-03-26"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_TOO_FEW_ARGUMENTS \u003d \"Sorry, you seem to have not added in any arguments!\";","lastModifiedDate":"2023-03-26"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ConfigCommandLogger\");","lastModifiedDate":"2023-03-26"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_VALIDATION_ASSUMPTION_FAIL \u003d \"New cycle/break/work time is assumed to \"","lastModifiedDate":"2023-03-26"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"            + \"have passed the validation bounds and type checking, but has\"","lastModifiedDate":"2023-03-26"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"            + \"unexpectedly failed the second redundant check! This may be a developer error.\";","lastModifiedDate":"2023-03-26"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_SESSION_STARTED \u003d \"Cannot config the session as it has already started.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"            + \"If you want to reconfigure, `stop` the session and then `config`!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-26"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"    private final Session session;","lastModifiedDate":"2023-03-26"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"    private int newCycle;","lastModifiedDate":"2023-03-26"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"    private int newWork;","lastModifiedDate":"2023-03-26"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"    private int newBreak;","lastModifiedDate":"2023-03-26"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"    private int newLongBreak;","lastModifiedDate":"2023-03-26"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"     * Builds an instance of ConfigCommand to allow modification of the common Session attributes","lastModifiedDate":"2023-03-26"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-26"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-26"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"    public ConfigCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-26"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        super(arguments);","lastModifiedDate":"2023-03-26"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-26"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-26"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        newCycle \u003d session.getCycle();","lastModifiedDate":"2023-03-26"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        newWork \u003d session.getWork();","lastModifiedDate":"2023-03-26"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        newBreak \u003d session.getBrk();","lastModifiedDate":"2023-03-26"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        newLongBreak \u003d session.getLongBrk();","lastModifiedDate":"2023-03-26"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"     * Identifies this Command\u0027s keyword. Override this in subclasses so","lastModifiedDate":"2023-03-26"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"     * toString() returns the correct String representation.","lastModifiedDate":"2023-03-26"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-26"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-26"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-26"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     * Identifies the feature that this Command is associated with. Override","lastModifiedDate":"2023-03-26"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     * this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-26"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-26"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-26"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-26"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"     * Executes the specified command from the user.\u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"     * May throw Exceptions if command fails.","lastModifiedDate":"2023-03-26"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"     * @throws wellnus.exception.WellNusException If command fails","lastModifiedDate":"2023-03-26"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"    public void execute() throws WellNusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"        if (!session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_SESSION_STARTED);","lastModifiedDate":"2023-03-27"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayloads \u003d getArguments();","lastModifiedDate":"2023-03-26"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"            validateCommand(argumentPayloads);","lastModifiedDate":"2023-03-26"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"            throw new WellNusException(exception.getMessage());","lastModifiedDate":"2023-03-26"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        // Set all the session details as necessary","lastModifiedDate":"2023-03-26"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayloads.containsKey(ARGUMENT_CYCLE)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"            setSessionCycle(argumentPayloads.get(ARGUMENT_CYCLE));","lastModifiedDate":"2023-03-26"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayloads.containsKey(ARGUMENT_WORK)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"            setSessionWork(argumentPayloads.get(ARGUMENT_WORK));","lastModifiedDate":"2023-03-26"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayloads.containsKey(ARGUMENT_BREAK)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"            setSessionBreak(argumentPayloads.get(ARGUMENT_BREAK));","lastModifiedDate":"2023-03-26"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        if (argumentPayloads.containsKey(ARGUMENT_LONG_BREAK)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"            setSessionLongBreak(argumentPayloads.get(ARGUMENT_LONG_BREAK));","lastModifiedDate":"2023-03-26"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        // Notify the user of the new configuration for user-side verification","lastModifiedDate":"2023-03-26"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"        printNewConfiguration();","lastModifiedDate":"2023-03-26"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser. \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"     * The validation logic and strictness is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"     * As a guideline, \u003ccode\u003eisValidCommand\u003c/code\u003e should minimally: \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY arguments exist\u003c/li\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eVerify that ALL MANDATORY payloads exist\u003c/li\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eSafely verify the payload type (int, date, etc should be properly processed)\u003c/li\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"     * Additionally, payload value cleanup (such as trimming) is also possible. \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"     * As Java is pass (object reference) by value, any changes made to commandMap","lastModifiedDate":"2023-03-26"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"     * will persist out of the function call.","lastModifiedDate":"2023-03-26"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-26"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"     * @throws wellnus.exception.BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-26"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-26"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"Missing command keyword\";","lastModifiedDate":"2023-03-26"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        if (arguments.size() \u003e COMMAND_MAX_NUM_ARGUMENTS) {","lastModifiedDate":"2023-03-26"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_TOO_MANY_ARGUMENTS);","lastModifiedDate":"2023-03-26"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"        if (arguments.size() \u003c COMMAND_MIN_NUM_ARGUMENTS) {","lastModifiedDate":"2023-03-26"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_TOO_FEW_ARGUMENTS);","lastModifiedDate":"2023-03-26"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"        // Validate all the argument payload pairs","lastModifiedDate":"2023-03-26"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"        for (Map.Entry\u003cString, String\u003e argumentPair : arguments.entrySet()) {","lastModifiedDate":"2023-03-26"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"            switch (argumentPair.getKey()) {","lastModifiedDate":"2023-03-26"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"            case COMMAND_KEYWORD:","lastModifiedDate":"2023-03-26"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"                continue;","lastModifiedDate":"2023-03-26"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"            case ARGUMENT_CYCLE:","lastModifiedDate":"2023-03-26"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"                validateCycles(argumentPair.getValue());","lastModifiedDate":"2023-03-26"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"                break;","lastModifiedDate":"2023-03-26"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"            case ARGUMENT_BREAK:","lastModifiedDate":"2023-03-26"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"            case ARGUMENT_WORK:","lastModifiedDate":"2023-03-26"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"            case ARGUMENT_LONG_BREAK:","lastModifiedDate":"2023-03-26"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"                validateTimes(argumentPair.getValue());","lastModifiedDate":"2023-03-26"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"                break;","lastModifiedDate":"2023-03-26"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"            default:","lastModifiedDate":"2023-03-26"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"                throw new BadCommandException(\"Unknown argument!\");","lastModifiedDate":"2023-03-26"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-26"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"    private int getIntegerFromString(String inputString) throws BadCommandException {","lastModifiedDate":"2023-03-26"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"        assert inputString !\u003d null : ASSERT_STRING_INPUT_NOT_NULL;","lastModifiedDate":"2023-03-26"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"        int result;","lastModifiedDate":"2023-03-26"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"            result \u003d Integer.parseInt(inputString);","lastModifiedDate":"2023-03-26"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"        } catch (NumberFormatException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_NOT_A_NUMBER);","lastModifiedDate":"2023-03-26"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"        return result;","lastModifiedDate":"2023-03-26"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"    private int validateCycles(String cyclePayload) throws BadCommandException {","lastModifiedDate":"2023-03-26"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"        assert cyclePayload !\u003d null : ASSERT_STRING_INPUT_NOT_NULL;","lastModifiedDate":"2023-03-26"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"        int newCycle \u003d getIntegerFromString(cyclePayload);","lastModifiedDate":"2023-03-26"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"        if (newCycle \u003e MAX_CYCLES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_LARGE_CYCLES);","lastModifiedDate":"2023-03-26"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"        if (newCycle \u003c MIN_CYCLES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_LESS_EQUAL_MIN_CYCLES);","lastModifiedDate":"2023-03-26"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"        return newCycle;","lastModifiedDate":"2023-03-26"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"    private int validateTimes(String timePayload) throws BadCommandException {","lastModifiedDate":"2023-03-26"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"        assert timePayload !\u003d null : ASSERT_STRING_INPUT_NOT_NULL;","lastModifiedDate":"2023-03-26"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"        int newTime \u003d getIntegerFromString(timePayload);","lastModifiedDate":"2023-03-26"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"        if (newTime \u003e MAX_MINUTES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_LARGE_MINUTES);","lastModifiedDate":"2023-03-26"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"        if (newTime \u003c MIN_MINUTES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"            throw new BadCommandException(ERROR_LESS_EQUAL_MIN_MINUTES);","lastModifiedDate":"2023-03-26"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"        return newTime;","lastModifiedDate":"2023-03-26"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"    private void setSessionCycle(String sessionCycle) throws FocusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"        // Assume that session cycle must be within the correct range","lastModifiedDate":"2023-03-26"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"        // Re-run through the validation logic for redundancy \u0026 safety","lastModifiedDate":"2023-03-26"},{"lineNumber":233,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"            this.newCycle \u003d validateCycles(sessionCycle);","lastModifiedDate":"2023-03-26"},{"lineNumber":235,"author":{"gitId":"nichyjt"},"content":"            session.setCycle(newCycle);","lastModifiedDate":"2023-03-26"},{"lineNumber":236,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":237,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_VALIDATION_ASSUMPTION_FAIL);","lastModifiedDate":"2023-03-26"},{"lineNumber":238,"author":{"gitId":"nichyjt"},"content":"            throw new FocusException(exception.getMessage());","lastModifiedDate":"2023-03-26"},{"lineNumber":239,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":240,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":241,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":242,"author":{"gitId":"nichyjt"},"content":"    private void setSessionWork(String sessionWork) throws FocusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":243,"author":{"gitId":"nichyjt"},"content":"        // Assume that session work must be within the correct range","lastModifiedDate":"2023-03-26"},{"lineNumber":244,"author":{"gitId":"nichyjt"},"content":"        // Re-run through the validation logic for redundancy \u0026 safety","lastModifiedDate":"2023-03-26"},{"lineNumber":245,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":246,"author":{"gitId":"nichyjt"},"content":"            this.newWork \u003d validateTimes(sessionWork);","lastModifiedDate":"2023-03-26"},{"lineNumber":247,"author":{"gitId":"nichyjt"},"content":"            session.setWork(newWork);","lastModifiedDate":"2023-03-26"},{"lineNumber":248,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":249,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_VALIDATION_ASSUMPTION_FAIL);","lastModifiedDate":"2023-03-26"},{"lineNumber":250,"author":{"gitId":"nichyjt"},"content":"            throw new FocusException(exception.getMessage());","lastModifiedDate":"2023-03-26"},{"lineNumber":251,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":252,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":253,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":254,"author":{"gitId":"nichyjt"},"content":"    private void setSessionBreak(String sessionBreak) throws FocusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":255,"author":{"gitId":"nichyjt"},"content":"        // Assume that session break must be within the correct range","lastModifiedDate":"2023-03-26"},{"lineNumber":256,"author":{"gitId":"nichyjt"},"content":"        // Re-run through the validation logic for redundancy \u0026 safety","lastModifiedDate":"2023-03-26"},{"lineNumber":257,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":258,"author":{"gitId":"nichyjt"},"content":"            this.newBreak \u003d validateTimes(sessionBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":259,"author":{"gitId":"nichyjt"},"content":"            session.setBrk(newBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":260,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":261,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_VALIDATION_ASSUMPTION_FAIL);","lastModifiedDate":"2023-03-26"},{"lineNumber":262,"author":{"gitId":"nichyjt"},"content":"            throw new FocusException(exception.getMessage());","lastModifiedDate":"2023-03-26"},{"lineNumber":263,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":264,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":265,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":266,"author":{"gitId":"nichyjt"},"content":"    private void setSessionLongBreak(String sessionLongBreak) throws FocusException {","lastModifiedDate":"2023-03-26"},{"lineNumber":267,"author":{"gitId":"nichyjt"},"content":"        // Assume that session work must be within the correct range","lastModifiedDate":"2023-03-26"},{"lineNumber":268,"author":{"gitId":"nichyjt"},"content":"        // Re-run through the validation logic for redundancy \u0026 safety","lastModifiedDate":"2023-03-26"},{"lineNumber":269,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":270,"author":{"gitId":"nichyjt"},"content":"            this.newLongBreak \u003d validateTimes(sessionLongBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":271,"author":{"gitId":"nichyjt"},"content":"            session.setLongBrk(newLongBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_VALIDATION_ASSUMPTION_FAIL);","lastModifiedDate":"2023-03-26"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"            throw new FocusException(exception.getMessage());","lastModifiedDate":"2023-03-26"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"    private void printNewConfiguration() {","lastModifiedDate":"2023-03-26"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"        String message \u003d PRINT_CONFIG_MESSAGE;","lastModifiedDate":"2023-03-26"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(PRINT_CONFIG_CYCLES + this.newCycle);","lastModifiedDate":"2023-03-26"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(System.lineSeparator());","lastModifiedDate":"2023-03-26"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(PRINT_CONFIG_WORK + this.newWork);","lastModifiedDate":"2023-03-26"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"        if (this.newWork \u003d\u003d MIN_MINUTES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MIN);","lastModifiedDate":"2023-03-26"},{"lineNumber":285,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-03-26"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MINS);","lastModifiedDate":"2023-03-26"},{"lineNumber":287,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":288,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(System.lineSeparator());","lastModifiedDate":"2023-03-26"},{"lineNumber":289,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(PRINT_CONFIG_BREAK + this.newBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":290,"author":{"gitId":"nichyjt"},"content":"        if (this.newBreak \u003d\u003d MIN_MINUTES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":291,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MIN);","lastModifiedDate":"2023-03-26"},{"lineNumber":292,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-03-26"},{"lineNumber":293,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MINS);","lastModifiedDate":"2023-03-26"},{"lineNumber":294,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":295,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(System.lineSeparator());","lastModifiedDate":"2023-03-26"},{"lineNumber":296,"author":{"gitId":"nichyjt"},"content":"        message \u003d message.concat(PRINT_CONFIG_LONG_BREAK + this.newLongBreak);","lastModifiedDate":"2023-03-26"},{"lineNumber":297,"author":{"gitId":"nichyjt"},"content":"        if (this.newWork \u003d\u003d MIN_MINUTES) {","lastModifiedDate":"2023-03-26"},{"lineNumber":298,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MIN);","lastModifiedDate":"2023-03-26"},{"lineNumber":299,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-03-26"},{"lineNumber":300,"author":{"gitId":"nichyjt"},"content":"            message \u003d message.concat(SINGLE_SPACE_PAD + PRINT_CONFIG_MINS);","lastModifiedDate":"2023-03-26"},{"lineNumber":301,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":302,"author":{"gitId":"nichyjt"},"content":"        textUi.printOutputMessage(message);","lastModifiedDate":"2023-03-26"},{"lineNumber":303,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":304,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":305,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":306,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-26"},{"lineNumber":307,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":308,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":309,"author":{"gitId":"nichyjt"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-26"},{"lineNumber":310,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":311,"author":{"gitId":"nichyjt"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-26"},{"lineNumber":312,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":313,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":314,"author":{"gitId":"nichyjt"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-26"},{"lineNumber":315,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-26"},{"lineNumber":316,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":317,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":318,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":319,"author":{"gitId":"nichyjt"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-26"},{"lineNumber":320,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":321,"author":{"gitId":"nichyjt"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":322,"author":{"gitId":"nichyjt"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-26"},{"lineNumber":323,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-26"},{"lineNumber":324,"author":{"gitId":"nichyjt"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-26"},{"lineNumber":325,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":326,"author":{"gitId":"nichyjt"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":327,"author":{"gitId":"nichyjt"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-26"},{"lineNumber":328,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-26"},{"lineNumber":329,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":330,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"nichyjt":330}},{"path":"src/main/java/wellnus/focus/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":" * Implementation of Focus Timer WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" * by Focus Timer and how to use each command.","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"help - Get help on what commands can be used \"","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"            + \"in Focus Timer WellNUS++\";","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: help [command-to-check]\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    private static final String BAD_COMMAND_MESSAGE \u003d \"help does not take in any arguments!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String HELP_PREAMBLE \u003d \"Input `help` to see all available commands.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"            + \"Input `help [command-to-check] to get usage help for a specific command.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"            + \"Here are all the commands available for you!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"    private static final String ERROR_UNKNOWN_COMMAND \u003d \"Sorry, we couldn\u0027t find that command!\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"            + \"To find a command accessible in this part of WellNUS++, try `help`!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"     * Initialises a HelpCommand Object using the command arguments issued by the user.","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(CheckCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(ConfigCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HelpCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HomeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(NextCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(PauseCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(ResumeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(StartCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(StopCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        return commandDescriptions;","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"     * Prints either the general help message or the command-specific help message","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"     * based on the presence of a payload.","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"        String commandToSearch \u003d argumentPayload.get(COMMAND_KEYWORD);","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"        if (commandToSearch.equals(NO_FEATURE_KEYWORD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"            printGeneralHelpMessage();","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"        printSpecificHelpMessage(commandToSearch);","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"     * Lists all features available in Atomic Habit WellNUS++ and a short description.","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"    public void printGeneralHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d getCommandDescriptions();","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        String outputMessage \u003d FocusManager.FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(HELP_PREAMBLE);","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator() + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c commandDescriptions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions.get(i) + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"        this.getTextUi().printOutputMessage(outputMessage);","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"     * Prints the help message for a given commandToSearch.","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"     * If it does not exist,","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"    public void printSpecificHelpMessage(String commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"        switch (commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"        case CheckCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(CheckCommand.COMMAND_DESCRIPTION, CheckCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"        case ConfigCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(ConfigCommand.COMMAND_DESCRIPTION, ConfigCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"        case HelpCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HelpCommand.COMMAND_DESCRIPTION, HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"        case HomeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HomeCommand.COMMAND_DESCRIPTION, HomeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"        case NextCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(NextCommand.COMMAND_DESCRIPTION, NextCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"        case PauseCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(PauseCommand.COMMAND_DESCRIPTION, PauseCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"        case ResumeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(ResumeCommand.COMMAND_DESCRIPTION, ResumeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"        case StartCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(StartCommand.COMMAND_DESCRIPTION, StartCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"        case StopCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(StopCommand.COMMAND_DESCRIPTION, StopCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"        default:","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"            textUi.printOutputMessage(ERROR_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"    private void printUsageMessage(String commandDescription, String usageString) {","lastModifiedDate":"2023-03-29"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"        String message \u003d commandDescription + System.lineSeparator() + usageString;","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"        textUi.printOutputMessage(message);","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"     * Prints a brief description of all of Focus Timer WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"    public void execute() {","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"            getTextUi().printOutputMessage(exception.getMessage());","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"BernardLesley"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-28"},{"lineNumber":174,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-29"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(BAD_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"     * Abstract method to ensure developers add in a command usage.","lastModifiedDate":"2023-03-28"},{"lineNumber":181,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":182,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":183,"author":{"gitId":"BernardLesley"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-28"},{"lineNumber":184,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":185,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-28"},{"lineNumber":186,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":187,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":190,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":191,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":192,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":193,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-28"},{"lineNumber":194,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":195,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":196,"author":{"gitId":"BernardLesley"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-28"},{"lineNumber":197,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":198,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-28"},{"lineNumber":199,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":200,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":201,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-28"},{"lineNumber":202,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":203,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":204,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"BernardLesley":204}},{"path":"src/main/java/wellnus/focus/command/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * The HomeCommand class is a command class that returns user back to the main WellNUS++ program.","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class HomeCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"home - Stop the session and go back to WellNUS++.\";","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: home\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"That is not a valid home command for \"","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"            + \"focus timer!\";","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_COMMAND_MESSAGE \u003d \"Wrong command given for home!\";","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_MESSAGE \u003d \"Thank you for using focus timer. Keep up the productivity!\";","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for HomeCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    public HomeCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"     * Check if a HomeCommand is executed and user wants to return to home.","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * @param command User command","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     * @return true If user wants to exit feature false if not","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    public static boolean isExit(Command command) {","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"        return command instanceof HomeCommand;","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"     * Stops the current countdown to close background thread.","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"     * Prints the exit feature message for the focus timer feature on the user\u0027s screen.","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"            textUi.printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        if (!session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"            session.getCurrentCountdown().setStop();","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"        textUi.printOutputMessage(HOME_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException if the commandMap has any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d HomeCommand.COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(HomeCommand.COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(HomeCommand.COMMAND_INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":1,"YongbinWang":127,"nichyjt":7}},{"path":"src/main/java/wellnus/focus/command/NextCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a class to start the next countdown in the session.","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class NextCommand extends Command {","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"next - When a timer ends, move on to the next countdown!\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"            + \"This can only be used when a countdown timer has ended!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: next\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"next\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid command, expected \u0027next\u0027\";","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_SESSION_NOT_STARTED \u003d \"A focus session has not started yet, \"","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"            + \"try `start`ing one first!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_COUNTDOWN_RUNNING \u003d \"Oops, your timer for this session is still ticking!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for NextCommand object.","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"    public NextCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * Outputs unique description of the countdown.","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     * Starts the session by starting the first countdown.","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     * If the session has already started, it will start the next countdown.","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"            textUi.printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_SESSION_NOT_STARTED);","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionCounting() || session.isSessionPaused()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_COUNTDOWN_RUNNING);","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        session.startTimer();","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        textUi.printOutputMessage(session.getCurrentCountdown().getDescription());","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"BernardLesley":1,"YongbinWang":117,"nichyjt":16}},{"path":"src/main/java/wellnus/focus/command/PauseCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a class to pause the current countdown in the session.","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class PauseCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"pause - Pause the session!\"","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"            + \"Can only be used when a countdown is ticking.\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: pause\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"pause\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid command, expected \u0027pause\u0027\";","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String PAUSE_OUTPUT \u003d \"Timer paused at: \";","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_COUNTDOWN_NOT_RUNNING \u003d \"Nothing to pause - the timer has not started yet!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_IS_PAUSED \u003d \"Nothing to pause - you have already paused the timer!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for PauseCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"    public PauseCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * Pause the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     * Prints the time left in the current countdown for user to view.","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"            textUi.printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        // Only execute the pause logic if the countdown is not running","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        if (session.isSessionPaused()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_IS_PAUSED);","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        if (!session.isSessionCounting()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"            // Gently tell the user why pause did not execute","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_COUNTDOWN_NOT_RUNNING);","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        session.getCurrentCountdown().setPause();","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        int minutes \u003d session.getCurrentCountdown().getMinutes();","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        int seconds \u003d session.getCurrentCountdown().getSeconds();","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"        textUi.printOutputMessage(PAUSE_OUTPUT + String.format(\"%d:%d\", minutes, seconds));","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":1,"YongbinWang":114,"nichyjt":21}},{"path":"src/main/java/wellnus/focus/command/ResumeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a command to resume the countdown timer in the current session.","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class ResumeCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"resume - Continue the countdown.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"            + \"Can only be used when a countdown is paused.\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: home\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"resume\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid command, expected \u0027resume\u0027\";","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be resume.\";","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String RESUME_OUTPUT \u003d \"Timer resumed at: \";","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_NOT_PAUSED \u003d \"You don\u0027t seem to be paused. Ignoring the command!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a ResumeCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"    public ResumeCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * Resumes the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     * Prints the time left to be completed in the current countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"            textUi.printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"        assert super.getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        if (!session.hasAnyCountdown() || !session.isSessionPaused()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_NOT_PAUSED);","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        int minutes \u003d session.getCurrentCountdown().getMinutes();","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        int seconds \u003d session.getCurrentCountdown().getSeconds();","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"        textUi.printOutputMessage(RESUME_OUTPUT + String.format(\"%d:%d\", minutes, seconds));","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        session.getCurrentCountdown().setStart();","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no arguments are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":1,"YongbinWang":112,"nichyjt":14}},{"path":"src/main/java/wellnus/focus/command/StartCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a command to start the current session.","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" * Also used to start different countdowns timers in the session.","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"public class StartCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"start - Start your focus session!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: start\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"start\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final int FIRST_COUNTDOWN_INDEX \u003d 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid command, expected \u0027start\u0027\";","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String START_MESSAGE \u003d \"Your session has started! Please focus on your task.\";","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_NOT_READY \u003d \"Nothing to start - your session has started!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"     * Constructor for StartCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"    public StartCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * Outputs unique description of the countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     * Starts the session by starting the first countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     * If the session has already started, it will start the next countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"            textUi.printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"        if (!session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_NOT_READY);","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        // Forcefully initialise the session again for repeated countdowns","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"        textUi.printOutputMessage(START_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        session.startTimer();","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"        textUi.printOutputMessage(session.getSession().get(FIRST_COUNTDOWN_INDEX).getDescription());","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":1,"YongbinWang":119,"nichyjt":11}},{"path":"src/main/java/wellnus/focus/command/StopCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * Represents a command to stop the current session.","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"public class StopCommand extends Command {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"stop - Stop the session. You will have to `start` \"","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"            + \"your focus session again!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: stop\";","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_KEYWORD \u003d \"stop\";","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int COMMAND_NUM_OF_ARGUMENTS \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_INVALID_ARGUMENTS_MESSAGE \u003d \"Invalid command, expected \u0027stop\u0027\";","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String NO_ADDITIONAL_MESSAGE \u003d \"\";","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"    private static final String STOP_MESSAGE \u003d \"Your focus session has ended.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"            + \"To start a new session, `start` it up!\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"            + \"You can also configure the session to your liking with `config`!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_NOT_STARTED \u003d \"Nothing to stop - the timer has not started yet!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a StopCommand object.","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"     * Session in FocusManager is passed into this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload Hashmap generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"     * @param session   Session object which is an arraylist of Countdowns","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"    public StopCommand(HashMap\u003cString, String\u003e arguments, Session session) {","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        super(arguments);","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d session;","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * Identifies this Command\u0027s keyword.","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword of this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"     * Identifies the feature that this Command is associated with.","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"     * Override this in subclasses so toString() returns the correct String representation.","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     * @return String Keyword for the feature associated with this Command","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"        return FocusManager.FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     * Prints message to indicate session has ended.","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     * Stops the session.","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     * Resets the current countdown index.","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    public void execute() {","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"            validateCommand(super.getArguments());","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"            textUi.printErrorFor(badCommandException, NO_ADDITIONAL_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        if (!session.hasAnyCountdown() || session.isSessionReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(ERROR_NOT_STARTED);","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"        textUi.printOutputMessage(STOP_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        session.getCurrentCountdown().setStop();","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        session.initialiseSession();","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"        session.resetCurrentCountdownIndex();","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"     * Validate the arguments and payloads from a commandMap generated by CommandParser.","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"     * User input is valid if no exceptions are thrown.","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"     * @param arguments Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If the arguments have any issues","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"        if (arguments.size() !\u003d COMMAND_NUM_OF_ARGUMENTS) {","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        if (!arguments.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        if (!arguments.get(COMMAND_KEYWORD).equals(\"\")) {","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(COMMAND_INVALID_ARGUMENTS_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-27"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"BernardLesley":1,"YongbinWang":116,"nichyjt":16}},{"path":"src/main/java/wellnus/focus/feature/Countdown.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.feature;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import java.util.Timer;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import java.util.TimerTask;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import java.util.concurrent.atomic.AtomicBoolean;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":" * Class to represent a timer counting down given a specific minutes.","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":" * This class contains a Timer class which is used to simulate a clock counting down.","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":" * Atomic data type is used to communicate with the timer background thread.","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"public class Countdown {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"    private static final int ONE_SECOND \u003d 1000;","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"    private static final int DELAY_TIME \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"    private static final int DEFAULT_STOP_TIME \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"    private static final int DEFAULT_SECONDS \u003d 59;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"    private static final int INITIAL_SECONDS \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String MINUTES_INPUT_ASSERTION \u003d \"Minutes should be greater than 0\";","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String STOP_BEFORE_START_ASSERTION \u003d \"Timer should be started before trying to stop it\";","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String TIMER_NOT_RUNNING_ASSERTION \u003d \"Timer should not be running\";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private static final String TIMER_COMPLETE_MESSAGE \u003d \"Type \u0027next\u0027 to begin the next countdown\";","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    private static final String TIMER_COMPLETE_MESSAGE_LAST \u003d \"Congrats! That\u0027s a session done and dusted!\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"            + \"Type `start` to start a new session, or `config` to change the session settings.\";","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    private TextUi textUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    private Timer timer;","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"    private int minutes;","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    private int inputMinutes;","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    private int seconds;","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    private final String description;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    private boolean isLast;","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    // Convenience attribute to signify that this countdown object is the rollover countdown","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    private boolean isReady \u003d false;","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"    private AtomicBoolean isCompletedCountdown;","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    private AtomicBoolean isRunClock;","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"     * Constructor of Countdown.","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"     * This will initialise the private attributes of Countdown object.","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"     * @param minutes     the number of minutes to countdown","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"     * @param description description of the current task user is focusing on","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    public Countdown(int minutes, String description, boolean isLast) {","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"        assert minutes \u003e 0 : MINUTES_INPUT_ASSERTION;","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"        this.minutes \u003d minutes;","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"        this.inputMinutes \u003d minutes;","lastModifiedDate":"2023-03-23"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"        this.seconds \u003d INITIAL_SECONDS;","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"        this.isCompletedCountdown \u003d new AtomicBoolean(false);","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"        this.isRunClock \u003d new AtomicBoolean(false);","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"        this.isLast \u003d isLast;","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     * This method will execute the actions necessary when a countdown completes.","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"     * The timer will be stopped and a beep sound will be played.","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"     * A message will be printed to the user to notify them that the countdown has completed.","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    private void timerComplete() {","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"        setStop();","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"        java.awt.Toolkit.getDefaultToolkit().beep();","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"        if (isLast) {","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"            textUi.printOutputMessage(TIMER_COMPLETE_MESSAGE_LAST);","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"        } else {","lastModifiedDate":"2023-03-27"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"            textUi.printOutputMessage(TIMER_COMPLETE_MESSAGE);","lastModifiedDate":"2023-03-23"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        this.minutes \u003d inputMinutes;","lastModifiedDate":"2023-03-23"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"        this.isCompletedCountdown.set(true);","lastModifiedDate":"2023-03-27"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        if (isLast) {","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"            setIsReady(true);","lastModifiedDate":"2023-03-27"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"     * This method will decrement the minutes by 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"    private void decrementMinutes() {","lastModifiedDate":"2023-03-23"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"        minutes--;","lastModifiedDate":"2023-03-23"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"     * This method will decrement the seconds by 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"    private void decrementSeconds() {","lastModifiedDate":"2023-03-23"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"        seconds--;","lastModifiedDate":"2023-03-23"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"     * This method will start the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"     * Timer will notify user when the countdown timer has completed by playing a beep sound.","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * The timer will run in the background and will be stopped when the countdown minutes and seconds reaches 0.","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"    public void start() {","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"        assert isRunClock.get() \u003d\u003d false : TIMER_NOT_RUNNING_ASSERTION;","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        timer \u003d new Timer();","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        TimerTask countdownTask \u003d new TimerTask() {","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"            @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"            public void run() {","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"                setIsReady(false);","lastModifiedDate":"2023-03-27"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"                if (!isRunClock.get()) {","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"                    return;","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"                if (minutes \u003d\u003d DEFAULT_STOP_TIME \u0026\u0026 seconds \u003c\u003d 10 \u0026\u0026 seconds !\u003d 0) {","lastModifiedDate":"2023-03-27"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"                    textUi.printOutputMessage(seconds + \" seconds left\");","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"                if (seconds \u003d\u003d DEFAULT_STOP_TIME \u0026\u0026 minutes \u003d\u003d DEFAULT_STOP_TIME) {","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"                    timerComplete();","lastModifiedDate":"2023-03-23"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"                } else if (seconds \u003d\u003d DEFAULT_STOP_TIME) {","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"                    seconds \u003d DEFAULT_SECONDS;","lastModifiedDate":"2023-03-21"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"                    decrementMinutes();","lastModifiedDate":"2023-03-23"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"                } else {","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"                    decrementSeconds();","lastModifiedDate":"2023-03-23"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"                }","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"        };","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"        timer.scheduleAtFixedRate(countdownTask, DELAY_TIME, ONE_SECOND);","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the status of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * @return true if the countdown timer has completed, false otherwise","lastModifiedDate":"2023-03-21"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"    public boolean getIsCompletedCountdown() {","lastModifiedDate":"2023-03-21"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"        return isCompletedCountdown.get();","lastModifiedDate":"2023-03-21"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"     * This method will stop the countdown timer and stops the background thread.","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    public void setStop() {","lastModifiedDate":"2023-03-21"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"        // timer is only initialised in start() method, so calling setStop() leads","lastModifiedDate":"2023-03-25"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"        // to a crash. Catch this mistake with an assertion","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"        assert timer !\u003d null : STOP_BEFORE_START_ASSERTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"YongbinWang"},"content":"        isCompletedCountdown.set(true);","lastModifiedDate":"2023-03-25"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"        isRunClock.set(false);","lastModifiedDate":"2023-03-25"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"        timer.cancel();","lastModifiedDate":"2023-03-21"},{"lineNumber":142,"author":{"gitId":"YongbinWang"},"content":"        timer.purge();","lastModifiedDate":"2023-03-25"},{"lineNumber":143,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":144,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"     * This method will allow the countdown timer to count down.","lastModifiedDate":"2023-03-21"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"     * It does so by allowing the minutes and seconds to be decremented.","lastModifiedDate":"2023-03-21"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"    public void setStart() {","lastModifiedDate":"2023-03-21"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"        isRunClock.set(true);","lastModifiedDate":"2023-03-21"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":152,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"YongbinWang"},"content":"     * This method will pause the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":156,"author":{"gitId":"YongbinWang"},"content":"    public void setPause() {","lastModifiedDate":"2023-03-21"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"        isRunClock.set(false);","lastModifiedDate":"2023-03-21"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":159,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":160,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":161,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the status of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":162,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":163,"author":{"gitId":"YongbinWang"},"content":"     * @return true if the countdown timer is running, false otherwise","lastModifiedDate":"2023-03-21"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":165,"author":{"gitId":"YongbinWang"},"content":"    public boolean getIsRunning() {","lastModifiedDate":"2023-03-21"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"        return isRunClock.get();","lastModifiedDate":"2023-03-21"},{"lineNumber":167,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":168,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":170,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the current minutes of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":172,"author":{"gitId":"YongbinWang"},"content":"     * @return the minutes of the countdown timer","lastModifiedDate":"2023-03-21"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":174,"author":{"gitId":"YongbinWang"},"content":"    public int getMinutes() {","lastModifiedDate":"2023-03-21"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"        return this.minutes;","lastModifiedDate":"2023-03-21"},{"lineNumber":176,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":177,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":178,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the current seconds of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":180,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"     * @return the seconds of the countdown timer","lastModifiedDate":"2023-03-21"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":183,"author":{"gitId":"YongbinWang"},"content":"    public int getSeconds() {","lastModifiedDate":"2023-03-21"},{"lineNumber":184,"author":{"gitId":"YongbinWang"},"content":"        return this.seconds;","lastModifiedDate":"2023-03-21"},{"lineNumber":185,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":186,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"     * This method will return the description of the countdown timer.","lastModifiedDate":"2023-03-21"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"     * @return the description of the countdown timer","lastModifiedDate":"2023-03-21"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":192,"author":{"gitId":"YongbinWang"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-21"},{"lineNumber":193,"author":{"gitId":"YongbinWang"},"content":"        return this.description;","lastModifiedDate":"2023-03-21"},{"lineNumber":194,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"     * This method will return the ready status of the session","lastModifiedDate":"2023-03-27"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"     * Only the last countdown timer object in a session can have this as true.","lastModifiedDate":"2023-03-27"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"     * The last countdown timer object will be \u0027ready\u0027 only if it is not counting down.","lastModifiedDate":"2023-03-27"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"     * This is meant to help the Session manage starting new sessions.","lastModifiedDate":"2023-03-27"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"     * @return boolean representing the ready state of the session","lastModifiedDate":"2023-03-27"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"    public boolean getIsReady() {","lastModifiedDate":"2023-03-27"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"        return isReady;","lastModifiedDate":"2023-03-27"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"    public void setIsReady(boolean isReady) {","lastModifiedDate":"2023-03-27"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"        this.isReady \u003d isReady;","lastModifiedDate":"2023-03-27"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"YongbinWang":178,"nichyjt":35}},{"path":"src/main/java/wellnus/focus/feature/FocusManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.feature;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.CheckCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.command.ConfigCommand;","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.focus.command.HelpCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.HomeCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.NextCommand;","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.PauseCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.ResumeCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.StartCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.StopCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":" * Represents a class to run the event driver for the Focus Timer.","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":" * This class will be called by the main manager.","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":" * It will match the user input to the correct command and execute it.","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"//@@author YongbinWang","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"public class FocusManager extends Manager {","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    public static final String FEATURE_HELP_DESCRIPTION \u003d \"Focus Timer (ft) - Set a configurable timer \"","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"            + \"with work and rest cycles to keep yourself focused and productive!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"    public static final String FEATURE_NAME \u003d \"ft\";","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    private static final String START_COMMAND_KEYWORD \u003d \"start\";","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    private static final String PAUSE_COMMAND_KEYWORD \u003d \"pause\";","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    private static final String RESUME_COMMAND_KEYWORD \u003d \"resume\";","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"    private static final String NEXT_COMMAND_KEYWORD \u003d \"next\";","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    private static final String CONFIG_COMMAND_KEYWORD \u003d \"config\";","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"    private static final String HOME_COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"    private static final String STOP_COMMAND_KEYWORD \u003d \"stop\";","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"    private static final String CHECK_COMMAND_KEYWORD \u003d \"check\";","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"    private static final String HELP_COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"    private static final String UNKNOWN_COMMAND_MESSAGE \u003d \"No such command in focus timer!\";","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"    private static final String FOCUS_TIMER_GREET \u003d \"Welcome to Focus Timer.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"            + \"Start a focus session with `start`, or `config` the session first!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key cannot be null\"","lastModifiedDate":"2023-03-22"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"            + \", check user-guide for valid commands\";","lastModifiedDate":"2023-03-22"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"    private static final String ERROR_SESSION_RUNNING \u003d \"Sorry, you cant `start` or `config` a \";","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a FocusManager object.","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"     * Initialise a session and textUi.","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"     * Session will be passed into different commands to be utilised.","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"    public FocusManager() {","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d new Session();","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     * Parses the given command from the user.","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"     * Determines the correct Command subclass that can handle its execution.","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"     * @param commandString Full command issued by the user","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException If an unknown command was issued by the user","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"    private Command getCommandFor(String commandString) throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d getCommandParser().parseUserInput(commandString);","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"        String commandKeyword \u003d getCommandParser().getMainArgument(commandString);","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        assert commandKeyword !\u003d null : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"        switch (commandKeyword) {","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"        case START_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"            return new StartCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"        case PAUSE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"            return new PauseCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"        case RESUME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"            return new ResumeCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"        case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"            return new HomeCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"        case STOP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"            return new StopCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"        case CHECK_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"            return new CheckCommand(arguments, session);","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"        case NEXT_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"            return new NextCommand(arguments, session);","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"        case CONFIG_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-26"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"            return new ConfigCommand(arguments, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"        case HELP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"            return new HelpCommand(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"        default:","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(UNKNOWN_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"    private void greet() {","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"        textUi.printOutputMessage(FOCUS_TIMER_GREET);","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"    private void runCommands() {","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"            try {","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"                String commandString \u003d textUi.getCommand();","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"                Command command \u003d getCommandFor(commandString);","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"                command.execute();","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"                isExit \u003d HomeCommand.isExit(command);","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"            } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-23"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"                String noAdditionalMessage \u003d \"\";","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"                textUi.printErrorFor(exception, noAdditionalMessage);","lastModifiedDate":"2023-03-23"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"            } catch (WellNusException exception) {","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"                textUi.printErrorFor(exception, \"Check user guide for valid commands!\");","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     * Utility function to get the featureName this Manager is administering.","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"     * @return name of the feature that this Manager handles","lastModifiedDate":"2023-03-21"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-21"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * Abstract function to ensure developers add in a getter for the feature\u0027s help description.","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     * This description will be shown when the user types in the help command. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     * The description should be a brief overview of what the feature does. \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"     * For example: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"     * \"reflect: Reflect is your go-to tool to get, save and reflect on our specially","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"     * curated list of questions to reflect on\"","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"     * @return String of the feature\u0027s help description","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"    public String getFeatureHelpDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"        return null;","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":142,"author":{"gitId":"YongbinWang"},"content":"     * runEventDriver is the entry point into a feature\u0027s driver loop.","lastModifiedDate":"2023-03-21"},{"lineNumber":143,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":144,"author":{"gitId":"YongbinWang"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"    public void runEventDriver() throws BadCommandException {","lastModifiedDate":"2023-03-21"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"        greet();","lastModifiedDate":"2023-03-21"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"        runCommands();","lastModifiedDate":"2023-03-21"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"     * Public method used for testing FocusManager\u0027s handling of invalidCommands.","lastModifiedDate":"2023-03-22"},{"lineNumber":152,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-22"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"     * @param userCommand simulated user input","lastModifiedDate":"2023-03-22"},{"lineNumber":154,"author":{"gitId":"YongbinWang"},"content":"     * @return Command object that can execute the user\u0027s command","lastModifiedDate":"2023-03-22"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException","lastModifiedDate":"2023-03-22"},{"lineNumber":156,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"    public Command testInvalidCommand(String userCommand) throws BadCommandException {","lastModifiedDate":"2023-03-22"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"        String startCommand \u003d \"focusStart\";","lastModifiedDate":"2023-03-22"},{"lineNumber":159,"author":{"gitId":"YongbinWang"},"content":"        String pauseCommand \u003d \"focusPause\";","lastModifiedDate":"2023-03-22"},{"lineNumber":160,"author":{"gitId":"YongbinWang"},"content":"        String resumeCommand \u003d \"focusResume\";","lastModifiedDate":"2023-03-22"},{"lineNumber":161,"author":{"gitId":"YongbinWang"},"content":"        String homeCommand \u003d \"focusHome\";","lastModifiedDate":"2023-03-22"},{"lineNumber":162,"author":{"gitId":"YongbinWang"},"content":"        String stopCommand \u003d \"focusStop\";","lastModifiedDate":"2023-03-22"},{"lineNumber":163,"author":{"gitId":"YongbinWang"},"content":"        String checkCommand \u003d \"focusCheck\";","lastModifiedDate":"2023-03-22"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments;","lastModifiedDate":"2023-03-22"},{"lineNumber":165,"author":{"gitId":"YongbinWang"},"content":"        switch (userCommand) {","lastModifiedDate":"2023-03-22"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"        case START_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":167,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(startCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":168,"author":{"gitId":"YongbinWang"},"content":"            return new StartCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"        case PAUSE_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":170,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(pauseCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"            return new PauseCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":172,"author":{"gitId":"YongbinWang"},"content":"        case RESUME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(resumeCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":174,"author":{"gitId":"YongbinWang"},"content":"            return new ResumeCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"        case HOME_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":176,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(homeCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":177,"author":{"gitId":"YongbinWang"},"content":"            return new HomeCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":178,"author":{"gitId":"YongbinWang"},"content":"        case STOP_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(stopCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":180,"author":{"gitId":"YongbinWang"},"content":"            return new StopCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"        case CHECK_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-22"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(checkCommand);","lastModifiedDate":"2023-03-22"},{"lineNumber":183,"author":{"gitId":"YongbinWang"},"content":"            return new CheckCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":184,"author":{"gitId":"YongbinWang"},"content":"        case CONFIG_COMMAND_KEYWORD:","lastModifiedDate":"2023-03-26"},{"lineNumber":185,"author":{"gitId":"YongbinWang"},"content":"            arguments \u003d getCommandParser().parseUserInput(checkCommand);","lastModifiedDate":"2023-03-26"},{"lineNumber":186,"author":{"gitId":"YongbinWang"},"content":"            return new ConfigCommand(arguments, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"        default:","lastModifiedDate":"2023-03-22"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"            throw new BadCommandException(UNKNOWN_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":1,"YongbinWang":189,"nichyjt":1}},{"path":"src/main/java/wellnus/focus/feature/Session.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus.feature;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":" * Represents a session of Countdown objects.","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":" * A session is a sequence of Countdown objects represented by an ArrayList.","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" * We define a Session to have 4 states.","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * \u003col\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" *     \u003cli\u003e Ready","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" *          `config` and `start` are only legal here.","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" *     \u003cli\u003e Counting","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" *          `pause` and `stop` are only legal here.","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" *     \u003cli\u003e Waiting","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" *          `next` and `stop` are only legal here.","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" *     \u003cli\u003e Paused","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" *          `resume` and `stop` are only legal here.","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * \u003c/ol\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * The last timer holds a special `isReady` attribute to help Session determine if `start` and `config` is usable.","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"//@@author YongbinWang","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"public class Session {","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private static final int INCREMENT \u003d 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private static final boolean IS_LAST_COUNTDOWN \u003d true;","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private String workDescription \u003d \"Task\";","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"    private final ArrayList\u003cCountdown\u003e session;","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    private String breakDescription \u003d \"Break\";","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"    private String longBreakDescription \u003d \"Long Break\";","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"    private int work \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"    private int brk \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    private int longBrk \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"    private int cycle \u003d 2;","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    private int currentCountdownIndex;","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"     * Constructs a Session object.","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"     * Creates an ArrayList of Countdown objects.","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"     * Calls fillSession() to fill the session with Countdown objects.","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"    public Session() {","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"        initialiseSession();","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"        this.currentCountdownIndex \u003d session.size() - INCREMENT;","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"     * Method to fill the session with Countdown objects in a specific sequence.","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"    private void fillSession() {","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"        for (int i \u003d 0; i \u003c cycle; i++) {","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"            Countdown workCountDown \u003d new Countdown(work, workDescription, !IS_LAST_COUNTDOWN);","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"            Countdown breakCountDown \u003d new Countdown(brk, breakDescription, !IS_LAST_COUNTDOWN);","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"            session.add(workCountDown);","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"            session.add(breakCountDown);","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"        Countdown longBreak \u003d new Countdown(longBrk, longBreakDescription, IS_LAST_COUNTDOWN);","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"        int lastIndex \u003d session.size() - 1;","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"        session.remove(lastIndex);","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"        session.add(longBreak);","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"     * Method to get the session.","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"     * @return arraylist of countdown objects","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"    public ArrayList\u003cCountdown\u003e getSession() {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        return this.session;","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"     * Method to get the current countdown index.","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"     * @return the current countdown index","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"    public int getCurrentCountdownIndex() {","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"        return this.currentCountdownIndex;","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"     * Method to increment the current countdown index if the current countdown is completed.","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"    public void checkPrevCountdown() {","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"        if (getCurrentCountdown().getIsReady()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"            initialiseSession();","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"            currentCountdownIndex \u003d 0;","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"YongbinWang"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"YongbinWang"},"content":"        currentCountdownIndex +\u003d INCREMENT;","lastModifiedDate":"2023-03-23"},{"lineNumber":91,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":92,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":94,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":95,"author":{"gitId":"YongbinWang"},"content":"     * Get the current countdown object actively ticking in the Session","lastModifiedDate":"2023-03-27"},{"lineNumber":96,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":97,"author":{"gitId":"YongbinWang"},"content":"     * @return Countdown the current countdown being ticked","lastModifiedDate":"2023-03-27"},{"lineNumber":98,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":99,"author":{"gitId":"YongbinWang"},"content":"    public Countdown getCurrentCountdown() {","lastModifiedDate":"2023-03-27"},{"lineNumber":100,"author":{"gitId":"YongbinWang"},"content":"        return session.get(currentCountdownIndex);","lastModifiedDate":"2023-03-27"},{"lineNumber":101,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":102,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":104,"author":{"gitId":"YongbinWang"},"content":"     * Check if the session is in its Ready state.","lastModifiedDate":"2023-03-27"},{"lineNumber":105,"author":{"gitId":"YongbinWang"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":106,"author":{"gitId":"YongbinWang"},"content":"     * A session can only be ready if the current index is the last timer","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"YongbinWang"},"content":"     * and the last timer\u0027s isReady is true, which can only occur if it is not counting down.","lastModifiedDate":"2023-03-27"},{"lineNumber":108,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":109,"author":{"gitId":"YongbinWang"},"content":"     * @return boolean Representing the ready state of the session.","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":111,"author":{"gitId":"YongbinWang"},"content":"    public boolean isSessionReady() {","lastModifiedDate":"2023-03-27"},{"lineNumber":112,"author":{"gitId":"YongbinWang"},"content":"        return getCurrentCountdownIndex() \u003d\u003d session.size() - INCREMENT \u0026\u0026 getCurrentCountdown().getIsReady();","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":114,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":115,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":116,"author":{"gitId":"YongbinWang"},"content":"     * Check if the session is in its Counting state.","lastModifiedDate":"2023-03-27"},{"lineNumber":117,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":118,"author":{"gitId":"YongbinWang"},"content":"     * @return boolean Representing if the session\u0027s countdown is underway.","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":120,"author":{"gitId":"YongbinWang"},"content":"    public boolean isSessionCounting() {","lastModifiedDate":"2023-03-27"},{"lineNumber":121,"author":{"gitId":"YongbinWang"},"content":"        Countdown countdown \u003d getCurrentCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":122,"author":{"gitId":"YongbinWang"},"content":"        return countdown.getIsRunning() \u0026\u0026 !countdown.getIsCompletedCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":123,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":125,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":126,"author":{"gitId":"YongbinWang"},"content":"     * Check if the session is in its Waiting state.","lastModifiedDate":"2023-03-27"},{"lineNumber":127,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"YongbinWang"},"content":"     * @return boolean Representing if the session\u0027s countdown is done and is waiting for a next command.","lastModifiedDate":"2023-03-27"},{"lineNumber":129,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":130,"author":{"gitId":"YongbinWang"},"content":"    public boolean isSessionWaiting() {","lastModifiedDate":"2023-03-27"},{"lineNumber":131,"author":{"gitId":"YongbinWang"},"content":"        Countdown countdown \u003d getCurrentCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":132,"author":{"gitId":"YongbinWang"},"content":"        return !countdown.getIsRunning() \u0026\u0026 countdown.getIsCompletedCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":133,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":134,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":136,"author":{"gitId":"YongbinWang"},"content":"     * Check if the session is in its Paused state.","lastModifiedDate":"2023-03-27"},{"lineNumber":137,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":138,"author":{"gitId":"YongbinWang"},"content":"     * @return boolean Representing if the session\u0027s countdown is paused.","lastModifiedDate":"2023-03-27"},{"lineNumber":139,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":140,"author":{"gitId":"YongbinWang"},"content":"    public boolean isSessionPaused() {","lastModifiedDate":"2023-03-27"},{"lineNumber":141,"author":{"gitId":"YongbinWang"},"content":"        Countdown countdown \u003d getCurrentCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":142,"author":{"gitId":"YongbinWang"},"content":"        return !countdown.getIsRunning() \u0026\u0026 !countdown.getIsCompletedCountdown() \u0026\u0026 !countdown.getIsReady();","lastModifiedDate":"2023-03-27"},{"lineNumber":143,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":145,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":146,"author":{"gitId":"YongbinWang"},"content":"     * Starts the timer for the current countdown and increment the index if needed.","lastModifiedDate":"2023-03-27"},{"lineNumber":147,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":148,"author":{"gitId":"YongbinWang"},"content":"    public void startTimer() {","lastModifiedDate":"2023-03-27"},{"lineNumber":149,"author":{"gitId":"YongbinWang"},"content":"        checkPrevCountdown();","lastModifiedDate":"2023-03-27"},{"lineNumber":150,"author":{"gitId":"YongbinWang"},"content":"        getCurrentCountdown().start();","lastModifiedDate":"2023-03-27"},{"lineNumber":151,"author":{"gitId":"YongbinWang"},"content":"        getCurrentCountdown().setStart();","lastModifiedDate":"2023-03-27"},{"lineNumber":152,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":153,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":155,"author":{"gitId":"YongbinWang"},"content":"     * Method to (re) initialise a session when start or stop command is executed.","lastModifiedDate":"2023-03-27"},{"lineNumber":156,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":157,"author":{"gitId":"YongbinWang"},"content":"    public void initialiseSession() {","lastModifiedDate":"2023-03-27"},{"lineNumber":158,"author":{"gitId":"YongbinWang"},"content":"        session.clear();","lastModifiedDate":"2023-03-25"},{"lineNumber":159,"author":{"gitId":"YongbinWang"},"content":"        fillSession();","lastModifiedDate":"2023-03-25"},{"lineNumber":160,"author":{"gitId":"YongbinWang"},"content":"        primeSessionIsReady();","lastModifiedDate":"2023-03-27"},{"lineNumber":161,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":162,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":163,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":164,"author":{"gitId":"YongbinWang"},"content":"     * Sets the isReady flag in the session for the last countdown object to be true","lastModifiedDate":"2023-03-27"},{"lineNumber":165,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":166,"author":{"gitId":"YongbinWang"},"content":"    private void primeSessionIsReady() {","lastModifiedDate":"2023-03-27"},{"lineNumber":167,"author":{"gitId":"YongbinWang"},"content":"        int lastIndex \u003d session.size() - INCREMENT;","lastModifiedDate":"2023-03-27"},{"lineNumber":168,"author":{"gitId":"YongbinWang"},"content":"        session.get(lastIndex).setIsReady(true);","lastModifiedDate":"2023-03-27"},{"lineNumber":169,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":170,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":171,"author":{"gitId":"YongbinWang"},"content":"    public boolean hasAnyCountdown() {","lastModifiedDate":"2023-03-25"},{"lineNumber":172,"author":{"gitId":"YongbinWang"},"content":"        return session.size() \u003e 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":173,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":174,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":175,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":176,"author":{"gitId":"YongbinWang"},"content":"     * Method to reset the current countdown index back to 0.","lastModifiedDate":"2023-03-21"},{"lineNumber":177,"author":{"gitId":"YongbinWang"},"content":"     * This method is called when the user wants to stop an ongoing session.","lastModifiedDate":"2023-03-21"},{"lineNumber":178,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":179,"author":{"gitId":"YongbinWang"},"content":"    public void resetCurrentCountdownIndex() {","lastModifiedDate":"2023-03-21"},{"lineNumber":180,"author":{"gitId":"YongbinWang"},"content":"        currentCountdownIndex \u003d session.size() - INCREMENT;","lastModifiedDate":"2023-03-27"},{"lineNumber":181,"author":{"gitId":"YongbinWang"},"content":"        primeSessionIsReady();","lastModifiedDate":"2023-03-27"},{"lineNumber":182,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":183,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":184,"author":{"gitId":"YongbinWang"},"content":"    public int getWork() {","lastModifiedDate":"2023-03-26"},{"lineNumber":185,"author":{"gitId":"YongbinWang"},"content":"        return work;","lastModifiedDate":"2023-03-26"},{"lineNumber":186,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":187,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":188,"author":{"gitId":"YongbinWang"},"content":"    public void setWork(int newWork) {","lastModifiedDate":"2023-03-26"},{"lineNumber":189,"author":{"gitId":"YongbinWang"},"content":"        this.work \u003d newWork;","lastModifiedDate":"2023-03-26"},{"lineNumber":190,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":191,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":192,"author":{"gitId":"YongbinWang"},"content":"    public int getCycle() {","lastModifiedDate":"2023-03-26"},{"lineNumber":193,"author":{"gitId":"YongbinWang"},"content":"        return cycle;","lastModifiedDate":"2023-03-26"},{"lineNumber":194,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":195,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":196,"author":{"gitId":"YongbinWang"},"content":"    public void setCycle(int newCycles) {","lastModifiedDate":"2023-03-26"},{"lineNumber":197,"author":{"gitId":"YongbinWang"},"content":"        this.cycle \u003d newCycles;","lastModifiedDate":"2023-03-26"},{"lineNumber":198,"author":{"gitId":"YongbinWang"},"content":"        fillSession();","lastModifiedDate":"2023-03-27"},{"lineNumber":199,"author":{"gitId":"YongbinWang"},"content":"        resetCurrentCountdownIndex();","lastModifiedDate":"2023-03-27"},{"lineNumber":200,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"    public int getBrk() {","lastModifiedDate":"2023-03-26"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"        return brk;","lastModifiedDate":"2023-03-26"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":205,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":206,"author":{"gitId":"YongbinWang"},"content":"    public void setBrk(int newBrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":207,"author":{"gitId":"YongbinWang"},"content":"        this.brk \u003d newBrk;","lastModifiedDate":"2023-03-26"},{"lineNumber":208,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":209,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":210,"author":{"gitId":"YongbinWang"},"content":"    public int getLongBrk() {","lastModifiedDate":"2023-03-26"},{"lineNumber":211,"author":{"gitId":"YongbinWang"},"content":"        return longBrk;","lastModifiedDate":"2023-03-26"},{"lineNumber":212,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":213,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":214,"author":{"gitId":"YongbinWang"},"content":"    public void setLongBrk(int newLongBrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":215,"author":{"gitId":"YongbinWang"},"content":"        this.longBrk \u003d newLongBrk;","lastModifiedDate":"2023-03-26"},{"lineNumber":216,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":217,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":218,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"YongbinWang":206,"nichyjt":12}},{"path":"src/main/java/wellnus/manager/Manager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.manager;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":" * Manager is the superclass for all WellNUS++ event drivers \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":" * Each manager is in charge of \u0027managing\u0027 exactly one feature. \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":" * For example, \u003ci\u003ehb\u003c/i\u003e and \u003ci\u003ereflect\u003c/i\u003e. \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":" * Each feature consists of multiple \u003ccode\u003eMainCommands\u003c/code\u003e,","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":" * stored in \u003ccode\u003esupportedCommands\u003c/code\u003e \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" * Each manager may also support entering other features","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * via \u003ccode\u003eManager\u003c/code\u003e (event drivers),","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * stored in \u003ccode\u003esupportedManagers\u003c/code\u003e \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * The manager should run an event driver (infinite loop) and is in charge","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * of a Feature\u0027s input, output, \u0027business\u0027 logic and graceful termination.","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"public abstract class Manager {","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    protected CommandParser commandParser;","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"     * Construct a feature Manager to handle control flow for the given feature. \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"     * Internally, it sets up the following for convenience:","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eCommandParser\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eSupported Commands\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    public Manager() {","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        this.commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get the CommandParser tied to the Manager class.","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"     * @return commandParser reference to this manager\u0027s instance of CommandParser","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"    public CommandParser getCommandParser() {","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"        assert commandParser !\u003d null : \"commandParser should not be null\";","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"        return this.commandParser;","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"     * Utility function to get the featureName this Manager is administering","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"     * @return name of the feature that this Manager handles","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    public abstract String getFeatureName();","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"     * Abstract function to ensure developers add in a getter for the feature\u0027s help description.","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"     * This description will be shown when the user types in the help command. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"     * The description should be a brief overview of what the feature does. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"     * For example: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"     * \"reflect: Reflect is your go-to tool to get, save and reflect on our specially","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"     * curated list of questions to reflect on\"","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"     * @return String of the feature\u0027s help description","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    public abstract String getFeatureHelpDescription();","lastModifiedDate":"2023-03-23"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"     * runEventDriver is the entry point into a feature\u0027s driver loop \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"     * This should be the part that contains the infinite loop and switch cases,","lastModifiedDate":"2023-03-11"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * but it is up to the implementer. \u003cbr\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     * Its implementation should include the following:","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eA way to terminate runEventDriver\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"     * \u003cli\u003eA way to read input from console\u003c/li\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"haoyangw"},"content":"    public abstract void runEventDriver() throws BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"haoyangw":5,"nichyjt":76}},{"path":"src/main/java/wellnus/reflection/command/FavoriteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":" * Get all the questions that are in the favorite list.","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"public class FavoriteCommand extends Command {","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"fav - Get the list of questions that have been added to \"","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"            + \"the favorite list.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: fav\";","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_KEYWORD \u003d \"fav\";","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Command is invalid.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"Please check the available commands \"","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"            + \"and the format of commands.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be fav.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should be empty.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDEX_OUT_OF_BOUND_MSG \u003d \"Index is out of bound!!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDEX_OUT_OF_BOUND_NOTES \u003d \"Question index is out of bound(e.g. negative integers, 0)!\"","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"            + \"Your data file might be corrupted!!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_FAV_LIST \u003d \"There is nothing in favorite list, \"","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"            + \"please get reflection questions first!!\";","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ReflectFavCommandLogger\");","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"     * Pass in a questionList object from ReflectionManager to access the list of favorite questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    public FavoriteCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: get","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this fav command is generated.","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     * Entry point to this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException invalidCommand) {","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"        if (!questionList.hasFavQuestions()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(EMPTY_FAV_LIST);","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"            String outputString \u003d questionList.getFavQuestions();","lastModifiedDate":"2023-03-27"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(outputString);","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, INDEX_OUT_OF_BOUND_MSG);","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(indexOutOfBoundsException, INDEX_OUT_OF_BOUND_NOTES);","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: fav","lastModifiedDate":"2023-03-25"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload is empty","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":146}},{"path":"src/main/java/wellnus/reflection/command/GetCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionQuestion;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":" * Command to get a set of 5 random questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"public class GetCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"get - Get a list of questions to reflect on.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: get\";","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_KEYWORD \u003d \"get\";","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ReflectGetCommandLogger\");","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Command is invalid.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"Please check the available commands \"","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"            + \"and the format of commands.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be get.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should be empty.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final String NUM_SELECTED_QUESTIONS_ASSERTION \u003d \"The number of selected questions should be 5.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final String STORAGE_ERROR \u003d \"The file data cannot be stored properly!!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    private static final int NUM_OF_RANDOM_QUESTIONS \u003d 5;","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private Set\u003cInteger\u003e randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"     * Pass in a questionList object from ReflectionManager to access the list of questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    public GetCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: get","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-12"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-12"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this get command is generated.","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-12"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-12"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"     * Entry point to this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"     * Trigger the generation of five random questions and print to users.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException invalidCommand) {","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"            String outputString \u003d convertQuestionsToString();","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(outputString);","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-12"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: get","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload is empty","lastModifiedDate":"2023-03-12"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-12"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"     * Use questionList object to generate a set of 5 random integers(0-9) which will then be used as indexes to get","lastModifiedDate":"2023-03-25"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"     * a set of 5 random questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"     * Each number num: num \u003e\u003d 0 and num \u003c\u003d (maxSize - 1)","lastModifiedDate":"2023-03-11"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"     * @return The selected sets of random questions","lastModifiedDate":"2023-03-25"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"    public ArrayList\u003cReflectionQuestion\u003e getRandomQuestions() throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"        questionList.setRandomQuestionIndexes();","lastModifiedDate":"2023-03-27"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d questionList.getRandomQuestionIndexes();","lastModifiedDate":"2023-03-25"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e selectedQuestions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e questions \u003d questionList.getAllQuestions();","lastModifiedDate":"2023-03-25"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"        for (int index : this.randomQuestionIndexes) {","lastModifiedDate":"2023-03-25"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"            selectedQuestions.add(questions.get(index));","lastModifiedDate":"2023-03-25"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"        assert selectedQuestions.size() \u003d\u003d NUM_OF_RANDOM_QUESTIONS : NUM_SELECTED_QUESTIONS_ASSERTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"        return selectedQuestions;","lastModifiedDate":"2023-03-25"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"     * Convert all five questions to a single string to be printed.","lastModifiedDate":"2023-03-15"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"     * @return Single string that consists of all questions","lastModifiedDate":"2023-03-11"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"    private String convertQuestionsToString() throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e selectedQuestions \u003d getRandomQuestions();","lastModifiedDate":"2023-03-16"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"        String questionString \u003d EMPTY_STRING;","lastModifiedDate":"2023-03-25"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c selectedQuestions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-10"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"            questionString +\u003d ((i + ONE_OFFSET) + DOT + selectedQuestions.get(i).toString()","lastModifiedDate":"2023-03-18"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"                    + System.lineSeparator());","lastModifiedDate":"2023-03-14"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"        return questionString;","lastModifiedDate":"2023-03-10"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":184}},{"path":"src/main/java/wellnus/reflection/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-29"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":" * Implementation of Reflection WellNus\u0027 \u003ccode\u003ehelp\u003c/code\u003e command. Explains to the user what commands are supported","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":" * by Reflection and how to use each command.","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"help - Get help on what commands can be used \"","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"            + \"in Reflection WellNUS++\";","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: help [command-to-check]\";","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final String BAD_COMMAND_MESSAGE \u003d \"help does not take in any arguments!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    private static final String COMMAND_KEYWORD \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String NO_FEATURE_KEYWORD \u003d \"\";","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    private static final String HELP_PREAMBLE \u003d \"Input `help` to see all available commands.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"            + \"Input `help [command-to-check] to get usage help for a specific command.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"            + \"Here are all the commands available for you!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"    private static final String ERROR_UNKNOWN_COMMAND \u003d \"Sorry, we couldn\u0027t find that command!\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"            + \"To find a command accessible in this part of WellNUS++, try `help`!\";","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"    private static final String PADDING \u003d \" \";","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"    private static final int EXPECTED_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"    private final TextUi textUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"     * Initialises a HelpCommand Object using the command arguments issued by the user.","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Command arguments issued by the user","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"    public HelpCommand(HashMap\u003cString, String\u003e arguments) {","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        super(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"        this.textUi \u003d new TextUi();","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"    private TextUi getTextUi() {","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"        return this.textUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cString\u003e getCommandDescriptions() {","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(FavoriteCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(GetCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HelpCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(HomeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        commandDescriptions.add(LikeCommand.COMMAND_DESCRIPTION);","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        return commandDescriptions;","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"     * Prints either the general help message or the command-specific help message","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"     * based on the presence of a payload.","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"    private void printHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d getArguments();","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"        String commandToSearch \u003d argumentPayload.get(COMMAND_KEYWORD);","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"        if (commandToSearch.equals(NO_FEATURE_KEYWORD)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"            printGeneralHelpMessage();","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"        printSpecificHelpMessage(commandToSearch);","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"     * Lists all features available in Atomic Habit WellNUS++ and a short description.","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"    public void printGeneralHelpMessage() {","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e commandDescriptions \u003d getCommandDescriptions();","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"        String outputMessage \u003d ReflectionManager.FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(HELP_PREAMBLE);","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        outputMessage \u003d outputMessage.concat(System.lineSeparator() + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c commandDescriptions.size(); i +\u003d 1) {","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(i + ONE_OFFSET + DOT + PADDING);","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"            outputMessage \u003d outputMessage.concat(commandDescriptions.get(i) + System.lineSeparator());","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"        this.getTextUi().printOutputMessage(outputMessage);","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"     * Prints the help message for a given commandToSearch.","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"     * If it does not exist,","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"    public void printSpecificHelpMessage(String commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"        switch (commandToSearch) {","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"        case FavoriteCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(FavoriteCommand.COMMAND_DESCRIPTION, FavoriteCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"        case GetCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(GetCommand.COMMAND_DESCRIPTION, GetCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"        case HelpCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HelpCommand.COMMAND_DESCRIPTION, HelpCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"        case HomeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(HomeCommand.COMMAND_DESCRIPTION, HomeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"        case LikeCommand.COMMAND_KEYWORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"            printUsageMessage(LikeCommand.COMMAND_DESCRIPTION, LikeCommand.COMMAND_USAGE);","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"        default:","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"            textUi.printOutputMessage(ERROR_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"    private void printUsageMessage(String commandDescription, String usageString) {","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"        String message \u003d commandDescription + System.lineSeparator() + usageString;","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        textUi.printOutputMessage(message);","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.COMMAND_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"        return HelpCommand.NO_FEATURE_KEYWORD;","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"     * Executes the issued help command.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"     * Prints a brief description of all Reflection WellNus\u0027 supported commands if","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"     * the basic \u0027help\u0027 command was issued.\u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"BernardLesley"},"content":"     * Prints a detailed description of a specific feature if the specialised","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"     * \u0027help\u0027 command was issued.","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"BernardLesley"},"content":"    public void execute() {","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"BernardLesley"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"BernardLesley"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"BernardLesley"},"content":"            getTextUi().printOutputMessage(exception.getMessage());","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"            return;","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"        this.printHelpMessage();","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"     * Checks whether the given arguments are valid for our help command.","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"     * @param arguments Argument-Payload map generated by CommandParser using user\u0027s command","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"     * @throws BadCommandException If the command is invalid","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"BernardLesley"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e arguments) throws BadCommandException {","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"BernardLesley"},"content":"        assert arguments.containsKey(COMMAND_KEYWORD) : \"HelpCommand\u0027s payload map does not contain \u0027help\u0027!\";","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"BernardLesley"},"content":"        // Check if user put in unnecessary payload or arguments","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"BernardLesley"},"content":"        if (arguments.size() \u003e EXPECTED_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-29"},{"lineNumber":161,"author":{"gitId":"BernardLesley"},"content":"            throw new BadCommandException(BAD_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"BernardLesley"},"content":"     * Abstract method to ensure developers add in a command usage.","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-28"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":174,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-28"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-28"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-28"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":181,"author":{"gitId":"BernardLesley"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":182,"author":{"gitId":"BernardLesley"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-28"},{"lineNumber":183,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":184,"author":{"gitId":"BernardLesley"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-28"},{"lineNumber":185,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":186,"author":{"gitId":"BernardLesley"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":187,"author":{"gitId":"BernardLesley"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-28"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-28"},{"lineNumber":189,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":190,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"BernardLesley":190}},{"path":"src/main/java/wellnus/reflection/command/HomeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-11"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":" * Home command to return back to WellNUS++ main interface.","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"public class HomeCommand extends Command {","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"home - Return back to the main menu of WellNUS++.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: home\";","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_KEYWORD \u003d \"home\";","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ReflectHomeCommandLogger\");","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Command is invalid.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"Please check the available commands \"","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            + \"and the format of commands.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be return.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_PAYLOAD_ASSERTION \u003d \"The payload should be empty.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_MESSAGE \u003d \"How do you feel after reflecting on yourself?\"","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"Hope you have gotten some takeaways from self reflection, see you again!!\";","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"     * Pass in a questionList object from ReflectionManager to manipulate history data.","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    public HomeCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-11"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: home","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this home command is generated.","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     * Main entry point of this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * Return back to WellNUS++ main interface and clear the questionList history data.","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-27"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException invalidCommand) {","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(invalidCommand, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(HOME_MESSAGE);","lastModifiedDate":"2023-03-16"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"        if (!questionList.getRandomQuestionIndexes().isEmpty()) {","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"            questionList.clearRandomQuestionIndexes();","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager.setIsExit(true);","lastModifiedDate":"2023-03-12"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-12"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: home","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload is empty","lastModifiedDate":"2023-03-12"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-12"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.get(COMMAND_KEYWORD).equals(PAYLOAD)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().get(COMMAND_KEYWORD).equals(PAYLOAD) : COMMAND_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"wenxin-c":138}},{"path":"src/main/java/wellnus/reflection/command/LikeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.command;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectUi;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":" * Like command to add commands to favorite list.","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"public class LikeCommand extends Command {","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_DESCRIPTION \u003d \"like (index) - Add a particular question to favorite list.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_USAGE \u003d \"usage: like (index)\";","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    public static final String COMMAND_KEYWORD \u003d \"like\";","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MSG \u003d \"Command is invalid.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_NOTES \u003d \"Please check the available commands \"","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            + \"and the format of commands.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String WRONG_INDEX_MSG \u003d \"Please input the correct index of the question you like!\";","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_KEYWORD_ASSERTION \u003d \"The key should be like.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String MISSING_SET_QUESTIONS \u003d \"A set of questions has not been gotten\";","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String MISSING_SET_QUESTIONS_NOTES \u003d \"Please get a set of questions before adding to favorite \"","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"            + \"list!\";","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final String TOKENIZER_ERROR \u003d \"The data cannot be tokenized for storage properly!!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final String STORAGE_ERROR \u003d \"The file data cannot be stored properly!!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final int ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final int UPPER_BOUND \u003d 5;","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    private static final int LOWER_BOUND \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ReflectLikeCommandLogger\");","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    private Set\u003cInteger\u003e randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"     * Set up the argument-payload pairs for this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"     * Pass in a questionList object from ReflectionManager to access the indexes of the previous set of questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"     * @param arguments Argument-payload pairs from users","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"     * @param questionList Object that contains the data about questions","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    public LikeCommand(HashMap\u003cString, String\u003e arguments, QuestionList questionList) {","lastModifiedDate":"2023-03-27"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"        super(arguments);","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"        this.questionList \u003d questionList;","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d questionList.getRandomQuestionIndexes();","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"     * Get the command itself.","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"     * @return Command: like","lastModifiedDate":"2023-03-25"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    protected String getCommandKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_KEYWORD;","lastModifiedDate":"2023-03-25"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"     * Get the name of the feature in which this like command is generated.","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"    protected String getFeatureKeyword() {","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a command usage.","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"     * \"usage: add --name (name of habit)\"","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the proper usage of the habit","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandUsage() {","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_USAGE;","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"     * Method to ensure that developers add in a description for the command.","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"     * For example, for the \u0027add\u0027 command in AtomicHabit package: \u003cbr\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"     * \"add - add a habit to your list\"","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * @return String of the description of what the command does","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandDescription() {","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"        return COMMAND_DESCRIPTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"     * Validate the command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"     * Conditions for command to be valid:\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eOnly one argument-payload pair","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eThe pair contains key: like","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003ePayload must be string which parse into integer ranges from 1 to 5","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"     * Whichever mismatch will cause the command to be invalid.","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"     * @param commandMap Argument-Payload map generated by CommandParser","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command is given","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"    public void validateCommand(HashMap\u003cString, String\u003e commandMap) throws BadCommandException, NumberFormatException {","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"        if (commandMap.size() !\u003d ARGUMENT_PAYLOAD_SIZE) {","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"        } else if (!commandMap.containsKey(COMMAND_KEYWORD)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"        } else {","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"            int questionIndex \u003d Integer.parseInt(commandMap.get(COMMAND_KEYWORD));","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"            if (questionIndex \u003e UPPER_BOUND || questionIndex \u003c LOWER_BOUND) {","lastModifiedDate":"2023-03-25"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"                throw new BadCommandException(WRONG_INDEX_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"            }","lastModifiedDate":"2023-03-25"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"        assert getArguments().containsKey(COMMAND_KEYWORD) : COMMAND_KEYWORD_ASSERTION;","lastModifiedDate":"2023-03-27"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"     * Entry point to this command.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"     * Check the validity of commands and add into favorite list.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"    public void execute() {","lastModifiedDate":"2023-03-25"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"            validateCommand(getArguments());","lastModifiedDate":"2023-03-27"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, INVALID_COMMAND_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(badCommandException, INVALID_COMMAND_NOTES);","lastModifiedDate":"2023-03-25"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-03-25"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, WRONG_INDEX_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(numberFormatException, WRONG_INDEX_MSG);","lastModifiedDate":"2023-03-25"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-25"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"            addFavQuestion(getArguments().get(COMMAND_KEYWORD));","lastModifiedDate":"2023-03-27"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"        } catch (BadCommandException badCommandException) {","lastModifiedDate":"2023-03-25"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, MISSING_SET_QUESTIONS);","lastModifiedDate":"2023-03-25"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(badCommandException, MISSING_SET_QUESTIONS_NOTES);","lastModifiedDate":"2023-03-25"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"        } catch (TokenizerException tokenizerException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, TOKENIZER_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(tokenizerException, TOKENIZER_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"     * User input index ranges from 1 to 5.","lastModifiedDate":"2023-03-25"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"     * Since the questions have a unique and fixed index, this function maps the user input index to the real index","lastModifiedDate":"2023-03-25"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"     * of the question in the questions list.","lastModifiedDate":"2023-03-25"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"     * @return indexQuestionMap The hashmap with display index as key and question index as value.","lastModifiedDate":"2023-03-27"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"    public HashMap\u003cInteger, Integer\u003e mapInputToQuestion() {","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cInteger, Integer\u003e indexQuestionMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"        int displayIndex \u003d INDEX_ONE;","lastModifiedDate":"2023-03-27"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"        for (int index : this.randomQuestionIndexes) {","lastModifiedDate":"2023-03-25"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"            indexQuestionMap.put(displayIndex, index);","lastModifiedDate":"2023-03-27"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"            displayIndex +\u003d INDEX_ONE;","lastModifiedDate":"2023-03-27"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"        return indexQuestionMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"     * Add this index to favorite list and print the question to be added.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"     * A valid index will only be added(i.e. passed validateCommand()) if there is a set of questions gotten previously","lastModifiedDate":"2023-03-27"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"     * @param questionIndex User input of the index of question to be added to favorite list.","lastModifiedDate":"2023-03-25"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If there is not a set of question generated yet.","lastModifiedDate":"2023-03-25"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"    public void addFavQuestion(String questionIndex) throws BadCommandException, TokenizerException, StorageException {","lastModifiedDate":"2023-03-27"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"        int questionIndexInt \u003d Integer.parseInt(questionIndex);","lastModifiedDate":"2023-03-25"},{"lineNumber":187,"author":{"gitId":"wenxin-c"},"content":"        if (!questionList.hasRandomQuestionIndexes()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":188,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(MISSING_SET_QUESTIONS);","lastModifiedDate":"2023-03-25"},{"lineNumber":189,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":190,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cInteger, Integer\u003e indexQuestionMap \u003d mapInputToQuestion();","lastModifiedDate":"2023-03-25"},{"lineNumber":191,"author":{"gitId":"wenxin-c"},"content":"        int indexToAdd \u003d indexQuestionMap.get(questionIndexInt);","lastModifiedDate":"2023-03-25"},{"lineNumber":192,"author":{"gitId":"wenxin-c"},"content":"        questionList.addFavListIndex(indexToAdd);","lastModifiedDate":"2023-03-27"},{"lineNumber":193,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":194,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":195,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":195}},{"path":"src/main/java/wellnus/reflection/feature/QuestionList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.storage.ReflectionTokenizer;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.storage.Storage;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":" * This class contains the list of questions available in reflect feature,","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":" * and the list of indexes of favorite questions liked by the user.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":" * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":" * This class calls methods to load the list of indexes of favorite questions from data file,","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":" * and save the updated data into data file.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":" * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":" * It also stores the indexes of the previous set of questions(i.e. set of 5 random indexes)","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":" * which will then be used for other commands.","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"public class QuestionList {","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    // Questions are adopted from website: https://www.usa.edu/blog/self-discovery-questions/","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String[] QUESTIONS \u003d {","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"        \"What are three of my most cherished personal values?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"        \"What is my purpose in life?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"        \"What is my personality type?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        \"Did I make time for myself this week?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        \"Am I making time for my social life?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        \"What scares me the most right now?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"        \"What is something I find inspiring?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"        \"What is something that brings me joy?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"        \"When is the last time I gave back to others?\",","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        \"What matters to me most right now?\"","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    };","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    // TODO: To be changed/updated at later stages if question size increases","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    private static final int TOTAL_NUM_QUESTIONS \u003d 10;","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    private static final int RANDOM_NUMBER_UPPERBOUND \u003d 10;","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    private static final int INCREMENT_ONE \u003d 1;","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    private static final String TOTAL_NUM_QUESTION_ASSERTIONS \u003d \"The total number of questions is 10.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    private static final String ADD_FAV_SUCCESS_ONE \u003d \"You have added question: \";","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    private static final String ADD_FAV_SUCCESS_TWO \u003d \" into favorite list!!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"    private static final String DUPLICATE_LIKE \u003d \" is already in the favorite list!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    private static final String STORAGE_ERROR \u003d \"The file data cannot be stored properly!!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    private static final String TOKENIZER_ERROR \u003d \"The data cannot be tokenized for storage properly!!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    private static final String DOT \u003d \".\";","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    private static final String FILE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    private static final RandomNumberGenerator RANDOM_NUMBER_GENERATOR \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"            new RandomNumberGenerator(RANDOM_NUMBER_UPPERBOUND);","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ReflectQuestionListLogger\");","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean HAS_RANDOM_QUESTIONS \u003d true;","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean NOT_HAS_RANDOM_QUESTIONS \u003d false;","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean HAS_FAV_QUESTIONS \u003d true;","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean NOT_HAS_FAV_QUESTIONS \u003d false;","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"    private ArrayList\u003cReflectionQuestion\u003e questions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    private Set\u003cInteger\u003e randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    private ArrayList\u003cSet\u003cInteger\u003e\u003e dataIndex;","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    private Storage storage;","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"    //@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     * Constructor to create a SelfReflection object and set up the questions available.","lastModifiedDate":"2023-03-25"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    public QuestionList() {","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-27"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"            storage \u003d new Storage();","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(storageException, STORAGE_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndexInitialSetup();","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"            this.loadQuestionData();","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"        } catch (StorageException storageException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, TOKENIZER_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(storageException, TOKENIZER_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"        } catch (TokenizerException tokenizerException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.WARNING, STORAGE_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(tokenizerException, STORAGE_ERROR);","lastModifiedDate":"2023-03-27"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"        setUpQuestions();","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"        assert questions.size() \u003d\u003d TOTAL_NUM_QUESTIONS : TOTAL_NUM_QUESTION_ASSERTIONS;","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     * Load the pool of introspective questions available for users.","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"    public void setUpQuestions() {","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"        for (String question : QUESTIONS) {","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"            addReflectQuestion(question);","lastModifiedDate":"2023-03-27"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"     * Create a ReflectionQuestion object for each question and add to questions list.","lastModifiedDate":"2023-03-27"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"     * @param question String of question description.","lastModifiedDate":"2023-03-27"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"    public void addReflectQuestion(String question) {","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"        ReflectionQuestion newQuestion \u003d new ReflectionQuestion(question);","lastModifiedDate":"2023-03-27"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"        questions.add(newQuestion);","lastModifiedDate":"2023-03-27"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"    public void setDataIndex(ArrayList\u003cSet\u003cInteger\u003e\u003e dataIndex) {","lastModifiedDate":"2023-03-27"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex \u003d dataIndex;","lastModifiedDate":"2023-03-27"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"    public ArrayList\u003cSet\u003cInteger\u003e\u003e getDataIndex() {","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"        return dataIndex;","lastModifiedDate":"2023-03-25"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"     * Set up initial data file.\u003cbr/\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     * Set up the arrayList and set in the event that datafile is corrupted.","lastModifiedDate":"2023-03-28"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"    public void dataIndexInitialSetup() {","lastModifiedDate":"2023-03-28"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"        HashSet\u003cInteger\u003e setLike \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"        HashSet\u003cInteger\u003e setPrev \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex.add(setLike);","lastModifiedDate":"2023-03-27"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex.add(setPrev);","lastModifiedDate":"2023-03-27"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"     * Tokenize the indexes of liked questions and store them in a data file.","lastModifiedDate":"2023-03-27"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"     * @throws TokenizerException If there is error during tokenization","lastModifiedDate":"2023-03-27"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"     * @throws StorageException If data cannot be stored properly","lastModifiedDate":"2023-03-27"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"    public void storeQuestionData() throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cString\u003e tokenizedQuestionList \u003d reflectionTokenizer.tokenize(this.dataIndex);","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"        storage.saveData(tokenizedQuestionList, FILE_NAME);","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"     * Load a string of integers from data file and detokenize it into the set of indexes of favorite questions.","lastModifiedDate":"2023-03-27"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"     * @throws StorageException If there is error during tokenization","lastModifiedDate":"2023-03-27"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"     * @throws TokenizerException If there is error during detokenization","lastModifiedDate":"2023-03-27"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"    public void loadQuestionData() throws StorageException, TokenizerException {","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cString\u003e loadedQuestionList \u003d storage.loadData(FILE_NAME);","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e detokenizedQuestionList \u003d reflectionTokenizer.detokenize(loadedQuestionList);","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"        this.setDataIndex(detokenizedQuestionList);","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d this.dataIndex.get(INDEX_ONE);","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"     * Generate a set of 5 distinct random numbers from 0-9 which will then be used as indexes to","lastModifiedDate":"2023-03-27"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"     * select 5 random questions.","lastModifiedDate":"2023-03-27"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"    public void setRandomQuestionIndexes() throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d RANDOM_NUMBER_GENERATOR.generateRandomNumbers();","lastModifiedDate":"2023-03-25"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e updatedQuestionData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"        Set\u003cInteger\u003e favIndexList \u003d this.dataIndex.get(INDEX_ZERO);","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"        updatedQuestionData.add(favIndexList);","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"        updatedQuestionData.add(this.randomQuestionIndexes);","lastModifiedDate":"2023-03-28"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"        this.setDataIndex(updatedQuestionData);","lastModifiedDate":"2023-03-28"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"        this.storeQuestionData();","lastModifiedDate":"2023-03-28"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"    public void setRandomQuestionIndexes(HashSet\u003cInteger\u003e randomQuestionIndexes) {","lastModifiedDate":"2023-03-25"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes \u003d randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"    public void clearRandomQuestionIndexes() {","lastModifiedDate":"2023-03-25"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"        this.randomQuestionIndexes.clear();","lastModifiedDate":"2023-03-25"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"    public Set\u003cInteger\u003e getRandomQuestionIndexes() {","lastModifiedDate":"2023-03-25"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"        return this.randomQuestionIndexes;","lastModifiedDate":"2023-03-25"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"    public ArrayList\u003cReflectionQuestion\u003e getAllQuestions() {","lastModifiedDate":"2023-03-25"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"        return questions;","lastModifiedDate":"2023-03-25"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":187,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":188,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":189,"author":{"gitId":"wenxin-c"},"content":"     * Add the index of a liked question into fav list.\u003cbr/\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":190,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":191,"author":{"gitId":"wenxin-c"},"content":"     * A valid index will only be added(i.e. passed validateCommand())","lastModifiedDate":"2023-03-27"},{"lineNumber":192,"author":{"gitId":"wenxin-c"},"content":"     * if the question is not yet in the favorite list.\u003cbr/\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":193,"author":{"gitId":"wenxin-c"},"content":"     * Indexes of all favorite questions will be stored in data file every time a question is liked.","lastModifiedDate":"2023-03-27"},{"lineNumber":194,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":195,"author":{"gitId":"wenxin-c"},"content":"     * @param indexToAdd The index of the question liked by user","lastModifiedDate":"2023-03-27"},{"lineNumber":196,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":197,"author":{"gitId":"wenxin-c"},"content":"    public void addFavListIndex(int indexToAdd) throws StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":198,"author":{"gitId":"wenxin-c"},"content":"        if (this.dataIndex.get(INDEX_ZERO).contains(indexToAdd)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":199,"author":{"gitId":"wenxin-c"},"content":"            UI.printOutputMessage(questions.get(indexToAdd).toString() + DUPLICATE_LIKE);","lastModifiedDate":"2023-03-27"},{"lineNumber":200,"author":{"gitId":"wenxin-c"},"content":"            return;","lastModifiedDate":"2023-03-27"},{"lineNumber":201,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":202,"author":{"gitId":"wenxin-c"},"content":"        this.dataIndex.get(INDEX_ZERO).add(indexToAdd);","lastModifiedDate":"2023-03-27"},{"lineNumber":203,"author":{"gitId":"wenxin-c"},"content":"        this.storeQuestionData();","lastModifiedDate":"2023-03-28"},{"lineNumber":204,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(ADD_FAV_SUCCESS_ONE + this.questions.get(indexToAdd).toString() + ADD_FAV_SUCCESS_TWO);","lastModifiedDate":"2023-03-27"},{"lineNumber":205,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":206,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":207,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":208,"author":{"gitId":"wenxin-c"},"content":"     * Check whether a set of random question has been generated by checking the size of the set of question indexes.","lastModifiedDate":"2023-03-27"},{"lineNumber":209,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":210,"author":{"gitId":"wenxin-c"},"content":"     * @return True for non-empty set and false for empty set","lastModifiedDate":"2023-03-27"},{"lineNumber":211,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":212,"author":{"gitId":"wenxin-c"},"content":"    public boolean hasRandomQuestionIndexes() {","lastModifiedDate":"2023-03-27"},{"lineNumber":213,"author":{"gitId":"wenxin-c"},"content":"        if (this.randomQuestionIndexes.isEmpty()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":214,"author":{"gitId":"wenxin-c"},"content":"            return NOT_HAS_RANDOM_QUESTIONS;","lastModifiedDate":"2023-03-27"},{"lineNumber":215,"author":{"gitId":"wenxin-c"},"content":"        } else {","lastModifiedDate":"2023-03-27"},{"lineNumber":216,"author":{"gitId":"wenxin-c"},"content":"            return HAS_RANDOM_QUESTIONS;","lastModifiedDate":"2023-03-27"},{"lineNumber":217,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":218,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":219,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":220,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":221,"author":{"gitId":"wenxin-c"},"content":"     * Check whether there is a set of favorite questions by checking the size of the set of favorite question indexes.","lastModifiedDate":"2023-03-27"},{"lineNumber":222,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":223,"author":{"gitId":"wenxin-c"},"content":"     * @return True for non-empty set and false for empty set","lastModifiedDate":"2023-03-27"},{"lineNumber":224,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":225,"author":{"gitId":"wenxin-c"},"content":"    public boolean hasFavQuestions() {","lastModifiedDate":"2023-03-27"},{"lineNumber":226,"author":{"gitId":"wenxin-c"},"content":"        if (this.dataIndex.get(INDEX_ZERO).isEmpty()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":227,"author":{"gitId":"wenxin-c"},"content":"            return NOT_HAS_FAV_QUESTIONS;","lastModifiedDate":"2023-03-27"},{"lineNumber":228,"author":{"gitId":"wenxin-c"},"content":"        } else {","lastModifiedDate":"2023-03-27"},{"lineNumber":229,"author":{"gitId":"wenxin-c"},"content":"            return HAS_FAV_QUESTIONS;","lastModifiedDate":"2023-03-27"},{"lineNumber":230,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":231,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":232,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":233,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":234,"author":{"gitId":"wenxin-c"},"content":"     * Get a string of all favorite questions based on the favorite question indexes.","lastModifiedDate":"2023-03-27"},{"lineNumber":235,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":236,"author":{"gitId":"wenxin-c"},"content":"     * @return String of favorite questions","lastModifiedDate":"2023-03-27"},{"lineNumber":237,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":238,"author":{"gitId":"wenxin-c"},"content":"    public String getFavQuestions() throws IndexOutOfBoundsException {","lastModifiedDate":"2023-03-28"},{"lineNumber":239,"author":{"gitId":"wenxin-c"},"content":"        String questionString \u003d EMPTY_STRING;","lastModifiedDate":"2023-03-27"},{"lineNumber":240,"author":{"gitId":"wenxin-c"},"content":"        int displayIndex \u003d INDEX_ONE;","lastModifiedDate":"2023-03-27"},{"lineNumber":241,"author":{"gitId":"wenxin-c"},"content":"        for (int questionIndex : this.dataIndex.get(INDEX_ZERO)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":242,"author":{"gitId":"wenxin-c"},"content":"            questionString +\u003d (displayIndex + DOT + this.questions.get(questionIndex).toString()","lastModifiedDate":"2023-03-27"},{"lineNumber":243,"author":{"gitId":"wenxin-c"},"content":"                    + System.lineSeparator());","lastModifiedDate":"2023-03-27"},{"lineNumber":244,"author":{"gitId":"wenxin-c"},"content":"            displayIndex +\u003d INCREMENT_ONE;","lastModifiedDate":"2023-03-27"},{"lineNumber":245,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":246,"author":{"gitId":"wenxin-c"},"content":"        return questionString;","lastModifiedDate":"2023-03-27"},{"lineNumber":247,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":248,"author":{"gitId":"wenxin-c"},"content":"    //@@author","lastModifiedDate":"2023-03-27"},{"lineNumber":249,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":250,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":250}},{"path":"src/main/java/wellnus/reflection/feature/RandomNumberGenerator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.Random;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":" * Generate a set of 5 distinct random integers ranging from 0 to 9\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":" * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":" * This set of random numbers will be used as indexes to get a set of random questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"public class RandomNumberGenerator {","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final String NUM_SELECTED_QUESTIONS_ASSERTION \u003d \"The number of selected questions should be 5.\";","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final int LOWER_BOUND \u003d 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final int ONE_OFFSET \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final int NUM_OF_RANDOM_NUMBERS \u003d 5;","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private int upperBound;","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"     * Constructor with the upper limit of the random number as an argument.","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"     * @param upperBound The max value of the random number is (upperBound - 1)","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    public RandomNumberGenerator(int upperBound) {","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        this.upperBound \u003d upperBound;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"     * Generate a set of 5 random numbers.\u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"     * Each number num: num \u003e\u003d 0 and num \u003c\u003d (maxSize - 1)","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"     * @return Set of 5 random numbers","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    public Set\u003cInteger\u003e generateRandomNumbers() {","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        Set\u003cInteger\u003e randomNumbers \u003d new Random().ints(LOWER_BOUND, this.upperBound - ONE_OFFSET)","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"                .distinct()","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"                .limit(NUM_OF_RANDOM_NUMBERS)","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"                .boxed()","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        assert randomNumbers.size() \u003d\u003d NUM_OF_RANDOM_NUMBERS : NUM_SELECTED_QUESTIONS_ASSERTION;","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        return randomNumbers;","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":46}},{"path":"src/main/java/wellnus/reflection/feature/ReflectUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":" * This section is to be updated with main UI class","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"public class ReflectUi extends TextUi {","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"    private static final String SEPARATOR \u003d \"\u003d\";","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"     * Call setSeparator() method inherited from TextUi superclass to re-define separator.","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    public ReflectUi() {","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"        setSeparator(SEPARATOR);","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private void printLogo(String logo) {","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(logo);","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    protected void printLogoWithSeparator(String logo) {","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        printSeparator();","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"        printLogo(logo);","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":28}},{"path":"src/main/java/wellnus/reflection/feature/ReflectionManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.manager.Manager;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.command.FavoriteCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.command.GetCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"import wellnus.reflection.command.HelpCommand;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.command.HomeCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.command.LikeCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":" * The manager for self reflection section.\u003cbr/\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":" * This class oversees the command execution for self reflection section.","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"public class ReflectionManager extends Manager {","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"    public static final String FEATURE_HELP_DESCRIPTION \u003d \"Reflection (reflect) - Take some time to pause and reflect \"","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"            + \"with our specially curated list of questions and reflection management tools.\";","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    public static final String FEATURE_NAME \u003d \"reflect\";","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"ReflectionManagerLogger\");","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND \u003d \"get\";","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"    private static final String HELP_COMMAND \u003d \"help\";","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND \u003d \"like\";","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String FAV_COMMAND \u003d \"fav\";","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String NO_ELEMENT_MESSAGE \u003d \"There is no new line of input, please key in inputs.\";","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND_MESSAGE \u003d \"Please check the available commands \"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"            + \"and enter a valid command.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    private static final String COMMAND_TYPE_ASSERTION \u003d \"Command type should have length greater than 0\";","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARGUMENT_PAYLOAD_ASSERTION \u003d \"Argument-payload pairs cannot be empty\";","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    private static final String LOGO \u003d","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"            \"  _____ ______ _      ______   _____  ______ ______ _      ______ _____ _______ _____ ____  _   _ \\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"                    + \" / ____|  ____| |    |  ____| |  __ \\\\|  ____|  ____| \"","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"                    + \"|    |  ____/ ____|__   __|_   _/ __ \\\\| \\\\ | |\\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"                    + \"| (___ | |__  | |    | |__    | |__) | |__  | |__  | \"","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"                    + \"|    | |__ | |       | |    | || |  | |  \\\\| |\\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"                    + \" \\\\___ \\\\|  __| | |    |  __|   |  _  /|  __| |  __| \"","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"                    + \"| |    |  __|| |       | |    | || |  | | . ` |\\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"                    + \" ____) | |____| |____| |      | | \\\\ \\\\| |____| |    \"","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"                    + \"| |____| |___| |____   | |   _| || |__| | |\\\\  |\\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"                    + \"|_____/|______|______|_|      |_|  \\\\_\\\\______|_|    \"","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"                    + \"|______|______\\\\_____|  |_|  \"","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"                    + \"|_____\\\\____/|_| \\\\_|\\n\";","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    private static final String GREETING_MESSAGE \u003d \"Welcome to WellNUS++ Self Reflection section :D\"","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"Feel very occupied and cannot find time to self reflect?\"","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"            + System.lineSeparator() + \"No worries, this section will give you the opportunity to reflect \"","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"            + \"and improve on yourself!!\";","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_COMMAND \u003d 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_EXIT_INITIAL \u003d false;","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    private static final ReflectUi UI \u003d new ReflectUi();","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    // This attribute should be set as static to avoid confusion if a new object is created.","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    // It means exit from self reflection back to main interface","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    private static boolean isExit;","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"    private String commandType;","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"    private HashMap\u003cString, String\u003e argumentPayload;","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"    private QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"     * Constructor to set initial isExit status to false and load the reflection questions.","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    public ReflectionManager() {","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"        setIsExit(IS_EXIT_INITIAL);","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"    public static void setIsExit(boolean status) {","lastModifiedDate":"2023-03-12"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"        isExit \u003d status;","lastModifiedDate":"2023-03-12"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    public static boolean getIsExit() {","lastModifiedDate":"2023-03-12"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"        return isExit;","lastModifiedDate":"2023-03-12"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"    public HashMap\u003cString, String\u003e getArgumentPayload() {","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"        return argumentPayload;","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"        return commandType;","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"     * Get Self Reflection feature name.","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"     * @return Feature name: reflect","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"    public String getFeatureName() {","lastModifiedDate":"2023-03-11"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"        return FEATURE_NAME;","lastModifiedDate":"2023-03-11"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"     * Abstract function to ensure developers add in a getter for the feature\u0027s help description.","lastModifiedDate":"2023-03-23"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"     * This description will be shown when the user types in the help command. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"     * The description should be a brief overview of what the feature does. \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"     * For example: \u003cbr\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"     * \"reflect: Reflect is your go-to tool to get, save and reflect on our specially","lastModifiedDate":"2023-03-23"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"     * curated list of questions to reflect on\"","lastModifiedDate":"2023-03-23"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-11"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     * @return String of the feature\u0027s help description","lastModifiedDate":"2023-03-23"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-11"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    public String getFeatureHelpDescription() {","lastModifiedDate":"2023-03-23"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"        return FEATURE_HELP_DESCRIPTION;","lastModifiedDate":"2023-03-23"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"     * Set command argument and payload pairs from user inputs.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"     * This is to be used to generate command.","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"     * @param inputCommand Read from user input","lastModifiedDate":"2023-03-11"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command was given","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"    public void setArgumentPayload(String inputCommand) throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"        argumentPayload \u003d commandParser.parseUserInput(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"        assert argumentPayload.size() \u003e EMPTY_COMMAND : ARGUMENT_PAYLOAD_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"     * Set the main command type to determine which command to create.","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * @param inputCommand Read from user input","lastModifiedDate":"2023-03-11"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command was given","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"    public void setCommandType(String inputCommand) throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"        commandType \u003d commandParser.getMainArgument(inputCommand);","lastModifiedDate":"2023-03-18"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"        assert commandType.length() \u003e EMPTY_COMMAND : COMMAND_TYPE_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"    //@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"     * Print greeting logo and message.","lastModifiedDate":"2023-03-25"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"    public void greet() {","lastModifiedDate":"2023-03-25"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"        UI.printLogoWithSeparator(LOGO);","lastModifiedDate":"2023-03-25"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(GREETING_MESSAGE);","lastModifiedDate":"2023-03-25"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"    //@@author","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"    //@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"     * Main entry point of self reflection section.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"     * It prints out greeting messages, listen to and execute user commands.","lastModifiedDate":"2023-03-15"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"    public void runEventDriver() {","lastModifiedDate":"2023-03-12"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"        setIsExit(false);","lastModifiedDate":"2023-03-12"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"        this.greet();","lastModifiedDate":"2023-03-25"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-12"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"            try {","lastModifiedDate":"2023-03-12"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"                String inputCommand \u003d UI.getCommand();","lastModifiedDate":"2023-03-12"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"                setCommandType(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"                setArgumentPayload(inputCommand);","lastModifiedDate":"2023-03-12"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"                executeCommands();","lastModifiedDate":"2023-03-14"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"            } catch (NoSuchElementException noSuchElement) {","lastModifiedDate":"2023-03-12"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"                LOGGER.log(Level.INFO, NO_ELEMENT_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"                UI.printErrorFor(noSuchElement, NO_ELEMENT_MESSAGE);","lastModifiedDate":"2023-03-12"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"            } catch (BadCommandException badCommand) {","lastModifiedDate":"2023-03-12"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"                LOGGER.log(Level.INFO, INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-17"},{"lineNumber":167,"author":{"gitId":"wenxin-c"},"content":"                UI.printErrorFor(badCommand, INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":168,"author":{"gitId":"wenxin-c"},"content":"            }","lastModifiedDate":"2023-03-12"},{"lineNumber":169,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":170,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":171,"author":{"gitId":"wenxin-c"},"content":"    //@@author","lastModifiedDate":"2023-03-25"},{"lineNumber":172,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":173,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":174,"author":{"gitId":"wenxin-c"},"content":"     * Decide which command to create based on command type.\u003cbr/\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":175,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":176,"author":{"gitId":"wenxin-c"},"content":"     * Commands available at this moment are:","lastModifiedDate":"2023-03-10"},{"lineNumber":177,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eGet a random set of reflection questions\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":178,"author":{"gitId":"wenxin-c"},"content":"     * \u003cli\u003eReturn back main interface\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":179,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":180,"author":{"gitId":"wenxin-c"},"content":"     * @throws BadCommandException If an invalid command was given","lastModifiedDate":"2023-03-14"},{"lineNumber":181,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":182,"author":{"gitId":"wenxin-c"},"content":"    public void executeCommands() throws BadCommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":183,"author":{"gitId":"wenxin-c"},"content":"        assert commandType.length() \u003e EMPTY_COMMAND : COMMAND_TYPE_ASSERTION;","lastModifiedDate":"2023-03-16"},{"lineNumber":184,"author":{"gitId":"wenxin-c"},"content":"        switch (commandType) {","lastModifiedDate":"2023-03-10"},{"lineNumber":185,"author":{"gitId":"wenxin-c"},"content":"        case GET_COMMAND:","lastModifiedDate":"2023-03-10"},{"lineNumber":186,"author":{"gitId":"wenxin-c"},"content":"            GetCommand getQuestionsCmd \u003d new GetCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":187,"author":{"gitId":"wenxin-c"},"content":"            getQuestionsCmd.execute();","lastModifiedDate":"2023-03-10"},{"lineNumber":188,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-10"},{"lineNumber":189,"author":{"gitId":"wenxin-c"},"content":"        case HOME_COMMAND:","lastModifiedDate":"2023-03-16"},{"lineNumber":190,"author":{"gitId":"wenxin-c"},"content":"            HomeCommand returnCmd \u003d new HomeCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":191,"author":{"gitId":"wenxin-c"},"content":"            returnCmd.execute();","lastModifiedDate":"2023-03-10"},{"lineNumber":192,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-10"},{"lineNumber":193,"author":{"gitId":"wenxin-c"},"content":"        case LIKE_COMMAND:","lastModifiedDate":"2023-03-25"},{"lineNumber":194,"author":{"gitId":"wenxin-c"},"content":"            LikeCommand likeCmd \u003d new LikeCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":195,"author":{"gitId":"wenxin-c"},"content":"            likeCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":196,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-25"},{"lineNumber":197,"author":{"gitId":"wenxin-c"},"content":"        case FAV_COMMAND:","lastModifiedDate":"2023-03-25"},{"lineNumber":198,"author":{"gitId":"wenxin-c"},"content":"            FavoriteCommand favCmd \u003d new FavoriteCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":199,"author":{"gitId":"wenxin-c"},"content":"            favCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":200,"author":{"gitId":"wenxin-c"},"content":"            break;","lastModifiedDate":"2023-03-25"},{"lineNumber":201,"author":{"gitId":"BernardLesley"},"content":"        case HELP_COMMAND:","lastModifiedDate":"2023-03-28"},{"lineNumber":202,"author":{"gitId":"BernardLesley"},"content":"            HelpCommand helpCmd \u003d new HelpCommand(argumentPayload);","lastModifiedDate":"2023-03-28"},{"lineNumber":203,"author":{"gitId":"BernardLesley"},"content":"            helpCmd.execute();","lastModifiedDate":"2023-03-28"},{"lineNumber":204,"author":{"gitId":"BernardLesley"},"content":"            break;","lastModifiedDate":"2023-03-28"},{"lineNumber":205,"author":{"gitId":"wenxin-c"},"content":"        default:","lastModifiedDate":"2023-03-10"},{"lineNumber":206,"author":{"gitId":"wenxin-c"},"content":"            throw new BadCommandException(INVALID_COMMAND_MESSAGE);","lastModifiedDate":"2023-03-14"},{"lineNumber":207,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":208,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":209,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":210,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":191,"BernardLesley":6,"nichyjt":13}},{"path":"src/main/java/wellnus/reflection/feature/ReflectionQuestion.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection.feature;","lastModifiedDate":"2023-03-28"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"//@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":" * ReflectQuestion class is used to create reflect question objects.","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"public class ReflectionQuestion {","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_QUESTION \u003d 0;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_QUESTION_MSG \u003d \"Question description cannot be empty.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"    private String questionDescription;","lastModifiedDate":"2023-03-11"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"     * Constructor to create a ReflectionQuestion object and initialise question description.","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"     * @param questionDescription The reflection question description","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    public ReflectionQuestion(String questionDescription) {","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"        assert questionDescription.length() \u003e EMPTY_QUESTION : EMPTY_QUESTION_MSG;","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"        this.questionDescription \u003d questionDescription;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"     * Convert each reflect question to a string to be printed.","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"     * @return Question description with its status","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    public String toString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"        return questionDescription;","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"wenxin-c":32}},{"path":"src/main/java/wellnus/storage/AtomicHabitTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":" * Class to tokenize and detokenize the AtomicHabit list. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"public class AtomicHabitTokenizer implements Tokenizer\u003cAtomicHabit\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"    private static final String DESCRIPTION_KEY \u003d \"description\";","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    private static final String COUNT_KEY \u003d \"count\";","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"    private static final String PARAMETER_DELIMITER \u003d \"--\";","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    private static final String DETOKENIZE_ERROR_MESSAGE \u003d \"Detokenization failed!\"","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"            + \"The file might be corrupted\";","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_FIRST \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    private static final int NUM_ATOMIC_HABIT_PARAMETER \u003d 2;","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"    private String[] splitTokenizedHabitIntoParameter(String tokenizedHabit) {","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"        tokenizedHabit \u003d tokenizedHabit.strip();","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"        int noLimit \u003d -1;","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"        String[] rawStrings \u003d tokenizedHabit.split(PARAMETER_DELIMITER, noLimit);","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"        rawStrings \u003d Arrays.copyOfRange(rawStrings, INDEX_FIRST, rawStrings.length);","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"        String[] cleanString \u003d new String[rawStrings.length];","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c rawStrings.length; ++i) {","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"            String currentCommand \u003d rawStrings[i];","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"            currentCommand \u003d currentCommand.strip();","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"            cleanString[i] \u003d currentCommand;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"        return cleanString;","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"    private AtomicHabit parseTokenizedHabit(String tokenizedHabit) throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e parameterHashMap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"        String[] parameterStrings \u003d splitTokenizedHabitIntoParameter(tokenizedHabit);","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"            for (String parameterString : parameterStrings) {","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"                int i \u003d parameterString.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"                String parameterKey \u003d parameterString.substring(INDEX_ZERO, i);","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"                String parameterValue \u003d parameterString.substring(i).trim();","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"                parameterHashMap.put(parameterKey, parameterValue);","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"        } catch (StringIndexOutOfBoundsException stringIndexOutOfBoundsException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(DETOKENIZE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        if (!parameterHashMap.containsKey(DESCRIPTION_KEY) || !parameterHashMap.containsKey(COUNT_KEY)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(DETOKENIZE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"        if (parameterHashMap.size() !\u003d NUM_ATOMIC_HABIT_PARAMETER) {","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(DETOKENIZE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"        String description \u003d parameterHashMap.get(DESCRIPTION_KEY);","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        String countString \u003d parameterHashMap.get(COUNT_KEY);","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"            int count \u003d Integer.parseInt(countString);","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"            AtomicHabit parsedHabit \u003d new AtomicHabit(description, count);","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"            return parsedHabit;","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(DETOKENIZE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"     * Tokenize List of Atomic Habits to be saved as ArrayList of Strings. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"     * Each habit will be tokenized with the following format:","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"     * --description [description of habit] --count [count of habit]. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"     * @param habitsToTokenize List of atomic habits to be tokenized as ArrayList of strings.","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"     * @return ArrayList of Strings representing the tokenized habits that we can write to storage.","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"    public ArrayList\u003cString\u003e tokenize(ArrayList\u003cAtomicHabit\u003e habitsToTokenize) {","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e tokenizedHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"        for (AtomicHabit habit : habitsToTokenize) {","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"            String tokenizedHabit \u003d PARAMETER_DELIMITER + DESCRIPTION_KEY","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"                    + \" \" + habit.getDescription()","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"                    + \" \" + PARAMETER_DELIMITER + COUNT_KEY","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"                    + \" \" + habit.getCount();","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"            tokenizedHabits.add(tokenizedHabit);","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"        return tokenizedHabits;","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"     * Convert strings of tokenized AtomicHabit into ArrayList of AtomicHabit. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"     * This method can be called in the constructor of AtomicHabitManager to detokenize.","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"     * ArrayList of atomic habits from storage. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"     * @param tokenizedAtomicHabits List of tokenized atomic habit strings from the storage.","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"     * @return ArrayList containing all the atomic habit saved in the storage.","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"     * @throws TokenizerException When the data can\u0027t be detokenized.","lastModifiedDate":"2023-03-22"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"    public ArrayList\u003cAtomicHabit\u003e detokenize(ArrayList\u003cString\u003e tokenizedAtomicHabits) throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e detokenizedAtomicHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"        for (String tokenizedString : tokenizedAtomicHabits) {","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"            AtomicHabit parsedHabit \u003d parseTokenizedHabit(tokenizedString);","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"            detokenizedAtomicHabits.add(parsedHabit);","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"        return detokenizedAtomicHabits;","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":104}},{"path":"src/main/java/wellnus/storage/ReflectionTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":" * Class to tokenize and detokenize the Index for \u0027like\u0027 and \u0027pref\u0027 command in Reflection Feature. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"public class ReflectionTokenizer implements Tokenizer\u003cSet\u003cInteger\u003e\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"    private static final String INDEX_DELIMITER \u003d \",\";","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_TEN \u003d 10;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    private static final int TOKENIZER_INDEX_ARRAYLIST_SIZE \u003d 2;","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    private static final String LIKE_KEY \u003d \"like\";","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    private static final String PREF_KEY \u003d \"pref\";","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"    private static final String COLON_CHARACTER \u003d \":\";","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    private static final int NO_LIMIT \u003d -1;","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    private static final String DETOKENIZE_ERROR_MESSAGE \u003d \"Detokenization failed! \"","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"            + \"The file might be corrupted\";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"    private String getTokenizedIndexes(String key, Set\u003cInteger\u003e indexesToTokenize) {","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedIndexes \u003d key + COLON_CHARACTER;","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"        for (int index : indexesToTokenize) {","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"            tokenizedIndexes \u003d tokenizedIndexes + index + INDEX_DELIMITER;","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"        if (indexesToTokenize.size() !\u003d INDEX_ZERO) {","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"            tokenizedIndexes \u003d tokenizedIndexes.substring(INDEX_ZERO, tokenizedIndexes.length() - INDEX_ONE);","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"        return tokenizedIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    private String splitParameter(String tokenizedRawString, String parameterKey) throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"        int indexSplit \u003d tokenizedRawString.indexOf(COLON_CHARACTER);","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"        String parameter \u003d \"\";","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedIndexes \u003d \"\";","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"            parameter \u003d tokenizedRawString.substring(INDEX_ZERO, indexSplit);","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"            if (!parameter.equals(parameterKey)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"                throw new TokenizerException(DETOKENIZE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"            tokenizedIndexes \u003d tokenizedRawString.substring(indexSplit + INDEX_ONE).trim();","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"        } catch (StringIndexOutOfBoundsException stringIndexOutOfBoundsException) {","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(DETOKENIZE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        return tokenizedIndexes;","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"    private String[] splitTokenizedIndex(String tokenizedIndexes) {","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"        tokenizedIndexes \u003d tokenizedIndexes.strip();","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"        String[] inputStrings \u003d tokenizedIndexes.split(INDEX_DELIMITER, NO_LIMIT);","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"        String[] outputStrings \u003d new String[inputStrings.length];","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"        for (int i \u003d 0; i \u003c inputStrings.length; ++i) {","lastModifiedDate":"2023-03-22"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"            String currentCommand \u003d inputStrings[i];","lastModifiedDate":"2023-03-22"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"            currentCommand \u003d currentCommand.strip();","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"            outputStrings[i] \u003d currentCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"        return outputStrings;","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"    private Set\u003cInteger\u003e getSet(String indexToSplit) throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e outputIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"        if (indexToSplit.isBlank()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"            return outputIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"        String[] splittedString \u003d splitTokenizedIndex(indexToSplit);","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"            for (String indexString : splittedString) {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"                int index \u003d Integer.parseInt(indexString);","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"                if (index \u003c INDEX_ONE || index \u003e INDEX_TEN) {","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"                    throw new TokenizerException(DETOKENIZE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"                }","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"                outputIndexes.add(index);","lastModifiedDate":"2023-03-22"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        } catch (NumberFormatException numberFormatException) {","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"            throw new TokenizerException(DETOKENIZE_ERROR_MESSAGE);","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"        return outputIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"     * Tokenize ArrayList of Set of Integers into strings that can be stored. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"     * ArrayList contains 2 Set of Integers, which corresponds for set of like indexes for the first entry","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"     *      and set of pref indexes for second entry.\u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"     * Each index will be tokenized with the following format:","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"     * like:[list of comma separated index] \u003cbr\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"     * pref:[list of comma separated index] \u003cbr\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"     * @param arrayIndexToTokenize ArrayList that contains set of like indexes for the first entry","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"     *      and set of pref indexes for the second entry. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"     * @return ArrayList of Strings representing the tokenized like indexes and pref indexes that we can","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"     *      write to storage.","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"BernardLesley"},"content":"    public ArrayList\u003cString\u003e tokenize(ArrayList\u003cSet\u003cInteger\u003e\u003e arrayIndexToTokenize) {","lastModifiedDate":"2023-03-27"},{"lineNumber":98,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e tokenizedIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e likeIndexToTokenize \u003d arrayIndexToTokenize.get(INDEX_ZERO);","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e prefIndexToTokenize \u003d arrayIndexToTokenize.get(INDEX_ONE);","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedLike \u003d getTokenizedIndexes(LIKE_KEY, likeIndexToTokenize);","lastModifiedDate":"2023-03-22"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedPref \u003d getTokenizedIndexes(PREF_KEY, prefIndexToTokenize);","lastModifiedDate":"2023-03-22"},{"lineNumber":103,"author":{"gitId":"BernardLesley"},"content":"        tokenizedIndexes.add(tokenizedLike);","lastModifiedDate":"2023-03-22"},{"lineNumber":104,"author":{"gitId":"BernardLesley"},"content":"        tokenizedIndexes.add(tokenizedPref);","lastModifiedDate":"2023-03-22"},{"lineNumber":105,"author":{"gitId":"BernardLesley"},"content":"        return tokenizedIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":106,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"     * Convert strings of tokenized Indexes into ArrayList that contains set of like indexes for the first entry","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"     *      and set of pref indexes for the second entry. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"     * This method can be called in the constructor of ReflectionManager to detokenize.","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"     * ArrayList of indexes from storage. \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"     * @param tokenizedIndex List of tokenized like and pref indexes from the storage.","lastModifiedDate":"2023-03-21"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"     * @return ArrayList that contains set of like indexes for the first entry","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"     *      and set of pref indexes for the second entry \u003cbr\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"     * @throws TokenizerException when the data can\u0027t be detokenized.","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"    public ArrayList\u003cSet\u003cInteger\u003e\u003e detokenize(ArrayList\u003cString\u003e tokenizedIndex) throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e detokenizedIndexes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e detokenizedLike \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e detokenizedPref \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"        if (tokenizedIndex.size() \u003d\u003d TOKENIZER_INDEX_ARRAYLIST_SIZE) {","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"            String rawIndexLike \u003d splitParameter(tokenizedIndex.get(INDEX_ZERO), LIKE_KEY);","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"            String rawIndexPref \u003d splitParameter(tokenizedIndex.get(INDEX_ONE), PREF_KEY);","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"            detokenizedLike \u003d getSet(rawIndexLike);","lastModifiedDate":"2023-03-27"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"            detokenizedPref \u003d getSet(rawIndexPref);","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"        detokenizedIndexes.add(detokenizedLike);","lastModifiedDate":"2023-03-22"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"        detokenizedIndexes.add(detokenizedPref);","lastModifiedDate":"2023-03-22"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"        return detokenizedIndexes;","lastModifiedDate":"2023-03-22"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":134}},{"path":"src/main/java/wellnus/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import java.io.File;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" * Storage is the common interface for all Features to save and load data from. \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":" * To save data, the manager should call \u003ccode\u003esaveData()\u003c/code\u003e and input a list of Strings.","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":" * Each string represents one instance of the tokenized form of the data structure the manager is handling,","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":" * such as ReflectionQuestion or AtomicHabit. \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":" * To load data, the manager should call \u003ccode\u003eloadData()\u003c/code\u003e and input the correct filename of","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":" * the data to be loaded. The filename should be obtained from the public constant Storage.FILE_[name].","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"//@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"public class Storage {","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"    // These constant strings are intentionally made public","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    // to allow any FeatureManager to call the (de)tokenize functions with the correct filename","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"    public static final String FILE_HABIT \u003d \"habit\";","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    public static final String FILE_REFLECT \u003d \"reflect\";","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    protected static final String FILE_DEBUG \u003d \"debug\";","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"    protected static final String DIRECTORY_DEBUG \u003d \"debug\";","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"    // Delimiter constants","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    protected static final String DELIMITER \u003d \" --\" + System.lineSeparator();","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"    protected static final String NEWLINE \u003d System.lineSeparator();","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    private static final String FILE_EXTENTION \u003d \".txt\";","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"    private static final String WORKING_DIRECTORY \u003d \".\";","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"    private static final String DATA_DIRECTORY_NAME \u003d \"data\";","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"    // Message constants","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_GENERAL \u003d \"WellNUS++ faced an internal error in storage!\";","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_MAKE_FILE \u003d \"WellNUS++ couldn\u0027t make the data file!\";","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_MAKE_DIR \u003d \"WellNUS++ couldn\u0027t make the data directory!\";","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_DELETE_FILE \u003d \"WellNUS++ couldn\u0027t delete the data file!\";","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_RESOLVE_PATH \u003d \"WellNUS++ couldn\u0027t resolve a path internally!\";","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_WRITE_FILE \u003d \"WellNUS++ couldn\u0027t write to a file!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_CANNOT_LOAD_FILE \u003d \"WellNUS++ couldn\u0027t load a file!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    private static final String ERROR_INVALID_FILENAME \u003d \"WellNUS++ cannot create a file that is not registered!\";","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_FILENAME_NOT_NULL \u003d \"fileName should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_FILENAME_NOT_EMPTY \u003d \"fileName should have a length \u003e 0!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_PATH_NOT_NULL \u003d \"path should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_LIST_NOT_NULL \u003d \"list input should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_STRING_NOT_NULL \u003d \"string input should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    private static final String ASSERT_FILE_NOT_NULL \u003d \"file input should not be null!\";","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"StorageLogger\");","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_ACCESS_ERROR \u003d \"WellNUS++ has encountered a severe input/output error! \\n\"","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"            + \"Check if file permissions and data directory are properly instantiated?\";","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_MISSING_FILE \u003d \"WellNUS++ could not find a file.\\n\"","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"            + \"Check if this method was called before any data file instantiation?\";","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"    private static final String LOG_INVALID_FILENAME \u003d \"WellNUS++ cannot create the file as its name is invalid.\\n\"","lastModifiedDate":"2023-03-24"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"            + \"Check if its filename is registered in the Storage class.\";","lastModifiedDate":"2023-03-24"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    private static final int FILENAME_EMPTY \u003d 0;","lastModifiedDate":"2023-03-26"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"    private Path wellNusDataDirectory;","lastModifiedDate":"2023-03-19"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"     * Construct an instance of Storage to call saveData and loadData from.","lastModifiedDate":"2023-03-20"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-20"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException when creating the data directory fails","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"    public Storage() throws StorageException {","lastModifiedDate":"2023-03-20"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"        wellNusDataDirectory \u003d Paths.get(WORKING_DIRECTORY, DATA_DIRECTORY_NAME);","lastModifiedDate":"2023-03-20"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        // For safety, check that the data folder actually exists","lastModifiedDate":"2023-03-20"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        // If it doesn\u0027t, create it.","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        verifyDataDirectory();","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"     * Check if the supplied fileName is a valid WellNUS++ file.","lastModifiedDate":"2023-03-24"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"     * @param fileName name of file to be used in WellNUS++","lastModifiedDate":"2023-03-24"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"     * @return boolean representing if the fileName exists","lastModifiedDate":"2023-03-24"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-24"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"    private boolean isValidFileName(String fileName) {","lastModifiedDate":"2023-03-24"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_STRING_NOT_NULL;","lastModifiedDate":"2023-03-24"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        switch (fileName) {","lastModifiedDate":"2023-03-24"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        case FILE_HABIT:","lastModifiedDate":"2023-03-24"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        case FILE_REFLECT:","lastModifiedDate":"2023-03-24"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        case FILE_DEBUG:","lastModifiedDate":"2023-03-24"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"            // fallthrough","lastModifiedDate":"2023-03-24"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"            return true;","lastModifiedDate":"2023-03-24"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        default:","lastModifiedDate":"2023-03-24"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"            return false;","lastModifiedDate":"2023-03-24"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     * Check that the data folder exists. If it does not, try creating it.","lastModifiedDate":"2023-03-20"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException if directory cannot be made","lastModifiedDate":"2023-03-19"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"    private void verifyDataDirectory() throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        assert wellNusDataDirectory !\u003d null : \"wellNusDataDirectory path should be set up!\";","lastModifiedDate":"2023-03-19"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        boolean directoryExists \u003d Files.exists(wellNusDataDirectory);","lastModifiedDate":"2023-03-19"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        if (directoryExists) {","lastModifiedDate":"2023-03-19"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-19"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        createDataFolder(wellNusDataDirectory);","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"     * Creates a \u003ccode\u003eFile\u003c/code\u003e relative to the data folder.","lastModifiedDate":"2023-03-20"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"     * @param fileName data file to retrieve","lastModifiedDate":"2023-03-19"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"    protected File getFile(String fileName) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_FILENAME_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        assert fileName.length() \u003e FILENAME_EMPTY : ASSERT_FILENAME_NOT_EMPTY;","lastModifiedDate":"2023-03-26"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        if (!isValidFileName(fileName)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.WARNING, LOG_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        Path pathToFile;","lastModifiedDate":"2023-03-20"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        File dataFile;","lastModifiedDate":"2023-03-20"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-20"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"            pathToFile \u003d wellNusDataDirectory.resolve(fileName + FILE_EXTENTION);","lastModifiedDate":"2023-03-20"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"            dataFile \u003d pathToFile.toFile();","lastModifiedDate":"2023-03-20"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"        } catch (InvalidPathException exception) {","lastModifiedDate":"2023-03-20"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_RESOLVE_PATH;","lastModifiedDate":"2023-03-20"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-20"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-20"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"        } catch (UnsupportedOperationException exception) {","lastModifiedDate":"2023-03-20"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_GENERAL;","lastModifiedDate":"2023-03-20"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-20"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-20"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        boolean fileExists \u003d dataFile.exists();","lastModifiedDate":"2023-03-19"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        if (!fileExists) {","lastModifiedDate":"2023-03-19"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"            createFile(dataFile);","lastModifiedDate":"2023-03-19"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"        return dataFile;","lastModifiedDate":"2023-03-19"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"     * Create the data folder for WellNUS++.","lastModifiedDate":"2023-03-20"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"     * @param directoryPath path of the directory","lastModifiedDate":"2023-03-19"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException if directory cannot be made","lastModifiedDate":"2023-03-19"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"    private void createDataFolder(Path directoryPath) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"        assert directoryPath !\u003d null : ASSERT_PATH_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"            Files.createDirectory(directoryPath);","lastModifiedDate":"2023-03-19"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_ACCESS_ERROR);","lastModifiedDate":"2023-03-23"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_MAKE_DIR + System.lineSeparator();","lastModifiedDate":"2023-03-19"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-19"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-19"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"     * Create a file in the path specified by its URI.","lastModifiedDate":"2023-03-20"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"     * @param file to be created","lastModifiedDate":"2023-03-19"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException if the file cannot be made","lastModifiedDate":"2023-03-19"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"    private void createFile(File file) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"        assert file !\u003d null : ASSERT_FILE_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"            file.createNewFile();","lastModifiedDate":"2023-03-19"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_ACCESS_ERROR);","lastModifiedDate":"2023-03-23"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_MAKE_FILE;","lastModifiedDate":"2023-03-19"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-19"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-19"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"     * Tokenize every String entry with the delimiter suffix and append them together.","lastModifiedDate":"2023-03-20"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"     * @param tokenizedStrings strings to be tokenized","lastModifiedDate":"2023-03-19"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"     * @return String of all tokenized string entries","lastModifiedDate":"2023-03-19"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"    protected String tokenizeStringList(ArrayList\u003cString\u003e tokenizedStrings) {","lastModifiedDate":"2023-03-19"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"        assert tokenizedStrings !\u003d null : ASSERT_LIST_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-03-19"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"        for (String entry : tokenizedStrings) {","lastModifiedDate":"2023-03-19"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"            String entryDelimited \u003d entry + DELIMITER;","lastModifiedDate":"2023-03-19"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"            stringBuilder.append(entryDelimited);","lastModifiedDate":"2023-03-19"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2023-03-19"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"     * Splits a dataString by the \" --\\n\" delimiter.","lastModifiedDate":"2023-03-20"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"     * @param dataString string to be split","lastModifiedDate":"2023-03-19"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"     * @return String[] of words belonging to the dataString","lastModifiedDate":"2023-03-19"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"    private String[] splitIntoEntries(String dataString) {","lastModifiedDate":"2023-03-19"},{"lineNumber":215,"author":{"gitId":"nichyjt"},"content":"        assert dataString !\u003d null : ASSERT_STRING_NOT_NULL;","lastModifiedDate":"2023-03-24"},{"lineNumber":216,"author":{"gitId":"nichyjt"},"content":"        return dataString.split(DELIMITER);","lastModifiedDate":"2023-03-19"},{"lineNumber":217,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":218,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":219,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":220,"author":{"gitId":"nichyjt"},"content":"     * Detokenizing raw dataString into ArrayList of strings, where each string","lastModifiedDate":"2023-03-19"},{"lineNumber":221,"author":{"gitId":"nichyjt"},"content":"     * is an entry in the associated Manager\u0027s data structure.","lastModifiedDate":"2023-03-20"},{"lineNumber":222,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":223,"author":{"gitId":"nichyjt"},"content":"     * @param dataString raw string loaded from the text file","lastModifiedDate":"2023-03-19"},{"lineNumber":224,"author":{"gitId":"nichyjt"},"content":"     * @return ArrayList of strings to be parsed by tokenizer","lastModifiedDate":"2023-03-19"},{"lineNumber":225,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":226,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":227,"author":{"gitId":"nichyjt"},"content":"    protected ArrayList\u003cString\u003e detokenizeDataString(String dataString) {","lastModifiedDate":"2023-03-19"},{"lineNumber":228,"author":{"gitId":"nichyjt"},"content":"        assert dataString !\u003d null : ASSERT_STRING_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":229,"author":{"gitId":"nichyjt"},"content":"        String[] entries \u003d splitIntoEntries(dataString);","lastModifiedDate":"2023-03-19"},{"lineNumber":230,"author":{"gitId":"nichyjt"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(entries));","lastModifiedDate":"2023-03-19"},{"lineNumber":231,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":232,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":233,"author":{"gitId":"nichyjt"},"content":"    private void writeDataToDisk(String data, File file) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":234,"author":{"gitId":"nichyjt"},"content":"        assert data !\u003d null : ASSERT_STRING_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":235,"author":{"gitId":"nichyjt"},"content":"        assert file !\u003d null : ASSERT_FILE_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":236,"author":{"gitId":"nichyjt"},"content":"        // assume file exists","lastModifiedDate":"2023-03-19"},{"lineNumber":237,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":238,"author":{"gitId":"nichyjt"},"content":"            FileWriter writer \u003d new FileWriter(file.getAbsolutePath());","lastModifiedDate":"2023-03-19"},{"lineNumber":239,"author":{"gitId":"nichyjt"},"content":"            writer.write(data);","lastModifiedDate":"2023-03-19"},{"lineNumber":240,"author":{"gitId":"nichyjt"},"content":"            writer.close();","lastModifiedDate":"2023-03-19"},{"lineNumber":241,"author":{"gitId":"nichyjt"},"content":"        } catch (IOException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":242,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_MISSING_FILE);","lastModifiedDate":"2023-03-23"},{"lineNumber":243,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_WRITE_FILE;","lastModifiedDate":"2023-03-23"},{"lineNumber":244,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-23"},{"lineNumber":245,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-23"},{"lineNumber":246,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":247,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":248,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":249,"author":{"gitId":"nichyjt"},"content":"    private String loadDataFromDisk(File file) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":250,"author":{"gitId":"nichyjt"},"content":"        assert file !\u003d null : ASSERT_FILE_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":251,"author":{"gitId":"nichyjt"},"content":"        // assume file exists","lastModifiedDate":"2023-03-19"},{"lineNumber":252,"author":{"gitId":"nichyjt"},"content":"        StringBuilder data \u003d new StringBuilder();","lastModifiedDate":"2023-03-19"},{"lineNumber":253,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":254,"author":{"gitId":"nichyjt"},"content":"            Scanner reader \u003d new Scanner(file);","lastModifiedDate":"2023-03-19"},{"lineNumber":255,"author":{"gitId":"nichyjt"},"content":"            while (reader.hasNextLine()) {","lastModifiedDate":"2023-03-19"},{"lineNumber":256,"author":{"gitId":"nichyjt"},"content":"                data.append(reader.nextLine()).append(NEWLINE);","lastModifiedDate":"2023-03-19"},{"lineNumber":257,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":258,"author":{"gitId":"nichyjt"},"content":"            reader.close();","lastModifiedDate":"2023-03-19"},{"lineNumber":259,"author":{"gitId":"nichyjt"},"content":"        } catch (FileNotFoundException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":260,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_ACCESS_ERROR);","lastModifiedDate":"2023-03-23"},{"lineNumber":261,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_CANNOT_LOAD_FILE;","lastModifiedDate":"2023-03-24"},{"lineNumber":262,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-20"},{"lineNumber":263,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-20"},{"lineNumber":264,"author":{"gitId":"nichyjt"},"content":"        } catch (IllegalStateException exception) {","lastModifiedDate":"2023-03-20"},{"lineNumber":265,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.SEVERE, LOG_ACCESS_ERROR);","lastModifiedDate":"2023-03-23"},{"lineNumber":266,"author":{"gitId":"nichyjt"},"content":"            String errorMessage \u003d ERROR_GENERAL;","lastModifiedDate":"2023-03-20"},{"lineNumber":267,"author":{"gitId":"nichyjt"},"content":"            errorMessage \u003d errorMessage.concat(exception.getMessage());","lastModifiedDate":"2023-03-20"},{"lineNumber":268,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(errorMessage);","lastModifiedDate":"2023-03-20"},{"lineNumber":269,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":270,"author":{"gitId":"nichyjt"},"content":"        return data.toString();","lastModifiedDate":"2023-03-19"},{"lineNumber":271,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":272,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":273,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":274,"author":{"gitId":"nichyjt"},"content":"     * Save the pre-tokenized data onto Disk. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":275,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":276,"author":{"gitId":"nichyjt"},"content":"     * The data will be saved into the /data folder. \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":277,"author":{"gitId":"nichyjt"},"content":"     * Each entry in the ArrayList should be an instance of the underlying data structure being `Managed`,","lastModifiedDate":"2023-03-19"},{"lineNumber":278,"author":{"gitId":"nichyjt"},"content":"     * with each instance being tokenized into a String beforehand. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":279,"author":{"gitId":"nichyjt"},"content":"     * The fileName should be accessed via the public constant Storage.FILE_[feature].","lastModifiedDate":"2023-03-19"},{"lineNumber":280,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":281,"author":{"gitId":"nichyjt"},"content":"     * @param tokenizedManager ArrayList of tokenized Manager data string","lastModifiedDate":"2023-03-19"},{"lineNumber":282,"author":{"gitId":"nichyjt"},"content":"     * @param fileName         name of the file to be saved","lastModifiedDate":"2023-03-19"},{"lineNumber":283,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException when there are unexpected IO errors","lastModifiedDate":"2023-03-19"},{"lineNumber":284,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":285,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":286,"author":{"gitId":"nichyjt"},"content":"    public void saveData(ArrayList\u003cString\u003e tokenizedManager, String fileName) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":287,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_FILENAME_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":288,"author":{"gitId":"nichyjt"},"content":"        assert fileName.length() \u003e FILENAME_EMPTY : ASSERT_FILENAME_NOT_EMPTY;","lastModifiedDate":"2023-03-26"},{"lineNumber":289,"author":{"gitId":"nichyjt"},"content":"        assert tokenizedManager !\u003d null : ASSERT_LIST_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":290,"author":{"gitId":"nichyjt"},"content":"        if (!isValidFileName(fileName)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":291,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.WARNING, LOG_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":292,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":293,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":294,"author":{"gitId":"nichyjt"},"content":"        File file \u003d getFile(fileName);","lastModifiedDate":"2023-03-19"},{"lineNumber":295,"author":{"gitId":"nichyjt"},"content":"        String tokenizedString \u003d tokenizeStringList(tokenizedManager);","lastModifiedDate":"2023-03-19"},{"lineNumber":296,"author":{"gitId":"nichyjt"},"content":"        writeDataToDisk(tokenizedString, file);","lastModifiedDate":"2023-03-19"},{"lineNumber":297,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":298,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":299,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":300,"author":{"gitId":"nichyjt"},"content":"     * Load a feature\u0027s data from the Disk. \u003cbr\u003e","lastModifiedDate":"2023-03-20"},{"lineNumber":301,"author":{"gitId":"nichyjt"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":302,"author":{"gitId":"nichyjt"},"content":"     * The data will be laoded from the /data folder. \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":303,"author":{"gitId":"nichyjt"},"content":"     * Each entry in the ArrayList will be an instance of the underlying data structure being `Managed`,","lastModifiedDate":"2023-03-19"},{"lineNumber":304,"author":{"gitId":"nichyjt"},"content":"     * with each instance being tokenized into a String beforehand \u003cbr\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":305,"author":{"gitId":"nichyjt"},"content":"     * The fileName should be accessed via the public constant Storage.FILE_[feature].","lastModifiedDate":"2023-03-19"},{"lineNumber":306,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":307,"author":{"gitId":"nichyjt"},"content":"     * @param fileName name of the file to be loaded","lastModifiedDate":"2023-03-19"},{"lineNumber":308,"author":{"gitId":"nichyjt"},"content":"     * @return ArrayList of tokenized Manager data string","lastModifiedDate":"2023-03-19"},{"lineNumber":309,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException when there are unexpected IO errors","lastModifiedDate":"2023-03-19"},{"lineNumber":310,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":311,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":312,"author":{"gitId":"nichyjt"},"content":"    public ArrayList\u003cString\u003e loadData(String fileName) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":313,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_FILENAME_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":314,"author":{"gitId":"nichyjt"},"content":"        assert fileName.length() \u003e FILENAME_EMPTY : ASSERT_FILENAME_NOT_EMPTY;","lastModifiedDate":"2023-03-26"},{"lineNumber":315,"author":{"gitId":"nichyjt"},"content":"        if (!isValidFileName(fileName)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":316,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.WARNING, LOG_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":317,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":318,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":319,"author":{"gitId":"nichyjt"},"content":"        File file \u003d getFile(fileName);","lastModifiedDate":"2023-03-19"},{"lineNumber":320,"author":{"gitId":"nichyjt"},"content":"        String data \u003d loadDataFromDisk(file);","lastModifiedDate":"2023-03-19"},{"lineNumber":321,"author":{"gitId":"nichyjt"},"content":"        return detokenizeDataString(data);","lastModifiedDate":"2023-03-19"},{"lineNumber":322,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":323,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":324,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":325,"author":{"gitId":"nichyjt"},"content":"     * Deletes the file from the /data directory.","lastModifiedDate":"2023-03-20"},{"lineNumber":326,"author":{"gitId":"nichyjt"},"content":"     *","lastModifiedDate":"2023-03-19"},{"lineNumber":327,"author":{"gitId":"nichyjt"},"content":"     * @param fileName name of the file to be deleted","lastModifiedDate":"2023-03-19"},{"lineNumber":328,"author":{"gitId":"nichyjt"},"content":"     * @throws StorageException when there are unexpected IO errors","lastModifiedDate":"2023-03-19"},{"lineNumber":329,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":330,"author":{"gitId":"nichyjt"},"content":"    //@@author nichyjt","lastModifiedDate":"2023-03-20"},{"lineNumber":331,"author":{"gitId":"nichyjt"},"content":"    protected void deleteFile(String fileName) throws StorageException {","lastModifiedDate":"2023-03-19"},{"lineNumber":332,"author":{"gitId":"nichyjt"},"content":"        assert fileName !\u003d null : ASSERT_FILENAME_NOT_NULL;","lastModifiedDate":"2023-03-23"},{"lineNumber":333,"author":{"gitId":"nichyjt"},"content":"        assert fileName.length() \u003e FILENAME_EMPTY : ASSERT_FILENAME_NOT_EMPTY;","lastModifiedDate":"2023-03-26"},{"lineNumber":334,"author":{"gitId":"nichyjt"},"content":"        if (!isValidFileName(fileName)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":335,"author":{"gitId":"nichyjt"},"content":"            LOGGER.log(Level.WARNING, LOG_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":336,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_INVALID_FILENAME);","lastModifiedDate":"2023-03-24"},{"lineNumber":337,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":338,"author":{"gitId":"nichyjt"},"content":"        File file \u003d getFile(fileName);","lastModifiedDate":"2023-03-19"},{"lineNumber":339,"author":{"gitId":"nichyjt"},"content":"        boolean isDeleted \u003d file.delete();","lastModifiedDate":"2023-03-19"},{"lineNumber":340,"author":{"gitId":"nichyjt"},"content":"        if (!isDeleted) {","lastModifiedDate":"2023-03-19"},{"lineNumber":341,"author":{"gitId":"nichyjt"},"content":"            throw new StorageException(ERROR_CANNOT_DELETE_FILE);","lastModifiedDate":"2023-03-19"},{"lineNumber":342,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":343,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":344,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":345,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"nichyjt":345}},{"path":"src/main/java/wellnus/storage/Tokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":" * Template for all Tokenizers in WellNUS++ that are responsible for converting","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"haoyangw"},"content":" *     Managers into Strings(for storage) and also Strings(from storage) back","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"haoyangw"},"content":" *     into Managers with the previously saved state.\u003cbr/\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":" *","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":" * Example of how to implement this in a feature: \u003ccode\u003epublic class AtomicHabitTokenizer","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"haoyangw"},"content":" *     implements Tokenizer\u0026lt;AtomicHabit\u0026gt;\u003c/code\u003e.","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"haoyangw"},"content":" * @param \u003cT\u003e Data type of the corresponding feature, e.g. \u003ccode\u003eAtomicHabit\u003c/code\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":" *     the atomic habit feature","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"public interface Tokenizer\u003cT\u003e {","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"     * Converts the attributes of the given \u003ccode\u003eManager\u003c/code\u003e into a String representation to be","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"     *     saved to storage.","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"haoyangw"},"content":"     * @param dataObjects List of Objects which represent data we want to convert into a String representation","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"     * @return ArrayList of Strings representing the data objects that we can write to storage","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"     * @throws TokenizerException If tokenizing fails and state cannot be converted into a valid String","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"     *     representation","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"    ArrayList\u003cString\u003e tokenize(ArrayList\u003cT\u003e dataObjects);","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"     * Converts the String representation of a \u003ccode\u003eManager\u003c/code\u003e\u0027s state back into an","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"     *     \u003ccode\u003eArrayList\u003c/code\u003e of the feature\u0027s data type class that can be used to restore that","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"     *     \u003ccode\u003eManager\u003c/code\u003e\u0027s previous state.","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"     * @param tokenizedDataObjects String representation of the Data Objects whose state we want to restore","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"     * @return ArrayList containing all the data from the Manager\u0027s previously saved state","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"     * @throws TokenizerException If detokenizing fails and valid state cannot be restored","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    ArrayList\u003cT\u003e detokenize(ArrayList\u003cString\u003e tokenizedDataObjects) throws TokenizerException;","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"BernardLesley":3,"haoyangw":34}},{"path":"src/main/java/wellnus/ui/TextUi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"haoyangw"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.nio.BufferOverflowException;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Level;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":" * TextUi class for reading user inputs and printing outputs.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":" * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":" * Subclasses of TextUI class can override separator, printErrorFor and printOutputMessage.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":" * This is to accommodate to the uniqueness of each feature.","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"public class TextUi {","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final Logger LOGGER \u003d Logger.getLogger(\"TextUiLogger\");","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final String ALERT_SEPARATOR \u003d \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!\"","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"            + \"---------!!!!!!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDENTATION_SPACES \u003d \"    \";","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final int DEFAULT_SEPARATOR_LENGTH \u003d 60;","lastModifiedDate":"2023-03-11"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final int EMPTY_MESSAGE \u003d 0;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_MESSAGE_LABEL \u003d \"Error Message:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String EXTRA_MESSAGE_LABEL \u003d \"Note:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String NO_INPUT_ELEMENT_MSG \u003d \"There is no new line of element,\"","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"            + \"please key in your input!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String BUFFER_OVERFLOW_MSG \u003d \"Your input is too long,\"","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"            + \"please shorten it!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"    private final Scanner scanner;","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private String separator \u003d \"-\";","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    public TextUi() {","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"        this(System.in);","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"    public TextUi(InputStream inputStream) {","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"        this.scanner \u003d new Scanner(inputStream);","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    //@@author wenxin-c","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"     * Print spaces before output message for better formatting.","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    public void printIndentation() {","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(INDENTATION_SPACES);","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"     * Read user\u0027s input command and return back the command string.\u003cbr/\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"     * @return User input command with leading/dangling whitespace being removed","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    public String getCommand() {","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        String userCommand \u003d \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"            String inputLine \u003d scanner.nextLine();","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"            userCommand \u003d inputLine.trim();","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        } catch (BufferOverflowException bufferOverFlowException) {","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, BUFFER_OVERFLOW_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"            printErrorFor(bufferOverFlowException, BUFFER_OVERFLOW_MSG);","lastModifiedDate":"2023-03-11"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"        } catch (NoSuchElementException noElementException) {","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"            LOGGER.log(Level.INFO, NO_INPUT_ELEMENT_MSG);","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"            printErrorFor(noElementException, NO_INPUT_ELEMENT_MSG);","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"        return userCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"     * Customise separators for each feature.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"     * At this moment we can only use length \u003d\u003d 1 separator for consistency of length of line separator.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"     * This will be improved on in the future to allow for more patterns.","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"     * @param separator Length \u003d\u003d 1 string","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"    public void setSeparator(String separator) {","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"        this.separator \u003d separator;","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"     * Print line separators for output lines.\u003cbr/\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"     * Each subclass inherited from this class can override this method to vary the interface.","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"    public void printSeparator() {","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c DEFAULT_SEPARATOR_LENGTH; i +\u003d 1) {","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"            System.out.print(separator);","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(System.lineSeparator());","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"     * Split a message string to a string array using System.lineSeparator().\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"     * This is to help indent each new line during output.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"     * Each line of string will be trimmed to remove leading/dangling whitespace.","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"     * @param message Message to be printed","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"     * @return Messages that are split using lineSeparator","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"    private String[] splitOutputMessage(String message) {","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"        String[] newLineMessages \u003d message.trim().split(System.lineSeparator());","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"        for (int i \u003d 0; i \u003c newLineMessages.length; i +\u003d 1) {","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"            newLineMessages[i] \u003d newLineMessages[i].trim();","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"        return newLineMessages;","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"     * Print each new line of message on a separate line with indentation being added.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"wenxin-c"},"content":"     * Output message with one line is also accepted.","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"wenxin-c"},"content":"     * @param message Output message to be printed","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"wenxin-c"},"content":"    private void printMultiLineMessage(String message) {","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"wenxin-c"},"content":"        String[] newLineMessages \u003d splitOutputMessage(message);","lastModifiedDate":"2023-03-11"},{"lineNumber":118,"author":{"gitId":"wenxin-c"},"content":"        for (String msg : newLineMessages) {","lastModifiedDate":"2023-03-11"},{"lineNumber":119,"author":{"gitId":"wenxin-c"},"content":"            printIndentation();","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(msg);","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"wenxin-c"},"content":"     * Print exception message with length \u003e 0 and additional notes.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":126,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"wenxin-c"},"content":"     * 0 or more lines of messages are accepted, but lineSeparator() must be added","lastModifiedDate":"2023-03-11"},{"lineNumber":128,"author":{"gitId":"wenxin-c"},"content":"     * if you wish to have certain message to start on a new line.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":129,"author":{"gitId":"wenxin-c"},"content":"     * Error messages and additional notes will be printed on separate lines with labels.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":130,"author":{"gitId":"wenxin-c"},"content":"     * Can override to accommodate to other customised error messages.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"wenxin-c"},"content":"     * Can improve on what will be printed for empty message in the future.","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":133,"author":{"gitId":"wenxin-c"},"content":"     * @param exception The exception being thrown in the program","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"wenxin-c"},"content":"     * @param additionalMessage Suggestions or notes that help users figure out what causes error","lastModifiedDate":"2023-03-11"},{"lineNumber":135,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":136,"author":{"gitId":"wenxin-c"},"content":"    public void printErrorFor(Exception exception, String additionalMessage) {","lastModifiedDate":"2023-03-11"},{"lineNumber":137,"author":{"gitId":"wenxin-c"},"content":"        System.out.println(ALERT_SEPARATOR);","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"wenxin-c"},"content":"        String exceptionMsg \u003d exception.getMessage();","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"wenxin-c"},"content":"        if (exceptionMsg.length() \u003e EMPTY_MESSAGE) {","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(ERROR_MESSAGE_LABEL);","lastModifiedDate":"2023-03-11"},{"lineNumber":141,"author":{"gitId":"wenxin-c"},"content":"            printMultiLineMessage(exceptionMsg);","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(EXTRA_MESSAGE_LABEL);","lastModifiedDate":"2023-03-11"},{"lineNumber":143,"author":{"gitId":"wenxin-c"},"content":"            printMultiLineMessage(additionalMessage);","lastModifiedDate":"2023-03-11"},{"lineNumber":144,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"wenxin-c"},"content":"        System.out.println(ALERT_SEPARATOR);","lastModifiedDate":"2023-03-10"},{"lineNumber":146,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":147,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":148,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":149,"author":{"gitId":"wenxin-c"},"content":"     * Print output message with length \u003e 0.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"wenxin-c"},"content":"     * \u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":151,"author":{"gitId":"wenxin-c"},"content":"     * 0 or more lines of messages are accepted, but lineSeparator() must be added","lastModifiedDate":"2023-03-11"},{"lineNumber":152,"author":{"gitId":"wenxin-c"},"content":"     * if you wish to have certain message to start on a new line.\u003cbr/\u003e","lastModifiedDate":"2023-03-11"},{"lineNumber":153,"author":{"gitId":"wenxin-c"},"content":"     * Can override to accommodate to other customised error messages.","lastModifiedDate":"2023-03-09"},{"lineNumber":154,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":155,"author":{"gitId":"wenxin-c"},"content":"     * @param message The exception being thrown in the program","lastModifiedDate":"2023-03-10"},{"lineNumber":156,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":157,"author":{"gitId":"wenxin-c"},"content":"    public void printOutputMessage(String message) {","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"wenxin-c"},"content":"        printSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"wenxin-c"},"content":"        if (message.length() \u003e EMPTY_MESSAGE) {","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"wenxin-c"},"content":"            printMultiLineMessage(message);","lastModifiedDate":"2023-03-10"},{"lineNumber":161,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"wenxin-c"},"content":"        printSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":164,"author":{"gitId":"wenxin-c"},"content":"    //@@author","lastModifiedDate":"2023-03-27"},{"lineNumber":165,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":166,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":155,"haoyangw":11}},{"path":"src/test/java/wellnus/WellNusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"haoyangw"},"content":"class WellNusTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"haoyangw":2,"-":10}},{"path":"src/test/java/wellnus/atomichabit/AtomicHabitTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.atomichabit;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"haoyangw"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.AddCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.atomichabit.command.UpdateCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabitList;","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabitManager;","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.Command;","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"haoyangw"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.AtomicHabitException;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"haoyangw"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"public class AtomicHabitTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"haoyangw"},"content":"    private static final String ADD_HABIT_COMMAND \u003d \"add\";","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"haoyangw"},"content":"    private static final String UPDATE_HABIT_COMMAND \u003d \"update\";","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"haoyangw"},"content":"    private final AtomicHabitList habitList;","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"haoyangw"},"content":"    private final ByteArrayOutputStream outputStreamCaptor;","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"haoyangw"},"content":"    private final CommandParser parser;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"haoyangw"},"content":"    public AtomicHabitTest() {","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"haoyangw"},"content":"        this.habitList \u003d new AtomicHabitList();","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"haoyangw"},"content":"        this.outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"haoyangw"},"content":"        this.parser \u003d new CommandParser();","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"haoyangw"},"content":"    private String getMessageFrom(String uiOutput) {","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"haoyangw"},"content":"        TextUi textUi \u003d new TextUi();","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"haoyangw"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"haoyangw"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"haoyangw"},"content":"        textUi.printSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"haoyangw"},"content":"        String separator \u003d outputStream.toString().trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"haoyangw"},"content":"        StringBuilder resultBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"haoyangw"},"content":"        String[] outputLines \u003d uiOutput.split(System.lineSeparator());","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"haoyangw"},"content":"        for (String outputLine : outputLines) {","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"haoyangw"},"content":"            String trimmedOutputLine \u003d outputLine.trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"haoyangw"},"content":"            if (!trimmedOutputLine.equals(separator)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"haoyangw"},"content":"                resultBuilder.append(trimmedOutputLine).append(System.lineSeparator());","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"haoyangw"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"haoyangw"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"haoyangw"},"content":"        return resultBuilder.toString().trim();","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"haoyangw"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"haoyangw"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"haoyangw"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"haoyangw"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"haoyangw"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"     * Test AddCommand with a standard payload to check output printed","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"haoyangw"},"content":"    public void addHabit_checkOutput_success() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"        String expectedOutput \u003d \"Yay! You have added a new habit:\"","lastModifiedDate":"2023-03-11"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"                + \"\u0027\"","lastModifiedDate":"2023-03-11"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"                + payload","lastModifiedDate":"2023-03-11"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"                + \"\u0027\"","lastModifiedDate":"2023-03-11"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"                + \" was successfully added\";","lastModifiedDate":"2023-03-11"},{"lineNumber":68,"author":{"gitId":"haoyangw"},"content":"        String testCommand \u003d String.format(\"%s --name %s\", ADD_HABIT_COMMAND, payload);","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"haoyangw"},"content":"        Command command \u003d new AddCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"haoyangw"},"content":"        command.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertEquals(expectedOutput, getMessageFrom(outputStreamCaptor.toString()));","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"     * Test AddCommand to throw {@link AtomicHabitException} when an invalid command is given to the AtomicHabitManager","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"    public void addHabit_invalidCommand_atomicHabitExceptionThrown() {","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"        AtomicHabitManager atomicHabitManager \u003d new AtomicHabitManager();","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"        String command \u003d \"sleep\";","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertThrows(AtomicHabitException.class, () -\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"            atomicHabitManager.testInvalidCommand(command);","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"        }, \"The following is an invalid command:\\n\"","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"YongbinWang"},"content":"                + command);","lastModifiedDate":"2023-03-11"},{"lineNumber":87,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"     * Test UpdateCommand with a standard payload and default increment to check output printed","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"BernardLesley"},"content":"    public void updateHabit_checkOutputDefaultIncrement_success() throws WellNusException {","lastModifiedDate":"2023-03-17"},{"lineNumber":94,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"BernardLesley"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"BernardLesley"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"haoyangw"},"content":"        String testUpdateCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, habitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testUpdateCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"haoyangw"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"BernardLesley"},"content":"        String expectedUpdateHabitOutput \u003d \"The following habit has been incremented! Keep up the good work!\"","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"haoyangw"},"content":"                + habitIndex + \".\" + payload + \" \" + \"[2]\";","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"haoyangw"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"haoyangw"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"haoyangw"},"content":"        updateCommand.execute();","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertEquals(expectedUpdateHabitOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":111,"author":{"gitId":"BernardLesley"},"content":"     * Test UpdateCommand with a standard payload and user-inputted increment to check output printed","lastModifiedDate":"2023-03-17"},{"lineNumber":112,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":113,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":114,"author":{"gitId":"BernardLesley"},"content":"    public void updateHabit_checkOutputUserInputIncrement_success() throws WellNusException {","lastModifiedDate":"2023-03-17"},{"lineNumber":115,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-17"},{"lineNumber":116,"author":{"gitId":"BernardLesley"},"content":"        String payload \u003d \"junit test\";","lastModifiedDate":"2023-03-17"},{"lineNumber":117,"author":{"gitId":"BernardLesley"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-03-17"},{"lineNumber":118,"author":{"gitId":"BernardLesley"},"content":"        String increment \u003d \"3\";","lastModifiedDate":"2023-03-17"},{"lineNumber":119,"author":{"gitId":"BernardLesley"},"content":"        String testUpdateCommand \u003d String.format(\"%s --id %s --inc %s\", UPDATE_HABIT_COMMAND, habitIndex, increment)","lastModifiedDate":"2023-03-17"},{"lineNumber":120,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-17"},{"lineNumber":121,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testUpdateCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":122,"author":{"gitId":"BernardLesley"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-17"},{"lineNumber":123,"author":{"gitId":"BernardLesley"},"content":"        String expectedUpdateHabitOutput \u003d \"The following habit has been incremented! Keep up the good work!\"","lastModifiedDate":"2023-03-17"},{"lineNumber":124,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-17"},{"lineNumber":125,"author":{"gitId":"BernardLesley"},"content":"                + habitIndex + \".\" + payload + \" \" + \"[4]\";","lastModifiedDate":"2023-03-17"},{"lineNumber":126,"author":{"gitId":"BernardLesley"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-17"},{"lineNumber":127,"author":{"gitId":"BernardLesley"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-17"},{"lineNumber":128,"author":{"gitId":"BernardLesley"},"content":"        updateCommand.execute();","lastModifiedDate":"2023-03-17"},{"lineNumber":129,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedUpdateHabitOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-03-17"},{"lineNumber":130,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":131,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":132,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"BernardLesley"},"content":"     * Test UpdateCommand to throw {@link AtomicHabitException} when a non-integer index is given to the UpdateCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":136,"author":{"gitId":"haoyangw"},"content":"    public void updateHabit_indexNotInteger_atomicHabitExceptionThrown() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"BernardLesley"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"BernardLesley"},"content":"        String habitIndex \u003d \"a\";","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"haoyangw"},"content":"        String testIndexCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, habitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testIndexCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"haoyangw"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommand::execute);","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":146,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":148,"author":{"gitId":"BernardLesley"},"content":"     * Test UpdateCommand to throw {@link AtomicHabitException} when an out-of-bounds index is given","lastModifiedDate":"2023-03-14"},{"lineNumber":149,"author":{"gitId":"BernardLesley"},"content":"     * to the UpdateCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":150,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":151,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"haoyangw"},"content":"    public void updateHabit_indexOutOfBounds_atomicHabitExceptionThrown() throws WellNusException {","lastModifiedDate":"2023-03-15"},{"lineNumber":153,"author":{"gitId":"BernardLesley"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-14"},{"lineNumber":155,"author":{"gitId":"haoyangw"},"content":"        String largeHabitIndex \u003d \"100000000\" + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"haoyangw"},"content":"        String negativeHabitIndex \u003d \"-100000000\" + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":157,"author":{"gitId":"haoyangw"},"content":"        String testLargeIndexCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, largeHabitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":158,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"haoyangw"},"content":"        String testNegativeIndexCommand \u003d String.format(\"%s --id %s\", UPDATE_HABIT_COMMAND, negativeHabitIndex)","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"haoyangw"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"haoyangw"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testLargeIndexCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":162,"author":{"gitId":"haoyangw"},"content":"        Command updateCommandForLargeIndex \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommandForLargeIndex::execute);","lastModifiedDate":"2023-03-15"},{"lineNumber":164,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":165,"author":{"gitId":"haoyangw"},"content":"        arguments \u003d parser.parseUserInput(testNegativeIndexCommand);","lastModifiedDate":"2023-03-15"},{"lineNumber":166,"author":{"gitId":"haoyangw"},"content":"        Command updateCommandForNegativeIndex \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-15"},{"lineNumber":167,"author":{"gitId":"haoyangw"},"content":"        Assertions.assertThrows(AtomicHabitException.class, updateCommandForNegativeIndex::execute);","lastModifiedDate":"2023-03-15"},{"lineNumber":168,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":170,"author":{"gitId":"BernardLesley"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":171,"author":{"gitId":"BernardLesley"},"content":"     * Test UpdateCommand to print message to indicate the habit has not been incremented","lastModifiedDate":"2023-03-17"},{"lineNumber":172,"author":{"gitId":"BernardLesley"},"content":"     * if the user does not input positive number for the increment","lastModifiedDate":"2023-03-17"},{"lineNumber":173,"author":{"gitId":"BernardLesley"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":174,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":175,"author":{"gitId":"BernardLesley"},"content":"    public void updateHabit_checkIncrementNotPositive_printErrorMessage() throws WellNusException {","lastModifiedDate":"2023-03-17"},{"lineNumber":176,"author":{"gitId":"BernardLesley"},"content":"        addHabit_checkOutput_success();","lastModifiedDate":"2023-03-17"},{"lineNumber":177,"author":{"gitId":"BernardLesley"},"content":"        String habitIndex \u003d \"1\";","lastModifiedDate":"2023-03-17"},{"lineNumber":178,"author":{"gitId":"BernardLesley"},"content":"        String increment \u003d \"-1\";","lastModifiedDate":"2023-03-17"},{"lineNumber":179,"author":{"gitId":"BernardLesley"},"content":"        String errorMessage \u003d \"Increment with minimum of 1 is expected, no update shall be performed.\";","lastModifiedDate":"2023-03-18"},{"lineNumber":180,"author":{"gitId":"BernardLesley"},"content":"        String warningSeparator \u003d \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!---------!!!!!!!\";","lastModifiedDate":"2023-03-18"},{"lineNumber":181,"author":{"gitId":"BernardLesley"},"content":"        String expectedErrorOutput \u003d warningSeparator","lastModifiedDate":"2023-03-18"},{"lineNumber":182,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-17"},{"lineNumber":183,"author":{"gitId":"BernardLesley"},"content":"                + \"Error Message:\"","lastModifiedDate":"2023-03-17"},{"lineNumber":184,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-17"},{"lineNumber":185,"author":{"gitId":"BernardLesley"},"content":"                + errorMessage","lastModifiedDate":"2023-03-18"},{"lineNumber":186,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-17"},{"lineNumber":187,"author":{"gitId":"BernardLesley"},"content":"                + \"Note:\"","lastModifiedDate":"2023-03-17"},{"lineNumber":188,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-17"},{"lineNumber":189,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator()","lastModifiedDate":"2023-03-17"},{"lineNumber":190,"author":{"gitId":"BernardLesley"},"content":"                + warningSeparator;","lastModifiedDate":"2023-03-18"},{"lineNumber":191,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":192,"author":{"gitId":"BernardLesley"},"content":"        String testIndexCommand \u003d String.format(\"%s --id %s --inc %s\", UPDATE_HABIT_COMMAND, habitIndex, increment)","lastModifiedDate":"2023-03-17"},{"lineNumber":193,"author":{"gitId":"BernardLesley"},"content":"                + System.lineSeparator();","lastModifiedDate":"2023-03-17"},{"lineNumber":194,"author":{"gitId":"BernardLesley"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(testIndexCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":195,"author":{"gitId":"BernardLesley"},"content":"        Command updateCommand \u003d new UpdateCommand(arguments, habitList);","lastModifiedDate":"2023-03-17"},{"lineNumber":196,"author":{"gitId":"BernardLesley"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-17"},{"lineNumber":197,"author":{"gitId":"BernardLesley"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-17"},{"lineNumber":198,"author":{"gitId":"BernardLesley"},"content":"        updateCommand.execute();","lastModifiedDate":"2023-03-17"},{"lineNumber":199,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedErrorOutput, getMessageFrom(outputStream.toString()));","lastModifiedDate":"2023-03-17"},{"lineNumber":200,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":201,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":202,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":203,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":204,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"BernardLesley":97,"haoyangw":77,"YongbinWang":30}},{"path":"src/test/java/wellnus/command/CommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.command;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"haoyangw"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"public class CommandParserTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cString\u003e getValidCommandInputs() {","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e validCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"mainCommand\");","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"mainCommand payload\");","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"main --arg1 pay1\");","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"main --arg1 pay1 --arg2\");","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"main --arg1 pay1 --arg2 --arg3 pay3\");","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"        return validCommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cString\u003e getValidTrickyInputs() {","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e validCommands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"mainCommand pay--load\");","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"mainCommand --argument1 payload--\");","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        validCommands.add(\"  mainCommand --arg--1 pay1 --arg2 pay2\");","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"        return validCommands;","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_validInput() {","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        // The following commands should be able to pass","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e validCommandInputs \u003d getValidCommandInputs();","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"        // The following tests check if adversarial inputs are processed correctly","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e validTrickyInputs \u003d getValidTrickyInputs();","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        for (String validCommand : validCommandInputs) {","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"                parser.parseUserInput(validCommand);","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"            } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"                fail(\"CommandParser threw exception on valid input:\\n\" + exception);","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"        for (String validCommand : validTrickyInputs) {","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"            try {","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"                parser.parseUserInput(validCommand);","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"            } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"                fail(\"CommandParser threw exception on valid input:\\n\" + exception);","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_emptyInput_exceptionThrown() {","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        // Test on empty user input","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"\";","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + command);","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_emptyArgument_exceptionThrown() {","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        // Test on empty argument","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        String commandEmptyArg \u003d \"mainCommand payload --\";","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(commandEmptyArg);","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + commandEmptyArg);","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"        // Test on empty argument with padding","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"        String commandEmptyArgPadded \u003d \"mainCommand payload -- \";","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(commandEmptyArgPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + commandEmptyArgPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        // Test on empty argument, payload exists","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        String emptyCmdWithPayload \u003d \"mainCommand payload -- payload1\";","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(emptyCmdWithPayload);","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + emptyCmdWithPayload);","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_noMainArgument_exceptionThrown() {","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        // Test on empty user input without padding","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"--arg1 payload\";","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + command);","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"        // Test on empty user input with padding","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        String commandPadded \u003d \" --arg1 payload\";","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(commandPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"        }, \"BadCommandException was expected for input:\\n\" + commandPadded);","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-08"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgumentTest() {","lastModifiedDate":"2023-03-08"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        String target \u003d \"maincommand\";","lastModifiedDate":"2023-03-24"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"mainCommand payload --argument payload1\";","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"            String result1 \u003d parser.getMainArgument(command);","lastModifiedDate":"2023-03-08"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"            assertEquals(target, result1);","lastModifiedDate":"2023-03-08"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"            fail(exception.getMessage());","lastModifiedDate":"2023-03-08"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument works for valid whitespace padded input","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgumentTest_paddedInput_success() {","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        String target \u003d \"maincommand\";","lastModifiedDate":"2023-03-24"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"   mainCommand payload --argument payload1\";","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"            String result1 \u003d parser.getMainArgument(command);","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"            assertEquals(target, result1);","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"            fail(exception.getMessage());","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument works for valid \\n, \\t padded input","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgumentTest_specialWhitespace_success() {","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        String target \u003d \"maincommand\";","lastModifiedDate":"2023-03-24"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        String command \u003d \"\\n \\t mainCommand payload --argument payload1\";","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"            String result1 \u003d parser.getMainArgument(command);","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"            assertEquals(target, result1);","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"        } catch (BadCommandException exception) {","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"            fail(exception.getMessage());","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument throws exception for empty input","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgument_emptyInput_throwsException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"            parser.getMainArgument(\"\");","lastModifiedDate":"2023-03-10"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected error throw from empty user input\");","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"     * Test that getMainArgument throws exception for whitespace-only input","lastModifiedDate":"2023-03-10"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"    public void getMainArgument_whiteSpacedInput_throwsException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-10"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"            parser.getMainArgument(\" \\n \\t \");","lastModifiedDate":"2023-03-10"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected error throw from white-spaced user input\");","lastModifiedDate":"2023-03-10"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-23"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"    public void parseUserInput_repeatedArgument_throwsException() {","lastModifiedDate":"2023-03-23"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2023-03-23"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-23"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"            parser.parseUserInput(\"foo --bar payload --bar payload2\");","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected error throw from repeated arguments\");","lastModifiedDate":"2023-03-23"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"haoyangw":2,"nichyjt":181}},{"path":"src/test/java/wellnus/focus/FocusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YongbinWang"},"content":"package wellnus.focus;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.command.StartCommand;","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.FocusManager;","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":"import wellnus.ui.TextUi;","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"public class FocusTest {","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":"    private static final String START_COMMAND \u003d \"start\";","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":"    private static final String CHECK_COMMAND \u003d \"check\";","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"YongbinWang"},"content":"    private static final String PAUSE_COMMAND \u003d \"pause\";","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"YongbinWang"},"content":"    private final CommandParser parser;","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":"    private final ByteArrayOutputStream outputStreamCaptor;","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"YongbinWang"},"content":"    private final Session session;","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"YongbinWang"},"content":"    public FocusTest() {","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"YongbinWang"},"content":"        this.session \u003d new Session();","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"YongbinWang"},"content":"        this.parser \u003d new CommandParser();","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"YongbinWang"},"content":"        this.outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"YongbinWang"},"content":"    private String getMessageFrom(String uiOutput) {","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"YongbinWang"},"content":"        TextUi textUi \u003d new TextUi();","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"YongbinWang"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"YongbinWang"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"YongbinWang"},"content":"        textUi.printSeparator();","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"YongbinWang"},"content":"        String separator \u003d outputStream.toString().trim();","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"YongbinWang"},"content":"        StringBuilder resultBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"YongbinWang"},"content":"        String[] outputLines \u003d uiOutput.split(System.lineSeparator());","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"YongbinWang"},"content":"        for (String outputLine : outputLines) {","lastModifiedDate":"2023-03-22"},{"lineNumber":43,"author":{"gitId":"YongbinWang"},"content":"            String trimmedOutputLine \u003d outputLine.trim();","lastModifiedDate":"2023-03-22"},{"lineNumber":44,"author":{"gitId":"YongbinWang"},"content":"            if (!trimmedOutputLine.equals(separator)) {","lastModifiedDate":"2023-03-22"},{"lineNumber":45,"author":{"gitId":"YongbinWang"},"content":"                resultBuilder.append(trimmedOutputLine).append(System.lineSeparator());","lastModifiedDate":"2023-03-22"},{"lineNumber":46,"author":{"gitId":"YongbinWang"},"content":"            }","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"YongbinWang"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":48,"author":{"gitId":"YongbinWang"},"content":"        return resultBuilder.toString().trim();","lastModifiedDate":"2023-03-22"},{"lineNumber":49,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":50,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":51,"author":{"gitId":"YongbinWang"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-22"},{"lineNumber":52,"author":{"gitId":"YongbinWang"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"YongbinWang"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-22"},{"lineNumber":54,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":57,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":58,"author":{"gitId":"YongbinWang"},"content":"     * Test whether start command starts the timer program.","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"YongbinWang"},"content":"     * Stops program immediately after.","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"YongbinWang"},"content":"     *","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"     * @throws BadCommandException","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":64,"author":{"gitId":"YongbinWang"},"content":"    void startTimer_checkResult_success() throws WellNusException {","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"YongbinWang"},"content":"        HashMap\u003cString, String\u003e arguments \u003d parser.parseUserInput(START_COMMAND);","lastModifiedDate":"2023-03-22"},{"lineNumber":66,"author":{"gitId":"YongbinWang"},"content":"        StartCommand startCommand \u003d new StartCommand(arguments, session);","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"YongbinWang"},"content":"        startCommand.execute();","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertEquals(true, session.getSession().get(0).getIsRunning());","lastModifiedDate":"2023-03-22"},{"lineNumber":69,"author":{"gitId":"YongbinWang"},"content":"        session.getSession().get(0).setStop();","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":71,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":72,"author":{"gitId":"YongbinWang"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":73,"author":{"gitId":"YongbinWang"},"content":"     * Test FocusManager to throw {@link BadCommandException} when an invalid command is given to the FocusManager","lastModifiedDate":"2023-03-22"},{"lineNumber":74,"author":{"gitId":"YongbinWang"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":75,"author":{"gitId":"YongbinWang"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":76,"author":{"gitId":"YongbinWang"},"content":"    public void startTimer_invalidCommand_badCommandExceptionThrown() {","lastModifiedDate":"2023-03-22"},{"lineNumber":77,"author":{"gitId":"YongbinWang"},"content":"        // Test false command by user","lastModifiedDate":"2023-03-22"},{"lineNumber":78,"author":{"gitId":"YongbinWang"},"content":"        FocusManager focusManager \u003d new FocusManager();","lastModifiedDate":"2023-03-22"},{"lineNumber":79,"author":{"gitId":"YongbinWang"},"content":"        String command \u003d \"wrong\";","lastModifiedDate":"2023-03-22"},{"lineNumber":80,"author":{"gitId":"YongbinWang"},"content":"        Assertions.assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-22"},{"lineNumber":81,"author":{"gitId":"YongbinWang"},"content":"            focusManager.testInvalidCommand(command);","lastModifiedDate":"2023-03-22"},{"lineNumber":82,"author":{"gitId":"YongbinWang"},"content":"        });","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"YongbinWang"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"YongbinWang"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":85,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"YongbinWang":85}},{"path":"src/test/java/wellnus/focus/command/ConfigCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.focus.command;","lastModifiedDate":"2023-03-26"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-26"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-03-26"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-26"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.WellNusException;","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import wellnus.focus.feature.Session;","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"/**","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":" * Test that ConfigCommand\u0027s public functions work as intended","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":" * Only execute() is called for testing rather than the other public/protected method calls","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":" * as it covers almost all the main logic and branches.","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":" */","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"//@@author nichyjt","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"public class ConfigCommandTest {","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"    private boolean isSessionCorrectlyUpdated(Session session, int cycle, int work, int brk, int longbrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"        if (session.getWork() !\u003d work) {","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"            return false;","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"        if (session.getBrk() !\u003d brk || session.getLongBrk() !\u003d longbrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"            return false;","lastModifiedDate":"2023-03-26"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        return session.getCycle() \u003d\u003d cycle;","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"    private HashMap\u003cString, String\u003e generateArguments(String cycle, String work, String brk, String longbrk) {","lastModifiedDate":"2023-03-26"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-03-26"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        argumentPayload.put(\"config\", \"\");","lastModifiedDate":"2023-03-26"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"        if (cycle !\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(ConfigCommand.ARGUMENT_CYCLE, cycle);","lastModifiedDate":"2023-03-26"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        if (work !\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(ConfigCommand.ARGUMENT_WORK, work);","lastModifiedDate":"2023-03-26"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"        if (brk !\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(ConfigCommand.ARGUMENT_BREAK, brk);","lastModifiedDate":"2023-03-26"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"        if (longbrk !\u003d null) {","lastModifiedDate":"2023-03-26"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"            argumentPayload.put(ConfigCommand.ARGUMENT_LONG_BREAK, longbrk);","lastModifiedDate":"2023-03-26"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"        return argumentPayload;","lastModifiedDate":"2023-03-26"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_success() {","lastModifiedDate":"2023-03-26"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        // Test with missing arguments","lastModifiedDate":"2023-03-26"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"3\", \"10\", null, null);","lastModifiedDate":"2023-03-26"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-03-26"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            fail(\"Expected execution to pass but failed!\");","lastModifiedDate":"2023-03-26"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"        assertTrue(isSessionCorrectlyUpdated(session, 3, 10, 1, 1));","lastModifiedDate":"2023-03-26"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"        // Test with numbers within range","lastModifiedDate":"2023-03-26"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"3\", \"20\", \"10\", \"15\");","lastModifiedDate":"2023-03-26"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-03-26"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"            fail(\"Expected execution to pass but failed!\");","lastModifiedDate":"2023-03-26"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        assertTrue(isSessionCorrectlyUpdated(session, 3, 20, 10, 15));","lastModifiedDate":"2023-03-26"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"     * Ensure that at extreme valid values, executes still works","lastModifiedDate":"2023-03-26"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"    void executeTest_minMaxRanges_success() {","lastModifiedDate":"2023-03-26"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"        // Test with edge values (max accepted values)","lastModifiedDate":"2023-03-26"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"60\", \"60\", \"60\");","lastModifiedDate":"2023-03-26"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-03-26"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"            fail(\"Expected execution to pass but failed!\");","lastModifiedDate":"2023-03-26"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"        assertTrue(isSessionCorrectlyUpdated(session, 5, 60, 60, 60));","lastModifiedDate":"2023-03-26"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        // Test with edge values (min accepted values)","lastModifiedDate":"2023-03-26"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"2\", \"1\", \"1\", \"1\");","lastModifiedDate":"2023-03-26"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-26"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"            command.execute();","lastModifiedDate":"2023-03-26"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        } catch (WellNusException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"            fail(\"Expected execution to pass but failed!\");","lastModifiedDate":"2023-03-26"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"        assertTrue(isSessionCorrectlyUpdated(session, 2, 1, 1, 1));","lastModifiedDate":"2023-03-26"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"     * Ensure that negative numbers cause an error to be thrown","lastModifiedDate":"2023-03-26"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_negativeNumbers_exceptionThrown() {","lastModifiedDate":"2023-03-26"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"        // Test with negative time values","lastModifiedDate":"2023-03-26"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"10\", \"-5\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        assertThrows(WellNusException.class, command::execute);","lastModifiedDate":"2023-03-26"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"        // Test with negative cycle values","lastModifiedDate":"2023-03-26"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"-5\", \"10\", \"10\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        assertThrows(WellNusException.class, command::execute);","lastModifiedDate":"2023-03-26"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"     * Ensure that large numbers (in config\u0027s context) cause an error to be thrown","lastModifiedDate":"2023-03-26"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_largeNumbers_exceptionThrown() {","lastModifiedDate":"2023-03-26"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        // Test with large time values","lastModifiedDate":"2023-03-26"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"61\", \"10\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"        assertThrows(WellNusException.class, command::execute);","lastModifiedDate":"2023-03-26"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"        // Test with large cycle values","lastModifiedDate":"2023-03-26"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"10\", \"10\", \"10\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"        assertThrows(WellNusException.class, command::execute);","lastModifiedDate":"2023-03-26"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"     * Ensure that NaN values are correctly handled","lastModifiedDate":"2023-03-26"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_notANumber_exceptionThrown() {","lastModifiedDate":"2023-03-26"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"        // Test with NaN time value","lastModifiedDate":"2023-03-26"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"foo\", \"5\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"        assertThrows(WellNusException.class, command::execute);","lastModifiedDate":"2023-03-26"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"        // Test with NaN cycle value","lastModifiedDate":"2023-03-26"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(\"bar\", \"5\", \"10\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"        assertThrows(WellNusException.class, command::execute);","lastModifiedDate":"2023-03-26"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"     * Ensure that length of argument errors are caught (too few \u0026 too many)","lastModifiedDate":"2023-03-26"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"    public void executeTest_invalidArguments_exceptionThrown() {","lastModifiedDate":"2023-03-26"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"        ConfigCommand command;","lastModifiedDate":"2023-03-26"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"        Session session \u003d new Session();","lastModifiedDate":"2023-03-26"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"        // Test with too many arguments","lastModifiedDate":"2023-03-26"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d generateArguments(\"5\", \"10\", \"5\", \"20\");","lastModifiedDate":"2023-03-26"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"        argumentPayload.put(\"foo\", \"bar\");","lastModifiedDate":"2023-03-26"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"        assertThrows(WellNusException.class, command::execute);","lastModifiedDate":"2023-03-26"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"        // Test with too few arguments","lastModifiedDate":"2023-03-26"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"        argumentPayload \u003d generateArguments(null, null, null, null);","lastModifiedDate":"2023-03-26"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"        command \u003d new ConfigCommand(argumentPayload, session);","lastModifiedDate":"2023-03-26"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"        assertThrows(WellNusException.class, command::execute);","lastModifiedDate":"2023-03-26"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-26"}],"authorContributionMap":{"nichyjt":182}},{"path":"src/test/java/wellnus/reflection/FavoriteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.command.LikeCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"class FavoriteCommandTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND \u003d \"like 1\";","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    private static final int MIN_QUESTION_LENGTH \u003d 3;","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_CORRECT_LENGTH \u003d true;","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final Integer[] ARR_INDEXES \u003d { 5, 6, 7, 8, 1};","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final HashSet\u003cInteger\u003e RANDOM_INDEXES \u003d new HashSet\u003c\u003e(Arrays.asList(ARR_INDEXES));","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    // Test whether fav list indexes are properly saved and returned","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    void getFavQuestions_checkListLength_success() throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"        questionList.setRandomQuestionIndexes(RANDOM_INDEXES);","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadLikeCmd \u003d commandParser.parseUserInput(LIKE_COMMAND);","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmd \u003d new LikeCommand(argumentPayloadLikeCmd, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        likeCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        String favQuestions \u003d questionList.getFavQuestions();","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(IS_CORRECT_LENGTH, favQuestions.length() \u003e\u003d MIN_QUESTION_LENGTH);","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":36}},{"path":"src/test/java/wellnus/reflection/GetCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-12"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":10,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.command.GetCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionQuestion;","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":" * Class to test different tests for GetCommand Class utilising JUnit tests","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"YongbinWang"},"content":" * Test cases will involve expected outputs and correct exception handling","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":" *","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":" * @@author wenxin-c","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"class GetCommandTest {","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final int EXPECTED_ARRAY_LENGTH \u003d 5;","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final int EXPECTED_ARGUMENT_PAYLOAD_SIZE \u003d 1;","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND \u003d \"get\";","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_PAYLOAD \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND_WRONG_FORMAT \u003d \"get reflect\";","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    private static final QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    // Test whether the get command is properly generated","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    void createGetObject_checkArgumentPayload_success() throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        reflectManager.setArgumentPayload(GET_COMMAND);","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d reflectManager.getArgumentPayload();","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EXPECTED_ARGUMENT_PAYLOAD_SIZE, argumentPayload.size());","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        assertTrue(argumentPayload.containsKey(GET_COMMAND));","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EMPTY_PAYLOAD, argumentPayload.get(GET_COMMAND));","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"    // Test the number of questions being generated","lastModifiedDate":"2023-03-11"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    void getRandomQuestions_checkLength_expectFive() throws BadCommandException, StorageException {","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e getCmdArgumentPayload \u003d commandParser.parseUserInput(GET_COMMAND);","lastModifiedDate":"2023-03-27"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        GetCommand get \u003d new GetCommand(getCmdArgumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e selectedQuestions \u003d get.getRandomQuestions();","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EXPECTED_ARRAY_LENGTH, selectedQuestions.size());","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"    // Test whether command is validated properly.","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"    void validateCommand_getCommand_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e getCmdArgumentPayload \u003d commandParser.parseUserInput(GET_COMMAND_WRONG_FORMAT);","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"        GetCommand get \u003d new GetCommand(getCmdArgumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"YongbinWang"},"content":"        assertThrows(BadCommandException.class, () -\u003e get.validateCommand(getCmdArgumentPayload));","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-11"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"wenxin-c":53,"YongbinWang":11}},{"path":"src/test/java/wellnus/reflection/HomeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"YongbinWang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"YongbinWang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"YongbinWang"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"YongbinWang"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.command.HomeCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"YongbinWang"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"YongbinWang"},"content":" * Class to test different tests for HomeCommand Class utilising JUnit tests","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"YongbinWang"},"content":" * Test cases will involve expected outputs and correct exception handling","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":" *","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":" * @@author wenxin-c","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"YongbinWang"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"class HomeCommandTest {","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND \u003d \"home\";","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND_WRONG_FORMAT \u003d \"home back\";","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String HOME_COMMAND_WITH_SPACES \u003d \"   home   \";","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_NOT_EXIT \u003d false;","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_EXIT \u003d true;","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    // Test whether ReturnCommand execute() method can terminate self reflection or not.","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkIsExit_expectTrue() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setArgumentPayload(HOME_COMMAND);","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e returnArgumentPayload \u003d reflectionManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand homeCmd \u003d new HomeCommand(returnArgumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        homeCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(IS_EXIT, reflectionManager.getIsExit());","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"    // Test whether wrong format command exception is caught or not.","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkWrongCmdFormat_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e homeArgumentPayload \u003d commandParser.parseUserInput(HOME_COMMAND_WRONG_FORMAT);","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        HomeCommand returnCmd \u003d new HomeCommand(homeArgumentPayload, questionList);","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class, () -\u003e {","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"            returnCmd.validateCommand(homeArgumentPayload);","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        });","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    // Test whether leading/dangling spaces will be removed.","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    void execute_checkSpaceRemoval_success() throws BadCommandException {","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setCommandType(HOME_COMMAND_WITH_SPACES);","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        String homeCommand \u003d reflectionManager.getCommandType();","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(HOME_COMMAND, homeCommand);","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-12"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"wenxin-c":52,"YongbinWang":9}},{"path":"src/test/java/wellnus/reflection/LikeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"import wellnus.command.CommandParser;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.command.LikeCommand;","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"// @@author wenxin-c","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"class LikeCommandTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND_KEYWORD \u003d \"like\";","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND \u003d \"like 1\";","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND_MISSING_PARAM \u003d \"like\";","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND_WRONG_PARAM \u003d \"like ab\";","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String LIKE_COMMAND_OUT_OF_BOUND \u003d \"like 10\";","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final int INPUT_INDEX \u003d 2;","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final int INITIAL_INDEX \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final int INCREMENT_ONE \u003d 1;","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final boolean IS_ADDED \u003d true;","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final Integer[] ARR_INDEXES \u003d { 5, 6, 7, 8, 1};","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private static final HashSet\u003cInteger\u003e RANDOM_INDEXES \u003d new HashSet\u003c\u003e(Arrays.asList(ARR_INDEXES));","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    // Test whether the wrong input format can be caught.","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"    void validateLikeCommand_checkFormat_expectExceptions() throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadMissingParam \u003d commandParser.parseUserInput(LIKE_COMMAND_MISSING_PARAM);","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmdMissingParam \u003d new LikeCommand(argumentPayloadMissingParam, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadWrongParam \u003d commandParser.parseUserInput(LIKE_COMMAND_WRONG_PARAM);","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmdWrongParam \u003d new LikeCommand(argumentPayloadWrongParam, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadOutBound \u003d commandParser.parseUserInput(LIKE_COMMAND_OUT_OF_BOUND);","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmdOutBound \u003d new LikeCommand(argumentPayloadOutBound, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(NumberFormatException.class, (","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e likeCmdMissingParam.validateCommand(argumentPayloadMissingParam));","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(NumberFormatException.class, (","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e likeCmdWrongParam.validateCommand(argumentPayloadWrongParam));","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class, (","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e likeCmdOutBound.validateCommand(argumentPayloadOutBound));","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown when executing like command before getting a previous set of questions.","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    void addFavList_noPrevQuestions_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d commandParser.parseUserInput(LIKE_COMMAND);","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmd \u003d new LikeCommand(argumentPayload, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        if (!questionList.hasRandomQuestionIndexes()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"            assertThrows(BadCommandException.class, (","lastModifiedDate":"2023-03-25"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"            ) -\u003e likeCmd.addFavQuestion(argumentPayload.get(LIKE_COMMAND_KEYWORD)));","lastModifiedDate":"2023-03-25"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    // Test the mapping from user input to question index.","lastModifiedDate":"2023-03-25"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    void addFavList_checkIndex_success() throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"        questionList.setRandomQuestionIndexes(RANDOM_INDEXES);","lastModifiedDate":"2023-03-25"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadLikeCmd \u003d commandParser.parseUserInput(LIKE_COMMAND);","lastModifiedDate":"2023-03-27"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmd \u003d new LikeCommand(argumentPayloadLikeCmd, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cInteger, Integer\u003e indexQuestionMap \u003d likeCmd.mapInputToQuestion();","lastModifiedDate":"2023-03-25"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"        int count \u003d INITIAL_INDEX;","lastModifiedDate":"2023-03-25"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"        int finalIndex \u003d INITIAL_INDEX;","lastModifiedDate":"2023-03-25"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"        for (int index : RANDOM_INDEXES) {","lastModifiedDate":"2023-03-25"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"            if (count \u003e INPUT_INDEX) {","lastModifiedDate":"2023-03-25"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"                break;","lastModifiedDate":"2023-03-25"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"            }","lastModifiedDate":"2023-03-25"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"            count +\u003d INCREMENT_ONE;","lastModifiedDate":"2023-03-25"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"            finalIndex \u003d index;","lastModifiedDate":"2023-03-25"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"        int questionIndex \u003d indexQuestionMap.get(INPUT_INDEX);","lastModifiedDate":"2023-03-25"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(finalIndex, questionIndex);","lastModifiedDate":"2023-03-25"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    // Test whether like question is successfully added into fav list","lastModifiedDate":"2023-03-25"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    void addFavList_checkQuestionList_success() throws BadCommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"        questionList.setRandomQuestionIndexes(RANDOM_INDEXES);","lastModifiedDate":"2023-03-25"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"        CommandParser commandParser \u003d new CommandParser();","lastModifiedDate":"2023-03-27"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayloadLikeCmd \u003d commandParser.parseUserInput(LIKE_COMMAND);","lastModifiedDate":"2023-03-27"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"        LikeCommand likeCmd \u003d new LikeCommand(argumentPayloadLikeCmd, questionList);","lastModifiedDate":"2023-03-25"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"        likeCmd.execute();","lastModifiedDate":"2023-03-25"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"        Set\u003cInteger\u003e favList \u003d questionList.getDataIndex().get(INDEX_ZERO);","lastModifiedDate":"2023-03-25"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"        for (int index : favList) {","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"            System.out.println(index);","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(INCREMENT_ONE, favList.size());","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"        int index \u003d Integer.parseInt(argumentPayloadLikeCmd.get(LIKE_COMMAND_KEYWORD));","lastModifiedDate":"2023-03-25"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(IS_ADDED, favList.contains(index));","lastModifiedDate":"2023-03-25"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":105}},{"path":"src/test/java/wellnus/reflection/QuestionListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-25"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-25"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.QuestionList;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionQuestion;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"// @@author wenxin-c","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"class QuestionListTest {","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"    private static final int FULL_ARRAY_LENGTH \u003d 10;","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    // Test the correct number of questions are loaded into the list","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    void setUpQuestions_checkArrayLength_success() {","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"        QuestionList questionList \u003d new QuestionList();","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"        ArrayList\u003cReflectionQuestion\u003e questions \u003d questionList.getAllQuestions();","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"        int fullArrayLength \u003d questions.size();","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(FULL_ARRAY_LENGTH, fullArrayLength);","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"wenxin-c":23}},{"path":"src/test/java/wellnus/reflection/ReflectionManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"import wellnus.exception.BadCommandException;","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionManager;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"class ReflectionManagerTest {","lastModifiedDate":"2023-03-11"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final String EMPTY_STRING \u003d \"\";","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private static final String GET_COMMAND \u003d \"get\";","lastModifiedDate":"2023-03-11"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"    private static final String INVALID_COMMAND \u003d \"test\";","lastModifiedDate":"2023-03-11"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final String SEPARATOR \u003d \" \";","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown for invalid command","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    void execution_invalidCommand_expectException() throws BadCommandException {","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setCommandType(INVALID_COMMAND);","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class,","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"                reflectionManager::executeCommands);","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown for empty string for commandType.","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    void setCommandType_emptyString_expectException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"        String[] input \u003d EMPTY_STRING.split(SEPARATOR);","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"        System.out.println(input.length);","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class, (","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e reflectionManager.setCommandType(EMPTY_STRING));","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exceptions are thrown for empty string for argument-payload pairs.","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    void setArgumentPayload_emptyCommand_expectException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        assertThrows(BadCommandException.class, (","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        ) -\u003e reflectionManager.setArgumentPayload(EMPTY_STRING));","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    // Test whether argument_payload pair is properly generated.","lastModifiedDate":"2023-03-11"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-11"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"    void setArgumentPayload_singleCommand_expectEmptyPayload() throws BadCommandException {","lastModifiedDate":"2023-03-11"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"        ReflectionManager reflectionManager \u003d new ReflectionManager();","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"        reflectionManager.setArgumentPayload(GET_COMMAND);","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"        HashMap\u003cString, String\u003e argumentPayload \u003d reflectionManager.getArgumentPayload();","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"        String value \u003d argumentPayload.get(GET_COMMAND);","lastModifiedDate":"2023-03-11"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(EMPTY_STRING, value);","lastModifiedDate":"2023-03-11"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-11"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-11"}],"authorContributionMap":{"wenxin-c":56}},{"path":"src/test/java/wellnus/reflection/ReflectionQuestionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wenxin-c"},"content":"package wellnus.reflection;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"wenxin-c"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"wenxin-c"},"content":"import wellnus.reflection.feature.ReflectionQuestion;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"wenxin-c"},"content":"class ReflectionQuestionTest {","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"    private static final String QUESTION \u003d \"How\u0027s today?\";","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    // Test whether questions will be created and printed in a proper format","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    void createReflectionQuestion_printString_success() {","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"        ReflectionQuestion question \u003d new ReflectionQuestion(QUESTION);","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"        System.out.print(question);","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(QUESTION, outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"wenxin-c":30}},{"path":"src/test/java/wellnus/storage/StorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"nichyjt"},"content":"package wellnus.storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"nichyjt"},"content":"import java.io.File;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"nichyjt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Order;","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"nichyjt"},"content":"import wellnus.exception.StorageException;","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"nichyjt"},"content":"public class StorageTest {","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"nichyjt"},"content":"    private Storage getStorageInstance() {","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"nichyjt"},"content":"        Storage storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"nichyjt"},"content":"            storage \u003d new Storage();","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to create instance of storage!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"nichyjt"},"content":"            return null;","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"nichyjt"},"content":"        return storage;","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"nichyjt"},"content":"    private ArrayList\u003cString\u003e getDebugStringList() {","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"nichyjt"},"content":"        String entry0 \u003d \"attr0 p0\";","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"nichyjt"},"content":"        String entry1 \u003d \"attr1 p1 --p2 p3\";","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"nichyjt"},"content":"        String entry2 \u003d \"attr2 --p1 p2 --p3 --p4\";","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"nichyjt"},"content":"        String entry3 \u003d \"attr3\";","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e stringList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"nichyjt"},"content":"        stringList.add(entry0);","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"nichyjt"},"content":"        stringList.add(entry1);","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"nichyjt"},"content":"        stringList.add(entry2);","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"nichyjt"},"content":"        stringList.add(entry3);","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"nichyjt"},"content":"        return stringList;","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"nichyjt"},"content":"    private String getDebugTokenizedString() {","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"nichyjt"},"content":"        return \"attr0 p0\"","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"nichyjt"},"content":"                + Storage.DELIMITER","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"nichyjt"},"content":"                + \"attr1 p1 --p2 p3\"","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"nichyjt"},"content":"                + Storage.DELIMITER","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"nichyjt"},"content":"                + \"attr2 --p1 p2 --p3 --p4\"","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"nichyjt"},"content":"                + Storage.DELIMITER","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"nichyjt"},"content":"                + \"attr3\"","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"nichyjt"},"content":"                + Storage.DELIMITER;","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"nichyjt"},"content":"    @Order(1)","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"nichyjt"},"content":"    public void createAndDeleteFile_test() {","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"nichyjt"},"content":"        String debugFilename \u003d Storage.FILE_DEBUG;","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"nichyjt"},"content":"        // Create test","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"nichyjt"},"content":"        File debugFile;","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"nichyjt"},"content":"            debugFile \u003d storage.getFile(debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":64,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to create and get new file!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"nichyjt"},"content":"        // Remove test","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":70,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":71,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to delete file!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"nichyjt"},"content":"            return;","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"nichyjt"},"content":"        // Sanity check that file actually is deleted","lastModifiedDate":"2023-03-19"},{"lineNumber":75,"author":{"gitId":"nichyjt"},"content":"        assertFalse(debugFile.exists());","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":79,"author":{"gitId":"nichyjt"},"content":"    @Order(2)","lastModifiedDate":"2023-03-24"},{"lineNumber":80,"author":{"gitId":"nichyjt"},"content":"    public void tokenizeHashmap_test() {","lastModifiedDate":"2023-03-19"},{"lineNumber":81,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-19"},{"lineNumber":82,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":83,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":84,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e debugList \u003d getDebugStringList();","lastModifiedDate":"2023-03-19"},{"lineNumber":85,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":86,"author":{"gitId":"nichyjt"},"content":"        String result \u003d storage.tokenizeStringList(debugList);","lastModifiedDate":"2023-03-19"},{"lineNumber":87,"author":{"gitId":"nichyjt"},"content":"        String expected \u003d getDebugTokenizedString();","lastModifiedDate":"2023-03-19"},{"lineNumber":88,"author":{"gitId":"nichyjt"},"content":"        assertEquals(expected, result);","lastModifiedDate":"2023-03-19"},{"lineNumber":89,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":90,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":91,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":92,"author":{"gitId":"nichyjt"},"content":"    @Order(3)","lastModifiedDate":"2023-03-24"},{"lineNumber":93,"author":{"gitId":"nichyjt"},"content":"    public void detokenizeDataString_test() {","lastModifiedDate":"2023-03-19"},{"lineNumber":94,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-19"},{"lineNumber":95,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":96,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":97,"author":{"gitId":"nichyjt"},"content":"        String dataString \u003d getDebugTokenizedString();","lastModifiedDate":"2023-03-19"},{"lineNumber":98,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e expectedList \u003d getDebugStringList();","lastModifiedDate":"2023-03-19"},{"lineNumber":99,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e result \u003d storage.detokenizeDataString(dataString);","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"nichyjt"},"content":"        assertEquals(result, expectedList);","lastModifiedDate":"2023-03-19"},{"lineNumber":101,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":102,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":103,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":104,"author":{"gitId":"nichyjt"},"content":"     * Tests the end-to-end of saving and loading.","lastModifiedDate":"2023-03-20"},{"lineNumber":105,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":106,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-19"},{"lineNumber":107,"author":{"gitId":"nichyjt"},"content":"    @Order(4)","lastModifiedDate":"2023-03-24"},{"lineNumber":108,"author":{"gitId":"nichyjt"},"content":"    public void saveAndLoadData_test() {","lastModifiedDate":"2023-03-19"},{"lineNumber":109,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-19"},{"lineNumber":110,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":111,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":112,"author":{"gitId":"nichyjt"},"content":"        String debugFilename \u003d Storage.FILE_DEBUG;","lastModifiedDate":"2023-03-19"},{"lineNumber":113,"author":{"gitId":"nichyjt"},"content":"        // Test saving logic","lastModifiedDate":"2023-03-19"},{"lineNumber":114,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e debugList \u003d getDebugStringList();","lastModifiedDate":"2023-03-19"},{"lineNumber":115,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"nichyjt"},"content":"            storage.saveData(getDebugStringList(), debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":118,"author":{"gitId":"nichyjt"},"content":"            fail(\"Storage failed to save data!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":119,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":120,"author":{"gitId":"nichyjt"},"content":"        // Test loading logic","lastModifiedDate":"2023-03-19"},{"lineNumber":121,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-19"},{"lineNumber":122,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":123,"author":{"gitId":"nichyjt"},"content":"            result \u003d storage.loadData(debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":124,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":125,"author":{"gitId":"nichyjt"},"content":"            fail(\"Storage failed to load data!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":126,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":127,"author":{"gitId":"nichyjt"},"content":"        assertEquals(debugList, result);","lastModifiedDate":"2023-03-19"},{"lineNumber":128,"author":{"gitId":"nichyjt"},"content":"        // Cleanup file","lastModifiedDate":"2023-03-19"},{"lineNumber":129,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":130,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(debugFilename);","lastModifiedDate":"2023-03-19"},{"lineNumber":131,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-19"},{"lineNumber":132,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to cleanup file!\");","lastModifiedDate":"2023-03-19"},{"lineNumber":133,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":134,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":135,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":136,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":137,"author":{"gitId":"nichyjt"},"content":"     * Ensures that deleting a file that does not exist due to developer error does not crash WellNUS++","lastModifiedDate":"2023-03-24"},{"lineNumber":138,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":139,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":140,"author":{"gitId":"nichyjt"},"content":"    @Order(5)","lastModifiedDate":"2023-03-24"},{"lineNumber":141,"author":{"gitId":"nichyjt"},"content":"    public void deleteFile_fileNotExist_success() {","lastModifiedDate":"2023-03-24"},{"lineNumber":142,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":143,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":144,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-24"},{"lineNumber":145,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(Storage.FILE_DEBUG);","lastModifiedDate":"2023-03-24"},{"lineNumber":146,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-24"},{"lineNumber":147,"author":{"gitId":"nichyjt"},"content":"            fail(\"deleteFile failed on file not exist!\");","lastModifiedDate":"2023-03-24"},{"lineNumber":148,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":149,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":150,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":151,"author":{"gitId":"nichyjt"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":152,"author":{"gitId":"nichyjt"},"content":"     * Ensure that loading an un-instantiated file automatically creates the file as safety behaviour","lastModifiedDate":"2023-03-24"},{"lineNumber":153,"author":{"gitId":"nichyjt"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":154,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":155,"author":{"gitId":"nichyjt"},"content":"    @Order(6)","lastModifiedDate":"2023-03-24"},{"lineNumber":156,"author":{"gitId":"nichyjt"},"content":"    public void loadFile_fileNotExist() {","lastModifiedDate":"2023-03-24"},{"lineNumber":157,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":158,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":159,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-24"},{"lineNumber":160,"author":{"gitId":"nichyjt"},"content":"            storage.loadData(Storage.FILE_DEBUG);","lastModifiedDate":"2023-03-24"},{"lineNumber":161,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-24"},{"lineNumber":162,"author":{"gitId":"nichyjt"},"content":"            fail(\"loadData failed when loading file that does not exist despite safety checks\");","lastModifiedDate":"2023-03-24"},{"lineNumber":163,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":164,"author":{"gitId":"nichyjt"},"content":"        // Cleanup the debug file that was created as part of safety measures","lastModifiedDate":"2023-03-24"},{"lineNumber":165,"author":{"gitId":"nichyjt"},"content":"        // deleteFile must work as the above tests on deleteFile have passed","lastModifiedDate":"2023-03-24"},{"lineNumber":166,"author":{"gitId":"nichyjt"},"content":"        try {","lastModifiedDate":"2023-03-24"},{"lineNumber":167,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(Storage.FILE_DEBUG);","lastModifiedDate":"2023-03-24"},{"lineNumber":168,"author":{"gitId":"nichyjt"},"content":"        } catch (StorageException exception) {","lastModifiedDate":"2023-03-26"},{"lineNumber":169,"author":{"gitId":"nichyjt"},"content":"            fail(\"Failed to cleanup file!\");","lastModifiedDate":"2023-03-24"},{"lineNumber":170,"author":{"gitId":"nichyjt"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":171,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":172,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":173,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":174,"author":{"gitId":"nichyjt"},"content":"    @Order(7)","lastModifiedDate":"2023-03-24"},{"lineNumber":175,"author":{"gitId":"nichyjt"},"content":"    public void getFile_invalidFileName_exceptionThrown() {","lastModifiedDate":"2023-03-24"},{"lineNumber":176,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":177,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":178,"author":{"gitId":"nichyjt"},"content":"        assertThrows(StorageException.class, () -\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":179,"author":{"gitId":"nichyjt"},"content":"            storage.getFile(\"foobar\");","lastModifiedDate":"2023-03-24"},{"lineNumber":180,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected exception to be thrown for invalid filename\");","lastModifiedDate":"2023-03-24"},{"lineNumber":181,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":182,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":183,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":184,"author":{"gitId":"nichyjt"},"content":"    @Order(8)","lastModifiedDate":"2023-03-24"},{"lineNumber":185,"author":{"gitId":"nichyjt"},"content":"    public void saveData_invalidFileName_exceptionThrown() {","lastModifiedDate":"2023-03-24"},{"lineNumber":186,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":187,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":188,"author":{"gitId":"nichyjt"},"content":"        ArrayList\u003cString\u003e payload \u003d getDebugStringList();","lastModifiedDate":"2023-03-24"},{"lineNumber":189,"author":{"gitId":"nichyjt"},"content":"        assertThrows(StorageException.class, () -\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":190,"author":{"gitId":"nichyjt"},"content":"            storage.saveData(payload, \"foobar\");","lastModifiedDate":"2023-03-24"},{"lineNumber":191,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected exception to be thrown for invalid filename\");","lastModifiedDate":"2023-03-24"},{"lineNumber":192,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":193,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":194,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":195,"author":{"gitId":"nichyjt"},"content":"    @Order(9)","lastModifiedDate":"2023-03-24"},{"lineNumber":196,"author":{"gitId":"nichyjt"},"content":"    public void loadData_invalidFileName_exceptionThrown() {","lastModifiedDate":"2023-03-24"},{"lineNumber":197,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":198,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":199,"author":{"gitId":"nichyjt"},"content":"        assertThrows(StorageException.class, () -\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":200,"author":{"gitId":"nichyjt"},"content":"            storage.loadData(\"foobar\");","lastModifiedDate":"2023-03-24"},{"lineNumber":201,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected exception to be thrown for invalid filename\");","lastModifiedDate":"2023-03-24"},{"lineNumber":202,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":203,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":204,"author":{"gitId":"nichyjt"},"content":"    @Test","lastModifiedDate":"2023-03-24"},{"lineNumber":205,"author":{"gitId":"nichyjt"},"content":"    @Order(10)","lastModifiedDate":"2023-03-24"},{"lineNumber":206,"author":{"gitId":"nichyjt"},"content":"    public void deleteFile_invalidFileName_exceptionThrown() {","lastModifiedDate":"2023-03-24"},{"lineNumber":207,"author":{"gitId":"nichyjt"},"content":"        Storage storage \u003d getStorageInstance();","lastModifiedDate":"2023-03-24"},{"lineNumber":208,"author":{"gitId":"nichyjt"},"content":"        assert storage !\u003d null;","lastModifiedDate":"2023-03-24"},{"lineNumber":209,"author":{"gitId":"nichyjt"},"content":"        assertThrows(StorageException.class, () -\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":210,"author":{"gitId":"nichyjt"},"content":"            storage.deleteFile(\"foobar\");","lastModifiedDate":"2023-03-24"},{"lineNumber":211,"author":{"gitId":"nichyjt"},"content":"        }, \"Expected exception to be thrown for invalid filename\");","lastModifiedDate":"2023-03-24"},{"lineNumber":212,"author":{"gitId":"nichyjt"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":213,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":214,"author":{"gitId":"nichyjt"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"nichyjt":214}},{"path":"src/test/java/wellnus/tokenize/AtomicHabitTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.tokenize;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"import wellnus.atomichabit.feature.AtomicHabit;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"import wellnus.storage.AtomicHabitTokenizer;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"public class AtomicHabitTokenizerTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    private ArrayList\u003cString\u003e getInvalidTokenizedArrayList(String invalidString) {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e invalidTokenizedArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"        invalidTokenizedArrayList.add(invalidString);","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"        return invalidTokenizedArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"    void tokenizeHabit_checkOutput_success() {","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedHabitOne \u003d \"--description foo --count 1\";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedHabitTwo \u003d \"--description bar --count 2\";","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e habitsToTokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabit atomicHabitTestOne \u003d new AtomicHabit(\"foo\", 1);","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabit atomicHabitTestTwo \u003d new AtomicHabit(\"bar\", 2);","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"        habitsToTokenize.add(atomicHabitTestOne);","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"        habitsToTokenize.add(atomicHabitTestTwo);","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabitTokenizer habitTokenizer \u003d new AtomicHabitTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e actualTokenizedAtomicHabits \u003d habitTokenizer.tokenize(habitsToTokenize);","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedTokenizedHabitOne, actualTokenizedAtomicHabits.get(INDEX_ZERO));","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedTokenizedHabitTwo, actualTokenizedAtomicHabits.get(INDEX_ONE));","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeHabit_checkOutput_success() throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedHabitTestOne \u003d \"--description foo --count 1\";","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedHabitTestTwo \u003d \"--description bar baz --count 1000\";","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        String expectedDescriptionTestOne \u003d \"foo\";","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"        String expectedDescriptionTestTwo \u003d \"bar baz\";","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"        int expectedCountTestOne \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"        int expectedCountTestTwo \u003d 1000;","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e tokenizedHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"        tokenizedHabits.add(tokenizedHabitTestOne);","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"        tokenizedHabits.add(tokenizedHabitTestTwo);","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabitTokenizer habitTokenizer \u003d new AtomicHabitTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e actualDetokenizedAtomicHabits \u003d habitTokenizer.detokenize(tokenizedHabits);","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedDescriptionTestOne, actualDetokenizedAtomicHabits.get(INDEX_ZERO).getDescription());","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedCountTestOne, actualDetokenizedAtomicHabits.get(INDEX_ZERO).getCount());","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedDescriptionTestTwo, actualDetokenizedAtomicHabits.get(INDEX_ONE).getDescription());","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedCountTestTwo, actualDetokenizedAtomicHabits.get(INDEX_ONE).getCount());","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeHabit_checkOutputEmptyString_success() throws TokenizerException {","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e expectedDetokenizedAtomicHabit \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e tokenizedHabits \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabitTokenizer habitTokenizer \u003d new AtomicHabitTokenizer();","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cAtomicHabit\u003e actualDetokenizedAtomicHabits \u003d habitTokenizer.detokenize(tokenizedHabits);","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"        assertEquals(expectedDetokenizedAtomicHabit, actualDetokenizedAtomicHabits);","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeHabit_invalidTokenizedAtomicHabitString_tokenizerExceptionThrown() throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"        AtomicHabitTokenizer habitTokenizer \u003d new AtomicHabitTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringOne \u003d \"foo\";","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringOne));","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringTwo \u003d \"--description\";","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringTwo));","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringThree \u003d \"description count\";","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringThree));","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringFour \u003d \"--description --count\";","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringFour));","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringFive \u003d \"--description foo --count bar\";","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringFive));","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"BernardLesley"},"content":"        String invalidStringSix \u003d \"--description foo --count 1 --baz baz\";","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertThrows(TokenizerException.class, () -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"BernardLesley"},"content":"            habitTokenizer.detokenize(getInvalidTokenizedArrayList(invalidStringSix));","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"BernardLesley"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":92}},{"path":"src/test/java/wellnus/tokenize/ReflectionTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"BernardLesley"},"content":"package wellnus.tokenize;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"BernardLesley"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"BernardLesley"},"content":"import java.util.HashSet;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"BernardLesley"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"BernardLesley"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"BernardLesley"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"BernardLesley"},"content":"import wellnus.exception.TokenizerException;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"BernardLesley"},"content":"import wellnus.storage.ReflectionTokenizer;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"BernardLesley"},"content":"public class ReflectionTokenizerTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ZERO \u003d 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"BernardLesley"},"content":"    private static final int INDEX_ONE \u003d 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"BernardLesley"},"content":"    void tokenizeReflect_checkOutput_success() {","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e indexesToTokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e likeTestIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"BernardLesley"},"content":"        likeTestIndexes.add(1);","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"BernardLesley"},"content":"        likeTestIndexes.add(2);","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e prefTestIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"BernardLesley"},"content":"        prefTestIndexes.add(3);","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"BernardLesley"},"content":"        prefTestIndexes.add(4);","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"BernardLesley"},"content":"        indexesToTokenize.add(likeTestIndexes);","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"BernardLesley"},"content":"        indexesToTokenize.add(prefTestIndexes);","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedLike \u003d \"like:1,2\";","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedPref \u003d \"pref:3,4\";","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e expectedTokenizedIndex \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"BernardLesley"},"content":"        expectedTokenizedIndex.add(expectedTokenizedLike);","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"BernardLesley"},"content":"        expectedTokenizedIndex.add(expectedTokenizedPref);","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"BernardLesley"},"content":"        ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e actualTokenizedIndex \u003d reflectionTokenizer.tokenize(indexesToTokenize);","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedTokenizedIndex, actualTokenizedIndex);","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"BernardLesley"},"content":"    void tokenizeReflect_checkOutputEmptyIndex_success() {","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e indexesToTokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e likeTestIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e prefTestIndexes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"BernardLesley"},"content":"        indexesToTokenize.add(likeTestIndexes);","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"BernardLesley"},"content":"        indexesToTokenize.add(prefTestIndexes);","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedLike \u003d \"like:\";","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"BernardLesley"},"content":"        String expectedTokenizedPref \u003d \"pref:\";","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e expectedTokenizedIndex \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"BernardLesley"},"content":"        expectedTokenizedIndex.add(expectedTokenizedLike);","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"BernardLesley"},"content":"        expectedTokenizedIndex.add(expectedTokenizedPref);","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"BernardLesley"},"content":"        ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e actualTokenizedIndex \u003d reflectionTokenizer.tokenize(indexesToTokenize);","lastModifiedDate":"2023-03-22"},{"lineNumber":52,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedTokenizedIndex, actualTokenizedIndex);","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeReflect_checkOutput_success() throws TokenizerException {","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e expectedDetokenizedLikes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":58,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedLikes.add(1);","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedLikes.add(2);","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e expectedDetokenizedPrefs \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedPrefs.add(3);","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"BernardLesley"},"content":"        expectedDetokenizedPrefs.add(4);","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e stringsToDetokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":64,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedLikeTest \u003d \"like:1,2\";","lastModifiedDate":"2023-03-27"},{"lineNumber":65,"author":{"gitId":"BernardLesley"},"content":"        String tokenizedPrefTest \u003d \"pref:3,4\";","lastModifiedDate":"2023-03-27"},{"lineNumber":66,"author":{"gitId":"BernardLesley"},"content":"        stringsToDetokenize.add(tokenizedLikeTest);","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"BernardLesley"},"content":"        stringsToDetokenize.add(tokenizedPrefTest);","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"BernardLesley"},"content":"        ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e actualDetokenizedIndex \u003d reflectionTokenizer.detokenize(stringsToDetokenize);","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedDetokenizedLikes, actualDetokenizedIndex.get(INDEX_ZERO));","lastModifiedDate":"2023-03-22"},{"lineNumber":71,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedDetokenizedPrefs, actualDetokenizedIndex.get(INDEX_ONE));","lastModifiedDate":"2023-03-22"},{"lineNumber":72,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"BernardLesley"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"BernardLesley"},"content":"    @Test","lastModifiedDate":"2023-03-27"},{"lineNumber":75,"author":{"gitId":"BernardLesley"},"content":"    void detokenizeReflect_checkOutputEmptyString_success() throws TokenizerException {","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e expectedDetokenizedLikes \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"BernardLesley"},"content":"        Set\u003cInteger\u003e expectedDetokenizedPrefs \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cString\u003e stringsToDetokenize \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"BernardLesley"},"content":"        ReflectionTokenizer reflectionTokenizer \u003d new ReflectionTokenizer();","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"BernardLesley"},"content":"        ArrayList\u003cSet\u003cInteger\u003e\u003e actualDetokenizedIndex \u003d reflectionTokenizer.detokenize(stringsToDetokenize);","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedDetokenizedLikes, actualDetokenizedIndex.get(INDEX_ZERO));","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"BernardLesley"},"content":"        Assertions.assertEquals(expectedDetokenizedPrefs, actualDetokenizedIndex.get(INDEX_ONE));","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"BernardLesley"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"BernardLesley"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"BernardLesley":84}},{"path":"src/test/java/wellnus/ui/TextUiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"haoyangw"},"content":"package wellnus.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"nichyjt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayInputStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"wenxin-c"},"content":"import java.io.ByteArrayOutputStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"wenxin-c"},"content":"import java.io.InputStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"wenxin-c"},"content":"import java.io.PrintStream;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"wenxin-c"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"nichyjt"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"nichyjt"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"wenxin-c"},"content":"// Test methods associated with TextUi class","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"wenxin-c"},"content":"class TextUiTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"wenxin-c"},"content":"    private static final String DEFAULT_SEPARATOR \u003d \"----------------------------------------\"","lastModifiedDate":"2023-03-11"},{"lineNumber":18,"author":{"gitId":"wenxin-c"},"content":"            + \"--------------------\";","lastModifiedDate":"2023-03-11"},{"lineNumber":19,"author":{"gitId":"wenxin-c"},"content":"    private static final String ALERT_SEPARATOR \u003d \"!!!!!!-------!!!!!--------!!!!!!!------!!!!!\"","lastModifiedDate":"2023-03-11"},{"lineNumber":20,"author":{"gitId":"wenxin-c"},"content":"            + \"---------!!!!!!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":21,"author":{"gitId":"wenxin-c"},"content":"    private static final String TEST_OUTPUT_MSG_ONE \u003d \"Hello \";","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"wenxin-c"},"content":"    private static final String TEST_OUTPUT_MSG_TWO \u003d \"World\";","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"wenxin-c"},"content":"    private static final String INDENTATION \u003d \"    \";","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARITHMETIC_EXCEPTION_MSG_ONE \u003d \"Please check your arithmetic equation!!\";","lastModifiedDate":"2023-03-11"},{"lineNumber":25,"author":{"gitId":"wenxin-c"},"content":"    private static final String ARITHMETIC_EXCEPTION_MSG_TWO \u003d \"E.g. Denominator is 0 in division.\";","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"wenxin-c"},"content":"    private static final String ERROR_MESSAGE_LABEL \u003d \"Error Message:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":27,"author":{"gitId":"wenxin-c"},"content":"    private static final String EXTRA_MESSAGE_LABEL \u003d \"Note:\";","lastModifiedDate":"2023-03-11"},{"lineNumber":28,"author":{"gitId":"wenxin-c"},"content":"    private static final TextUi UI \u003d new TextUi();","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"wenxin-c"},"content":"    private static final int TEST_NUMERATOR \u003d 2;","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"wenxin-c"},"content":"    private static final int TEST_DENOMINATOR \u003d 0;","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"wenxin-c"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"wenxin-c"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"wenxin-c"},"content":"     * Read test input command and return back the command string.\u003cbr/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"wenxin-c"},"content":"     * For JUnit testing purpose only.","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"wenxin-c"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"wenxin-c"},"content":"     * @param readInput Scanner object with System.in being overwritten in test","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"wenxin-c"},"content":"     * @return User input command with leading/dangling whitespace being removed","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"wenxin-c"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"wenxin-c"},"content":"    public static String getCommand(Scanner readInput) {","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"wenxin-c"},"content":"        String inputLine \u003d readInput.nextLine();","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"wenxin-c"},"content":"        String userCommand \u003d inputLine.trim();","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"wenxin-c"},"content":"        return userCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"wenxin-c"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"wenxin-c"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"wenxin-c"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"wenxin-c"},"content":"    // Test whether removal of leading/dangling space is successful","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"wenxin-c"},"content":"    void getCommand_trimSpace_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"wenxin-c"},"content":"        InputStream sysInBackup \u003d System.in;","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"wenxin-c"},"content":"        ByteArrayInputStream in \u003d new ByteArrayInputStream((\" My string \"","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator()).getBytes());","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"wenxin-c"},"content":"        System.setIn(in);","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"wenxin-c"},"content":"        Scanner readLine \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"wenxin-c"},"content":"        String command \u003d getCommand(readLine);","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(\"My string\", command);","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"wenxin-c"},"content":"        System.setIn(sysInBackup);","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"wenxin-c"},"content":"        readLine.close();","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"wenxin-c"},"content":"    // Test whether default line separator is properly drawn","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"wenxin-c"},"content":"    void printSeparator_defaultVersion_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"wenxin-c"},"content":"        UI.printSeparator();","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(DEFAULT_SEPARATOR, outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"wenxin-c"},"content":"    // Test whether exception message will properly printed with correct format","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"wenxin-c"},"content":"    void printErrorFor_arithmeticException_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"wenxin-c"},"content":"        String errorMsg \u003d ARITHMETIC_EXCEPTION_MSG_ONE + System.lineSeparator() + ARITHMETIC_EXCEPTION_MSG_TWO;","lastModifiedDate":"2023-03-11"},{"lineNumber":76,"author":{"gitId":"wenxin-c"},"content":"        try {","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"wenxin-c"},"content":"            int result \u003d TEST_NUMERATOR / TEST_DENOMINATOR;","lastModifiedDate":"2023-03-11"},{"lineNumber":78,"author":{"gitId":"wenxin-c"},"content":"        } catch (ArithmeticException exception) {","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"wenxin-c"},"content":"            UI.printErrorFor(exception, errorMsg);","lastModifiedDate":"2023-03-11"},{"lineNumber":80,"author":{"gitId":"wenxin-c"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(ALERT_SEPARATOR + System.lineSeparator() + ERROR_MESSAGE_LABEL","lastModifiedDate":"2023-03-11"},{"lineNumber":82,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + INDENTATION + \"/ by zero\" + System.lineSeparator()","lastModifiedDate":"2023-03-11"},{"lineNumber":83,"author":{"gitId":"wenxin-c"},"content":"                + EXTRA_MESSAGE_LABEL + System.lineSeparator() + INDENTATION + ARITHMETIC_EXCEPTION_MSG_ONE","lastModifiedDate":"2023-03-11"},{"lineNumber":84,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + INDENTATION + ARITHMETIC_EXCEPTION_MSG_TWO + System.lineSeparator()","lastModifiedDate":"2023-03-11"},{"lineNumber":85,"author":{"gitId":"wenxin-c"},"content":"                + ALERT_SEPARATOR,","lastModifiedDate":"2023-03-11"},{"lineNumber":86,"author":{"gitId":"wenxin-c"},"content":"                outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"wenxin-c"},"content":"    // Test whether messages will be properly printed with correct format","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"wenxin-c"},"content":"    void printOutputMessage_greeting_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"wenxin-c"},"content":"        String greeting \u003d \"How are you?\";","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(greeting);","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"wenxin-c"},"content":"        assertEquals(DEFAULT_SEPARATOR + System.lineSeparator()","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"wenxin-c"},"content":"                + INDENTATION + \"How are you?\" + System.lineSeparator() + DEFAULT_SEPARATOR,","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"wenxin-c"},"content":"                outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"wenxin-c"},"content":"    // Test whether multi-line message can be printed with correct indentation","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"wenxin-c"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"wenxin-c"},"content":"    void printMultiLineMessage_twoLines_success() {","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"wenxin-c"},"content":"        String multiLineOutput \u003d TEST_OUTPUT_MSG_ONE + System.lineSeparator() + TEST_OUTPUT_MSG_TWO;","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"wenxin-c"},"content":"        UI.printOutputMessage(multiLineOutput);","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"wenxin-c"},"content":"        assertEquals((DEFAULT_SEPARATOR + System.lineSeparator() + INDENTATION + \"Hello\"","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + INDENTATION + \"World\"","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"wenxin-c"},"content":"                + System.lineSeparator() + DEFAULT_SEPARATOR),","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"wenxin-c"},"content":"                outputStreamCaptor.toString().trim());","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"wenxin-c"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"wenxin-c"},"content":"}","lastModifiedDate":"2023-03-09"},{"lineNumber":110,"author":{"gitId":"wenxin-c"},"content":"","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"wenxin-c":105,"haoyangw":1,"nichyjt":4}}]
