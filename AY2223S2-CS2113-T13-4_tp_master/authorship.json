[{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"irving11119"},"content":"    implementation \u0027com.google.code.gson:gson:2.10.1\u0027","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"irving11119"},"content":"    mainClass \u003d \"seedu.apollo.Apollo\"","lastModifiedDate":"2023-02-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"irving11119"},"content":"    archiveBaseName \u003d \"apollo\"","lastModifiedDate":"2023-02-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"irving11119":4,"-":44}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# About us","lastModifiedDate":"2020-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"Display |   Name   |                   Github Profile                    | Portfolio ","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"irving11119"},"content":"--------|:--------:|:---------------------------------------------------:|:---------:","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"yixuann02"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Yi Xuan  |            [Github](https://github.com/)            | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"irving11119"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Irving de Boer  |      [Github](https://github.com/irving11119)       | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"![](https://avatars.githubusercontent.com/u/88550208?v\u003d4) | Hong Lin Shang |      [Github](https://github.com/honglinshang)      | [Portfolio](team/linshang.md)","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Wan Lin |            [Github](https://github.com/)            | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"![](https://via.placeholder.com/100.png?text\u003dPhoto) | Poobalan Aatmika Lakshmi  | [Github](https://github.com/PoobalanAatmikaLakshmi) | [Portfolio](docs/team/johndoe.md)","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"irving11119":2,"yixuann02":1,"honglinshang":1,"T-Wan-Lin":1,"PoobalanAatmikaLakshmi":2,"-":2}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"irving11119"},"content":"# Apollo","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"{Give product intro here}","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Useful links:","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* [User Guide](UserGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* [Developer Guide](DeveloperGuide.md)","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* [About Us](AboutUs.md)","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"irving11119":1,"-":7}},{"path":"docs/team/linshang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"# Lin Shang - Project Portfolio Page","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"## Overview","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"### Summary of Contributions","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"Nothing","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/seedu/apollo/Apollo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"irving11119"},"content":"package seedu.apollo;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.command.Command;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.rmi.UnexpectedException;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":" * Main class for running Apollo.","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"irving11119"},"content":"public class Apollo {","lastModifiedDate":"2023-02-24"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"    public static final String FILE_PATH \u003d \"save.txt\";","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    private static Storage storage;","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    private static TaskList taskList;","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"irving11119"},"content":"    private static ModuleList moduleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    private static Ui ui;","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"    private static ModuleList moduleData \u003d new ModuleList();","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     * Initialises Ui, Storage, and TaskList.","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"     * @param filePath Location of the local save file.","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    public Apollo(String filePath) {","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"            taskList \u003d storage.loadTaskList(ui);","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"            storage.update(taskList);","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"irving11119"},"content":"            moduleData \u003d storage.loadModuleList();","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"            moduleList \u003d new ModuleList();","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"            ui.printWelcomeMessage();","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"            ui.printErrorForIO();","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-24"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"     * Reads, executes, and prints outputs of user commands continually.","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"     * Stops after ExitCommand is called.","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"     * @throws UnexpectedException If command cannot be executed for an unexpected reason.","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-24"},{"lineNumber":49,"author":{"gitId":"irving11119"},"content":"    public void run() throws IOException {","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"        while (!isExit) {","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"            String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"            ui.showLine();","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"            Command c \u003d Parser.getCommand(fullCommand, ui, taskList.size(), moduleData);","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"            if (c !\u003d null) {","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"                c.execute(taskList, ui, storage, moduleList);","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"                isExit \u003d c.isExit;","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"            ui.showLine();","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"     * Initialises and runs Apollo.","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"            new Apollo(FILE_PATH).run();","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"        } catch (UnexpectedException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"            ui.printUnexpectedException(exception);","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"irving11119"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"irving11119"},"content":"            ui.printErrorForIO();","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"        System.exit(0);","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"irving11119":10,"honglinshang":61,"-":6}},{"path":"src/main/java/seedu/apollo/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.AddCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.AddModuleCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.Command;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.DateCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.DeleteModuleCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.ExitCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.FindCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.HelpCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.ListCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.ListModuleCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.command.ModifyCommand;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.EmptyAddModException;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.EmptyDelModException;","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.EmptyKeywordException;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.EmptyTaskDescException;","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.IllegalCommandException;","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.InvalidDateTime;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.InvalidDeadline;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.InvalidEvent;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.InvalidModule;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"import java.rmi.UnexpectedException;","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":" * Parser class that makes sense of user commands or text.","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"public class Parser {","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"    // User command words understood by Apollo","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_EXIT_WORD \u003d \"bye\";","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_HELP_WORD \u003d \"help\";","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_LIST_WORD \u003d \"list\";","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_DATE_WORD \u003d \"date\";","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_FIND_WORD \u003d \"find\";","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_MARK_WORD \u003d \"mark\";","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_UNMARK_WORD \u003d \"unmark\";","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_DELETE_WORD \u003d \"delete\";","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_TODO_WORD \u003d \"todo\";","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_DEADLINE_WORD \u003d \"deadline\";","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"    public static final String COMMAND_EVENT_WORD \u003d \"event\";","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"irving11119"},"content":"    public static final String COMMAND_ADD_MODULE_WORD \u003d \"addmod\";","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"T-Wan-Lin"},"content":"    public static final String COMMAND_LIST_MODULE_WORD \u003d \"listmod\";","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"    public static final String COMMAND_DELETE_MODULE_WORD \u003d \"delmod\";","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"     * Returns the corresponding Command to the user input.","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"     * @param userCommand Command line input from user.","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"     * @param ui          Prints out error messages if command cannot be parsed.","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"     * @param size        Number of tasks saved in TaskList.","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"     * @return Corresponding Command class to user input.","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"     * @throws UnexpectedException If an unexpected error occurs.","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"irving11119"},"content":"    public static Command getCommand(String userCommand, Ui ui, int size, ModuleList moduleData)","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"irving11119"},"content":"            throws UnexpectedException {","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"        final String[] split \u003d userCommand.trim().split(\"\\\\s+\", 2);","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"irving11119"},"content":"            return parseCommand(split, size, moduleData);","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"        } catch (IllegalCommandException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"            ui.printInvalidCommand();","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"        } catch (EmptyTaskDescException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"            ui.printEmptyDescription();","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"        } catch (EmptyKeywordException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"            ui.printEmptyKeyword();","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"irving11119"},"content":"        } catch (EmptyAddModException e) {","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"irving11119"},"content":"            ui.printEmptyAddMod();","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"irving11119"},"content":"        } catch (EmptyDelModException e) {","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"irving11119"},"content":"            ui.printEmptyDelMod();","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"            ui.printErrorForIdx(size);","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"        } catch (InvalidDeadline e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"            ui.printInvalidDeadline();","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"        } catch (InvalidEvent e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"            ui.printInvalidEvent();","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"        } catch (InvalidDateTime e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"            ui.printInvalidDateTime();","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"irving11119"},"content":"        } catch (InvalidModule e) {","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"irving11119"},"content":"            ui.printInvalidModule();","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"        return null;","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"     * Adds data from user input into the corresponding Command class that is returned.","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"honglinshang"},"content":"     * @param split Parsed user input split into command and parameter.","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"honglinshang"},"content":"     * @param size  Number of tasks saved in TaskList.","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"honglinshang"},"content":"     * @return Command class with data from user input.","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDateTime         If the input format for a date and time is wrong.","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"honglinshang"},"content":"     * @throws EmptyKeywordException   If keyword is left empty (for Find command).","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"honglinshang"},"content":"     * @throws NumberFormatException   If the index is left empty (for Mark, Delete commands).","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"honglinshang"},"content":"     * @throws EmptyTaskDescException  If task description is left empty (for Add command).","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDeadline         If the input format for adding a deadline is wrong.","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidEvent            If the input format for adding an event is wrong.","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"honglinshang"},"content":"     * @throws IllegalCommandException If an unknown command is input by the user.","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"honglinshang"},"content":"     * @throws UnexpectedException     If some unexpected error occurs.","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"irving11119"},"content":"    private static Command parseCommand(String[] split, int size, ModuleList moduleData)","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"honglinshang"},"content":"            throws InvalidDateTime, EmptyKeywordException, EmptyTaskDescException, InvalidDeadline, InvalidEvent,","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"irving11119"},"content":"            IllegalCommandException, NumberFormatException, UnexpectedException, InvalidModule,","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"irving11119"},"content":"            EmptyAddModException, EmptyDelModException {","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"honglinshang"},"content":"        String command \u003d split[0];","lastModifiedDate":"2023-03-08"},{"lineNumber":109,"author":{"gitId":"honglinshang"},"content":"        switch (command) {","lastModifiedDate":"2023-03-08"},{"lineNumber":110,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"T-Wan-Lin"},"content":"        case COMMAND_LIST_MODULE_WORD:","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"T-Wan-Lin"},"content":"            return new ListModuleCommand();","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_EXIT_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":115,"author":{"gitId":"honglinshang"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-03-08"},{"lineNumber":116,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_HELP_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":118,"author":{"gitId":"honglinshang"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-03-08"},{"lineNumber":119,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_LIST_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"honglinshang"},"content":"            return new ListCommand();","lastModifiedDate":"2023-03-08"},{"lineNumber":122,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DATE_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"honglinshang"},"content":"            if (isEmptyParam(split)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":125,"author":{"gitId":"honglinshang"},"content":"                throw new InvalidDateTime();","lastModifiedDate":"2023-03-08"},{"lineNumber":126,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":127,"author":{"gitId":"honglinshang"},"content":"            return new DateCommand(split[1]);","lastModifiedDate":"2023-03-08"},{"lineNumber":128,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_FIND_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":130,"author":{"gitId":"honglinshang"},"content":"            if (isEmptyParam(split)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":131,"author":{"gitId":"honglinshang"},"content":"                throw new EmptyKeywordException();","lastModifiedDate":"2023-03-08"},{"lineNumber":132,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":133,"author":{"gitId":"honglinshang"},"content":"            return new FindCommand(split[1]);","lastModifiedDate":"2023-03-08"},{"lineNumber":134,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":135,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_MARK_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":136,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_UNMARK_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":137,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DELETE_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":138,"author":{"gitId":"honglinshang"},"content":"            if (isEmptyParam(split)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":139,"author":{"gitId":"honglinshang"},"content":"                throw new NumberFormatException();","lastModifiedDate":"2023-03-08"},{"lineNumber":140,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":141,"author":{"gitId":"honglinshang"},"content":"            return new ModifyCommand(command, split[1], size);","lastModifiedDate":"2023-03-08"},{"lineNumber":142,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_TODO_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":144,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DEADLINE_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":145,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_EVENT_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":146,"author":{"gitId":"honglinshang"},"content":"            if (isEmptyParam(split)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":147,"author":{"gitId":"honglinshang"},"content":"                throw new EmptyTaskDescException();","lastModifiedDate":"2023-03-08"},{"lineNumber":148,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":149,"author":{"gitId":"honglinshang"},"content":"            return new AddCommand(command, split[1]);","lastModifiedDate":"2023-03-08"},{"lineNumber":150,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":151,"author":{"gitId":"irving11119"},"content":"        case COMMAND_ADD_MODULE_WORD:","lastModifiedDate":"2023-03-10"},{"lineNumber":152,"author":{"gitId":"irving11119"},"content":"            if (isEmptyParam(split)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":153,"author":{"gitId":"irving11119"},"content":"                throw new EmptyAddModException();","lastModifiedDate":"2023-03-10"},{"lineNumber":154,"author":{"gitId":"irving11119"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":155,"author":{"gitId":"irving11119"},"content":"            return new AddModuleCommand(split[1], moduleData);","lastModifiedDate":"2023-03-10"},{"lineNumber":156,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":157,"author":{"gitId":"irving11119"},"content":"        case COMMAND_DELETE_MODULE_WORD:","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"irving11119"},"content":"            if (isEmptyParam(split)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"irving11119"},"content":"                throw new EmptyDelModException();","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"irving11119"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":161,"author":{"gitId":"irving11119"},"content":"            String moduleCode \u003d split[1];","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"irving11119"},"content":"            return new DeleteModuleCommand(moduleCode);","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"honglinshang"},"content":"        default:","lastModifiedDate":"2023-03-08"},{"lineNumber":164,"author":{"gitId":"honglinshang"},"content":"            throw new IllegalCommandException();","lastModifiedDate":"2023-03-08"},{"lineNumber":165,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":166,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":167,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":168,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":169,"author":{"gitId":"honglinshang"},"content":"     * Checks if the user\u0027s input parameter is empty.","lastModifiedDate":"2023-03-08"},{"lineNumber":170,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":171,"author":{"gitId":"honglinshang"},"content":"     * @param split Parsed user input split into command and parameter.","lastModifiedDate":"2023-03-08"},{"lineNumber":172,"author":{"gitId":"honglinshang"},"content":"     * @return {@code true} if the input parameter is empty, {@code false} otherwise.","lastModifiedDate":"2023-03-08"},{"lineNumber":173,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":174,"author":{"gitId":"honglinshang"},"content":"    private static Boolean isEmptyParam(String[] split) {","lastModifiedDate":"2023-03-08"},{"lineNumber":175,"author":{"gitId":"honglinshang"},"content":"        return (split.length !\u003d 2);","lastModifiedDate":"2023-03-08"},{"lineNumber":176,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":177,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":178,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":179,"author":{"gitId":"honglinshang"},"content":"     * Parses LocalDateTime into a String according to the given pattern.","lastModifiedDate":"2023-03-08"},{"lineNumber":180,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":181,"author":{"gitId":"honglinshang"},"content":"     * @param date       Date and time with LocalDateTime data type.","lastModifiedDate":"2023-03-08"},{"lineNumber":182,"author":{"gitId":"honglinshang"},"content":"     * @param dateString Date and time with String data type.","lastModifiedDate":"2023-03-08"},{"lineNumber":183,"author":{"gitId":"honglinshang"},"content":"     * @param pattern    Desired pattern to format String.","lastModifiedDate":"2023-03-08"},{"lineNumber":184,"author":{"gitId":"honglinshang"},"content":"     * @return Parsed date and time in a String.","lastModifiedDate":"2023-03-08"},{"lineNumber":185,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":186,"author":{"gitId":"honglinshang"},"content":"    public static String parseDateTime(LocalDateTime date, String dateString, DateTimeFormatter pattern) {","lastModifiedDate":"2023-03-08"},{"lineNumber":187,"author":{"gitId":"honglinshang"},"content":"        if (date !\u003d null) {","lastModifiedDate":"2023-03-08"},{"lineNumber":188,"author":{"gitId":"honglinshang"},"content":"            return date.format(pattern);","lastModifiedDate":"2023-03-08"},{"lineNumber":189,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":190,"author":{"gitId":"honglinshang"},"content":"        return dateString;","lastModifiedDate":"2023-03-08"},{"lineNumber":191,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":192,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":193,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":194,"author":{"gitId":"honglinshang"},"content":"     * Separates a Deadline\u0027s input data into its description, and due date.","lastModifiedDate":"2023-03-08"},{"lineNumber":195,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":196,"author":{"gitId":"honglinshang"},"content":"     * @param param User input data describing the Deadline.","lastModifiedDate":"2023-03-08"},{"lineNumber":197,"author":{"gitId":"honglinshang"},"content":"     * @return Parsed user input split into description and due date.","lastModifiedDate":"2023-03-08"},{"lineNumber":198,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDeadline If the user did not input the due date in the right format.","lastModifiedDate":"2023-03-08"},{"lineNumber":199,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":200,"author":{"gitId":"honglinshang"},"content":"    public static String[] parseDeadline(String param) throws InvalidDeadline {","lastModifiedDate":"2023-03-08"},{"lineNumber":201,"author":{"gitId":"honglinshang"},"content":"        String[] split \u003d param.trim().split(\"\\\\s/by\\\\s\", 2);","lastModifiedDate":"2023-03-08"},{"lineNumber":202,"author":{"gitId":"honglinshang"},"content":"        if (split.length !\u003d 2) {","lastModifiedDate":"2023-03-08"},{"lineNumber":203,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidDeadline();","lastModifiedDate":"2023-03-08"},{"lineNumber":204,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":205,"author":{"gitId":"honglinshang"},"content":"        return split;","lastModifiedDate":"2023-03-08"},{"lineNumber":206,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":207,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":208,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":209,"author":{"gitId":"honglinshang"},"content":"     * Separates an Event\u0027s input data into its description, start date, and end date.","lastModifiedDate":"2023-03-08"},{"lineNumber":210,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":211,"author":{"gitId":"honglinshang"},"content":"     * @param param User input data describing the Event.","lastModifiedDate":"2023-03-08"},{"lineNumber":212,"author":{"gitId":"honglinshang"},"content":"     * @return Parsed user input split into description, start date, and end date.","lastModifiedDate":"2023-03-08"},{"lineNumber":213,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidEvent If the user did not input the start or end date in the right format.","lastModifiedDate":"2023-03-08"},{"lineNumber":214,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":215,"author":{"gitId":"honglinshang"},"content":"    public static String[] parseEvent(String param) throws InvalidEvent {","lastModifiedDate":"2023-03-08"},{"lineNumber":216,"author":{"gitId":"honglinshang"},"content":"        String[] split \u003d param.trim().split(\"\\\\s/from\\\\s|\\\\s/to\\\\s\", 3);","lastModifiedDate":"2023-03-08"},{"lineNumber":217,"author":{"gitId":"honglinshang"},"content":"        if (split.length !\u003d 3) {","lastModifiedDate":"2023-03-08"},{"lineNumber":218,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidEvent();","lastModifiedDate":"2023-03-08"},{"lineNumber":219,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":220,"author":{"gitId":"honglinshang"},"content":"        return split;","lastModifiedDate":"2023-03-08"},{"lineNumber":221,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":222,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":223,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":45,"honglinshang":163,"T-Wan-Lin":15}},{"path":"src/main/java/seedu/apollo/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"irving11119"},"content":"import com.google.gson.Gson;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import com.google.gson.reflect.TypeToken;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"irving11119"},"content":"import com.google.gson.stream.JsonReader;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.DateOrderException;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.InvalidDeadline;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.InvalidEvent;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.InvalidSaveFile;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.Deadline;","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.Event;","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.Task;","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.ToDo;","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"import java.io.File;","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"irving11119"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"irving11119"},"content":"import java.lang.reflect.Type;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":" * Storage class that initialises the task list and updates the save file.","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"public class Storage {","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    // Location of save file","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    protected static String filePath;","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"irving11119"},"content":"    private static final String DATAFILEPATH \u003d \"data/data.json\";","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"    // ints indicating position of terms in each line of the save file","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"    private static final int TYPE_POS \u003d 0;","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"    private static final int STATUS_POS \u003d 4;","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"    private static final int PARAM_POS \u003d 8;","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"    // chars representing type of Tasks within the save file","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"    private static final char TXT_TODO_WORD \u003d \u0027T\u0027;","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"    private static final char TXT_DEADLINE_WORD \u003d \u0027D\u0027;","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"    private static final char TXT_EVENT_WORD \u003d \u0027E\u0027;","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"     * Initialise Storage class, set filePath.","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"     * @param filePath Location of the local save file.","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"        Storage.filePath \u003d filePath;","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"     * Overwrites the existing save file based on the current TaskList.","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"     * @param taskList Contains all stored tasks.","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"     * @throws IOException If something goes wrong during the overwriting process.","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"    public void update(TaskList taskList) throws IOException {","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"        FileWriter overwrite \u003d new FileWriter(filePath);","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"            String desc \u003d task.getDescription();","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"            String type \u003d task.getType();","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"            String stat \u003d task.getStatus();","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"            switch (type) {","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"            case \"todo\":","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"                overwrite.write(\"T | \" + stat + \" | \" + desc + \"\\n\");","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"                break;","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"            case \"deadline\":","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"                Deadline tempDeadline \u003d (Deadline) task;","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"                String by \u003d tempDeadline.getBy(Task.storePattern);","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"                overwrite.write(\"D | \" + stat + \" | \" + desc + \" /by \" + by + \"\\n\");","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"                break;","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"            case \"event\":","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"                Event tempEvent \u003d (Event) task;","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"                String from \u003d tempEvent.getFrom(Task.storePattern);","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"                String to \u003d tempEvent.getTo(Task.storePattern);","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"                overwrite.write(\"E | \" + stat + \" | \" + desc + \" /from \" + from + \" /to \" + to + \"\\n\");","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"                break;","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"            default:","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"                throw new IOException();","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"        overwrite.close();","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"     * Loads data from the save file into a new TaskList of Tasks.","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"     * If save file is not found, creates a new save file and returns an empty TaskList.","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints out error messages to user.","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"     * @return TaskList of Tasks (containing data from save file / empty).","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"     * @throws IOException If save file is not found, and a new one cannot be created.","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"honglinshang"},"content":"    public TaskList loadTaskList(Ui ui) throws IOException {","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"honglinshang"},"content":"        TaskList newTaskList \u003d new TaskList();","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"honglinshang"},"content":"        File save \u003d new File(filePath);","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"honglinshang"},"content":"            newTaskList \u003d readFileContents(save, ui);","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"honglinshang"},"content":"            return newTaskList;","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"honglinshang"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"honglinshang"},"content":"            ui.printErrorFileNotFound();","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"honglinshang"},"content":"            save.createNewFile();","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"honglinshang"},"content":"            return newTaskList;","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"honglinshang"},"content":"     * Reads all lines in the save file, initialises them as an TaskList of Tasks.","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"irving11119"},"content":"     * Loads data from the data file into a new ArrayList of Modules.","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"irving11119"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"irving11119"},"content":"     * @return ArrayList of Modules (containing data from save file / empty).","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"irving11119"},"content":"     * @throws FileNotFoundException If save file is not found.","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"irving11119"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"honglinshang"},"content":"    public ModuleList loadModuleList() throws FileNotFoundException {","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"honglinshang"},"content":"        Type moduleDataType \u003d new TypeToken\u003cModuleList\u003e(){}.getType();","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"irving11119"},"content":"        Gson gson \u003d new Gson();","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"irving11119"},"content":"        JsonReader reader \u003d new JsonReader(new FileReader(DATAFILEPATH));","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"honglinshang"},"content":"        ModuleList moduleDataList \u003d gson.fromJson(reader, moduleDataType);","lastModifiedDate":"2023-03-10"},{"lineNumber":118,"author":{"gitId":"irving11119"},"content":"        System.out.println(\"Module Data loaded from \" + DATAFILEPATH);","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"irving11119"},"content":"        return moduleDataList;","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":123,"author":{"gitId":"honglinshang"},"content":"     * Reads all lines in the save file, initialises them as an ArrayList of Tasks.","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":125,"author":{"gitId":"honglinshang"},"content":"     * @param save Save file.","lastModifiedDate":"2023-03-08"},{"lineNumber":126,"author":{"gitId":"honglinshang"},"content":"     * @return TaskList of initialised Tasks based on uncorrupted data in save file.","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"honglinshang"},"content":"     * @throws FileNotFoundException If the save file cannot be found at filePath.","lastModifiedDate":"2023-03-08"},{"lineNumber":128,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":129,"author":{"gitId":"honglinshang"},"content":"    private static TaskList readFileContents(File save, Ui ui) throws FileNotFoundException {","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"honglinshang"},"content":"        Scanner s \u003d new Scanner(save);","lastModifiedDate":"2023-03-08"},{"lineNumber":131,"author":{"gitId":"honglinshang"},"content":"        TaskList newTaskList \u003d new TaskList();","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"honglinshang"},"content":"        int counter \u003d 0;","lastModifiedDate":"2023-03-08"},{"lineNumber":133,"author":{"gitId":"honglinshang"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-03-08"},{"lineNumber":134,"author":{"gitId":"honglinshang"},"content":"            try {","lastModifiedDate":"2023-03-08"},{"lineNumber":135,"author":{"gitId":"honglinshang"},"content":"                newTaskList.add(newTask(s.nextLine()));","lastModifiedDate":"2023-03-10"},{"lineNumber":136,"author":{"gitId":"honglinshang"},"content":"                counter++;","lastModifiedDate":"2023-03-08"},{"lineNumber":137,"author":{"gitId":"honglinshang"},"content":"            } catch (InvalidSaveFile e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":138,"author":{"gitId":"honglinshang"},"content":"                ui.printInvalidSaveFile(counter, filePath);","lastModifiedDate":"2023-03-08"},{"lineNumber":139,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":140,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":141,"author":{"gitId":"honglinshang"},"content":"        return newTaskList;","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":143,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":144,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":145,"author":{"gitId":"honglinshang"},"content":"     * Interprets a line from the save file, returns it as a new Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":146,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":147,"author":{"gitId":"honglinshang"},"content":"     * @param text Line from the save file.","lastModifiedDate":"2023-03-08"},{"lineNumber":148,"author":{"gitId":"honglinshang"},"content":"     * @return Corresponding Task to data stored in {@code text}.","lastModifiedDate":"2023-03-08"},{"lineNumber":149,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidSaveFile If any line in the input data is not of the right format.","lastModifiedDate":"2023-03-08"},{"lineNumber":150,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":151,"author":{"gitId":"honglinshang"},"content":"    private static Task newTask(String text) throws InvalidSaveFile {","lastModifiedDate":"2023-03-08"},{"lineNumber":152,"author":{"gitId":"honglinshang"},"content":"        char type \u003d getType(text);","lastModifiedDate":"2023-03-08"},{"lineNumber":153,"author":{"gitId":"honglinshang"},"content":"        Boolean isDone \u003d isStatusDone(text);","lastModifiedDate":"2023-03-08"},{"lineNumber":154,"author":{"gitId":"honglinshang"},"content":"        String param \u003d getParam(text);","lastModifiedDate":"2023-03-08"},{"lineNumber":155,"author":{"gitId":"honglinshang"},"content":"        switch (type) {","lastModifiedDate":"2023-03-08"},{"lineNumber":156,"author":{"gitId":"honglinshang"},"content":"        case TXT_TODO_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":157,"author":{"gitId":"honglinshang"},"content":"            return newToDo(isDone, param);","lastModifiedDate":"2023-03-08"},{"lineNumber":158,"author":{"gitId":"honglinshang"},"content":"        case TXT_DEADLINE_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":159,"author":{"gitId":"honglinshang"},"content":"            return newDeadline(isDone, param);","lastModifiedDate":"2023-03-08"},{"lineNumber":160,"author":{"gitId":"honglinshang"},"content":"        case TXT_EVENT_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":161,"author":{"gitId":"honglinshang"},"content":"            return newEvent(isDone, param);","lastModifiedDate":"2023-03-08"},{"lineNumber":162,"author":{"gitId":"honglinshang"},"content":"        default:","lastModifiedDate":"2023-03-08"},{"lineNumber":163,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidSaveFile();","lastModifiedDate":"2023-03-08"},{"lineNumber":164,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":165,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":166,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":167,"author":{"gitId":"honglinshang"},"content":"    private static char getType(String text) {","lastModifiedDate":"2023-03-08"},{"lineNumber":168,"author":{"gitId":"honglinshang"},"content":"        return text.charAt(TYPE_POS);","lastModifiedDate":"2023-03-08"},{"lineNumber":169,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":170,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":171,"author":{"gitId":"honglinshang"},"content":"    private static Boolean isStatusDone(String text) {","lastModifiedDate":"2023-03-08"},{"lineNumber":172,"author":{"gitId":"honglinshang"},"content":"        return text.charAt(STATUS_POS) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2023-03-08"},{"lineNumber":173,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":174,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":175,"author":{"gitId":"honglinshang"},"content":"    private static String getParam(String text) {","lastModifiedDate":"2023-03-08"},{"lineNumber":176,"author":{"gitId":"honglinshang"},"content":"        return text.substring(PARAM_POS);","lastModifiedDate":"2023-03-08"},{"lineNumber":177,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":178,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":179,"author":{"gitId":"honglinshang"},"content":"    private static ToDo newToDo(Boolean isDone, String param) {","lastModifiedDate":"2023-03-08"},{"lineNumber":180,"author":{"gitId":"honglinshang"},"content":"        ToDo newToDo \u003d new ToDo(param);","lastModifiedDate":"2023-03-08"},{"lineNumber":181,"author":{"gitId":"honglinshang"},"content":"        newToDo.setDone(isDone);","lastModifiedDate":"2023-03-08"},{"lineNumber":182,"author":{"gitId":"honglinshang"},"content":"        return newToDo;","lastModifiedDate":"2023-03-08"},{"lineNumber":183,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":184,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":185,"author":{"gitId":"honglinshang"},"content":"    private static Deadline newDeadline(Boolean isDone, String param) throws InvalidSaveFile {","lastModifiedDate":"2023-03-08"},{"lineNumber":186,"author":{"gitId":"honglinshang"},"content":"        final String[] paramAndBy;","lastModifiedDate":"2023-03-08"},{"lineNumber":187,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":188,"author":{"gitId":"honglinshang"},"content":"            paramAndBy \u003d Parser.parseDeadline(param);","lastModifiedDate":"2023-03-08"},{"lineNumber":189,"author":{"gitId":"honglinshang"},"content":"        } catch (InvalidDeadline e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":190,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidSaveFile();","lastModifiedDate":"2023-03-08"},{"lineNumber":191,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":192,"author":{"gitId":"honglinshang"},"content":"        Deadline newDeadline \u003d new Deadline(paramAndBy[0], paramAndBy[1]);","lastModifiedDate":"2023-03-08"},{"lineNumber":193,"author":{"gitId":"honglinshang"},"content":"        newDeadline.setDone(isDone);","lastModifiedDate":"2023-03-08"},{"lineNumber":194,"author":{"gitId":"honglinshang"},"content":"        return newDeadline;","lastModifiedDate":"2023-03-08"},{"lineNumber":195,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":196,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":197,"author":{"gitId":"honglinshang"},"content":"    private static Event newEvent(Boolean isDone, String param) throws InvalidSaveFile {","lastModifiedDate":"2023-03-08"},{"lineNumber":198,"author":{"gitId":"honglinshang"},"content":"        final String[] paramAndFromTo;","lastModifiedDate":"2023-03-08"},{"lineNumber":199,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":200,"author":{"gitId":"honglinshang"},"content":"            paramAndFromTo \u003d Parser.parseEvent(param);","lastModifiedDate":"2023-03-08"},{"lineNumber":201,"author":{"gitId":"honglinshang"},"content":"        } catch (InvalidEvent e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":202,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidSaveFile();","lastModifiedDate":"2023-03-08"},{"lineNumber":203,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":204,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":205,"author":{"gitId":"honglinshang"},"content":"            Event newEvent \u003d new Event(paramAndFromTo[0], paramAndFromTo[1], paramAndFromTo[2]);","lastModifiedDate":"2023-03-08"},{"lineNumber":206,"author":{"gitId":"honglinshang"},"content":"            newEvent.setDone(isDone);","lastModifiedDate":"2023-03-08"},{"lineNumber":207,"author":{"gitId":"honglinshang"},"content":"            return newEvent;","lastModifiedDate":"2023-03-08"},{"lineNumber":208,"author":{"gitId":"honglinshang"},"content":"        } catch (DateOrderException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":209,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidSaveFile();","lastModifiedDate":"2023-03-08"},{"lineNumber":210,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":211,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":212,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":213,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":17,"honglinshang":196}},{"path":"src/main/java/seedu/apollo/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.Task;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"yixuann02"},"content":"import seedu.apollo.module.Module;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import java.rmi.UnexpectedException;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":" * User Interface class that deals with inputs from and outputs to the user.","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"public class Ui {","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    // Scanner to read user inputs on CLI","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    private static final Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     * Get user input from CLI.","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     * @return String containing the CLI input.","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"    public String readCommand() {","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"        return in.nextLine();","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"     * Prints out a line divider.","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"    public void showLine() {","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"     * Prints the welcome message.","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"    public void printWelcomeMessage() {","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Hello from\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"                \" ____    ____    _____  __      __       _____\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"                \"|  _  | |  _ \\\\  | ___ | | |     | |     | ___ |\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"                \"| |_| | | |_| | | | | | | |     | |     | | | |\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"                \"| | | | |  __/  | |_| | | |___  | |___  | |_| |\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"                \"|_| |_| |_|     \\\\_____/ |_____| |_____| \\\\_____/\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"                \"Enter \\\"help\\\" to see a list of commands.\");","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"     * For {@code help} command.","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"     * Prints out a list of all available commands.","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"    public void printHelpMessage() {","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\" Enter \\\"list\\\" to see all tasks\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"todo [task]\\\" to add a task\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"deadline [task] /by [date]\\\" to add a deadline\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"event [task] /from [date] /to [date]\\\" to add an event\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"mark [idx]\\\" to mark task as done\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"unmark [idx]\\\" to mark task as not done\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"delete [idx]\\\" to remove task from list\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"find [keyword]\\\" to see all tasks containing [keyword]\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"date [yyyy-MM-dd]\\\" to see all tasks occurring on that date\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"                \" Enter \\\"bye\\\" to exit the program\\n\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"                \" ***NOTE***\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"                \" The \\\"date\\\" command only considers tasks when [date] is input in the format:\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"                \"     \\\"yyyy-MM-ddThh:mm\\\"\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"                \" eg. \\\"2023-10-30T23:59\\\" represents Oct 20 2023, 11:59PM\");","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"     * For {@code list} command.","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"     * Prints all Tasks within the TaskList given.","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"     * @param allTasks TaskList of Tasks.","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"    public void printList(TaskList allTasks) {","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"        if (allTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"There are no tasks in your list!\");","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"            return;","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"        for (int i \u003d 0; i \u003c allTasks.size(); i++) {","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"            System.out.println(i + 1 + \".\" + allTasks.get(i));","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"yixuann02"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"yixuann02"},"content":"     * For {@code list} command.","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"yixuann02"},"content":"     * Prints all Modules within the ArrayList given","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"yixuann02"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"yixuann02"},"content":"     * @param allModules ArrayList of Modules","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"yixuann02"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"yixuann02"},"content":"    public void printModuleList(ArrayList\u003cModule\u003e allModules) {","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"yixuann02"},"content":"        if (allModules.size() \u003d\u003d 0) {","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"yixuann02"},"content":"            System.out.println(\"There are no modules in your module list!\");","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"yixuann02"},"content":"            return;","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"yixuann02"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"yixuann02"},"content":"        System.out.println(\"These are the modules you are taking this semester:\");","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"yixuann02"},"content":"        for (int i \u003d 0; i \u003c allModules.size(); i++) {","lastModifiedDate":"2023-03-09"},{"lineNumber":103,"author":{"gitId":"yixuann02"},"content":"            System.out.println(i+1 + \".\" + allModules.get(i).toString());","lastModifiedDate":"2023-03-09"},{"lineNumber":104,"author":{"gitId":"yixuann02"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":105,"author":{"gitId":"yixuann02"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":106,"author":{"gitId":"yixuann02"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":107,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"     * For {@code delmod} command.","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"     * Prints message for successful deletion of Module.","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"honglinshang"},"content":"     * @param moduleCode The code of the module which was deleted.","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":113,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"    public void printModuleDeleteMessage(String moduleCode) {","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"        System.out.println(\"Got it, removed \" + moduleCode + \" from your Module list.\");","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":116,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":117,"author":{"gitId":"yixuann02"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"honglinshang"},"content":"     * For {@code delmod} command.","lastModifiedDate":"2023-03-10"},{"lineNumber":120,"author":{"gitId":"honglinshang"},"content":"     * Prints message if Module cannot be found for unsuccessful deletion of Module.","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"honglinshang"},"content":"     * @param moduleCode The code of the module which was not found.","lastModifiedDate":"2023-03-10"},{"lineNumber":123,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":124,"author":{"gitId":"honglinshang"},"content":"    public void printUnsuccessfulModuleDelete(String moduleCode) {","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Sorry, the module \" + moduleCode + \" does not exist in your Module list!\");","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":128,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":129,"author":{"gitId":"honglinshang"},"content":"     * For {@code todo}, {@code deadline}, and {@code event} commands.","lastModifiedDate":"2023-03-08"},{"lineNumber":130,"author":{"gitId":"honglinshang"},"content":"     * Prints out message for successful adding of Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":131,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":132,"author":{"gitId":"honglinshang"},"content":"     * @param newTask Task that has just been added.","lastModifiedDate":"2023-03-08"},{"lineNumber":133,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":134,"author":{"gitId":"honglinshang"},"content":"    public void printAddMessage(Task newTask) {","lastModifiedDate":"2023-03-08"},{"lineNumber":135,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Got it. I\u0027ve added this \" + newTask.getType() + \":\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":136,"author":{"gitId":"honglinshang"},"content":"                \"  \" + newTask);","lastModifiedDate":"2023-03-08"},{"lineNumber":137,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":138,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":139,"author":{"gitId":"irving11119"},"content":"    public void printAddModuleMessage(Module newModule) {","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"irving11119"},"content":"        System.out.println(\"Got it. I\u0027ve added this module:\\n\" +","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"irving11119"},"content":"                \"  \" + newModule);","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":144,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":145,"author":{"gitId":"honglinshang"},"content":"     * For {@code mark} command.","lastModifiedDate":"2023-03-08"},{"lineNumber":146,"author":{"gitId":"honglinshang"},"content":"     * Prints out message for successful marking of Task as done.","lastModifiedDate":"2023-03-08"},{"lineNumber":147,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":148,"author":{"gitId":"honglinshang"},"content":"     * @param doneTask Task that has just been marked as done.","lastModifiedDate":"2023-03-08"},{"lineNumber":149,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":150,"author":{"gitId":"honglinshang"},"content":"    public void printMarkDone(Task doneTask) {","lastModifiedDate":"2023-03-08"},{"lineNumber":151,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Nice!, I\u0027ve marked this task as done:\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":152,"author":{"gitId":"honglinshang"},"content":"                \"  \" + doneTask);","lastModifiedDate":"2023-03-08"},{"lineNumber":153,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":154,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":155,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":156,"author":{"gitId":"honglinshang"},"content":"     * For {@code unmark} command.","lastModifiedDate":"2023-03-08"},{"lineNumber":157,"author":{"gitId":"honglinshang"},"content":"     * Prints out message for successful marking of Task as not done.","lastModifiedDate":"2023-03-08"},{"lineNumber":158,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":159,"author":{"gitId":"honglinshang"},"content":"     * @param notDoneTask Task that has just been marked as not done.","lastModifiedDate":"2023-03-08"},{"lineNumber":160,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":161,"author":{"gitId":"honglinshang"},"content":"    public void printMarkNotDone(Task notDoneTask) {","lastModifiedDate":"2023-03-08"},{"lineNumber":162,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":163,"author":{"gitId":"honglinshang"},"content":"                \"  \" + notDoneTask);","lastModifiedDate":"2023-03-08"},{"lineNumber":164,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":165,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":166,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":167,"author":{"gitId":"honglinshang"},"content":"     * For {@code delete} command.","lastModifiedDate":"2023-03-08"},{"lineNumber":168,"author":{"gitId":"honglinshang"},"content":"     * Prints out message for successful deletion of Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":169,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":170,"author":{"gitId":"honglinshang"},"content":"     * @param deletedTask Task that will be deleted.","lastModifiedDate":"2023-03-08"},{"lineNumber":171,"author":{"gitId":"honglinshang"},"content":"     * @param size Number of tasks left in the list after deletion.","lastModifiedDate":"2023-03-08"},{"lineNumber":172,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":173,"author":{"gitId":"honglinshang"},"content":"    public void printDeleted(Task deletedTask, int size) {","lastModifiedDate":"2023-03-08"},{"lineNumber":174,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Noted, I\u0027ve removed this task:\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":175,"author":{"gitId":"honglinshang"},"content":"                \"  \" + deletedTask + \"\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":176,"author":{"gitId":"honglinshang"},"content":"                \"Now you have \" + (size - 1) + \" tasks in the list\");","lastModifiedDate":"2023-03-08"},{"lineNumber":177,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":178,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":179,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":180,"author":{"gitId":"honglinshang"},"content":"     * For {@code find} command.","lastModifiedDate":"2023-03-08"},{"lineNumber":181,"author":{"gitId":"honglinshang"},"content":"     * Prints all Tasks within the TaskList given, all containing a certain keyword.","lastModifiedDate":"2023-03-10"},{"lineNumber":182,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":183,"author":{"gitId":"honglinshang"},"content":"     * @param foundTasks TaskList of Tasks containing a keyword.","lastModifiedDate":"2023-03-10"},{"lineNumber":184,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":185,"author":{"gitId":"honglinshang"},"content":"    public void printFoundList(TaskList foundTasks) {","lastModifiedDate":"2023-03-10"},{"lineNumber":186,"author":{"gitId":"honglinshang"},"content":"        if (foundTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":187,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"There are no matching tasks!\");","lastModifiedDate":"2023-03-08"},{"lineNumber":188,"author":{"gitId":"honglinshang"},"content":"            return;","lastModifiedDate":"2023-03-08"},{"lineNumber":189,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":190,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-03-08"},{"lineNumber":191,"author":{"gitId":"honglinshang"},"content":"        for (int i \u003d 0; i \u003c foundTasks.size(); i++) {","lastModifiedDate":"2023-03-08"},{"lineNumber":192,"author":{"gitId":"honglinshang"},"content":"            System.out.println(i + 1 + \".\" + foundTasks.get(i));","lastModifiedDate":"2023-03-08"},{"lineNumber":193,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":194,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":195,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":196,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":197,"author":{"gitId":"honglinshang"},"content":"     * For {@code date} command.","lastModifiedDate":"2023-03-08"},{"lineNumber":198,"author":{"gitId":"honglinshang"},"content":"     * Prints all Tasks within the TaskList given, all happening on a certain date.","lastModifiedDate":"2023-03-10"},{"lineNumber":199,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":200,"author":{"gitId":"honglinshang"},"content":"     * @param happeningTasks TaskList of Tasks happening on a date.","lastModifiedDate":"2023-03-10"},{"lineNumber":201,"author":{"gitId":"honglinshang"},"content":"     * @param date Date that was used to shortlist the tasks.","lastModifiedDate":"2023-03-08"},{"lineNumber":202,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":203,"author":{"gitId":"honglinshang"},"content":"    public void printDateList(TaskList happeningTasks, LocalDate date) {","lastModifiedDate":"2023-03-10"},{"lineNumber":204,"author":{"gitId":"honglinshang"},"content":"        String dateString \u003d date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-03-08"},{"lineNumber":205,"author":{"gitId":"honglinshang"},"content":"        if (happeningTasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-03-08"},{"lineNumber":206,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"There are no tasks on \" + dateString + \"!\");","lastModifiedDate":"2023-03-08"},{"lineNumber":207,"author":{"gitId":"honglinshang"},"content":"            return;","lastModifiedDate":"2023-03-08"},{"lineNumber":208,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":209,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Here are the tasks happening on \" + dateString + \":\");","lastModifiedDate":"2023-03-08"},{"lineNumber":210,"author":{"gitId":"honglinshang"},"content":"        for (int i \u003d 0; i \u003c happeningTasks.size(); i++) {","lastModifiedDate":"2023-03-08"},{"lineNumber":211,"author":{"gitId":"honglinshang"},"content":"            System.out.println(i + 1 + \".\" + happeningTasks.get(i));","lastModifiedDate":"2023-03-08"},{"lineNumber":212,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":213,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":214,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":215,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":216,"author":{"gitId":"honglinshang"},"content":"     * Prints the exit message.","lastModifiedDate":"2023-03-08"},{"lineNumber":217,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":218,"author":{"gitId":"honglinshang"},"content":"    public void printExitMessage() {","lastModifiedDate":"2023-03-08"},{"lineNumber":219,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-03-08"},{"lineNumber":220,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":221,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":222,"author":{"gitId":"honglinshang"},"content":"    // error messages","lastModifiedDate":"2023-03-08"},{"lineNumber":223,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":224,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":225,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if the index entered does not fit the format.","lastModifiedDate":"2023-03-08"},{"lineNumber":226,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":227,"author":{"gitId":"honglinshang"},"content":"     * @param size Number of tasks within the current TaskList.","lastModifiedDate":"2023-03-08"},{"lineNumber":228,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":229,"author":{"gitId":"honglinshang"},"content":"    public void printErrorForIdx(int size) {","lastModifiedDate":"2023-03-08"},{"lineNumber":230,"author":{"gitId":"honglinshang"},"content":"        boolean isEmptyTaskList \u003d (size \u003d\u003d 0);","lastModifiedDate":"2023-03-08"},{"lineNumber":231,"author":{"gitId":"honglinshang"},"content":"        if (!isEmptyTaskList) {","lastModifiedDate":"2023-03-08"},{"lineNumber":232,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"Please enter [idx] in the form of an integer from 1 to \" + size);","lastModifiedDate":"2023-03-08"},{"lineNumber":233,"author":{"gitId":"honglinshang"},"content":"        } else {","lastModifiedDate":"2023-03-08"},{"lineNumber":234,"author":{"gitId":"honglinshang"},"content":"            System.out.println(\"There are no tasks in your list!\");","lastModifiedDate":"2023-03-08"},{"lineNumber":235,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":236,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":237,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":238,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":239,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if reading or writing to the hard disk throws an IO error.","lastModifiedDate":"2023-03-08"},{"lineNumber":240,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":241,"author":{"gitId":"honglinshang"},"content":"    public void printErrorForIO() {","lastModifiedDate":"2023-03-08"},{"lineNumber":242,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Something went wrong with the hard disk :(\");","lastModifiedDate":"2023-03-08"},{"lineNumber":243,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":244,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":245,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":246,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if the local save file cannot be found at the filepath.","lastModifiedDate":"2023-03-08"},{"lineNumber":247,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":248,"author":{"gitId":"honglinshang"},"content":"    public void printErrorFileNotFound() {","lastModifiedDate":"2023-03-08"},{"lineNumber":249,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-03-08"},{"lineNumber":250,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Save file not found, initialising empty list...\");","lastModifiedDate":"2023-03-08"},{"lineNumber":251,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-03-08"},{"lineNumber":252,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":253,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":254,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":255,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if the deadline entered does not fit the format.","lastModifiedDate":"2023-03-08"},{"lineNumber":256,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":257,"author":{"gitId":"honglinshang"},"content":"    public void printInvalidDeadline() {","lastModifiedDate":"2023-03-08"},{"lineNumber":258,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Please enter deadline as \\\"deadline [task] /by [date]\\\".\");","lastModifiedDate":"2023-03-08"},{"lineNumber":259,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":260,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":261,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":262,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if the event entered does not fit the format.","lastModifiedDate":"2023-03-08"},{"lineNumber":263,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":264,"author":{"gitId":"honglinshang"},"content":"    public void printInvalidEvent() {","lastModifiedDate":"2023-03-08"},{"lineNumber":265,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Please enter event as \\\"event [task] /from [date] /to [date]\\\".\");","lastModifiedDate":"2023-03-08"},{"lineNumber":266,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":267,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":268,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":269,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if the date entered does not fit the format.","lastModifiedDate":"2023-03-08"},{"lineNumber":270,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":271,"author":{"gitId":"honglinshang"},"content":"    public void printInvalidDateTime() {","lastModifiedDate":"2023-03-08"},{"lineNumber":272,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Please enter date in the format of yyyy-MM-dd.\");","lastModifiedDate":"2023-03-08"},{"lineNumber":273,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":274,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":275,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":276,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if the command entered is not understood by Apollo.","lastModifiedDate":"2023-03-08"},{"lineNumber":277,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":278,"author":{"gitId":"honglinshang"},"content":"    public void printInvalidCommand() {","lastModifiedDate":"2023-03-08"},{"lineNumber":279,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Sorry, but I don\u0027t know what that means :(\");","lastModifiedDate":"2023-03-08"},{"lineNumber":280,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":281,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":282,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":283,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if there is corrupted data in the save file when initially reading from it.","lastModifiedDate":"2023-03-08"},{"lineNumber":284,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":285,"author":{"gitId":"honglinshang"},"content":"     * @param counter Index of the line of the save file that is corrupted.","lastModifiedDate":"2023-03-08"},{"lineNumber":286,"author":{"gitId":"honglinshang"},"content":"     * @param filePath The location at which the save file is stored.","lastModifiedDate":"2023-03-08"},{"lineNumber":287,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":288,"author":{"gitId":"honglinshang"},"content":"    public void printInvalidSaveFile(int counter, String filePath) {","lastModifiedDate":"2023-03-08"},{"lineNumber":289,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-03-08"},{"lineNumber":290,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"There is an error in save.txt at line \" + (counter + 1) + \"\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":291,"author":{"gitId":"honglinshang"},"content":"                \"Task \" + (counter + 1) + \" has been excluded. You can edit the save file at:\\n\" +","lastModifiedDate":"2023-03-08"},{"lineNumber":292,"author":{"gitId":"honglinshang"},"content":"                filePath);","lastModifiedDate":"2023-03-08"},{"lineNumber":293,"author":{"gitId":"honglinshang"},"content":"        showLine();","lastModifiedDate":"2023-03-08"},{"lineNumber":294,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":295,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":296,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":297,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if the user does not specify the description of a task.","lastModifiedDate":"2023-03-08"},{"lineNumber":298,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":299,"author":{"gitId":"honglinshang"},"content":"    public void printEmptyDescription() {","lastModifiedDate":"2023-03-08"},{"lineNumber":300,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Oops! The description of a task cannot be empty.\");","lastModifiedDate":"2023-03-08"},{"lineNumber":301,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":302,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":303,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":304,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if the user does not specify the keyword of a search.","lastModifiedDate":"2023-03-08"},{"lineNumber":305,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":306,"author":{"gitId":"honglinshang"},"content":"    public void printEmptyKeyword() {","lastModifiedDate":"2023-03-08"},{"lineNumber":307,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Please specify a keyword to do the search with!\");","lastModifiedDate":"2023-03-08"},{"lineNumber":308,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":309,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":310,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":311,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if the start date of an even occurs after the end date.","lastModifiedDate":"2023-03-08"},{"lineNumber":312,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":313,"author":{"gitId":"honglinshang"},"content":"    public void printDateOrderException() {","lastModifiedDate":"2023-03-08"},{"lineNumber":314,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Oops, the start date for your event occurs after the end date!\");","lastModifiedDate":"2023-03-08"},{"lineNumber":315,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":316,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":317,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":318,"author":{"gitId":"honglinshang"},"content":"     * Prints error message if an unexpected error occurs.","lastModifiedDate":"2023-03-08"},{"lineNumber":319,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":320,"author":{"gitId":"honglinshang"},"content":"     * @param exception Contains detail message saying where error occurred.","lastModifiedDate":"2023-03-08"},{"lineNumber":321,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":322,"author":{"gitId":"honglinshang"},"content":"    public void printUnexpectedException(UnexpectedException exception) {","lastModifiedDate":"2023-03-08"},{"lineNumber":323,"author":{"gitId":"honglinshang"},"content":"        System.out.println(\"Oh no... Something went wrong while doing the following:  \" + exception.getMessage() +","lastModifiedDate":"2023-03-08"},{"lineNumber":324,"author":{"gitId":"honglinshang"},"content":"                \"\\nExiting Apollo...\");","lastModifiedDate":"2023-03-08"},{"lineNumber":325,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":326,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":327,"author":{"gitId":"irving11119"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":328,"author":{"gitId":"irving11119"},"content":"     * Prints error message if the user tries to add a module which does not exist.","lastModifiedDate":"2023-03-10"},{"lineNumber":329,"author":{"gitId":"irving11119"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":330,"author":{"gitId":"irving11119"},"content":"    public void printInvalidModule() {","lastModifiedDate":"2023-03-10"},{"lineNumber":331,"author":{"gitId":"irving11119"},"content":"        System.out.println(\"This module does not exist!\");","lastModifiedDate":"2023-03-10"},{"lineNumber":332,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":333,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":334,"author":{"gitId":"irving11119"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":335,"author":{"gitId":"irving11119"},"content":"     * Prints error message if the user does not specify the module to add.","lastModifiedDate":"2023-03-10"},{"lineNumber":336,"author":{"gitId":"irving11119"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":337,"author":{"gitId":"irving11119"},"content":"    public void printEmptyAddMod() {","lastModifiedDate":"2023-03-10"},{"lineNumber":338,"author":{"gitId":"irving11119"},"content":"        System.out.println(\"Please specify a module to add!\");","lastModifiedDate":"2023-03-10"},{"lineNumber":339,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":340,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":341,"author":{"gitId":"irving11119"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":342,"author":{"gitId":"irving11119"},"content":"     * Prints error message if the user does not specify the module to delete.","lastModifiedDate":"2023-03-10"},{"lineNumber":343,"author":{"gitId":"irving11119"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":344,"author":{"gitId":"irving11119"},"content":"    public void printEmptyDelMod() {","lastModifiedDate":"2023-03-10"},{"lineNumber":345,"author":{"gitId":"irving11119"},"content":"        System.out.println(\"Please specify a module to delete!\");","lastModifiedDate":"2023-03-10"},{"lineNumber":346,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":347,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":26,"honglinshang":294,"yixuann02":19,"PoobalanAatmikaLakshmi":8}},{"path":"src/main/java/seedu/apollo/command/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Parser;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.DateOrderException;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.Deadline;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.Event;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.InvalidDeadline;","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.InvalidEvent;","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.ToDo;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"import java.rmi.UnexpectedException;","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"import static seedu.apollo.Parser.COMMAND_DEADLINE_WORD;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"import static seedu.apollo.Parser.COMMAND_EVENT_WORD;","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"import static seedu.apollo.Parser.COMMAND_TODO_WORD;","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":" * Add Command class that adds a Task to the existing TaskList.","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":" * Handles {@code todo}, {@code deadline}, and {@code event} commands.","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"    protected String type;","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    protected String desc;","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    protected String by;","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"    protected String from;","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    protected String to;","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"     * Initialises the class with the type and description of the task given in the command.","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"     * @param type Type of task being added (ToDo, Deadline, or Event).","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"     * @param param Description of task given by user (including date(s) for Deadline, Event).","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDeadline If the Deadline being added has the wrong format.","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidEvent If the Event being added has the wrong format.","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"     * @throws UnexpectedException If the command word cannot be understood.","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"    public AddCommand(String type, String param) throws InvalidDeadline, InvalidEvent, UnexpectedException {","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"        switch (type) {","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_TODO_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"            this.desc \u003d param;","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DEADLINE_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"            String[] paramAndBy \u003d Parser.parseDeadline(param);","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"            this.desc \u003d paramAndBy[0];","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"            this.by \u003d paramAndBy[1];","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_EVENT_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"            String[] paramAndFromTo \u003d Parser.parseEvent(param);","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"            this.desc \u003d paramAndFromTo[0];","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"            this.from \u003d paramAndFromTo[1];","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"            this.to \u003d paramAndFromTo[2];","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"        default:","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"            throw new UnexpectedException(\"Adding Task\");","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"     * Executes the adding of a Task to the TaskList based on data in the class.","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"     * @param taskList The TaskList to be added to.","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints success or error message to user.","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"     * @param storage Gets updated after the Task has been added.","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"     * @throws UnexpectedException If the command stored is not recognised.","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) throws UnexpectedException {","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"        switch(type) {","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_TODO_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"            taskList.add(new ToDo(desc));","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DEADLINE_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"            taskList.add(new Deadline(desc, by));","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_EVENT_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"            try {","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"                taskList.add(new Event(desc, from, to));","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"            } catch (DateOrderException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"                ui.printDateOrderException();","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"                return;","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"        default:","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"            throw new UnexpectedException(\"Adding Task\");","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"honglinshang"},"content":"        ui.printAddMessage(taskList.get(taskList.size() - 1));","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"honglinshang"},"content":"            storage.update(taskList);","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"honglinshang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"honglinshang"},"content":"            ui.printErrorForIO();","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":1,"honglinshang":100}},{"path":"src/main/java/seedu/apollo/command/AddModuleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"irving11119"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.exception.InvalidModule;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.Module;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"irving11119"},"content":"public class AddModuleCommand extends Command {","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"irving11119"},"content":"    private Module module;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"irving11119"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"irving11119"},"content":"     * Constructor for AddModuleCommand.","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"irving11119"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"irving11119"},"content":"     * @param moduleCode The module code of the module to be added.","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"irving11119"},"content":"     * @param allModules The list of all modules.","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"irving11119"},"content":"     * @throws InvalidModule If the module code is invalid.","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"irving11119"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"irving11119"},"content":"    public AddModuleCommand(String moduleCode, ModuleList allModules) throws InvalidModule {","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"irving11119"},"content":"        Module toAdd \u003d allModules.findModule(moduleCode);","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"irving11119"},"content":"        if (toAdd \u003d\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"irving11119"},"content":"            throw new InvalidModule();","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"irving11119"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"irving11119"},"content":"        module \u003d toAdd;","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"irving11119"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) {","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"irving11119"},"content":"        if (module !\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"            moduleList.add(module);","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"            moduleList.sortModules();","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"irving11119"},"content":"            ui.printAddModuleMessage(module);","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"irving11119"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"irving11119"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"irving11119":36,"honglinshang":2,"T-Wan-Lin":1}},{"path":"src/main/java/seedu/apollo/command/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.rmi.UnexpectedException;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":" * Parent class of all types of Commands.","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"public abstract class Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"    public Boolean isExit \u003d false;","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     * Executes the command.","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"     * @param taskList TaskList containing all currently saved tasks.","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints output messages to user.","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     * @param storage Updates the local save file if the TaskList is modified.","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"     * @throws UnexpectedException If something unexpected occurs.","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) throws UnexpectedException {","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"    void setExit() {","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"        isExit \u003d true;","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":1,"honglinshang":31}},{"path":"src/main/java/seedu/apollo/command/DateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.InvalidDateTime;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":" * Date Command class that shortlists Tasks that occur on the given date.","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"public class DateCommand extends Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    LocalDate date;","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"     * Initialises the class with the given date to shortlist for.","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     * @param dateString User input of the date, should be in format {@code yyyy-MM-dd}.","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"     * @throws InvalidDateTime If the input date does not fit the above format.","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"    public DateCommand (String dateString) throws InvalidDateTime {","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"            this.date \u003d LocalDate.parse(dateString);","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"            throw new InvalidDateTime();","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"     * Shortlists and prints Tasks from the TaskList that occur during the given date.","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"     * @param taskList The existing TaskList.","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints shortlisted Tasks to user.","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) {","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"        ui.printDateList(taskList.getTasksOnDate(date), date);","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":1,"honglinshang":43}},{"path":"src/main/java/seedu/apollo/command/DeleteModuleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.ModuleNotFoundException;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.Module;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"     * For {@code delmod} command.","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"     * Delete Module Command class that finds the module using moduleCode and removes it from the ModuleList","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"public class DeleteModuleCommand extends Command{","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"    protected String moduleCode;","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"    public DeleteModuleCommand(String moduleCode){","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"        this.moduleCode \u003d moduleCode;","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList){","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"irving11119"},"content":"            Module toDelete \u003d moduleList.findModule(moduleCode);","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"irving11119"},"content":"            if (toDelete \u003d\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"irving11119"},"content":"                throw new ModuleNotFoundException();","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"irving11119"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"irving11119"},"content":"            moduleList.remove(toDelete);","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"            //update storage later","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"            ui.printModuleDeleteMessage(moduleCode);","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"        } catch (ModuleNotFoundException e) {","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"            ui.printUnsuccessfulModuleDelete(moduleCode);","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"irving11119":6,"honglinshang":7,"T-Wan-Lin":6,"PoobalanAatmikaLakshmi":16}},{"path":"src/main/java/seedu/apollo/command/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" * Exit Command class that allows user to exit the program.","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"     * Prints exit message.","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     * Sets the exit status of the Command to be true.","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints exit message to user.","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) {","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"        ui.printExitMessage();","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"        this.setExit();","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":1,"honglinshang":24}},{"path":"src/main/java/seedu/apollo/command/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" * Find Command class that shortlists Tasks that contain a given keyword.","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    protected String keyword;","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     * Initialises the class with the given keyword to shortlist for.","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     * @param keyword User input of the keyword.","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     * Shortlists and prints Tasks from the TaskList that contain the given keyword.","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"     * @param taskList The existing TaskList.","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints shortlisted Tasks to user.","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) {","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"        ui.printFoundList(taskList.findTasks(keyword));","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":1,"honglinshang":33}},{"path":"src/main/java/seedu/apollo/command/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" * Help Command class that shows user a list of all available Commands.","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"     * Prints list of all available Commands and their abilities.","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints list of Commands to user.","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) {","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"        ui.printHelpMessage();","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":1,"honglinshang":22}},{"path":"src/main/java/seedu/apollo/command/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" * List Command class that shows user a list of all the Tasks they have input.","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"     * Prints out all Tasks from the TaskList.","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     * @param taskList The existing TaskList.","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints shortlisted Tasks to user.","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) {","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"        ui.printList(taskList);","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":1,"honglinshang":23}},{"path":"src/main/java/seedu/apollo/command/ListModuleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yixuann02"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"yixuann02"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"yixuann02"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"yixuann02"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"yixuann02"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"yixuann02"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"yixuann02"},"content":"public class ListModuleCommand extends Command{","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"irving11119"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"irving11119"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) {","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"        ui.printModuleList(moduleList);","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"yixuann02"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"yixuann02"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"irving11119":4,"yixuann02":9,"honglinshang":1}},{"path":"src/main/java/seedu/apollo/command/ModifyCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.command;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Storage;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.module.ModuleList;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Ui;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import java.rmi.UnexpectedException;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"import static seedu.apollo.Parser.COMMAND_DELETE_WORD;","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"import static seedu.apollo.Parser.COMMAND_MARK_WORD;","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"import static seedu.apollo.Parser.COMMAND_UNMARK_WORD;","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":" * Mark and Delete Command class that modifies an existing Task from the TaskList.","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":" * Handles {@code mark}, {@code unmark}, and {@code delete} commands.","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"public class ModifyCommand extends Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    protected String command;","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"    protected int idx;","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     * Initialises the class with the type and description of the task given in the command.","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"     * @param command Type of modification command being executed (mark, unmark, delete).","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"     * @param param Contains the index of the task to be modified.","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"     * @param size Current number of tasks in TaskList.","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"     * @throws NumberFormatException If idx cannot be parsed, or is outside the current range of tasks.","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    public ModifyCommand(String command, String param, int size) throws NumberFormatException {","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"        int idx \u003d Integer.parseInt(param) - 1;","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"        if (idx \u003c 0 || idx \u003e\u003d size) {","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"            throw new NumberFormatException();","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"        this.idx \u003d idx;","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"     * Executes the modification of a Task in the TaskList based on data in the class.","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"     * @param taskList The TaskList of existing Tasks.","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"     * @param ui Prints success or error message to user.","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"     * @param storage Gets updated after the TaskList has been modified.","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"     * @throws UnexpectedException If the command stored is not recognised.","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage, ModuleList moduleList) throws UnexpectedException {","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"        switch(command) {","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_MARK_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"            taskList.get(idx).setDone(true);","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"            ui.printMarkDone(taskList.get(idx));","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_UNMARK_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"            taskList.get(idx).setDone(false);","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"            ui.printMarkNotDone(taskList.get(idx));","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"        case COMMAND_DELETE_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"            ui.printDeleted(taskList.get(idx), taskList.size());","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"            taskList.remove(idx);","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"            break;","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"        default:","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"            throw new UnexpectedException(\"Modifying Task\");","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"            storage.update(taskList);","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"            ui.printErrorForIO();","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"irving11119":1,"honglinshang":73}},{"path":"src/main/java/seedu/apollo/exception/DateOrderException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when the end date is before the start date of an event.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class DateOrderException extends Throwable {","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/seedu/apollo/exception/EmptyAddModException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"irving11119"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"irving11119"},"content":"public class EmptyAddModException extends Throwable {","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"irving11119":4}},{"path":"src/main/java/seedu/apollo/exception/EmptyDelModException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"irving11119"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"irving11119"},"content":"public class EmptyDelModException extends Throwable{","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"irving11119":4}},{"path":"src/main/java/seedu/apollo/exception/EmptyKeywordException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when the keyword of a search is left empty.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class EmptyKeywordException extends Throwable{","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/seedu/apollo/exception/EmptyTaskDescException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when the description of a task is left empty.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class EmptyTaskDescException extends Throwable {","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/seedu/apollo/exception/IllegalCommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when command is not understood by Apollo.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class IllegalCommandException extends Throwable {","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/seedu/apollo/exception/InvalidDateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when the date and time is input in the wrong format.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class InvalidDateTime extends Throwable {","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/seedu/apollo/exception/InvalidDeadline.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when a deadline is input in the wrong format.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class InvalidDeadline extends Throwable {","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/seedu/apollo/exception/InvalidEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when an event is input in the wrong format.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class InvalidEvent extends Throwable {","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/seedu/apollo/exception/InvalidModule.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"irving11119"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"irving11119"},"content":"public class InvalidModule extends Throwable{","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"irving11119":4}},{"path":"src/main/java/seedu/apollo/exception/InvalidSaveFile.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * Exception class for when the local save file has been corrupted.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class InvalidSaveFile extends Throwable {","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":7}},{"path":"src/main/java/seedu/apollo/exception/ModuleNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.exception;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"public class ModuleNotFoundException extends Exception {","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"honglinshang":4}},{"path":"src/main/java/seedu/apollo/module/Module.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"T-Wan-Lin"},"content":"package seedu.apollo.module;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"T-Wan-Lin"},"content":" * Class representing a Module.","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":" * Contains the Module\u0027s code and name.","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"T-Wan-Lin"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"T-Wan-Lin"},"content":"public class Module {","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"irving11119"},"content":"    private String code;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"irving11119"},"content":"    private String title;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"irving11119"},"content":"    private Timetable timetable;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"T-Wan-Lin"},"content":"     * Initialises the Module with its corresponding code and name.","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param moduleCode The code of the module e.g. CS2113","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"T-Wan-Lin"},"content":"     * @param moduleName The name of the module e.g. Software Engineering and Object-Oriented Programming","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"T-Wan-Lin"},"content":"    public Module(String moduleCode, String moduleName) {","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"irving11119"},"content":"        this.code \u003d moduleCode;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"irving11119"},"content":"        this.title \u003d moduleName;","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"     * Retrieves a String with the module\u0027s code.","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return String of the module code","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"irving11119"},"content":"    public String getCode() {","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"irving11119"},"content":"        return code;","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"T-Wan-Lin"},"content":"     * Retrieves a String with the module\u0027s name.","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"T-Wan-Lin"},"content":"     *","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"T-Wan-Lin"},"content":"     * @return String of the module name","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"irving11119"},"content":"    public String getTitle() {","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"irving11119"},"content":"        return title;","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"irving11119"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"irving11119"},"content":"     * Retrieves a ArrayList with the module\u0027s timetable information.","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"irving11119"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"irving11119"},"content":"     * @return ArrayList of the module timetable information.","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"irving11119"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"irving11119"},"content":"    public Timetable getModuleTimetable() {","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"irving11119"},"content":"        return timetable;","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"T-Wan-Lin"},"content":"     * Prints out the Module in desired format.","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"T-Wan-Lin"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"T-Wan-Lin"},"content":"    public String toString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"irving11119"},"content":"        return code + \": \" + title;","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"T-Wan-Lin"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"irving11119":21,"T-Wan-Lin":39,"PoobalanAatmikaLakshmi":1}},{"path":"src/main/java/seedu/apollo/module/ModuleList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yixuann02"},"content":"package seedu.apollo.module;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"yixuann02"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.ModuleNotFoundException;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"yixuann02"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"yixuann02"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"yixuann02"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":" * ModuleList class is a modified ArrayList of Modules.","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"yixuann02"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"public class ModuleList extends ArrayList\u003cModule\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     * Finds the module in the ModuleList which matches the module name.","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"     * @param moduleCode The code of the module to be found.","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"     * @return module in the ModuleList which matches the module name.","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"     * @throws ModuleNotFoundException If the moduleCode is not found in allModules.","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"irving11119"},"content":"    public Module findModule(String moduleCode) {","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"irving11119"},"content":"        Module module \u003d this.stream().filter(mod -\u003e mod.getCode().equalsIgnoreCase(moduleCode))","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"irving11119"},"content":"                .findFirst().orElse(null);","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"        return module;","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"T-Wan-Lin"},"content":"    /**","lastModifiedDate":"2023-03-11"},{"lineNumber":29,"author":{"gitId":"T-Wan-Lin"},"content":"     * Sorts the ModuleList in alphabetical order.","lastModifiedDate":"2023-03-11"},{"lineNumber":30,"author":{"gitId":"T-Wan-Lin"},"content":"     */","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"T-Wan-Lin"},"content":"    public void sortModules() {","lastModifiedDate":"2023-03-11"},{"lineNumber":32,"author":{"gitId":"T-Wan-Lin"},"content":"        this.sort(Comparator.comparing(Module::getCode));","lastModifiedDate":"2023-03-11"},{"lineNumber":33,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-11"},{"lineNumber":34,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":35,"author":{"gitId":"yixuann02"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"irving11119":6,"yixuann02":7,"honglinshang":9,"T-Wan-Lin":9,"PoobalanAatmikaLakshmi":4}},{"path":"src/main/java/seedu/apollo/module/Timetable.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"irving11119"},"content":"package seedu.apollo.module;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"irving11119"},"content":"public class Timetable {","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"    private String classnumber;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"irving11119"},"content":"    private String classType;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"irving11119"},"content":"    private String day;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"irving11119"},"content":"    private String startTime;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"irving11119"},"content":"    private String endTime;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"irving11119"},"content":"    public String getClassnumber() {","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"irving11119"},"content":"        return classnumber;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"irving11119"},"content":"    public void setClassnumber(String classnumber) {","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"irving11119"},"content":"        this.classnumber \u003d classnumber;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"irving11119"},"content":"    public String getClassType() {","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"irving11119"},"content":"        return classType;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"irving11119"},"content":"    public void setClassType(String classType) {","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"irving11119"},"content":"        this.classType \u003d classType;","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"irving11119"},"content":"    public String getDay() {","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"irving11119"},"content":"        return day;","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"irving11119"},"content":"    public void setDay(String day) {","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"irving11119"},"content":"        this.day \u003d day;","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"irving11119"},"content":"    public String getStartTime() {","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"irving11119"},"content":"        return startTime;","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"irving11119"},"content":"    public void setStartTime(String startTime) {","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"irving11119"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"irving11119"},"content":"    public String getEndTime() {","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"irving11119"},"content":"        return endTime;","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"irving11119"},"content":"    public void setEndTime(String endTime) {","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"irving11119"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"irving11119"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"irving11119":50}},{"path":"src/main/java/seedu/apollo/task/Deadline.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.task;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Parser;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":" * Deadlines are a type of Task that have a set due date,","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":" * along with the default description and status.","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    public static final String DEADLINE_LABEL \u003d \"D\";","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    protected String byString;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     * Initialises as in Task, with added parsing for due date.","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     * If parsing is not possible, save due date as String.","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     * @param description String describing the Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     * @param byString String describing the due date.","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"    public Deadline(String description, String byString) {","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"        super(description);","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"            this.by \u003d LocalDateTime.parse(byString);","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"            this.byString \u003d byString;","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the due date of the Deadline.","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"     * @param pattern Desired format for String after parsing.","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"     * @return Parsed due date.","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"    public String getBy(DateTimeFormatter pattern) {","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"        return Parser.parseDateTime(by, byString, pattern);","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"    public String getType() {","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"        return \"deadline\";","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"    public Boolean isOnDate(LocalDate date) {","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"        boolean byExists \u003d (by !\u003d null);","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"        LocalDate byDate \u003d null;","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"        if (byExists) {","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"            byDate \u003d by.toLocalDate();","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"        return byExists \u0026\u0026 date.isEqual(byDate);","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"    public String toString() {","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"        return \"[\" + DEADLINE_LABEL + \"][\" + getStatus() + \"] \" + description + \" (by: \" + getBy(printPattern) + \")\";","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":75}},{"path":"src/main/java/seedu/apollo/task/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.task;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.Parser;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.DateOrderException;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":" * Events are a type of Task that have a set start date and end date,","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":" * along with the default description and status.","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"public class Event extends Task {","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    public static final String EVENT_LABEL \u003d \"E\";","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    protected String fromString;","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    protected String toString;","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"     * Initialises as in Task, with added parsing for start and end dates.","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"     * If parsing is not possible, save date(s) as String(s).","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"     * @param description String describing the Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"     * @param fromString String describing the start date.","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"     * @param toString String describing the end date.","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"     * @throws DateOrderException If the end date occurs before the start date.","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"    public Event(String description, String fromString, String toString) throws DateOrderException {","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"        super(description);","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"            this.from \u003d LocalDateTime.parse(fromString);","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"            this.fromString \u003d fromString;","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"        try {","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"            this.to \u003d LocalDateTime.parse(toString);","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"            this.toString \u003d toString;","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"        if (this.from !\u003d null \u0026\u0026 this.to !\u003d null) {","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"            if (from.isAfter(to)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"                throw new DateOrderException();","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the start date of the Event.","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"     * @param pattern Desired format for String after parsing.","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"     * @return Parsed start date.","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"    public String getFrom(DateTimeFormatter pattern) {","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"        return Parser.parseDateTime(from, fromString, pattern);","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the end date of the Event.","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"     * @param pattern Desired format for String after parsing.","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"     * @return Parsed end date.","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"    public String getTo(DateTimeFormatter pattern) {","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"        return Parser.parseDateTime(to, toString, pattern);","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"    public String getType() {","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"        return \"event\";","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"    public Boolean isOnDate(LocalDate date) {","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"        boolean fromExists \u003d (from !\u003d null);","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"        boolean toExists \u003d (to !\u003d null);","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"        LocalDate fromDate \u003d null;","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"        LocalDate toDate \u003d null;","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"        if (fromExists) {","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"            fromDate \u003d from.toLocalDate();","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"        if (toExists) {","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"            toDate \u003d to.toLocalDate();","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"honglinshang"},"content":"        boolean isOnFrom \u003d fromExists \u0026\u0026 date.isEqual(fromDate);","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"honglinshang"},"content":"        boolean isOnTo \u003d toExists \u0026\u0026 date.isEqual(toDate);","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"honglinshang"},"content":"        boolean isBetween \u003d fromExists \u0026\u0026 toExists \u0026\u0026 date.isAfter(fromDate) \u0026\u0026 date.isBefore(toDate);","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"honglinshang"},"content":"        return isOnFrom || isOnTo || isBetween;","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"honglinshang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"honglinshang"},"content":"    public String toString() {","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"honglinshang"},"content":"        return \"[\" + EVENT_LABEL + \"][\" + getStatus() + \"] \" + description +","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"honglinshang"},"content":"                \" (from: \" + getFrom(printPattern) + \" to: \" + getTo(printPattern) + \")\";","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":108,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":108}},{"path":"src/main/java/seedu/apollo/task/Task.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.task;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":" * Parent class of all types of Tasks.","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":" * Contains the Task\u0027s description and status.","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"public abstract class Task {","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"    // Formatters used to parse and print date and time","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"    public static DateTimeFormatter storePattern \u003d DateTimeFormatter.ISO_LOCAL_DATE_TIME;","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"    protected static DateTimeFormatter printPattern \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\");","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    protected String description;","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"     * Initialises the Task with its description sets its status as not done.","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"     * @param description String describing the Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"    public Task(String description) {","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the type of the Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"     * @return String describing the type of Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"    public String getType() {","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"        return \"task\";","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing the Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"     * @return String describing the Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"        return description;","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"     * Check if the Task has been done.","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"     * @return {@code true} if the Task is done, {@code false} otherwise","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"        return isDone;","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"     * Get a String describing status of the Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"     * @return \"X\" if the Task is done, \" \" otherwise","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"    public String getStatus() {","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"        return (isDone() ? \"X\" : \" \");","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"     * Set the status of the Task based on the input.","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"     * @param done Boolean describing the status of the task","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"honglinshang"},"content":"        isDone \u003d done;","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"honglinshang"},"content":"     * Given a date, determine if it occurs during the duration of the Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"honglinshang"},"content":"     * @param date Date to be checked","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"honglinshang"},"content":"     * @return {@code true} if there is overlap, {@code false} otherwise","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"    public Boolean isOnDate(LocalDate date) {","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"honglinshang"},"content":"        return false;","lastModifiedDate":"2023-03-08"},{"lineNumber":82,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"honglinshang"},"content":"     * Prints out the Task in desired format","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"honglinshang"},"content":"    public String toString() {","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"honglinshang"},"content":"        return description;","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":92}},{"path":"src/main/java/seedu/apollo/task/TaskList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.task;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":" * TaskList class is a modified ArrayList of Tasks.","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"     * Get a shortlisted list of all Tasks that overlap with the given date.","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"     * @param date The given date to check for.","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"     * @return ArrayList of all shortlisted tasks.","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    public TaskList getTasksOnDate(LocalDate date) {","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"        TaskList tasksOnDate \u003d new TaskList();","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"        for (Task task : this) {","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"            if (task.isOnDate(date)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"                tasksOnDate.add(task);","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"        return tasksOnDate;","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"     * Get a shortlisted list of all Tasks that contain the given keyword in their description.","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"     * @param keyword The given keyword to check for.","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"     * @return TaskList of all shortlisted tasks.","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"    public TaskList findTasks(String keyword) {","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"        TaskList foundTasks \u003d new TaskList();","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"        for (Task task : this) {","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"            if (task.description.contains(keyword)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"                foundTasks.add(task);","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"        return foundTasks;","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":43}},{"path":"src/main/java/seedu/apollo/task/ToDo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.task;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":" * ToDos are a type of Task that have only the default description and status.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"honglinshang"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"    public static final String TODO_LABEL \u003d \"T\";","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"     * Initialises as in Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"     * @param description String describing the Task.","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"        super(description);","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"    public String getType() {","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"        return \"todo\";","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"     * {@inheritDoc}","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"    public String toString() {","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"        return \"[\" + TODO_LABEL + \"][\" + getStatus() + \"] \" + description;","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"honglinshang":35}},{"path":"src/test/java/seedu/apollo/ApolloTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"irving11119"},"content":"package seedu.apollo;","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2020-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"irving11119"},"content":"class ApolloTest {","lastModifiedDate":"2023-02-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2020-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public void sampleTest() {","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"        assertTrue(true);","lastModifiedDate":"2020-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-24"}],"authorContributionMap":{"irving11119":2,"-":10}},{"path":"src/test/java/seedu/apollo/ParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"import seedu.apollo.command.Command;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"honglinshang"},"content":"import seedu.apollo.exception.InvalidDeadline;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"T-Wan-Lin"},"content":"import seedu.apollo.exception.InvalidEvent;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"import java.rmi.UnexpectedException;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"honglinshang"},"content":"class ParserTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"honglinshang"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"honglinshang"},"content":"    void parseDateTime_dateLocalDateTime_expectDateString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"honglinshang"},"content":"        LocalDateTime date \u003d LocalDateTime.parse(\"2023-01-01T23:59\");","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"honglinshang"},"content":"        String dateString \u003d null;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"honglinshang"},"content":"        DateTimeFormatter pattern \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\");","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"honglinshang"},"content":"        String output \u003d Parser.parseDateTime(date, dateString, pattern);","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"honglinshang"},"content":"        assertEquals(\"Jan 01 2023, 11:59PM\", output);","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"honglinshang"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"honglinshang"},"content":"    void parseDateTime_dateString_expectDateString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"honglinshang"},"content":"        LocalDateTime date \u003d null;","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"honglinshang"},"content":"        String dateString \u003d \"test\";","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"honglinshang"},"content":"        DateTimeFormatter pattern \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mma\");","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"honglinshang"},"content":"        String output \u003d Parser.parseDateTime(date, dateString, pattern);","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"honglinshang"},"content":"        assertEquals(\"test\", output);","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"honglinshang"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"honglinshang"},"content":"    void parseDeadline_normalDeadline_expectDescriptionAndBy() throws InvalidDeadline {","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"honglinshang"},"content":"        String param \u003d \"test /by tomorrow\";","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"honglinshang"},"content":"        String[] descriptionAndBy \u003d Parser.parseDeadline(param);","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"honglinshang"},"content":"        assertEquals(\"test\", descriptionAndBy[0]);","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"honglinshang"},"content":"        assertEquals(\"tomorrow\", descriptionAndBy[1]);","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"honglinshang"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"honglinshang"},"content":"    void parseDeadline_noBy_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"honglinshang"},"content":"        String param \u003d \"test\";","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"honglinshang"},"content":"        assertThrows(InvalidDeadline.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"honglinshang"},"content":"                () -\u003e Parser.parseDeadline(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"honglinshang"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"honglinshang"},"content":"    void parseDeadline_emptyBy_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"honglinshang"},"content":"        String param \u003d \"test /by \";","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"honglinshang"},"content":"        assertThrows(InvalidDeadline.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"honglinshang"},"content":"                () -\u003e Parser.parseDeadline(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"honglinshang"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"honglinshang"},"content":"    void parseDeadline_noDescription_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"honglinshang"},"content":"        String param \u003d \"  /by tomorrow\";","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"honglinshang"},"content":"        assertThrows(InvalidDeadline.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"honglinshang"},"content":"                () -\u003e Parser.parseDeadline(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"honglinshang"},"content":"    void getCommand_invalidCommand_expectNull( ) throws UnexpectedException {","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"        int size \u003d 1;","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"        String userCommand \u003d \"draw\";","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"irving11119"},"content":"        Command newCommand \u003d Parser.getCommand(userCommand,ui,size, null);","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"        assertNull(newCommand);","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"PoobalanAatmikaLakshmi"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"honglinshang"},"content":"    ","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"T-Wan-Lin"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"T-Wan-Lin"},"content":"    void parseEvent_normalEvent_expectDescriptionAndFromAndTo() throws InvalidEvent {","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"T-Wan-Lin"},"content":"        String param \u003d \"test /from today /to tomorrow\";","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"T-Wan-Lin"},"content":"        String[] descriptionAndFromAndTo \u003d Parser.parseEvent(param);","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"T-Wan-Lin"},"content":"        assertEquals(\"test\", descriptionAndFromAndTo[0]);","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"T-Wan-Lin"},"content":"        assertEquals(\"today\", descriptionAndFromAndTo[1]);","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"T-Wan-Lin"},"content":"        assertEquals(\"tomorrow\", descriptionAndFromAndTo[2]);","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"T-Wan-Lin"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"T-Wan-Lin"},"content":"    void parseEvent_noDescription_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"T-Wan-Lin"},"content":"        String param \u003d \"  /from today /to tomorrow\";","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"T-Wan-Lin"},"content":"        assertThrows(InvalidEvent.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"T-Wan-Lin"},"content":"                () -\u003e Parser.parseEvent(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"T-Wan-Lin"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"T-Wan-Lin"},"content":"    void parseEvent_emptyFrom_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"T-Wan-Lin"},"content":"        String param \u003d \"test /from /to tomorrow\";","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"T-Wan-Lin"},"content":"        assertThrows(InvalidEvent.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"T-Wan-Lin"},"content":"                () -\u003e Parser.parseEvent(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":103,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":104,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":105,"author":{"gitId":"T-Wan-Lin"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":106,"author":{"gitId":"T-Wan-Lin"},"content":"    void parseEvent_emptyTo_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":107,"author":{"gitId":"T-Wan-Lin"},"content":"        String param \u003d \"test /from today /to \";","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"T-Wan-Lin"},"content":"        assertThrows(InvalidEvent.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"T-Wan-Lin"},"content":"                () -\u003e Parser.parseEvent(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":110,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":111,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":112,"author":{"gitId":"T-Wan-Lin"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":113,"author":{"gitId":"T-Wan-Lin"},"content":"    void parseEvent_emptyFromAndTo_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":114,"author":{"gitId":"T-Wan-Lin"},"content":"        String param \u003d \"test /from /to\";","lastModifiedDate":"2023-03-09"},{"lineNumber":115,"author":{"gitId":"T-Wan-Lin"},"content":"        assertThrows(InvalidEvent.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":116,"author":{"gitId":"T-Wan-Lin"},"content":"                () -\u003e Parser.parseEvent(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":117,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":119,"author":{"gitId":"T-Wan-Lin"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":120,"author":{"gitId":"T-Wan-Lin"},"content":"    void parseEvent_noFromAndTo_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":121,"author":{"gitId":"T-Wan-Lin"},"content":"        String param \u003d \"test\";","lastModifiedDate":"2023-03-09"},{"lineNumber":122,"author":{"gitId":"T-Wan-Lin"},"content":"        assertThrows(InvalidEvent.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":123,"author":{"gitId":"T-Wan-Lin"},"content":"                () -\u003e Parser.parseEvent(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":124,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":125,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":126,"author":{"gitId":"T-Wan-Lin"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"T-Wan-Lin"},"content":"    void parseEvent_noFrom_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":128,"author":{"gitId":"T-Wan-Lin"},"content":"        String param \u003d \"test /to tomorrow\";","lastModifiedDate":"2023-03-09"},{"lineNumber":129,"author":{"gitId":"T-Wan-Lin"},"content":"        assertThrows(InvalidEvent.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":130,"author":{"gitId":"T-Wan-Lin"},"content":"                () -\u003e Parser.parseEvent(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":131,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":132,"author":{"gitId":"T-Wan-Lin"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":133,"author":{"gitId":"T-Wan-Lin"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":134,"author":{"gitId":"T-Wan-Lin"},"content":"    void parseEvent_noBy_expectException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":135,"author":{"gitId":"T-Wan-Lin"},"content":"        String param \u003d \"test /from today\";","lastModifiedDate":"2023-03-09"},{"lineNumber":136,"author":{"gitId":"T-Wan-Lin"},"content":"        assertThrows(InvalidEvent.class,","lastModifiedDate":"2023-03-09"},{"lineNumber":137,"author":{"gitId":"T-Wan-Lin"},"content":"                () -\u003e Parser.parseEvent(param));","lastModifiedDate":"2023-03-09"},{"lineNumber":138,"author":{"gitId":"T-Wan-Lin"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":139,"author":{"gitId":"T-Wan-Lin"},"content":"    ","lastModifiedDate":"2023-03-09"},{"lineNumber":140,"author":{"gitId":"yixuann02"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":141,"author":{"gitId":"yixuann02"},"content":"    void getCommand_noKeywordFind_expectNull() throws UnexpectedException {","lastModifiedDate":"2023-03-09"},{"lineNumber":142,"author":{"gitId":"yixuann02"},"content":"        String userCommand \u003d \"find\";","lastModifiedDate":"2023-03-09"},{"lineNumber":143,"author":{"gitId":"yixuann02"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-03-09"},{"lineNumber":144,"author":{"gitId":"yixuann02"},"content":"        int size \u003d 1;","lastModifiedDate":"2023-03-09"},{"lineNumber":145,"author":{"gitId":"irving11119"},"content":"        Command newCommand \u003d Parser.getCommand(userCommand, ui, size, null);","lastModifiedDate":"2023-03-10"},{"lineNumber":146,"author":{"gitId":"yixuann02"},"content":"        assertNull(newCommand);","lastModifiedDate":"2023-03-09"},{"lineNumber":147,"author":{"gitId":"yixuann02"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":148,"author":{"gitId":"yixuann02"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":149,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"irving11119":2,"honglinshang":65,"yixuann02":8,"T-Wan-Lin":61,"PoobalanAatmikaLakshmi":13}},{"path":"src/test/java/seedu/apollo/UiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"irving11119"},"content":"package seedu.apollo;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"irving11119"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"irving11119"},"content":"import seedu.apollo.task.TaskList;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"irving11119"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"irving11119"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"irving11119"},"content":"class UiTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"irving11119"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"irving11119"},"content":"    void printList_normalInput_noExceptionThrown() throws IOException {","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"irving11119"},"content":"        Storage storage \u003d new Storage(\"test.txt\");","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"irving11119"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"        TaskList taskList \u003d storage.loadTaskList(ui);","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"        assertDoesNotThrow(() -\u003e ui.printList(taskList));","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"irving11119"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"irving11119"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"irving11119":17,"honglinshang":2}},{"path":"src/test/java/seedu/apollo/module/ModuleListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"honglinshang"},"content":"package seedu.apollo.module;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"honglinshang"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"irving11119"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-11"},{"lineNumber":6,"author":{"gitId":"irving11119"},"content":"","lastModifiedDate":"2023-03-11"},{"lineNumber":7,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"honglinshang"},"content":"class ModuleListTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"honglinshang"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"honglinshang"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"irving11119"},"content":"    void findModule_invalidModuleCode_expectNull() {","lastModifiedDate":"2023-03-11"},{"lineNumber":12,"author":{"gitId":"honglinshang"},"content":"        ModuleList allModules \u003d new ModuleList();","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"honglinshang"},"content":"        String invalidModuleCode \u003d \"cs2113\";","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"irving11119"},"content":"        assertEquals(null, allModules.findModule(invalidModuleCode));","lastModifiedDate":"2023-03-11"},{"lineNumber":15,"author":{"gitId":"honglinshang"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"honglinshang"},"content":"    ","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"honglinshang"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"irving11119":4,"honglinshang":13}},{"path":"text-ui-test/runtest.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# change to script directory","lastModifiedDate":"2020-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"cd \"${0%/*}\"","lastModifiedDate":"2020-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"cd ..","lastModifiedDate":"2020-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"./gradlew clean shadowJar","lastModifiedDate":"2020-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"cd text-ui-test","lastModifiedDate":"2020-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"honglinshang"},"content":"rm save.txt","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"java  -jar $(find ../build/libs/ -mindepth 1 -print -quit) \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dos2unix EXPECTED-UNIX.TXT ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"diff EXPECTED-UNIX.TXT ACTUAL.TXT","lastModifiedDate":"2020-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    echo \"Test passed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    echo \"Test failed!\"","lastModifiedDate":"2020-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"honglinshang":1,"-":24}}]
